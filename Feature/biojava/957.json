{"repository":"biojava","prod_path":"biojava-structure/src/main/java/org/biojava/nbio/structure/PDBStatus.java","test_path":"biojava-structure/src/test/java/org/biojava/nbio/structure/PDBStatusTest.java","prod_time":"2020-11-26 03:51:37","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":3,"add_classname_line":0,"add_condition_line":4,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":4,"del_annotation_line":0,"del_call_line":4,"del_classname_line":0,"del_condition_line":3,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":1,"label":"NEGATIVE","prod_commitID":"846c13f1f0e6257bd24ea1b6ae12380f74b60eb9","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.structure;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.type.TypeFactory;\nimport org.biojava.nbio.structure.align.util.URLConnectionTools;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.*;\n\n/**\n * Methods for getting the status of a PDB file (current, obsolete, unreleased)\n * and for accessing different versions of the structure.\n *\n * <p>\n * All methods query the\n * <a href=\"https://data.rcsb.org\">\n * RCSB Data REST API</a>\n * <p>\n *\n * @author Spencer Bliven\n * @author Amr AL-Hossary\n * @author Jose Duarte\n * @since 3.0.2\n */\npublic class PDBStatus {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(PDBStatus.class);\n\n\tpublic static final String DEFAULT_RCSB_DATA_API_SERVER = \"data.rcsb.org\";\n\tpublic static final String ALL_CURRENT_ENDPOINT = \"https://%s/rest/v1/holdings/current/entry_ids\";\n\tpublic static final String STATUS_ENDPOINT = \"https://%s/rest/v1/holdings/status/%s\";\n\tpublic static final String STATUS_LIST_ENDPOINT = \"https://%s/rest/v1/holdings/status?ids=%s\";\n\n\t/**\n\t * Represents a simplified 3 state status of PDB IDs.\n\t * @author Spencer Bliven\n\t */\n\tpublic enum Status {\n\t\t// the simplified status enum in rcsb_repository_holdings_combined\n\t\tREMOVED,\n\t\tCURRENT,\n\t\tUNRELEASED;\n\n\t\t/**\n\t\t * @throws IllegalArgumentException If the string is not recognized\n\t\t */\n\t\tpublic static Status fromString(String statusStr) {\n\t\t\tStatus status;\n\t\t\tString statusStrUpper = statusStr.toUpperCase();\n\t\t\tif(statusStrUpper.equalsIgnoreCase(\"REMOVED\"))\n\t\t\t\tstatus = Status.REMOVED;\n\t\t\telse if(statusStrUpper.equalsIgnoreCase(\"CURRENT\"))\n\t\t\t\tstatus = Status.CURRENT;\n\t\t\telse if(statusStrUpper.equalsIgnoreCase(\"UNRELEASED\"))\n\t\t\t\tstatus = Status.UNRELEASED;\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Unable to parse status '\"+statusStrUpper+\"'.\");\n\t\t\t}\n\t\t\treturn status;\n\t\t}\n\t}\n\n\t/**\n\t * Get the status of a PDB id.\n\t *\n\t * @param pdbId the id\n\t * @return The status.\n\t */\n\tpublic static Status getStatus(String pdbId) throws IOException {\n\t\tURL url = new URL(String.format(STATUS_ENDPOINT, DEFAULT_RCSB_DATA_API_SERVER, pdbId.toUpperCase()));\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\tJsonNode node = objectMapper.readValue(url.openStream(), JsonNode.class);\n\t\treturn parseStatusRecord(node);\n\t}\n\n\t/**\n\t * Get the status of a collection of PDB ids (in a single API query).\n\t *\n\t * @see #getStatus(String)\n\t * @param pdbIds the ids\n\t * @return The status array\n\t */\n\tpublic static Status[] getStatus(String[] pdbIds) throws IOException {\n\n\t\tURL url = new URL(String.format(STATUS_LIST_ENDPOINT, DEFAULT_RCSB_DATA_API_SERVER, String.join(\",\", pdbIds)));\n\n\t\tList<Status> statuses = new ArrayList<>();\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\tJsonNode node = objectMapper.readValue(url.openStream(), JsonNode.class);\n\n\t\tif (node !=null && node.isArray()) {\n\t\t\tfor (JsonNode record : node) {\n\t\t\t\tStatus status = parseStatusRecord(record);\n\t\t\t\tstatuses.add(status);\n\t\t\t}\n\t\t}\n\n\t\tif (statuses.size() != pdbIds.length) {\n\t\t\tlogger.warn(\"RCSB status request was for {} ids, but {} were returned\", pdbIds.length, statuses.size());\n\t\t}\n\n\t\treturn statuses.toArray(new Status[0]);\n\t}\n\n\tprivate static Status parseStatusRecord(JsonNode jsonNode) {\n\t\t// e.g.\n\t\t// \"rcsb_repository_holdings_combined\": {\n\t\t//\"id_code_replaced_by_latest\": \"4HHB\",\n\t\t//\"status\": \"REMOVED\",\n\t\t//\"status_code\": \"OBS\"\n\t\t//},\n\t\tJsonNode rcsbRepoHoldingsNode = jsonNode.get(\"rcsb_repository_holdings_combined\");\n\t\treturn Status.fromString(rcsbRepoHoldingsNode.get(\"status\").asText());\n\t}\n\n\t/**\n\t * Gets the current version of a PDB ID.\n\t *\n\t * @param oldPdbId the id\n\t * @return The replacement for oldPdbId, or null if none are found.\n\t * If entry is current then the input PDB id is returned\n\t */\n\tpublic static String getCurrent(String oldPdbId) throws IOException {\n\t\tURL url = new URL(String.format(STATUS_ENDPOINT, DEFAULT_RCSB_DATA_API_SERVER, oldPdbId.toUpperCase()));\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\tJsonNode node = objectMapper.readValue(url.openStream(), JsonNode.class);\n\t\tJsonNode rcsbRepoHoldingsNode = node.get(\"rcsb_repository_holdings_combined\");\n\t\tStatus st = Status.fromString(rcsbRepoHoldingsNode.get(\"status\").asText());\n\t\tif (st == Status.REMOVED) {\n\t\t\tJsonNode replacedByNode = rcsbRepoHoldingsNode.get(\"id_code_replaced_by_latest\");\n\t\t\tif (replacedByNode != null)\n\t\t\t\treturn replacedByNode.asText();\n\t\t\telse\n\t\t\t\treturn null;\n\t\t} else if (st == Status.CURRENT) {\n\t\t\treturn oldPdbId;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns all current PDB IDs\n\t *\n\t * @return a list of PDB IDs\n\t * @throws IOException if a problem occurs retrieving the information\n\t */\n\tpublic static SortedSet<String> getCurrentPDBIds() throws IOException {\n\n\t\t// Build REST query URL\n\t\tString urlStr = String.format(ALL_CURRENT_ENDPOINT, DEFAULT_RCSB_DATA_API_SERVER);\n\t\tURL u = new URL(urlStr);\n\n\t\tInputStream stream = URLConnectionTools.getInputStream(u, 60000);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\tTypeFactory typeFactory = objectMapper.getTypeFactory();\n\t\tList<String> pdbIdList = objectMapper.readValue(stream, typeFactory.constructCollectionType(List.class, String.class));\n\n\t\treturn new TreeSet<>(pdbIdList);\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tSortedSet<String> all = getCurrentPDBIds();\n\t\tSystem.out.println(\"Number of current PDB ids is: \" + all.size());\n\t}\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.structure;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.type.TypeFactory;\nimport org.biojava.nbio.structure.align.util.URLConnectionTools;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.*;\n\n/**\n * Methods for getting the status of a PDB file (current, removed, unreleased)\n * and for accessing different versions of the structure.\n *\n * <p>\n * All methods query the\n * <a href=\"https://data.rcsb.org\">\n * RCSB Data REST API</a>\n * <p>\n *\n * @author Spencer Bliven\n * @author Amr AL-Hossary\n * @author Jose Duarte\n * @since 3.0.2\n */\npublic class PDBStatus {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(PDBStatus.class);\n\n\tpublic static final String DEFAULT_RCSB_DATA_API_SERVER = \"data.rcsb.org\";\n\tpublic static final String ALL_CURRENT_ENDPOINT = \"https://%s/rest/v1/holdings/current/entry_ids\";\n\tpublic static final String STATUS_ENDPOINT = \"https://%s/rest/v1/holdings/status/%s\";\n\tpublic static final String STATUS_LIST_ENDPOINT = \"https://%s/rest/v1/holdings/status?ids=%s\";\n\n\t/**\n\t * Represents a simplified 3 state status of PDB IDs.\n\t * @author Spencer Bliven\n\t */\n\tpublic enum Status {\n\t\t// the simplified status enum in rcsb_repository_holdings_combined\n\t\tREMOVED,\n\t\tCURRENT,\n\t\tUNRELEASED;\n\n\t\t/**\n\t\t * @throws IllegalArgumentException If the string is not recognized\n\t\t */\n\t\tpublic static Status fromString(String statusStr) {\n\t\t\tif (statusStr == null) return null;\n\t\t\tif(statusStr.equalsIgnoreCase(\"REMOVED\"))\n\t\t\t\treturn Status.REMOVED;\n\t\t\telse if(statusStr.equalsIgnoreCase(\"CURRENT\"))\n\t\t\t\treturn Status.CURRENT;\n\t\t\telse if(statusStr.equalsIgnoreCase(\"UNRELEASED\"))\n\t\t\t\treturn Status.UNRELEASED;\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Unable to parse status '\"+statusStr+\"'.\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the status of a PDB id.\n\t *\n\t * @param pdbId the id\n\t * @return The status.\n\t */\n\tpublic static Status getStatus(String pdbId) throws IOException {\n\t\tURL url = new URL(String.format(STATUS_ENDPOINT, DEFAULT_RCSB_DATA_API_SERVER, pdbId.toUpperCase()));\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\tJsonNode node = objectMapper.readValue(url.openStream(), JsonNode.class);\n\t\treturn parseStatusRecord(node);\n\t}\n\n\t/**\n\t * Get the status of a collection of PDB ids (in a single API query).\n\t *\n\t * @see #getStatus(String)\n\t * @param pdbIds the ids\n\t * @return The status array\n\t */\n\tpublic static Status[] getStatus(String[] pdbIds) throws IOException {\n\n\t\tURL url = new URL(String.format(STATUS_LIST_ENDPOINT, DEFAULT_RCSB_DATA_API_SERVER, String.join(\",\", pdbIds)));\n\n\t\tList<Status> statuses = new ArrayList<>();\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\tJsonNode node = objectMapper.readValue(url.openStream(), JsonNode.class);\n\n\t\tif (node !=null && node.isArray()) {\n\t\t\tfor (JsonNode record : node) {\n\t\t\t\tStatus status = parseStatusRecord(record);\n\t\t\t\tstatuses.add(status);\n\t\t\t}\n\t\t}\n\n\t\tif (statuses.size() != pdbIds.length) {\n\t\t\tlogger.warn(\"RCSB status request was for {} ids, but {} were returned\", pdbIds.length, statuses.size());\n\t\t}\n\n\t\treturn statuses.toArray(new Status[0]);\n\t}\n\n\tprivate static Status parseStatusRecord(JsonNode jsonNode) {\n\t\t// e.g.\n\t\t// \"rcsb_repository_holdings_combined\": {\n\t\t//\"id_code_replaced_by_latest\": \"4HHB\",\n\t\t//\"status\": \"REMOVED\",\n\t\t//\"status_code\": \"OBS\"\n\t\t//},\n\t\tJsonNode rcsbRepoHoldingsNode = jsonNode.get(\"rcsb_repository_holdings_combined\");\n\t\treturn Status.fromString(rcsbRepoHoldingsNode.get(\"status\").asText());\n\t}\n\n\t/**\n\t * Gets the current version of a PDB ID.\n\t *\n\t * @param oldPdbId the id\n\t * @return The replacement for oldPdbId, or null if none are found.\n\t * If entry is current then the input PDB id is returned\n\t */\n\tpublic static String getCurrent(String oldPdbId) throws IOException {\n\t\tURL url = new URL(String.format(STATUS_ENDPOINT, DEFAULT_RCSB_DATA_API_SERVER, oldPdbId.toUpperCase()));\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\tJsonNode node = objectMapper.readValue(url.openStream(), JsonNode.class);\n\t\tJsonNode rcsbRepoHoldingsNode = node.get(\"rcsb_repository_holdings_combined\");\n\t\tStatus st = Status.fromString(rcsbRepoHoldingsNode.get(\"status\").asText());\n\t\tif (st == Status.REMOVED) {\n\t\t\tJsonNode replacedByNode = rcsbRepoHoldingsNode.get(\"id_code_replaced_by_latest\");\n\t\t\tif (replacedByNode != null)\n\t\t\t\treturn replacedByNode.asText();\n\t\t\telse\n\t\t\t\treturn null;\n\t\t} else if (st == Status.CURRENT) {\n\t\t\treturn oldPdbId;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n\t/**\n\t * Returns all current PDB IDs\n\t *\n\t * @return a list of PDB IDs\n\t * @throws IOException if a problem occurs retrieving the information\n\t */\n\tpublic static SortedSet<String> getCurrentPDBIds() throws IOException {\n\n\t\t// Build REST query URL\n\t\tString urlStr = String.format(ALL_CURRENT_ENDPOINT, DEFAULT_RCSB_DATA_API_SERVER);\n\t\tURL u = new URL(urlStr);\n\n\t\tInputStream stream = URLConnectionTools.getInputStream(u, 60000);\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\tTypeFactory typeFactory = objectMapper.getTypeFactory();\n\t\tList<String> pdbIdList = objectMapper.readValue(stream, typeFactory.constructCollectionType(List.class, String.class));\n\n\t\treturn new TreeSet<>(pdbIdList);\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tSortedSet<String> all = getCurrentPDBIds();\n\t\tSystem.out.println(\"Number of current PDB ids is: \" + all.size());\n\t}\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.structure;\n\nimport org.biojava.nbio.structure.PDBStatus.Status;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.io.IOException;\n\n/**\n * @author Spencer Bliven <sbliven@ucsd.edu>\n *\n */\npublic class PDBStatusTest {\n\n\t/**\n\t * Test {@link PDBStatus#getStatus(String)}.\n\t *\n\t * <p>Uses the following PDBs:<br/>\n\t * <pre>1HHB    OBSOLETE\treplacedBy=4HHB\n\t *4HHB    CURRENT\treplaces=1HHB\n\t *3HHB    CURRENT\treplaces=1HHB\n\t *</pre>\n\t */\n\t@Test\n\tpublic void testGetStatus() throws IOException {\n\t\tAssert.assertEquals(Status.REMOVED, PDBStatus.getStatus(\"1HHB\"));\n\t\tAssert.assertEquals(Status.CURRENT, PDBStatus.getStatus(\"3HHB\"));\n\t\tAssert.assertEquals(Status.CURRENT, PDBStatus.getStatus(\"4HHB\"));\n\t}\n\n\t@Test\n\tpublic void testGetStatusMultipleIds() throws IOException {\n\t\tString[] ids = {\"1HHB\", \"3HHB\", \"4HHB\"};\n\t\tStatus[] statuses = PDBStatus.getStatus(ids);\n\t\tAssert.assertEquals(Status.REMOVED, statuses[0]);\n\t\tAssert.assertEquals(Status.CURRENT, statuses[1]);\n\t\tAssert.assertEquals(Status.CURRENT, statuses[2]);\n\t}\n\n\t@Test\n\tpublic void testGetCurrent() throws IOException {\n\t\tAssert.assertEquals(\"4HHB\", PDBStatus.getCurrent(\"1HHB\"));\n\t\tAssert.assertEquals(\"3HHB\", PDBStatus.getCurrent(\"3HHB\"));\n\t\tAssert.assertNull(PDBStatus.getCurrent(\"1CMW\"));\n\t\tAssert.assertEquals(\"3ENI\", PDBStatus.getCurrent(\"1KSA\"));\n\t\tAssert.assertEquals(\"8CAT\", PDBStatus.getCurrent(\"1CAT\"));\n\t\tAssert.assertEquals(\"8CAT\", PDBStatus.getCurrent(\"3CAT\"));\n\t\tAssert.assertEquals(\"7CAT\", PDBStatus.getCurrent(\"7CAT\"));\n\t}\n}\n","changedTest":"","commitMessage":"Corrections suggested in review\n","test_commitMessage":"","allZero":false}