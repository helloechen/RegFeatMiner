{"repository":"biojava","prod_path":"biojava-structure/src/main/java/org/biojava/nbio/structure/ResidueNumber.java","test_path":"biojava-structure/src/test/java/org/biojava/nbio/structure/ResidueNumberTest.java","prod_time":"2016-01-19 18:47:59","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":1,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":1,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"d4b0bba7ba0dd1c57a28978fcc1dbff203981c78","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Jun 17, 2010\n * Author: ap3 \n *\n */\n\npackage org.biojava.nbio.structure;\n\nimport java.io.Serializable;\nimport java.io.StringWriter;\n\n/** Everything that is needed to uniquely describe a residue position\n * \n * @author Andreas Prlic\n *\n */\npublic class ResidueNumber implements Serializable, Comparable<ResidueNumber>\n{\n\n\tprivate static final long serialVersionUID = 1773011704758536083L;\n\tprivate String chainId;\n\tprivate Character insCode;\n\tprivate Integer seqNum;\n\n\tpublic ResidueNumber() {\n\t}\n\t\n\tpublic ResidueNumber(ResidueNumber o) {\n\t\tthis.chainId = o.chainId;\n\t\tthis.insCode = o.insCode;\n\t\tthis.seqNum = o.seqNum;\n\t}\n\n\tpublic ResidueNumber(String chainId, Integer residueNumber, Character insCode) {\n\t\tthis.chainId = chainId;\n\t\tthis.seqNum = residueNumber;\n\t\tthis.insCode = insCode;\n\t}\n\n\tpublic String getChainId()\n\t{\n\t\treturn chainId;\n\t}\n\tpublic void setChainId(String chainId)\n\t{\n\t\tthis.chainId = chainId;\n\t}\n\tpublic Character getInsCode()\n\t{\n\t\treturn insCode;\n\t}\n\tpublic void setInsCode(Character insCode)\n\t{\n\t\tthis.insCode = insCode;\n\t}\n\tpublic Integer getSeqNum()\n\t{\n\t\treturn seqNum;\n\t}\n\tpublic void setSeqNum(Integer seqNum)\n\t{\n\t\tthis.seqNum = seqNum;\n\t}\n\n\t\n\n\t\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tResidueNumber other = (ResidueNumber) obj;\n\t\tif (chainId == null) {\n\t\t\tif (other.chainId != null)\n\t\t\t\treturn false;\n\t\t} else if (!chainId.equals(other.chainId))\n\t\t\treturn false;\n\t\tif (insCode == null) {\n\t\t\tif (other.insCode != null)\n\t\t\t\treturn false;\n\t\t} else if (!insCode.equals(other.insCode))\n\t\t\treturn false;\n\t\tif (seqNum == null) {\n\t\t\tif (other.seqNum != null)\n\t\t\t\treturn false;\n\t\t} else if (!seqNum.equals(other.seqNum))\n\t\t\treturn false;\n\t\t\n\t\treturn true;\n\t}\n\t\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((chainId == null) ? 0 : chainId.hashCode());\n\t\tresult = prime * result + ((insCode == null) ? 0 : insCode.hashCode());\n\t\tresult = prime * result + ((seqNum == null) ? 0 : seqNum.hashCode());\n\t\treturn result;\n\t}\n\n\t/**\n\t * @return The residue number and insertion code as a string, eg \"74A\"\n\t * @see java.lang.Object#toString()\n\t */\n\t@Override\n\tpublic String toString() {\n\n\t\tStringWriter writer = new StringWriter();\n\t\t//\t   if ( chainId != null){\n\t\t\t//\t\t   writer.append(chainId);\n\t\t\t//\t\t   writer.append(\":\");\n\t\t\t//\t   }\n        writer.append(String.valueOf(seqNum));\n\t\tif (  insCode != null && ( insCode != ' '))\n\t\t\twriter.append(insCode);\n\n\t\treturn writer.toString();\n\t}\n\n\t/**\n\t * @return The chain, number, and insertion code as a string, eg \"B  74A\" or \"A    1 \"\n\t */\n\tpublic String toPDB() {\n\t\tString insCodeS ;\n\t\tif ( insCode != null)\n\t\t\tinsCodeS = insCode+\"\";\n\t\telse insCodeS = \" \";\n\t\treturn String.format(\"%s%4d%-2s\", chainId, seqNum, insCodeS);\n\t}\n\n\t\n\t/** Convert a string representation of a residue number to a residue number object.\n\t * The string representation can be a integer followed by a character.\n\t * \n\t * @param pdb_code\n\t * @return a ResidueNumber object\n\t */\n\tpublic static ResidueNumber fromString(String pdb_code) {\n\t\tResidueNumber residueNumber = new ResidueNumber();\n\t\tInteger resNum = null;\n\t\tString icode = null;\t\t\n\t\t\n\t\ttry {\n\t\t\tresNum = Integer.parseInt(pdb_code);\n\t\t} catch ( NumberFormatException e){\n\t\t\t// there is an insertion code..\n\t\t\n\t\t\t// Split at any position that's either:\n\t\t\t// preceded by a digit and followed by a non-digit, or\n\t\t\t// preceded by a non-digit and followed by a digit.\n\t\t\tString[] spl = pdb_code.split(\"(?<=\\\\d)(?=\\\\D)|(?<=\\\\D)(?=\\\\d)\");\n\t\t\tif ( spl.length == 2){\n\t\t\t\tresNum = Integer.parseInt(spl[0]);\n\t\t\t\ticode = spl[1];\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\t\t\n\t\tresidueNumber.setSeqNum(resNum);\n\t\tif ( icode == null)\n\t\t\tresidueNumber.setInsCode(null);\n\t\telse if ( icode.length() > 0)\n\t\t\tresidueNumber.setInsCode(icode.charAt(0));\n\t\treturn residueNumber;\n\t}\n\n\n\t@Override\n\tpublic int compareTo(ResidueNumber other) {\n\t\t\n\t\t// chain id\n\t\tif (chainId != null && other.chainId != null) {\n\t\t\tif (!chainId.equals(other.chainId)) return chainId.compareTo(other.chainId);\n\t\t}\n\t\tif (chainId != null && other.chainId == null) {\n\t\t\treturn 1;\n\t\t} else if (chainId == null && other.chainId != null) {\n\t\t\treturn -1;\n\t\t}\n\t\t\n\t\t// sequence number\n\t\tif (seqNum != null && other.seqNum != null) {\n\t\t\tif (!seqNum.equals(other.seqNum)) return seqNum.compareTo(other.seqNum);\n\t\t}\n\t\tif (seqNum != null && other.seqNum == null) {\n\t\t\treturn 1;\n\t\t} else if (seqNum == null && other.seqNum != null) {\n\t\t\treturn -1;\n\t\t}\n\t\t\n\t\t// insertion code\n\t\tif (insCode != null && other.insCode != null) {\n\t\t\tif (!insCode.equals(other.insCode)) return insCode.compareTo(other.insCode);\n\t\t}\n\t\tif (insCode != null && other.insCode == null) {\n\t\t\treturn 1;\n\t\t} else if (insCode == null && other.insCode != null) {\n\t\t\treturn -1;\n\t\t}\n\t\t\n\t\treturn 0;\n\t}\n\n\tpublic String printFull() {\n\t\tfinal String chain = chainId==null? \"\" : chainId;\n\t\treturn chain + \"_\" + toString();\n\t}\n\t\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Jun 17, 2010\n * Author: ap3 \n *\n */\n\npackage org.biojava.nbio.structure;\n\nimport java.io.Serializable;\nimport java.io.StringWriter;\n\n/** Everything that is needed to uniquely describe a residue position\n * \n * @author Andreas Prlic\n *\n */\npublic class ResidueNumber implements Serializable, Comparable<ResidueNumber>\n{\n\n\tprivate static final long serialVersionUID = 1773011704758536083L;\n\tprivate String chainId;\n\tprivate Character insCode;\n\tprivate Integer seqNum;\n\n\tpublic ResidueNumber() {\n\t}\n\t\n\tpublic ResidueNumber(ResidueNumber o) {\n\t\tthis.chainId = o.chainId;\n\t\tthis.insCode = o.insCode;\n\t\tthis.seqNum = o.seqNum;\n\t}\n\n\tpublic ResidueNumber(String chainId, Integer residueNumber, Character insCode) {\n\t\tthis.chainId = chainId;\n\t\tthis.seqNum = residueNumber;\n\t\tthis.insCode = insCode;\n\t}\n\n\tpublic String getChainId()\n\t{\n\t\treturn chainId;\n\t}\n\tpublic void setChainId(String chainId)\n\t{\n\t\tthis.chainId = chainId;\n\t}\n\tpublic Character getInsCode()\n\t{\n\t\treturn insCode;\n\t}\n\tpublic void setInsCode(Character insCode)\n\t{\n\t\tthis.insCode = insCode;\n\t}\n\tpublic Integer getSeqNum()\n\t{\n\t\treturn seqNum;\n\t}\n\tpublic void setSeqNum(Integer seqNum)\n\t{\n\t\tthis.seqNum = seqNum;\n\t}\n\n\t\n\n\t\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tResidueNumber other = (ResidueNumber) obj;\n\t\tif (chainId == null) {\n\t\t\tif (other.chainId != null)\n\t\t\t\treturn false;\n\t\t} else if (!chainId.equals(other.chainId))\n\t\t\treturn false;\n\t\tif (insCode == null) {\n\t\t\tif (other.insCode != null)\n\t\t\t\treturn false;\n\t\t} else if (!insCode.equals(other.insCode))\n\t\t\treturn false;\n\t\tif (seqNum == null) {\n\t\t\tif (other.seqNum != null)\n\t\t\t\treturn false;\n\t\t} else if (!seqNum.equals(other.seqNum))\n\t\t\treturn false;\n\t\t\n\t\treturn true;\n\t}\n\t\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((chainId == null) ? 0 : chainId.hashCode());\n\t\tresult = prime * result + ((insCode == null) ? 0 : insCode.hashCode());\n\t\tresult = prime * result + ((seqNum == null) ? 0 : seqNum.hashCode());\n\t\treturn result;\n\t}\n\n\t/**\n\t * @return The residue number and insertion code as a string, eg \"74A\"\n\t * @see java.lang.Object#toString()\n\t */\n\t@Override\n\tpublic String toString() {\n\n\t\tStringWriter writer = new StringWriter();\n\t\t//\t   if ( chainId != null){\n\t\t\t//\t\t   writer.append(chainId);\n\t\t\t//\t\t   writer.append(\":\");\n\t\t\t//\t   }\n        writer.append(String.valueOf(seqNum));\n\t\tif (  insCode != null && ( insCode != ' '))\n\t\t\twriter.append(insCode);\n\n\t\treturn writer.toString();\n\t}\n\n\t/**\n\t * @return The chain, number, and insertion code as a string, eg \"B  74A\" or \"A    1 \"\n\t */\n\tpublic String toPDB() {\n\t\tString insCodeS ;\n\t\tif ( insCode != null)\n\t\t\tinsCodeS = insCode+\"\";\n\t\telse insCodeS = \" \";\n\t\treturn String.format(\"%s%4d%-2s\", chainId, seqNum, insCodeS);\n\t}\n\n\t\n\t/** Convert a string representation of a residue number to a residue number object.\n\t * The string representation can be a integer followed by a character.\n\t * \n\t * @param pdb_code\n\t * @return a ResidueNumber object, or null if the input was null\n\t */\n\tpublic static ResidueNumber fromString(String pdb_code) {\n\t\tif(pdb_code == null)\n\t\t\treturn null;\n\t\t\n\t\tResidueNumber residueNumber = new ResidueNumber();\n\t\tInteger resNum = null;\n\t\tString icode = null;\t\t\n\t\t\n\t\ttry {\n\t\t\tresNum = Integer.parseInt(pdb_code);\n\t\t} catch ( NumberFormatException e){\n\t\t\t// there is an insertion code..\n\t\t\n\t\t\t// Split at any position that's either:\n\t\t\t// preceded by a digit and followed by a non-digit, or\n\t\t\t// preceded by a non-digit and followed by a digit.\n\t\t\tString[] spl = pdb_code.split(\"(?<=\\\\d)(?=\\\\D)|(?<=\\\\D)(?=\\\\d)\");\n\t\t\tif ( spl.length == 2){\n\t\t\t\tresNum = Integer.parseInt(spl[0]);\n\t\t\t\ticode = spl[1];\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\t\t\n\t\tresidueNumber.setSeqNum(resNum);\n\t\tif ( icode == null)\n\t\t\tresidueNumber.setInsCode(null);\n\t\telse if ( icode.length() > 0)\n\t\t\tresidueNumber.setInsCode(icode.charAt(0));\n\t\treturn residueNumber;\n\t}\n\n\n\t@Override\n\tpublic int compareTo(ResidueNumber other) {\n\t\t\n\t\t// chain id\n\t\tif (chainId != null && other.chainId != null) {\n\t\t\tif (!chainId.equals(other.chainId)) return chainId.compareTo(other.chainId);\n\t\t}\n\t\tif (chainId != null && other.chainId == null) {\n\t\t\treturn 1;\n\t\t} else if (chainId == null && other.chainId != null) {\n\t\t\treturn -1;\n\t\t}\n\t\t\n\t\t// sequence number\n\t\tif (seqNum != null && other.seqNum != null) {\n\t\t\tif (!seqNum.equals(other.seqNum)) return seqNum.compareTo(other.seqNum);\n\t\t}\n\t\tif (seqNum != null && other.seqNum == null) {\n\t\t\treturn 1;\n\t\t} else if (seqNum == null && other.seqNum != null) {\n\t\t\treturn -1;\n\t\t}\n\t\t\n\t\t// insertion code\n\t\tif (insCode != null && other.insCode != null) {\n\t\t\tif (!insCode.equals(other.insCode)) return insCode.compareTo(other.insCode);\n\t\t}\n\t\tif (insCode != null && other.insCode == null) {\n\t\t\treturn 1;\n\t\t} else if (insCode == null && other.insCode != null) {\n\t\t\treturn -1;\n\t\t}\n\t\t\n\t\treturn 0;\n\t}\n\n\tpublic String printFull() {\n\t\tfinal String chain = chainId==null? \"\" : chainId;\n\t\treturn chain + \"_\" + toString();\n\t}\n\t\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\npackage org.biojava.nbio.structure;\n\nimport junit.framework.TestCase;\nimport org.junit.*;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n\n/**\n *\n * @author Jules Jacobsen <jacobsen@ebi.ac.uk>\n */\npublic class ResidueNumberTest extends TestCase {\n\n    public ResidueNumberTest() {\n    }\n\n    @BeforeClass\n    public static void setUpClass() throws Exception {\n    }\n\n    @AfterClass\n    public static void tearDownClass() throws Exception {\n    }\n\n    @Override\n\t@Before\n    public void setUp() {\n    }\n\n    @Override\n\t@After\n    public void tearDown() {\n    }\n\n    /**\n     * Test of getChainId method, of class ResidueNumber.\n     */\n    @Test\n    public void testGetSetChainId() {\n//        System.out.println(\"getChainId\");\n        ResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n        String expResult = \"A\";\n        String result = instance.getChainId();\n        assertEquals(expResult, result);\n    }\n\n    /**\n     * Test of getInsCode method, of class ResidueNumber.\n     */\n    @Test\n    public void testGetSetInsCode() {\n//        System.out.println(\"getInsCode\");\n        ResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n        Character expResult = ' ';\n        Character result = instance.getInsCode();\n        assertEquals(expResult, result);\n    }\n\n    /**\n     * Test of getSeqNum method, of class ResidueNumber.\n     */\n    @Test\n    public void testGetSetResidueNumber() {\n//        System.out.println(\"getSeqNum\");\n        ResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n        Integer expResult = 42;\n        Integer result = instance.getSeqNum();\n        assertEquals(expResult, result);\n\n    }\n\n\n    /**\n     * Test of equals method, of class ResidueNumber.\n     */\n    @Test\n    public void testEquals() {\n//        System.out.println(\"equals\");\n        ResidueNumber number1 = new ResidueNumber(\"A\", 42, ' ');\n        ResidueNumber number2 = new ResidueNumber(\"A\", 42, ' ');\n        boolean expResult = true;\n        boolean result = number2.equals(number1);\n        assertEquals(expResult, result);\n\n        Set<ResidueNumber> numberSet= new HashSet<ResidueNumber>();\n        numberSet.add(number1);\n        numberSet.add(number2);\n        assertEquals(1, numberSet.size());\n\n    }\n\n    /**\n     * Test of hashCode method, of class ResidueNumber.\n     */\n    @Test\n    public void testHashCode() {\n//        System.out.println(\"hashCode\");\n        ResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n        int expResult = 93290;\n        int result = instance.hashCode();\n        assertEquals(expResult, result);\n    }\n\n    /**\n     * Test of toString method, of class ResidueNumber.\n     */\n    @Test\n    public void testToString() {\n//        System.out.println(\"toString\");\n        ResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n        String expResult = \"42\";\n        String result = instance.toString();\n        assertEquals(expResult, result);\n\n    }\n\n    /**\n     * Test of toPDB method, of class ResidueNumber.\n     */\n    @Test\n    public void testToPDB() {\n\n        ResidueNumber instance  = new ResidueNumber(\"A\", 42, ' ');\n        ResidueNumber instance2 = new ResidueNumber(\"A\", 42, null);\n\n        String expResult = \"A  42  \";\n        String result1 = instance.toPDB();\n        assertEquals(expResult, result1);\n\n        String result2 = instance2.toPDB();\n        assertEquals(expResult, result2);\n    }\n\n\n\n}","changedTest":"","commitMessage":"Add substantially new unified class for identify structures: StructureIdentifier \n\nThis unifies various prior methods for identifying a structure from a string, which was\npreviously spread over AtomCache methods and StructureTools/StructureIO utilities. It\nincludes PDB IDs, residue range specifications, URLs, SCOP/CATH/PDP domains, and files.\n\nMajor Classes:\n* StructureIdentifier is an interface for methods which know how to load a structure from\n  some resource and reduce it to the requested substructure. The most important property\n  is the identifier, which can be an arbitrary string.\n* SubstructureIdentifier is considered the canonical way to specify a structure and\n  is the major implementation for chain and residue level substructures. All identifiers\n  can be converted to a SubstructureIdentifier.\n* StructureName is suitable for wrapping user-supplied identifiers, and it dispatches the\n  request to a more specific class based on a guess as to the type (PDB, URL, file, etc).\n\nStructureIdentifiers can represent arbitrary strings (e.g. domain IDs). These are converted\n(possibly through some relatively slow process like downloading and parsing a file) into\nstandard-format SubstructureIdentifier instances, which should be easier to serialize and\nrecreate.\n\nDetailed changes:\n\n* Substantially changes StructureIdentifier, which existed but wasn't used anywhere.\n  * Remove getPdbId() method, since not globally relevant. It's still present in most\n    implementations, and can always be accessed via toCanonical().getPdbId()\n* AtomCache\n  * Accept chain indices (\"4HHB.0\") with a warning if there was not\n    already a chain with that ID.\n\n\nThis commit rebases and squashes pre-4.1 development from sbliven's fix81 branch\nculminating in 007ea6e. For posterity, the original commit messages are listed below.\nSome changes may be omitted or modified when resolving the rebase.\n\nCommit messages (oldest to youngest):\n\n---\n\nMajor changes to StructureIdentifier (#81)\n\nRedefines StructureIdentifier as something which transforms a structure.\nThis will replace all of the disjoint places where strings are parsed\ninto various structures and ranges and identifiers.\n\n---\n\nMore work on using StructureIdentifiers\n\n* Add AtomCache.getStructure(StructureIdentifier) method, and change\n    other methods to use it\n* Implement StructureName and other StructureIdentifiers\n* Remove the 'A:+1-+5' range syntax from StructureTools. It was stupid.\n* Remove string parsing from lots of places and replace with\n    StructureIdentifiers\n* Fix lots of tests\n\n---\n\nAdding support for models in SubstructureIdentifier\n\n---\n\nMore improvements for StructureIdentifiers\n\n* Accept chain indices (\"4HHB.0\") with a warning if there was not\n    already a chain with that ID.\n* Fixing bugs in StructureName due to differences with\n    SubstructureIdentifier\n* Removing StructureName.compareTo method, since they aren't well\n    ordered\n* Changing more AtomCache methods to use StructureIdentifiers\n* Test fixes\n\n---\n\nFixing bugs with loading structures from files and urls\n\nThese are now valid StructureName values. They are implemented using the\nPassthroughIdentifier, which makes AtomCache responsible for fetching\nthe right structure.\n\n---\n\nImplementing PDP identifiers in StructureName\n\nPDP parsing doesn't have good test coverage, but my basic checks work.\n\n---\n\nLast test fix.\n\nAll (existing) tests now pass.\n\n---\n\nFix some AtomCache synchronization.\n\n---\n\nModifying StructureIdentifier interface\n\n    - Add loadStructure() method\n    - Remove getPdbId() method, since not globally relevant. It's still\n      present in most implementations, and can always be accessed via\n      toCanonical().getPdbId()\n    - In AtomCache, rename protected loadStructureByPdbId to public\n      getStructureForPdbId() to bypass StructureIdentifier parsing\n\n---\n\nFix bug loading PDP structures\n\n---\n","test_commitMessage":"","allZero":false}