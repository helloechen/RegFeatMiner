{"repository":"biojava","prod_path":"biojava3-sequencing/src/main/java/org/biojava3/sequencing/io/fastq/Fastq.java","test_path":"biojava3-sequencing/src/test/java/org/biojava3/sequencing/io/fastq/FastqTest.java","prod_time":"2014-08-22 03:26:05","test_time":"2014-08-22 03:26:05","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":1,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"2c210b0aa61461f4ae62f19980f9f61ee5a73b42","test_commitID":"2c210b0aa61461f4ae62f19980f9f61ee5a73b42","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\n/**\n * FASTQ formatted sequence.\n *\n * @since 3.0.3\n */\npublic final class Fastq\n{\n    /** Description of this FASTQ formatted sequence. */\n    private final String description;\n\n    /** Sequence for this FASTQ formatted sequence. */\n    private final String sequence;\n\n    /** Quality scores for this FASTQ formatted sequence. */\n    private final String quality;\n\n    /** FASTQ sequence format variant for this FASTQ formatted sequence. */\n    private final FastqVariant variant;\n\n\n    /**\n     * Create a new FASTQ formatted sequence from the specified description, sequence, quality scores,\n     * and sequence format variant.\n     *\n     * @param description description of this FASTQ formatted sequence, must not be null\n     * @param sequence sequence for this FASTQ formatted sequence, must not be null\n     * @param quality quality scores for this FASTQ formatted sequence, must not be null\n     * @param variant FASTQ sequence format variant for this FASTQ formatted sequence, must not be null\n     */\n    Fastq(final String description,\n          final String sequence,\n          final String quality,\n          final FastqVariant variant)\n    {\n        if (description == null)\n        {\n            throw new IllegalArgumentException(\"description must not be null\");\n        }\n        if (sequence == null)\n        {\n            throw new IllegalArgumentException(\"sequence must not be null\");\n        }\n        if (quality == null)\n        {\n            throw new IllegalArgumentException(\"quality must not be null\");\n        }\n        if (variant == null)\n        {\n            throw new IllegalArgumentException(\"variant must not be null\");\n        }\n        this.description = description;\n        this.sequence = sequence;\n        this.quality = quality;\n        this.variant = variant;\n    }\n\n\n    /**\n     * Return the description of this FASTQ formatted sequence.\n     * The description will not be null.\n     *\n     * @return the description of this FASTQ formatted sequence\n     */\n    public String getDescription()\n    {\n        return description;\n    }\n\n    /**\n     * Return the sequence for this FASTQ formatted sequence.\n     * The sequence will not be null.\n     *\n     * @return the sequence for this FASTQ formatted sequence\n     */\n    public String getSequence()\n    {\n        return sequence;\n    }\n\n    /**\n     * Return the quality scores for this FASTQ formatted sequence.\n     * The quality scores will not be null.\n     *\n     * @return the quality scores for this FASTQ formatted sequence\n     */\n    public String getQuality()\n    {\n        return quality;\n    }\n\n    /**\n     * Return the FASTQ sequence format variant for this FASTQ formatted sequence.\n     * The FASTQ sequence format variant will not be null.\n     *\n     * @return the FASTQ sequence format variant for this FASTQ formatted sequence\n     */\n    public FastqVariant getVariant()\n    {\n        return variant;\n    }\n}","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\n/**\n * FASTQ formatted sequence.\n *\n * @since 3.0.3\n */\npublic final class Fastq\n{\n    /** Description of this FASTQ formatted sequence. */\n    private final String description;\n\n    /** Sequence for this FASTQ formatted sequence. */\n    private final String sequence;\n\n    /** Quality scores for this FASTQ formatted sequence. */\n    private final String quality;\n\n    /** FASTQ sequence format variant for this FASTQ formatted sequence. */\n    private final FastqVariant variant;\n\n\n    /**\n     * Create a new FASTQ formatted sequence from the specified description, sequence, quality scores,\n     * and sequence format variant.\n     *\n     * @param description description of this FASTQ formatted sequence, must not be null\n     * @param sequence sequence for this FASTQ formatted sequence, must not be null\n     * @param quality quality scores for this FASTQ formatted sequence, must not be null\n     * @param variant FASTQ sequence format variant for this FASTQ formatted sequence, must not be null\n     */\n    Fastq(final String description,\n          final String sequence,\n          final String quality,\n          final FastqVariant variant)\n    {\n        if (description == null)\n        {\n            throw new IllegalArgumentException(\"description must not be null\");\n        }\n        if (sequence == null)\n        {\n            throw new IllegalArgumentException(\"sequence must not be null\");\n        }\n        if (quality == null)\n        {\n            throw new IllegalArgumentException(\"quality must not be null\");\n        }\n        if (variant == null)\n        {\n            throw new IllegalArgumentException(\"variant must not be null\");\n        }\n        this.description = description;\n        this.sequence = sequence;\n        this.quality = quality;\n        this.variant = variant;\n    }\n\n\n    /**\n     * Return the description of this FASTQ formatted sequence.\n     * The description will not be null.\n     *\n     * @return the description of this FASTQ formatted sequence\n     */\n    public String getDescription()\n    {\n        return description;\n    }\n\n    /**\n     * Return the sequence for this FASTQ formatted sequence.\n     * The sequence will not be null.\n     *\n     * @return the sequence for this FASTQ formatted sequence\n     */\n    public String getSequence()\n    {\n        return sequence;\n    }\n\n    /**\n     * Return the quality scores for this FASTQ formatted sequence.\n     * The quality scores will not be null.\n     *\n     * @return the quality scores for this FASTQ formatted sequence\n     */\n    public String getQuality()\n    {\n        return quality;\n    }\n\n    /**\n     * Return the FASTQ sequence format variant for this FASTQ formatted sequence.\n     * The FASTQ sequence format variant will not be null.\n     *\n     * @return the FASTQ sequence format variant for this FASTQ formatted sequence\n     */\n    public FastqVariant getVariant()\n    {\n        return variant;\n    }\n\n    /**\n     * Create and return a new FastqBuilder.\n     * The FastqBuilder will not be null.\n     *\n     * @return a new FastqBuilder\n     */\n    public static final FastqBuilder builder()\n    {\n        return new FastqBuilder();\n    }\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\n\nimport junit.framework.TestCase;\n\n/**\n * Unit test for Fastq.\n */\npublic final class FastqTest\n    extends TestCase\n{\n\n    public void testImmutable()\n    {\n        Class<Fastq> cls = Fastq.class;\n        assertTrue(Modifier.isPublic(cls.getModifiers()));\n        assertTrue(Modifier.isFinal(cls.getModifiers()));\n        Field[] fields = cls.getDeclaredFields();\n        for (Field field : fields)\n        {\n            assertTrue(Modifier.isPrivate(field.getModifiers()));\n            assertTrue(Modifier.isFinal(field.getModifiers()) ||\n                    (Modifier.isVolatile(field.getModifiers()) && Modifier.isTransient(field.getModifiers())));\n        }\n    }\n\n    public void testConstructor()\n    {\n        Fastq fastq = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n        assertNotNull(fastq);\n\n        try\n        {\n            new Fastq(null, \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n            fail(\"ctr(null description) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n        try\n        {\n            new Fastq(\"description\", null, \"quality_\", FastqVariant.FASTQ_SANGER);\n            fail(\"ctr(null sequence) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n        try\n        {\n            new Fastq(\"description\", \"sequence\", null, FastqVariant.FASTQ_SANGER);\n            fail(\"ctr(null quality) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n        try\n        {\n            new Fastq(\"description\", \"sequence\", \"quality_\", null);\n            fail(\"ctr(null variant) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testDescription()\n    {\n        Fastq fastq = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n        assertTrue(fastq.getDescription() != null);\n        assertEquals(\"description\", fastq.getDescription());\n    }\n\n    public void testSequence()\n    {\n        Fastq fastq = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n        assertTrue(fastq.getSequence() != null);\n        assertEquals(\"sequence\", fastq.getSequence());\n    }\n\n    public void testQuality()\n    {\n        Fastq fastq = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n        assertTrue(fastq.getQuality() != null);\n        assertEquals(\"quality_\", fastq.getQuality());\n    }\n\n    public void testVariant()\n    {\n        Fastq fastq = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n        assertTrue(fastq.getVariant() != null);\n        assertEquals(FastqVariant.FASTQ_SANGER, fastq.getVariant());\n    }\n\n    public void testEquals()\n    {\n        Fastq fastq0 = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n        Fastq fastq1 = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n\n        assertFalse(fastq0.equals(null));\n        assertFalse(fastq1.equals(null));\n        assertFalse(fastq0.equals(new Object()));\n        assertFalse(fastq1.equals(new Object()));\n        assertTrue(fastq0.equals(fastq0));\n        assertTrue(fastq1.equals(fastq1));\n        assertFalse(fastq0 == fastq1);\n        assertFalse(fastq0.equals(fastq1));\n        assertFalse(fastq1.equals(fastq0));\n    }\n\n    public void testHashCode()\n    {\n        Fastq fastq0 = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n        Fastq fastq1 = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n\n        assertEquals(fastq0.hashCode(), fastq0.hashCode());\n        assertEquals(fastq1.hashCode(), fastq1.hashCode());\n        if (fastq0.equals(fastq1))\n        {\n            assertEquals(fastq0.hashCode(), fastq1.hashCode());\n            assertEquals(fastq1.hashCode(), fastq0.hashCode());\n        }\n        if (fastq1.equals(fastq0))\n        {\n            assertEquals(fastq0.hashCode(), fastq1.hashCode());\n            assertEquals(fastq1.hashCode(), fastq0.hashCode());\n        }\n    }\n}","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\n\nimport junit.framework.TestCase;\n\n/**\n * Unit test for Fastq.\n */\npublic final class FastqTest\n    extends TestCase\n{\n\n    public void testImmutable()\n    {\n        Class<Fastq> cls = Fastq.class;\n        assertTrue(Modifier.isPublic(cls.getModifiers()));\n        assertTrue(Modifier.isFinal(cls.getModifiers()));\n        Field[] fields = cls.getDeclaredFields();\n        for (Field field : fields)\n        {\n            assertTrue(Modifier.isPrivate(field.getModifiers()));\n            assertTrue(Modifier.isFinal(field.getModifiers()) ||\n                    (Modifier.isVolatile(field.getModifiers()) && Modifier.isTransient(field.getModifiers())));\n        }\n    }\n\n    public void testConstructor()\n    {\n        Fastq fastq = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n        assertNotNull(fastq);\n\n        try\n        {\n            new Fastq(null, \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n            fail(\"ctr(null description) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n        try\n        {\n            new Fastq(\"description\", null, \"quality_\", FastqVariant.FASTQ_SANGER);\n            fail(\"ctr(null sequence) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n        try\n        {\n            new Fastq(\"description\", \"sequence\", null, FastqVariant.FASTQ_SANGER);\n            fail(\"ctr(null quality) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n        try\n        {\n            new Fastq(\"description\", \"sequence\", \"quality_\", null);\n            fail(\"ctr(null variant) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testDescription()\n    {\n        Fastq fastq = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n        assertTrue(fastq.getDescription() != null);\n        assertEquals(\"description\", fastq.getDescription());\n    }\n\n    public void testSequence()\n    {\n        Fastq fastq = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n        assertTrue(fastq.getSequence() != null);\n        assertEquals(\"sequence\", fastq.getSequence());\n    }\n\n    public void testQuality()\n    {\n        Fastq fastq = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n        assertTrue(fastq.getQuality() != null);\n        assertEquals(\"quality_\", fastq.getQuality());\n    }\n\n    public void testVariant()\n    {\n        Fastq fastq = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n        assertTrue(fastq.getVariant() != null);\n        assertEquals(FastqVariant.FASTQ_SANGER, fastq.getVariant());\n    }\n\n    public void testBuilder()\n    {\n        assertNotNull(Fastq.builder());\n    }\n\n    public void testEquals()\n    {\n        Fastq fastq0 = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n        Fastq fastq1 = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n\n        assertFalse(fastq0.equals(null));\n        assertFalse(fastq1.equals(null));\n        assertFalse(fastq0.equals(new Object()));\n        assertFalse(fastq1.equals(new Object()));\n        assertTrue(fastq0.equals(fastq0));\n        assertTrue(fastq1.equals(fastq1));\n        assertFalse(fastq0 == fastq1);\n        assertFalse(fastq0.equals(fastq1));\n        assertFalse(fastq1.equals(fastq0));\n    }\n\n    public void testHashCode()\n    {\n        Fastq fastq0 = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n        Fastq fastq1 = new Fastq(\"description\", \"sequence\", \"quality_\", FastqVariant.FASTQ_SANGER);\n\n        assertEquals(fastq0.hashCode(), fastq0.hashCode());\n        assertEquals(fastq1.hashCode(), fastq1.hashCode());\n        if (fastq0.equals(fastq1))\n        {\n            assertEquals(fastq0.hashCode(), fastq1.hashCode());\n            assertEquals(fastq1.hashCode(), fastq0.hashCode());\n        }\n        if (fastq1.equals(fastq0))\n        {\n            assertEquals(fastq0.hashCode(), fastq1.hashCode());\n            assertEquals(fastq1.hashCode(), fastq0.hashCode());\n        }\n    }\n}\n","commitMessage":"adding static Fastq.builder() method\n","test_commitMessage":"adding static Fastq.builder() method\n","allZero":false}