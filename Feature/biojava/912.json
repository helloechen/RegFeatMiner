{"repository":"biojava","prod_path":"biojava-structure/src/main/java/org/biojava/nbio/structure/contact/InterfaceFinder.java","test_path":"biojava-integrationtest/src/test/java/org/biojava/nbio/structure/test/contact/TestInterfaceFinder.java","prod_time":"2020-01-26 03:08:46","test_time":"2020-01-26 03:08:46","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"d4dc3239b5fcae70e22e279465197c78740b2322","test_commitID":"d4dc3239b5fcae70e22e279465197c78740b2322","isfound":"found test change","originPro":"package org.biojava.nbio.structure.contact;\n\nimport org.biojava.nbio.structure.Atom;\nimport org.biojava.nbio.structure.Calc;\nimport org.biojava.nbio.structure.Chain;\nimport org.biojava.nbio.structure.Structure;\nimport org.biojava.nbio.structure.StructureTools;\nimport org.biojava.nbio.structure.xtal.CrystalTransform;\nimport org.biojava.nbio.structure.xtal.SpaceGroup;\n\nimport javax.vecmath.Point3d;\nimport java.util.List;\n\npublic class InterfaceFinder {\n\n    public static final double DEFAULT_CONTACT_CUTOFF = 6;\n\n    private static final CrystalTransform IDENTITY_TRANSFORM = new CrystalTransform(SpaceGroup.parseSpaceGroup(\"P1\"));\n    private static final boolean INCLUDE_HETATOMS = true;\n\n    private Structure structure;\n    private double cutoff;\n\n    private BoundingBox[] boundingBoxes;\n\n    public InterfaceFinder(Structure structure) {\n        this.structure = structure;\n        this.cutoff = DEFAULT_CONTACT_CUTOFF;\n    }\n\n    public void setCutoff(double cutoff) {\n        this.cutoff = cutoff;\n    }\n\n    public StructureInterfaceList getAllInterfaces() {\n        initBoundingBoxes();\n\n        StructureInterfaceList list = new StructureInterfaceList();\n\n        List<Chain> polyChains = structure.getPolyChains();\n        for (int i = 0; i<polyChains.size(); i++) {\n            for (int j = i + 1; j<polyChains.size(); j++) {\n                if (! boundingBoxes[i].overlaps(boundingBoxes[j], cutoff)) {\n                    continue;\n                }\n                StructureInterface interf = calcInterface(polyChains.get(i), polyChains.get(j));\n                if (interf!=null) {\n                    list.add(interf);\n                }\n            }\n        }\n        return list;\n    }\n\n    private void initBoundingBoxes() {\n        List<Chain> polyChains = structure.getPolyChains();\n        boundingBoxes = new BoundingBox[polyChains.size()];\n        for (int i = 0; i<polyChains.size(); i++) {\n            Atom[] atoms = StructureTools.getAllNonHAtomArray(polyChains.get(i), INCLUDE_HETATOMS);\n            Point3d[] points = Calc.atomsToPoints(atoms);\n            BoundingBox bb = new BoundingBox(points);\n            boundingBoxes[i] = bb;\n        }\n    }\n\n    private StructureInterface calcInterface(Chain chain1, Chain chain2) {\n        AtomContactSet graph = StructureTools.getAtomsInContact(chain1, chain2, cutoff, INCLUDE_HETATOMS);\n\n        StructureInterface interf = null;\n        if (graph.size()>0) {\n            interf = new StructureInterface(\n                    StructureTools.getAllNonHAtomArray(chain1, INCLUDE_HETATOMS), StructureTools.getAllNonHAtomArray(chain2, INCLUDE_HETATOMS),\n                    chain1.getName(), chain2.getName(),\n                    graph,\n                    IDENTITY_TRANSFORM, IDENTITY_TRANSFORM);\n        }\n\n        return interf;\n    }\n}\n","changedPro":"package org.biojava.nbio.structure.contact;\n\nimport org.biojava.nbio.structure.Atom;\nimport org.biojava.nbio.structure.Calc;\nimport org.biojava.nbio.structure.Chain;\nimport org.biojava.nbio.structure.Structure;\nimport org.biojava.nbio.structure.StructureTools;\nimport org.biojava.nbio.structure.xtal.CrystalTransform;\nimport org.biojava.nbio.structure.xtal.SpaceGroup;\n\nimport javax.vecmath.Point3d;\nimport java.util.List;\n\n/**\n * A class containing methods to find interfaces in a given structure.\n * @author Jose Duarte\n * @since 5.4.0\n */\npublic class InterfaceFinder {\n\n    public static final double DEFAULT_CONTACT_CUTOFF = 6;\n\n    private static final CrystalTransform IDENTITY_TRANSFORM = new CrystalTransform(SpaceGroup.parseSpaceGroup(\"P1\"));\n    private static final boolean INCLUDE_HETATOMS = true;\n\n    private Structure structure;\n    private double cutoff;\n\n    private BoundingBox[] boundingBoxes;\n\n    public InterfaceFinder(Structure structure) {\n        this.structure = structure;\n        this.cutoff = DEFAULT_CONTACT_CUTOFF;\n    }\n\n    /**\n     * Set the contact distance cutoff.\n     * @param cutoff the distance value in Angstroms\n     */\n    public void setCutoff(double cutoff) {\n        this.cutoff = cutoff;\n    }\n\n    /**\n     * Find all inter polymer-chain interfaces in the structure.\n     * Two chains will be considered in contact if at least a pair of atoms from each is within the\n     * contact cutoff.\n     * @return the list of all interfaces\n     */\n    public StructureInterfaceList getAllInterfaces() {\n        initBoundingBoxes();\n\n        StructureInterfaceList list = new StructureInterfaceList();\n\n        List<Chain> polyChains = structure.getPolyChains();\n        for (int i = 0; i<polyChains.size(); i++) {\n            for (int j = i + 1; j<polyChains.size(); j++) {\n                if (! boundingBoxes[i].overlaps(boundingBoxes[j], cutoff)) {\n                    continue;\n                }\n                StructureInterface interf = calcInterface(polyChains.get(i), polyChains.get(j));\n                if (interf!=null) {\n                    list.add(interf);\n                }\n            }\n        }\n        return list;\n    }\n\n    private void initBoundingBoxes() {\n        List<Chain> polyChains = structure.getPolyChains();\n        boundingBoxes = new BoundingBox[polyChains.size()];\n        for (int i = 0; i<polyChains.size(); i++) {\n            Atom[] atoms = StructureTools.getAllNonHAtomArray(polyChains.get(i), INCLUDE_HETATOMS);\n            Point3d[] points = Calc.atomsToPoints(atoms);\n            BoundingBox bb = new BoundingBox(points);\n            boundingBoxes[i] = bb;\n        }\n    }\n\n    private StructureInterface calcInterface(Chain chain1, Chain chain2) {\n        AtomContactSet graph = StructureTools.getAtomsInContact(chain1, chain2, cutoff, INCLUDE_HETATOMS);\n\n        StructureInterface interf = null;\n        if (graph.size()>0) {\n            interf = new StructureInterface(\n                    StructureTools.getAllNonHAtomArray(chain1, INCLUDE_HETATOMS), StructureTools.getAllNonHAtomArray(chain2, INCLUDE_HETATOMS),\n                    chain1.getName(), chain2.getName(),\n                    graph,\n                    IDENTITY_TRANSFORM, IDENTITY_TRANSFORM);\n        }\n\n        return interf;\n    }\n}\n","originTest":"package org.biojava.nbio.structure.test.contact;\n\nimport org.biojava.nbio.structure.Structure;\nimport org.biojava.nbio.structure.StructureException;\nimport org.biojava.nbio.structure.StructureIO;\nimport org.biojava.nbio.structure.contact.AtomContact;\nimport org.biojava.nbio.structure.contact.AtomContactSet;\nimport org.biojava.nbio.structure.contact.InterfaceFinder;\nimport org.biojava.nbio.structure.contact.Pair;\nimport org.biojava.nbio.structure.contact.StructureInterface;\nimport org.biojava.nbio.structure.contact.StructureInterfaceList;\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class TestInterfaceFinder {\n\n    @Test\n    public void testGetAllInterfaces() throws StructureException, IOException {\n        Structure s = StructureIO.getStructure(\"3hbx\");\n\n        InterfaceFinder finder = new InterfaceFinder(s);\n\n        StructureInterfaceList list = finder.getAllInterfaces();\n\n        assertEquals(12, list.size());\n\n        Set<Pair<String>> unique = new HashSet<>();\n\n        for (StructureInterface interf : list) {\n            System.out.println(\"Interface \" + interf.getMoleculeIds());\n            AtomContactSet set = interf.getContacts();\n            System.out.println(\"Number of contacts: \" + set.size());\n\n            unique.add(interf.getMoleculeIds());\n\n        }\n        assertEquals(12, unique.size());\n    }\n}\n","changedTest":"package org.biojava.nbio.structure.test.contact;\n\nimport org.biojava.nbio.structure.Structure;\nimport org.biojava.nbio.structure.StructureException;\nimport org.biojava.nbio.structure.StructureIO;\nimport org.biojava.nbio.structure.contact.AtomContactSet;\nimport org.biojava.nbio.structure.contact.InterfaceFinder;\nimport org.biojava.nbio.structure.contact.Pair;\nimport org.biojava.nbio.structure.contact.StructureInterface;\nimport org.biojava.nbio.structure.contact.StructureInterfaceList;\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class TestInterfaceFinder {\n\n    @Test\n    public void testGetAllInterfaces() throws StructureException, IOException {\n        Structure s = StructureIO.getStructure(\"3hbx\");\n\n        InterfaceFinder finder = new InterfaceFinder(s);\n\n        StructureInterfaceList list = finder.getAllInterfaces();\n\n        assertEquals(12, list.size());\n\n        Set<Pair<String>> unique = new HashSet<>();\n\n        for (StructureInterface interf : list) {\n            System.out.println(\"Interface \" + interf.getMoleculeIds());\n            AtomContactSet set = interf.getContacts();\n            System.out.println(\"Number of contacts: \" + set.size());\n\n            unique.add(interf.getMoleculeIds());\n\n        }\n        assertEquals(12, unique.size());\n    }\n}\n","commitMessage":"Docs\n","test_commitMessage":"Docs\n","allZero":true}