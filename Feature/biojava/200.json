{"repository":"biojava","prod_path":"core/src/main/java/org/biojava/bio/seq/db/HashSequenceDB.java","test_path":"core/src/test/java/org/biojava/bio/seq/db/TestHashSequenceDB.java","prod_time":"2009-11-17 02:13:15","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":1,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":1,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"99c101783b2a4a3abe5182ea1410dae49da092a9","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojava.bio.seq.db;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.biojava.bio.BioException;\nimport org.biojava.bio.seq.Sequence;\nimport org.biojava.bio.seq.SequenceIterator;\nimport org.biojava.utils.ChangeEvent;\nimport org.biojava.utils.ChangeSupport;\nimport org.biojava.utils.ChangeVetoException;\n\n/**\n * An implementation of SequenceDB that uses an underlying HashMap to store the\n * sequence objects.\n *\n * @author Matthew Pocock\n * @author <A href=\"mailto:Gerald.Loeffler@vienna.at\">Gerald Loeffler</A>\n */\npublic class HashSequenceDB\n  extends\n    AbstractSequenceDB\n  implements\n    SequenceDB,\n    Serializable {\n  /**\n   * The sequence-by-id map.\n   */\n  final private Map sequenceByID;\n  \n  /**\n   * An object to extract an ID for a sequence.\n   */\n  final private org.biojava.bio.seq.db.IDMaker idMaker;\n\n  /** \n   * The name of this sequence database.\n   */\n  private String name;\n  \n  public String getName() {\n    return name;\n  }\n\n  public Sequence getSequence(String id) \n      throws IllegalIDException\n  {\n      Sequence seq = (Sequence) sequenceByID.get(id);\n      if (seq == null) {\n          throw new IllegalIDException(\"Sequence with ID \" + id + \" could not be found\");\n      }\n      return seq;\n  }\n\n  public Set ids() {\n    return sequenceByID.keySet();\n  }\n\n  public SequenceIterator sequenceIterator() {\n    return new SequenceIterator() {\n      Iterator seqI = sequenceByID.values().iterator();\n      public boolean hasNext() { return seqI.hasNext(); }\n      public Sequence nextSequence() { return (Sequence) seqI.next(); }\n    };\n  }\n\n  /**\n   * Add a sequence under a particular id.\n   *\n   * @param id  the id to use\n   * @param seq the Sequence to add\n   * @throws ChangeVetoException if this addition was vetoed\n   */\n  public void addSequence(String id, Sequence seq)\n  throws ChangeVetoException {\n    if(!hasListeners()) {\n      sequenceByID.put(id, seq);\n    } else {\n      ChangeSupport changeSupport = getChangeSupport(SequenceDB.SEQUENCES);\n      synchronized(changeSupport) {\n        ChangeEvent ce = new ChangeEvent(\n          this,\n          SequenceDB.SEQUENCES,\n          new Object[] { id, seq },\n          null\n        );\n        changeSupport.firePreChangeEvent(ce);\n        sequenceByID.put(id, seq);\n        changeSupport.firePostChangeEvent(ce);\n      }\n    }\n  }\n\n  /**\n   * Retrieve the IDMaker associated with this database.\n   *\n   * @return the current IDMaker object\n   */\n  public org.biojava.bio.seq.db.IDMaker getIDMaker() {\n    return idMaker;\n  }\n  \n  public void addSequence(Sequence seq)\n  throws ChangeVetoException {\n    String id = idMaker.calcID(seq);\n    if(!hasListeners()) {\n      addSequence(id, seq);\n    } else {\n      ChangeSupport changeSupport = getChangeSupport(SequenceDB.SEQUENCES);\n      synchronized(changeSupport) {\n        ChangeEvent ce = new ChangeEvent(\n          this,\n          SequenceDB.SEQUENCES,\n          id,\n          null\n        );\n        changeSupport.firePreChangeEvent(ce);\n        sequenceByID.remove(id);\n        changeSupport.firePostChangeEvent(ce);\n      }\n    }\n  }\n  \n  public void removeSequence(String id)\n  throws BioException, ChangeVetoException {\n    if(!hasListeners()) {\n      sequenceByID.remove(id);\n    } else {\n      ChangeSupport changeSupport = getChangeSupport(SequenceDB.SEQUENCES);\n      synchronized(changeSupport) {\n        ChangeEvent ce = new ChangeEvent(\n          this,\n          SequenceDB.SEQUENCES,\n          null,\n          id\n        );\n        changeSupport.firePreChangeEvent(ce);\n        sequenceByID.remove(id);\n        changeSupport.firePostChangeEvent(ce);\n      }\n    }\n  }\n\n  /**\n   * Generate a HashSequenceDB object that will use byName to generate ids for\n   * sequences and have a null name.\n   */\n  public HashSequenceDB() {\n    this(IDMaker.byName, null);\n  }\n  \n  /**\n   * Generate a HashSequenceDB object that will use idMaker to generate ids for\n   * sequences and have a null name.\n   *\n   * @param idMaker the object that will work out the default id for a sequence\n   */\n  public HashSequenceDB(org.biojava.bio.seq.db.IDMaker idMaker) {\n    this(idMaker, null);\n  }\n  \n  /**\n   * Generate a HashSequenceDB object that will use byName to generate ids and\n   * will have the requested name.\n   *\n   * @param name the name for this database\n   */\n  public HashSequenceDB(String name) {\n    this(IDMaker.byName, name);\n  }\n  \n  /**\n   * Generate a HashSequenceDB object that will use idMaker to generate ids for\n   * sequences and have the requested name.\n   *\n   * @param idMaker the object that will work out the default id for a sequence\n   * @param name the name for this database\n   */\n  public HashSequenceDB(org.biojava.bio.seq.db.IDMaker idMaker, String name) {\n    this.idMaker = idMaker;\n    this.name = name;\n    this.sequenceByID = new HashMap();\n  }\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojava.bio.seq.db;\n\nimport java.io.Serializable;\nimport java.util.LinkedHashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.biojava.bio.BioException;\nimport org.biojava.bio.seq.Sequence;\nimport org.biojava.bio.seq.SequenceIterator;\nimport org.biojava.utils.ChangeEvent;\nimport org.biojava.utils.ChangeSupport;\nimport org.biojava.utils.ChangeVetoException;\n\n/**\n * An implementation of SequenceDB that uses an underlying HashMap to store the\n * sequence objects.\n *\n * @author Matthew Pocock\n * @author <A href=\"mailto:Gerald.Loeffler@vienna.at\">Gerald Loeffler</A>\n * @author Matias Pilpari (LinkedHashMap)\n */\npublic class HashSequenceDB\n  extends\n    AbstractSequenceDB\n  implements\n    SequenceDB,\n    Serializable {\n  /**\n   * The sequence-by-id map.\n   */\n  final private Map sequenceByID;\n  \n  /**\n   * An object to extract an ID for a sequence.\n   */\n  final private org.biojava.bio.seq.db.IDMaker idMaker;\n\n  /** \n   * The name of this sequence database.\n   */\n  private String name;\n  \n  public String getName() {\n    return name;\n  }\n\n  public Sequence getSequence(String id) \n      throws IllegalIDException\n  {\n      Sequence seq = (Sequence) sequenceByID.get(id);\n      if (seq == null) {\n          throw new IllegalIDException(\"Sequence with ID \" + id + \" could not be found\");\n      }\n      return seq;\n  }\n\n  public Set ids() {\n    return sequenceByID.keySet();\n  }\n\n  public SequenceIterator sequenceIterator() {\n    return new SequenceIterator() {\n      Iterator seqI = sequenceByID.values().iterator();\n      public boolean hasNext() { return seqI.hasNext(); }\n      public Sequence nextSequence() { return (Sequence) seqI.next(); }\n    };\n  }\n\n  /**\n   * Add a sequence under a particular id.\n   *\n   * @param id  the id to use\n   * @param seq the Sequence to add\n   * @throws ChangeVetoException if this addition was vetoed\n   */\n  public void addSequence(String id, Sequence seq)\n  throws ChangeVetoException {\n    if(!hasListeners()) {\n      sequenceByID.put(id, seq);\n    } else {\n      ChangeSupport changeSupport = getChangeSupport(SequenceDB.SEQUENCES);\n      synchronized(changeSupport) {\n        ChangeEvent ce = new ChangeEvent(\n          this,\n          SequenceDB.SEQUENCES,\n          new Object[] { id, seq },\n          null\n        );\n        changeSupport.firePreChangeEvent(ce);\n        sequenceByID.put(id, seq);\n        changeSupport.firePostChangeEvent(ce);\n      }\n    }\n  }\n\n  /**\n   * Retrieve the IDMaker associated with this database.\n   *\n   * @return the current IDMaker object\n   */\n  public org.biojava.bio.seq.db.IDMaker getIDMaker() {\n    return idMaker;\n  }\n  \n  public void addSequence(Sequence seq)\n  throws ChangeVetoException {\n    String id = idMaker.calcID(seq);\n    if(!hasListeners()) {\n      addSequence(id, seq);\n    } else {\n      ChangeSupport changeSupport = getChangeSupport(SequenceDB.SEQUENCES);\n      synchronized(changeSupport) {\n        ChangeEvent ce = new ChangeEvent(\n          this,\n          SequenceDB.SEQUENCES,\n          id,\n          null\n        );\n        changeSupport.firePreChangeEvent(ce);\n        sequenceByID.remove(id);\n        changeSupport.firePostChangeEvent(ce);\n      }\n    }\n  }\n  \n  public void removeSequence(String id)\n  throws BioException, ChangeVetoException {\n    if(!hasListeners()) {\n      sequenceByID.remove(id);\n    } else {\n      ChangeSupport changeSupport = getChangeSupport(SequenceDB.SEQUENCES);\n      synchronized(changeSupport) {\n        ChangeEvent ce = new ChangeEvent(\n          this,\n          SequenceDB.SEQUENCES,\n          null,\n          id\n        );\n        changeSupport.firePreChangeEvent(ce);\n        sequenceByID.remove(id);\n        changeSupport.firePostChangeEvent(ce);\n      }\n    }\n  }\n\n  /**\n   * Generate a HashSequenceDB object that will use byName to generate ids for\n   * sequences and have a null name.\n   */\n  public HashSequenceDB() {\n    this(IDMaker.byName, null);\n  }\n  \n  /**\n   * Generate a HashSequenceDB object that will use idMaker to generate ids for\n   * sequences and have a null name.\n   *\n   * @param idMaker the object that will work out the default id for a sequence\n   */\n  public HashSequenceDB(org.biojava.bio.seq.db.IDMaker idMaker) {\n    this(idMaker, null);\n  }\n  \n  /**\n   * Generate a HashSequenceDB object that will use byName to generate ids and\n   * will have the requested name.\n   *\n   * @param name the name for this database\n   */\n  public HashSequenceDB(String name) {\n    this(IDMaker.byName, name);\n  }\n  \n  /**\n   * Generate a HashSequenceDB object that will use idMaker to generate ids for\n   * sequences and have the requested name.\n   *\n   * @param idMaker the object that will work out the default id for a sequence\n   * @param name the name for this database\n   */\n  public HashSequenceDB(org.biojava.bio.seq.db.IDMaker idMaker, String name) {\n    this.idMaker = idMaker;\n    this.name = name;\n    this.sequenceByID = new LinkedHashMap();\n  }\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n */\n\npackage org.biojava.bio.seq.db;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\n\nimport junit.framework.TestCase;\n\nimport org.biojava.bio.Annotation;\nimport org.biojava.bio.BioException;\nimport org.biojava.bio.seq.ProteinTools;\nimport org.biojava.bio.seq.Sequence;\nimport org.biojava.bio.seq.SequenceIterator;\nimport org.biojava.bio.seq.SequenceTools;\nimport org.biojava.bio.symbol.SymbolList;\nimport org.biojava.utils.ChangeVetoException;\n\n\n/**\n * Tests for HashSequenceDB\n * @author Mark Schreiber\n */\npublic class TestHashSequenceDB extends TestCase {\n  private HashSequenceDB hashSequenceDB = null;\n  private HashSequenceDB hashSequenceDB2 = null;\n  private Sequence seq = null;\n\n  public TestHashSequenceDB(String name) {\n    super(name);\n  }\n\n  protected void setUp() throws Exception {\n    super.setUp();\n    hashSequenceDB = new HashSequenceDB();\n    hashSequenceDB2 = new HashSequenceDB(new IDMaker.ByURN(), \"seqDB\");\n    SymbolList syms = ProteinTools.createProtein(\"hgfds\");\n    Sequence seq = SequenceTools.createSequence(syms, \"urn:biojava:bar\", \"bar\",\n                                              Annotation.EMPTY_ANNOTATION);\n\n    hashSequenceDB.addSequence(seq);\n    hashSequenceDB2.addSequence(seq);\n\n  }\n\n  protected void tearDown() throws Exception {\n    hashSequenceDB = null;\n    super.tearDown();\n  }\n\n\n\n  public void testAddSequence1() throws ChangeVetoException {\n    String id = \"myseq\";\n    hashSequenceDB.addSequence(id, seq);\n    hashSequenceDB2.addSequence(id, seq);\n  }\n\n  public void testGetName() {\n    String expectedReturn = \"seqDB\";\n    String actualReturn = hashSequenceDB2.getName();\n    assertEquals(\"return value\", expectedReturn, actualReturn);\n  }\n\n  public void testGetSequence() throws IllegalIDException {\n    String id = \"bar\";\n    String urn = \"urn:biojava:bar\";\n    Sequence s = hashSequenceDB.getSequence(id);\n    if(s == null)\n      fail(\"no sequence returned for :\"+id);\n    assertTrue(s.getName().equals (id));\n\n    s = hashSequenceDB2.getSequence(urn);\n    if(s == null)\n      fail(\"no sequence returned for :\"+urn);\n    assertTrue(s.getURN().equals(urn));\n\n  }\n\n  public void testIds() {\n    Set ids = hashSequenceDB.ids();\n    assertNotNull(ids);\n    assertTrue(ids.contains(\"bar\"));\n    assertTrue(ids.size() == 1);\n\n    ids = hashSequenceDB2.ids();\n    assertNotNull(ids);\n    assertTrue(ids.contains(\"urn:biojava:bar\"));\n    assertTrue(ids.size() == 1);\n  }\n\n  public void testRemoveSequence() throws BioException, ChangeVetoException {\n    String id = \"bar\";\n    String urn = \"urn:biojava:bar\";\n    hashSequenceDB.removeSequence(id);\n    hashSequenceDB2.removeSequence(urn);\n\n    assertFalse(hashSequenceDB.ids().contains(id));\n    assertFalse(hashSequenceDB.ids().contains(urn));\n\n    assertTrue(hashSequenceDB.ids().size() == 0);\n    assertTrue(hashSequenceDB2.ids().size() == 0);\n  }\n\n  public void testSequenceIterator() {\n    SequenceIterator iter = hashSequenceDB.sequenceIterator();\n    assertNotNull(iter);\n\n    Sequence s = null;\n    try {\n      s = iter.nextSequence();\n    } catch (BioException ex) {\n      fail(ex.getMessage());\n    } catch (NoSuchElementException ex) {\n      ex.getMessage();\n    }\n    assertNotNull(s);\n    //should be no more\n    assertFalse(iter.hasNext());\n  }\n\n  public void testSerialization() throws IOException, ClassNotFoundException{\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ObjectOutputStream oos = new ObjectOutputStream(baos);\n    oos.writeObject(hashSequenceDB);\n    oos.writeObject(hashSequenceDB2);\n    oos.flush();\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    ObjectInputStream ois = new ObjectInputStream(bais);\n    HashSequenceDB seqdb = (HashSequenceDB)ois.readObject();\n    HashSequenceDB seqdb2 = (HashSequenceDB)ois.readObject();\n    bais.close();\n    ois.close();\n    oos.close();\n    baos.close();\n\n    Sequence s = null;\n    try {\n      assertNotNull(seqdb);\n      s = seqdb.getSequence(\"bar\");\n      assertNotNull(s);\n    } catch (IllegalIDException ex) {\n      fail(ex.getMessage());\n    }\n\n    try {\n      assertNotNull(seqdb2);\n      s = seqdb2.getSequence(\"urn:biojava:bar\");\n      assertNotNull(s);\n    } catch (IllegalIDException ex1) {\n      fail(ex1.getMessage());\n    }\n  }\n}\n","changedTest":"","commitMessage":"Matias Pilpari's LinkedHashMap addition.\n\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@7271 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"","allZero":false}