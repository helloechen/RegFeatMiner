{"repository":"biojava","prod_path":"biojava-structure/src/main/java/org/biojava/nbio/structure/Site.java","test_path":"biojava-structure/src/test/java/org/biojava/nbio/structure/SiteTest.java","prod_time":"2021-06-17 07:24:36","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"76063854258ceff246d451a976b67979a4f6f524","test_commitID":"","isfound":"not found test change","originPro":"/*\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojava.nbio.structure;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Locale;\n\n/**\n * Holds the data of sites presented in PDB files. <br/>\n * Example from the PDB flatfile:\n * <pre>\n\tSITE     1 AC1  3 GLY A  65  CYS A  67  HOH A 180\n\tSITE     1 AC2 10 HIS C  37  ALA C  39  THR C 152  LEU C 153\n\tSITE     2 AC2 10 HIS D  37  ALA D  39  THR D 152  LEU D 153\n\tSITE     3 AC2 10 SER D 154  GOL D 172\n\t</pre>\n * @author Amr AL-Hossary\n * @author Jules Jacobsen\n */\npublic class Site implements PDBRecord, Comparable<Site> {\n\n\tprivate static final long serialVersionUID = -4577047072916341237L;\n\tprivate static final String lineEnd = System.getProperty(\"line.separator\");\n\n\tprivate String siteID = \"\";\n\tprivate List<Group> groups = new ArrayList<Group>();\n\t//variables for REMARK 800\n\tprivate String evCode = \"\";\n\tprivate String description = \"\";\n\n\tpublic Site() {\n\t}\n\n\tpublic Site(String siteID, List<Group> groups) {\n\t\tthis.siteID = siteID;\n\t\tthis.groups = groups;\n\t}\n\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder stringBuilder = new StringBuilder(\"SITE \");\n\t\tstringBuilder.append(siteID).append(\" \").append(groups.size()).append(\" \");\n\t\tfor (Group group : groups) {\n\t\t\t// 012345678910\n\t\t\t//'ARG H 221A '\n\t\t\tString groupString = String.format(\"%s %s\",\n\t\t\t\t\t\tgroup.getPDBName(),\n\t\t\t\t\t\tgroup.getResidueNumber().toPDB());\n\t\t\tstringBuilder.append(groupString);\n\t\t}\n\t\tstringBuilder.append(lineEnd);\n\t\treturn stringBuilder.toString();\n\t}\n\n\n\t@Override\n\tpublic String toPDB() {\n\t\tStringBuffer buffer = new StringBuffer();\n\t\ttoPDB(buffer);\n\t\treturn buffer.toString();\n\t}\n\n\n\t@Override\n\tpublic void toPDB(StringBuffer buf) {\n\t\tif (groups == null || groups.size() < 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t//SITE     1 CAT  3 HIS H  57  ASP H 102  SER H 195\n\t\t//SITE     1 AC1  6 ARG H 221A LYS H 224  HOH H 403  HOH H 460\n\t\t//SITE     2 AC1  6 HOH H 464  HOH H 497\n\t\t//         ^  ^   ^\n\t\t//     cont# id  group size\n\t\t//max 4 groups per line\n\n\t\t//counters for tracking where we are\n\t\tint seqNum = 0;\n\t\tint groupsWritten = 0;\n\t\tint groupNum = 0;\n\t\t//new StringBuilder for adding the groups to\n\t\tStringBuilder stringBuilder = new StringBuilder();\n\n\t\twhile (groupsWritten < groups.size()) {\n\t\t\tStringBuilder groupsString = new StringBuilder();\n\t\t\tfor (int i = 0; i < 4 && groupsWritten < groups.size(); i++) {\n\t\t\t\tGroup group = groups.get(groupNum);\n\t\t\t\t// Make sure the pdbName is formatted as 3 width string.\n\t\t\t\tString groupString = String.format(Locale.UK, \"%3s %s\",\n\t\t\t\t\t\tgroup.getPDBName(), group.getResidueNumber().toPDB());\n\t\t\t\tgroupsWritten++;\n\t\t\t\tgroupNum++;\n\t\t\t\tif (i == 3 || groupsWritten == groups.size()) {\n\t\t\t\t\t// groupString = groupString.trim();\n\t\t\t\t\tgroupString.replaceFirst(\"\\\\s+$\", \"\"); // remove only trailing whitespace.\n\t\t\t\t}\n\t\t\t\tgroupsString.append(groupString);\n\t\t\t}\n\t\t\tstringBuilder.append(String.format(Locale.UK, \"SITE   %3d %3s %2d %-62s\", seqNum + 1, siteID, groups.size(), groupsString.toString()));\n\t\t\t//iterate the line counter, add the end of line character\n\t\t\tseqNum++;\n\t\t\tstringBuilder.append(lineEnd);\n\t\t}\n\n\t\tbuf.append(stringBuilder);\n\t}\n\n\t/**\n\t * Appends the REMARK 800 section pertaining to the site onto the end of the\n\t * StringBuffer provided.\n\t *\n\t * For example in pdb 1a4w:\n\t * REMARK 800 SITE_IDENTIFIER: CAT\n\t * REMARK 800 EVIDENCE_CODE: UNKNOWN\n\t * REMARK 800 SITE_DESCRIPTION: ACTIVE SITE\n\t *\n\t * @param stringBuffer\n\t */\n\tpublic void remark800toPDB(StringBuffer stringBuffer) {\n\t\t//REMARK 800 SITE_IDENTIFIER: CAT\n\t\t//REMARK 800 EVIDENCE_CODE: UNKNOWN\n\t\t//REMARK 800 SITE_DESCRIPTION: ACTIVE SITE\n\n\t\tstringBuffer.append(String.format(Locale.UK, \"REMARK 800 SITE_IDENTIFIER: %-52s%s\", siteID, lineEnd));\n\t\tstringBuffer.append(String.format(Locale.UK, \"REMARK 800 EVIDENCE_CODE: %-54s%s\", evCode, lineEnd));\n\t\tstringBuffer.append(String.format(Locale.UK, \"REMARK 800 SITE_DESCRIPTION: %-51s%s\", description, lineEnd));\n\n\t}\n\n\t/**\n\t * Provides REMARK 800 section pertaining to the site as a string.\n\t *\n\t * For example in pdb 1a4w:\n\t * REMARK 800 SITE_IDENTIFIER: CAT\n\t * REMARK 800 EVIDENCE_CODE: UNKNOWN\n\t * REMARK 800 SITE_DESCRIPTION: ACTIVE SITE\n\t *\n\t *\n\t */\n\tpublic String remark800toPDB() {\n\t\tStringBuffer stringBuffer = new StringBuffer();\n\t\tremark800toPDB(stringBuffer);\n\t\treturn stringBuffer.toString();\n\t}\n\n\t/**\n\t * @param siteID the siteID to set\n\t * e.g. CAT, AC1, AC2...\n\t */\n\tpublic void setSiteID(String siteID) {\n\t\tthis.siteID = siteID;\n\t}\n\n\t/**\n\t * @return the siteID\n\t * e.g. CAT, AC1, AC2...\n\t */\n\tpublic String getSiteID() {\n\t\treturn siteID;\n\t}\n\n\t/**\n\t * @return the groups\n\t */\n\tpublic List<Group> getGroups() {\n\t\treturn groups;\n\t}\n\n\t/**\n\t * @param residues the groups to set\n\t */\n\tpublic void setGroups(List<Group> residues) {\n\t\tthis.groups = residues;\n\t}\n\n\n\t/**\n\t * gets the REMARK 800 description of the site\n\t * @return description\n\t */\n\tpublic String getDescription() {\n\t\treturn description;\n\t}\n\n\t/**\n\t * sets the REMARK 800 description of the site\n\t */\n\tpublic void setDescription(String description) {\n\t\tthis.description = description;\n\t}\n\n\t/**\n\t * gets the REMARK 800 EVIDENCE CODE for the site.\n\t * @return evidence code\n\t */\n\tpublic String getEvCode() {\n\t\treturn evCode;\n\t}\n\n\t/**\n\t * sets the REMARK 800 EVIDENCE CODE for the site.\n\t */\n\tpublic void setEvCode(String evCode) {\n\t\tthis.evCode = evCode;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (getClass() != obj.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Site other = (Site) obj;\n\t\tif ((this.siteID == null) ? (other.siteID != null) : !this.siteID.equals(other.siteID)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.groups != other.groups && (this.groups == null || !this.groups.equals(other.groups))) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((this.evCode == null) ? (other.evCode != null) : !this.evCode.equals(other.evCode)) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((this.description == null) ? (other.description != null) : !this.description.equals(other.description)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tint hash = 5;\n\t\thash = 37 * hash + (this.siteID != null ? this.siteID.hashCode() : 0);\n\t\thash = 37 * hash + (this.groups != null ? this.groups.hashCode() : 0);\n\t\thash = 37 * hash + (this.evCode != null ? this.evCode.hashCode() : 0);\n\t\thash = 37 * hash + (this.description != null ? this.description.hashCode() : 0);\n\t\treturn hash;\n\t}\n\n\n\n\t@Override\n\tpublic int compareTo(Site other) {\n\t\treturn this.toString().compareTo(other.toString());\n\t}\n}\n","changedPro":"/*\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojava.nbio.structure;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Locale;\n\n/**\n * Holds the data of sites presented in PDB files. <br/>\n * Example from the PDB flatfile:\n * <pre>\n\tSITE     1 AC1  3 GLY A  65  CYS A  67  HOH A 180\n\tSITE     1 AC2 10 HIS C  37  ALA C  39  THR C 152  LEU C 153\n\tSITE     2 AC2 10 HIS D  37  ALA D  39  THR D 152  LEU D 153\n\tSITE     3 AC2 10 SER D 154  GOL D 172\n\t</pre>\n * @author Amr ALHOSSARY\n * @author Jules Jacobsen\n */\npublic class Site implements PDBRecord, Comparable<Site> {\n\n\tprivate static final long serialVersionUID = -4577047072916341237L;\n\tprivate static final String lineEnd = System.getProperty(\"line.separator\");\n\n\tprivate String siteID = \"\";\n\tprivate List<Group> groups = new ArrayList<Group>();\n\t//variables for REMARK 800\n\tprivate String evCode = \"\";\n\tprivate String description = \"\";\n\n\tpublic Site() {\n\t}\n\n\tpublic Site(String siteID, List<Group> groups) {\n\t\tthis.siteID = siteID;\n\t\tthis.groups = groups;\n\t}\n\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder stringBuilder = new StringBuilder(\"SITE \");\n\t\tstringBuilder.append(siteID).append(\" \").append(groups.size()).append(\" \");\n\t\tfor (Group group : groups) {\n\t\t\t// 012345678910\n\t\t\t//'ARG H 221A '\n\t\t\tString groupString = String.format(\"%s %s\",\n\t\t\t\t\t\tgroup.getPDBName(),\n\t\t\t\t\t\tgroup.getResidueNumber().toPDB());\n\t\t\tstringBuilder.append(groupString);\n\t\t}\n\t\tstringBuilder.append(lineEnd);\n\t\treturn stringBuilder.toString();\n\t}\n\n\n\t@Override\n\tpublic String toPDB() {\n\t\tStringBuffer buffer = new StringBuffer();\n\t\ttoPDB(buffer);\n\t\treturn buffer.toString();\n\t}\n\n\n\t@Override\n\tpublic void toPDB(StringBuffer buf) {\n\t\tif (groups == null || groups.size() < 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t//SITE     1 CAT  3 HIS H  57  ASP H 102  SER H 195\n\t\t//SITE     1 AC1  6 ARG H 221A LYS H 224  HOH H 403  HOH H 460\n\t\t//SITE     2 AC1  6 HOH H 464  HOH H 497\n\t\t//         ^  ^   ^\n\t\t//     cont# id  group size\n\t\t//max 4 groups per line\n\n\t\t//counters for tracking where we are\n\t\tint seqNum = 0;\n\t\tint groupsWritten = 0;\n\t\tint groupNum = 0;\n\t\t//new StringBuilder for adding the groups to\n\t\tStringBuilder stringBuilder = new StringBuilder();\n\n\t\twhile (groupsWritten < groups.size()) {\n\t\t\tStringBuilder groupsString = new StringBuilder();\n\t\t\tfor (int i = 0; i < 4 && groupsWritten < groups.size(); i++) {\n\t\t\t\tGroup group = groups.get(groupNum);\n\t\t\t\t// Make sure the pdbName is formatted as 3 width string.\n\t\t\t\tString groupString = String.format(Locale.UK, \"%3s %s\",\n\t\t\t\t\t\tgroup.getPDBName(), group.getResidueNumber().toPDB());\n\t\t\t\tgroupsWritten++;\n\t\t\t\tgroupNum++;\n\t\t\t\tif (i == 3 || groupsWritten == groups.size()) {\n\t\t\t\t\t// groupString = groupString.trim();\n\t\t\t\t\tgroupString.replaceFirst(\"\\\\s+$\", \"\"); // remove only trailing whitespace.\n\t\t\t\t}\n\t\t\t\tgroupsString.append(groupString);\n\t\t\t}\n\t\t\tstringBuilder.append(String.format(Locale.UK, \"SITE   %3d %3s %2d %-62s\", seqNum + 1, siteID, groups.size(), groupsString.toString()));\n\t\t\t//iterate the line counter, add the end of line character\n\t\t\tseqNum++;\n\t\t\tstringBuilder.append(lineEnd);\n\t\t}\n\n\t\tbuf.append(stringBuilder);\n\t}\n\n\t/**\n\t * Appends the REMARK 800 section pertaining to the site onto the end of the\n\t * StringBuffer provided.\n\t *\n\t * For example in pdb 1a4w:\n\t * REMARK 800 SITE_IDENTIFIER: CAT\n\t * REMARK 800 EVIDENCE_CODE: UNKNOWN\n\t * REMARK 800 SITE_DESCRIPTION: ACTIVE SITE\n\t *\n\t * @param stringBuffer\n\t */\n\tpublic void remark800toPDB(StringBuffer stringBuffer) {\n\t\t//REMARK 800 SITE_IDENTIFIER: CAT\n\t\t//REMARK 800 EVIDENCE_CODE: UNKNOWN\n\t\t//REMARK 800 SITE_DESCRIPTION: ACTIVE SITE\n\n\t\tstringBuffer.append(String.format(Locale.UK, \"REMARK 800 SITE_IDENTIFIER: %-52s%s\", siteID, lineEnd));\n\t\tstringBuffer.append(String.format(Locale.UK, \"REMARK 800 EVIDENCE_CODE: %-54s%s\", evCode, lineEnd));\n\t\tstringBuffer.append(String.format(Locale.UK, \"REMARK 800 SITE_DESCRIPTION: %-51s%s\", description, lineEnd));\n\n\t}\n\n\t/**\n\t * Provides REMARK 800 section pertaining to the site as a string.\n\t *\n\t * For example in pdb 1a4w:\n\t * REMARK 800 SITE_IDENTIFIER: CAT\n\t * REMARK 800 EVIDENCE_CODE: UNKNOWN\n\t * REMARK 800 SITE_DESCRIPTION: ACTIVE SITE\n\t *\n\t *\n\t */\n\tpublic String remark800toPDB() {\n\t\tStringBuffer stringBuffer = new StringBuffer();\n\t\tremark800toPDB(stringBuffer);\n\t\treturn stringBuffer.toString();\n\t}\n\n\t/**\n\t * @param siteID the siteID to set\n\t * e.g. CAT, AC1, AC2...\n\t */\n\tpublic void setSiteID(String siteID) {\n\t\tthis.siteID = siteID;\n\t}\n\n\t/**\n\t * @return the siteID\n\t * e.g. CAT, AC1, AC2...\n\t */\n\tpublic String getSiteID() {\n\t\treturn siteID;\n\t}\n\n\t/**\n\t * @return the groups\n\t */\n\tpublic List<Group> getGroups() {\n\t\treturn groups;\n\t}\n\n\t/**\n\t * @param residues the groups to set\n\t */\n\tpublic void setGroups(List<Group> residues) {\n\t\tthis.groups = residues;\n\t}\n\n\n\t/**\n\t * gets the REMARK 800 description of the site\n\t * @return description\n\t */\n\tpublic String getDescription() {\n\t\treturn description;\n\t}\n\n\t/**\n\t * sets the REMARK 800 description of the site\n\t */\n\tpublic void setDescription(String description) {\n\t\tthis.description = description;\n\t}\n\n\t/**\n\t * gets the REMARK 800 EVIDENCE CODE for the site.\n\t * @return evidence code\n\t */\n\tpublic String getEvCode() {\n\t\treturn evCode;\n\t}\n\n\t/**\n\t * sets the REMARK 800 EVIDENCE CODE for the site.\n\t */\n\tpublic void setEvCode(String evCode) {\n\t\tthis.evCode = evCode;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (getClass() != obj.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Site other = (Site) obj;\n\t\tif ((this.siteID == null) ? (other.siteID != null) : !this.siteID.equals(other.siteID)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.groups != other.groups && (this.groups == null || !this.groups.equals(other.groups))) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((this.evCode == null) ? (other.evCode != null) : !this.evCode.equals(other.evCode)) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((this.description == null) ? (other.description != null) : !this.description.equals(other.description)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tint hash = 5;\n\t\thash = 37 * hash + (this.siteID != null ? this.siteID.hashCode() : 0);\n\t\thash = 37 * hash + (this.groups != null ? this.groups.hashCode() : 0);\n\t\thash = 37 * hash + (this.evCode != null ? this.evCode.hashCode() : 0);\n\t\thash = 37 * hash + (this.description != null ? this.description.hashCode() : 0);\n\t\treturn hash;\n\t}\n\n\n\n\t@Override\n\tpublic int compareTo(Site other) {\n\t\treturn this.toString().compareTo(other.toString());\n\t}\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojava.nbio.structure;\n\nimport org.junit.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n/**\n * Tests functionality of Site class.\n * @author Jules Jacobsen <jacobsen@ebi.ac.uk>\n */\npublic class SiteTest {\n\n\tpublic static final String newline = System.getProperty(\"line.separator\");\n\n\tprivate static Site catSite;\n\tprivate static Site bindingSite;\n\n\tprivate static List<Group> bindingSiteGroups;\n\n\tpublic SiteTest() {\n\n\t\t// sites CAT and AC1 from PDB entry 1a4w\n\t\t//SITE     1 CAT  3 HIS H  57  ASP H 102  SER H 195\n\t\t//SITE     1 AC1  6 ARG H 221A LYS H 224  HOH H 403  HOH H 460\n\t\t//SITE     2 AC1  6 HOH H 464  HOH H 497\n\t\t//groups for site CAT\n\t\tChain chain = new ChainImpl();\n\t\tchain.setName(\"H\");\n\t\tchain.setId(\"H\");\n\t\tGroup his57 = new AminoAcidImpl();\n\t\t//            his57.setPDBCode(\"57\");\n\t\this57.setResidueNumber(\"H\", 57, ' ');\n\t\this57.setPDBName(\"HIS\");\n\t\this57.setChain(chain);\n\t\tGroup asp102 = new AminoAcidImpl();\n\t\tasp102.setResidueNumber(\"H\", 102, ' ');\n\t\tasp102.setPDBName(\"ASP\");\n\t\tasp102.setChain(chain);\n\t\tGroup ser195 = new AminoAcidImpl();\n\t\tser195.setResidueNumber(\"H\", 195, ' ');\n\t\tser195.setPDBName(\"SER\");\n\t\tser195.setChain(chain);\n\t\tList<Group> catSiteGroups = new ArrayList<Group>();\n\t\tcatSiteGroups.add(his57);\n\t\tcatSiteGroups.add(asp102);\n\t\tcatSiteGroups.add(ser195);\n\t\t//make the catalytic site CAT\n\t\tcatSite = new Site();\n\t\tcatSite.setSiteID(\"CAT\");\n\t\tcatSite.setGroups(catSiteGroups);\n\t\tcatSite.setEvCode(\"UNKNOWN\");\n\t\tcatSite.setDescription(\"ACTIVE SITE\");\n\t\t//groups for site AC1\n\t\tGroup arg221a = new AminoAcidImpl();\n\t\targ221a.setResidueNumber(\"H\", 221, 'A');\n\t\targ221a.setPDBName(\"ARG\");\n\t\targ221a.setChain(chain);\n\t\tGroup lys224 = new AminoAcidImpl();\n\t\tlys224.setResidueNumber(\"H\", 224, ' ');\n\t\tlys224.setPDBName(\"LYS\");\n\t\tlys224.setChain(chain);\n\t\tGroup hoh403 = new HetatomImpl();\n\t\thoh403.setResidueNumber(\"H\", 403, ' ');\n\t\thoh403.setPDBName(\"HOH\");\n\t\thoh403.setChain(chain);\n\t\tGroup hoh460 = new HetatomImpl();\n\t\thoh460.setResidueNumber(\"H\", 460, ' ');\n\t\thoh460.setPDBName(\"HOH\");\n\t\thoh460.setChain(chain);\n\t\tGroup hoh464 = new HetatomImpl();\n\t\thoh464.setResidueNumber(\"H\", 464, ' ');\n\t\thoh464.setPDBName(\"HOH\");\n\t\thoh464.setChain(chain);\n\t\tGroup hoh497 = new HetatomImpl();\n\t\thoh497.setResidueNumber(\"H\", 497, ' ');\n\t\thoh497.setPDBName(\"HOH\");\n\t\thoh497.setChain(chain);\n\n\t\tbindingSiteGroups = new ArrayList<Group>();\n\n\t\tbindingSiteGroups.add(arg221a);\n\t\tbindingSiteGroups.add(lys224);\n\t\tbindingSiteGroups.add(hoh403);\n\t\tbindingSiteGroups.add(hoh460);\n\t\tbindingSiteGroups.add(hoh464);\n\t\tbindingSiteGroups.add(hoh497);\n\t\t//make the binding site AC1\n\t\tbindingSite = new Site();\n\t\tbindingSite.setSiteID(\"AC1\");\n\t\tbindingSite.setGroups(bindingSiteGroups);\n\t\tbindingSite.setEvCode(\"SOFTWARE\");\n\t\tbindingSite.setDescription(\"BINDING SITE FOR RESIDUE NA H 541\");\n\n\n\t}\n\n\t@BeforeClass\n\tpublic static void setUpClass() throws Exception {\n\t}\n\n\t@AfterClass\n\tpublic static void tearDownClass() throws Exception {\n\t}\n\n\t@Before\n\tpublic void setUp() {\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t}\n\n\t/**\n\t * Test of toPDB method, of class Site.\n\t */\n\t@Test\n\tpublic void testToPDB_0args() {\n//        System.out.println(\"toPDB_0args\");\n\t\tString expResult =  \"SITE     1 AC1  6 ARG H 221A LYS H 224  HOH H 403  HOH H 460                    \" + newline +\n\t\t\t\t\t\t\t\"SITE     2 AC1  6 HOH H 464  HOH H 497                                          \"+ newline;\n\t\tString result = bindingSite.toPDB();\n//        System.out.println(\"Expected:\");\n//        System.out.println(expResult);\n//        System.out.println(\"Got:\");\n//        System.out.println(result);\n\t\tAssert.assertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of toPDB method, of class Site.\n\t */\n\t@Test\n\tpublic void testToPDB_StringBuffer() {\n//        System.out.println(\"toPDB\");\n\t\tStringBuffer buf = new StringBuffer(\"\");\n\t\tString expResult =  \"SITE     1 AC1  6 ARG H 221A LYS H 224  HOH H 403  HOH H 460                    \" + newline +\n\t\t\t\t\t\t\t\"SITE     2 AC1  6 HOH H 464  HOH H 497                                          \"+ newline;\n\t\tbindingSite.toPDB(buf);\n\t\tString result = buf.toString();\n//        System.out.println(\"Expected:\");\n//        System.out.println(expResult);\n//        System.out.println(\"Got:\");\n//        System.out.println(result);\n\t\tAssert.assertEquals(expResult, result);\n\t}\n\n\n\t\t/**\n\t * Test of toPDB method, of class Site.\n\t */\n\t@Test\n\tpublic void testRemark800ToPDB_0args() {\n//        System.out.println(\"remark800toPDB_0args\");\n\t\tString expResult =  \"REMARK 800 SITE_IDENTIFIER: CAT                                                 \" + newline +\n\t\t\t\t\t\t\t\"REMARK 800 EVIDENCE_CODE: UNKNOWN                                               \" + newline +\n\t\t\t\t\t\t\t\"REMARK 800 SITE_DESCRIPTION: ACTIVE SITE                                        \" + newline;\n\t\tString result = catSite.remark800toPDB();\n//        System.out.println(result);\n\t\tAssert.assertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of toPDB method, of class Site.\n\t */\n\t@Test\n\tpublic void testRemark800ToPDB_StringBuffer() {\n//        System.out.println(\"remark800toPDB\");\n\t\tStringBuffer buf = new StringBuffer(\"\");\n\t\tString expResult =  \"REMARK 800 SITE_IDENTIFIER: CAT                                                 \" + newline +\n\t\t\t\t\t\t\t\"REMARK 800 EVIDENCE_CODE: UNKNOWN                                               \" + newline +\n\t\t\t\t\t\t\t\"REMARK 800 SITE_DESCRIPTION: ACTIVE SITE                                        \" + newline;\n\t\tcatSite.remark800toPDB(buf);\n\t\tString result = buf.toString();\n//        System.out.println(result);\n\t\tAssert.assertEquals(expResult, result);\n\t}\n\n\n\n\t/**\n\t * Test of getSiteID method, of class Site.\n\t */\n\t@Test\n\tpublic void testGetSiteID() {\n//        System.out.println(\"getSiteID\");\n\t\tString expResult = \"CAT\";\n\t\tString result = catSite.getSiteID();\n\t\tAssert.assertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of getGroups method, of class Site.\n\t */\n\t@Test\n\tpublic void testGetGroups() {\n//        System.out.println(\"getGroups\");\n\t\tList<Group> expResult = bindingSiteGroups;\n\t\tList<Group> result = bindingSite.getGroups();\n\t\tAssert.assertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test to see how the groups have been set in the Groups list\n\t */\n\t@Test\n\tpublic void testGroup() {\n\t\tList<Group> result = bindingSite.getGroups();\n\t\tGroup arg221 = result.get(0);\n\t\tResidueNumber testResNum = new ResidueNumber(\"H\", 221, 'A');\n\t\tAssert.assertEquals(testResNum, arg221.getResidueNumber());\n\t\t//test the chainId is also set\n\t\tAssert.assertEquals(\"H\", arg221.getChainId());\n\n\n\t\tGroup hoh403 = null;\n\n\t\tfor (Group group : result) {\n\t\t\tif (group.getResidueNumber().getSeqNum() == 403) {\n\t\t\t\thoh403 = group;\n\t\t\t}\n\t\t}\n\n\t\tResidueNumber testResNum2 = new ResidueNumber(\"H\", 403, ' ');\n//        testResNum2.setChainId(\"H\");\n//        testResNum2.setSeqNum(403);\n//        testResNum2.setInsCode(\"\");\n//        System.out.println(hoh403);\n\t\tAssert.assertEquals(testResNum2, hoh403.getResidueNumber());\n\t\t//test the chaiId is also set\n\t\tAssert.assertEquals(\"H\", hoh403.getChainId());\n\t}\n}\n","changedTest":"","commitMessage":"Just update of the format I write my name","test_commitMessage":"","allZero":true}