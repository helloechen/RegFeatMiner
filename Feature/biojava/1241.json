{"repository":"biojava","prod_path":"biojava3-core/src/main/java/org/biojava3/core/sequence/io/FastaWriter.java","test_path":"biojava3-core/src/test/java/org/biojava3/core/sequence/io/FastaWriterTest.java","prod_time":"2010-07-20 01:24:24","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":3,"add_classname_line":0,"add_condition_line":1,"add_field_line":0,"add_import_line":2,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":2,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"588305e3009ba20809aa39a93d43063a7f77b0af","test_commitID":"","isfound":"not found test change","originPro":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage org.biojava3.core.sequence.io;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.OutputStream;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\n\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\nimport org.biojava3.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava3.core.sequence.io.template.FastaHeaderFormatInterface;\nimport org.biojava3.core.sequence.template.Compound;\nimport org.biojava3.core.sequence.template.Sequence;\n\n/**\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class FastaWriter<S extends Sequence<?>, C extends Compound> {\n\n    OutputStream os;\n    Collection<S> sequences;\n    FastaHeaderFormatInterface<S,C> headerFormat;\n    private int lineLength = 60;\n\n    public FastaWriter(OutputStream os, Collection<S> sequences, FastaHeaderFormatInterface<S,C> headerFormat) {\n        this.os = os;\n        this.sequences = sequences;\n        this.headerFormat = headerFormat;\n    }\n\n    public FastaWriter(OutputStream os, Collection<S> sequences, FastaHeaderFormatInterface<S,C> headerFormat, int lineLength) {\n      this.os = os;\n      this.sequences = sequences;\n      this.headerFormat = headerFormat;\n      this.lineLength = lineLength;\n  }\n\n    public void process() throws Exception {\n      int lineLength = getLineLength();\n      byte[] lineSep = System.getProperty(\"line.separator\").getBytes();\n\n      for (S sequence : sequences) {\n          String header = headerFormat.getHeader(sequence);\n          os.write('>');\n          os.write(header.getBytes());\n          os.write(lineSep);\n\n          int compoundCount = 1;\n\n          for(Compound c: sequence) {\n            os.write(c.getShortName().getBytes());\n            if(compoundCount == lineLength) {\n              os.write(lineSep);\n              compoundCount = 1;\n            }\n            compoundCount++;\n          }\n\n          //If we had sequence which was a reciprocal of line length\n          //then don't write the line terminator as this has already written\n          //it\n          if( (sequence.getLength() % getLineLength()) != 0) {\n            os.write(lineSep);\n          }\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            FileInputStream is = new FileInputStream(\"/Users/Scooter/mutualinformation/project/nuclear_receptor/PF00104_small.fasta\");\n\n\n            FastaReader<ProteinSequence,AminoAcidCompound> fastaReader = new FastaReader<ProteinSequence,AminoAcidCompound>(is, new GenericFastaHeaderParser<ProteinSequence,AminoAcidCompound>(), new ProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet()));\n            LinkedHashMap<String,ProteinSequence> proteinSequences = fastaReader.process();\n            is.close();\n\n\n            System.out.println(proteinSequences);\n\n            FileOutputStream fileOutputStream = new FileOutputStream(\"/Users/Scooter/mutualinformation/project/nuclear_receptor/PF00104_small_test.fasta\");\n\n            FastaWriter<ProteinSequence, AminoAcidCompound> fastaWriter = new FastaWriter<ProteinSequence, AminoAcidCompound>(fileOutputStream,proteinSequences.values(),new GenericFastaHeaderFormat<ProteinSequence, AminoAcidCompound>());\n            fastaWriter.process();\n            fileOutputStream.close();\n\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * @return the lineLength\n     */\n    public int getLineLength() {\n        return lineLength;\n    }\n\n    /**\n     * @param lineLength the lineLength to set\n     */\n    public void setLineLength(int lineLength) {\n        this.lineLength = lineLength;\n    }\n}\n","changedPro":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage org.biojava3.core.sequence.io;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.OutputStream;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\nimport org.biojava3.core.sequence.GeneSequence;\n\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.TranscriptSequence;\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\nimport org.biojava3.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava3.core.sequence.io.template.FastaHeaderFormatInterface;\nimport org.biojava3.core.sequence.template.Compound;\nimport org.biojava3.core.sequence.template.Sequence;\n\n/**\n * \n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class FastaWriter<S extends Sequence<?>, C extends Compound> {\n\n    OutputStream os;\n    Collection<S> sequences;\n    FastaHeaderFormatInterface<S, C> headerFormat;\n    private int lineLength = 60;\n\n    public FastaWriter(OutputStream os, Collection<S> sequences, FastaHeaderFormatInterface<S, C> headerFormat) {\n        this.os = os;\n        this.sequences = sequences;\n        this.headerFormat = headerFormat;\n    }\n\n    public FastaWriter(OutputStream os, Collection<S> sequences, FastaHeaderFormatInterface<S, C> headerFormat, int lineLength) {\n        this.os = os;\n        this.sequences = sequences;\n        this.headerFormat = headerFormat;\n        this.lineLength = lineLength;\n    }\n\n    public void process() throws Exception {\n\n        byte[] lineSep = System.getProperty(\"line.separator\").getBytes();\n\n        for (S sequence : sequences) {\n            String header = headerFormat.getHeader(sequence);\n            os.write('>');\n            os.write(header.getBytes());\n            os.write(lineSep);\n\n            int compoundCount = 0;\n            String seq = \"\";\n\n            seq = sequence.getSequenceAsString();\n\n            for (int i = 0; i < seq.length(); i++) {\n                os.write(seq.charAt(i));\n                compoundCount++;\n                if (compoundCount == lineLength) {\n                    os.write(lineSep);\n                    compoundCount = 0;\n                }\n\n            }\n//          for(Compound c: sequence) {\n//            os.write(c.getShortName().getBytes());\n//            compoundCount++;\n//            if(compoundCount == lineLength) {\n//              os.write(lineSep);\n//              compoundCount = 0;\n//            }\n\n//          }\n\n            //If we had sequence which was a reciprocal of line length\n            //then don't write the line terminator as this has already written\n            //it\n            if ((sequence.getLength() % getLineLength()) != 0) {\n                os.write(lineSep);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            FileInputStream is = new FileInputStream(\"/Users/Scooter/mutualinformation/project/nuclear_receptor/PF00104_small.fasta\");\n\n\n            FastaReader<ProteinSequence, AminoAcidCompound> fastaReader = new FastaReader<ProteinSequence, AminoAcidCompound>(is, new GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>(), new ProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet()));\n            LinkedHashMap<String, ProteinSequence> proteinSequences = fastaReader.process();\n            is.close();\n\n\n            System.out.println(proteinSequences);\n\n            FileOutputStream fileOutputStream = new FileOutputStream(\"/Users/Scooter/mutualinformation/project/nuclear_receptor/PF00104_small_test.fasta\");\n\n            FastaWriter<ProteinSequence, AminoAcidCompound> fastaWriter = new FastaWriter<ProteinSequence, AminoAcidCompound>(fileOutputStream, proteinSequences.values(), new GenericFastaHeaderFormat<ProteinSequence, AminoAcidCompound>());\n            fastaWriter.process();\n            fileOutputStream.close();\n\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * @return the lineLength\n     */\n    public int getLineLength() {\n        return lineLength;\n    }\n\n    /**\n     * @param lineLength the lineLength to set\n     */\n    public void setLineLength(int lineLength) {\n        this.lineLength = lineLength;\n    }\n}\n","originTest":"package org.biojava3.core.sequence.io;\n\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\n\nimport java.io.ByteArrayOutputStream;\n\nimport org.biojava3.core.sequence.AccessionID;\nimport org.biojava3.core.sequence.DNASequence;\nimport org.junit.Test;\n\npublic class FastaWriterTest {\n\n  @Test\n  public void writeBasicFasta() throws Exception {\n    String id         = \"Example\";\n    String dnaLineOne = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n    String dnaLineTwo = \"T\";\n\n    DNASequence s = new DNASequence(dnaLineOne+dnaLineTwo);\n    s.setAccession(new AccessionID(id));\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    FastaWriterHelper.writeSequence(baos, s);\n\n    String actual = new String(baos.toByteArray());\n    String expected = String.format(\">%s%n%s%n%s%n\", id, dnaLineOne, dnaLineTwo);\n\n    assertThat(\"Writer not as expected\", actual, is(expected));\n  }\n\n  @Test\n  public void writeFastaEqualToLineLength() throws Exception {\n    String id  = \"Example\";\n    String dna = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT\";\n\n    DNASequence s = new DNASequence(dna);\n    s.setAccession(new AccessionID(id));\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    FastaWriterHelper.writeSequence(baos, s);\n\n    String actual = new String(baos.toByteArray());\n    String expected = String.format(\">%s%n%s%n\", id, dna);\n\n    assertThat(\"Writer not as expected\", actual, is(expected));\n  }\n\n}\n","changedTest":"","commitMessage":"\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8111 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"","allZero":false}