{"repository":"biojava","prod_path":"biojava-core/src/main/java/org/biojava/nbio/core/search/io/blast/BlastXMLParser.java","test_path":"biojava-core/src/test/java/org/biojava/nbio/core/search/io/blast/BlastXMLParserTest.java","prod_time":"2015-10-09 17:07:13","test_time":"2015-10-09 17:07:13","type":"RENAME","proType":"RENAME","add_annotation_line":0,"add_call_line":5,"add_classname_line":1,"add_condition_line":0,"add_field_line":1,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":2,"del_call_line":23,"del_classname_line":1,"del_condition_line":2,"del_field_line":1,"del_import_line":1,"del_packageid_line":0,"del_parameter_line":2,"del_return_line":1,"label":"POSITIVE","prod_commitID":"f059f0e1573710c7e29b18de8cf26374ca7fecee","test_commitID":"f059f0e1573710c7e29b18de8cf26374ca7fecee","isfound":"found test change","originPro":"package org.biojava.nbio.core.search.io.blast;\r\n\r\n\r\nimport org.biojava.nbio.core.search.io.Hit;\r\nimport org.biojava.nbio.core.search.io.Hsp;\r\nimport org.biojava.nbio.core.search.io.Result;\r\nimport org.biojava.nbio.core.search.io.ResultFactory;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.xml.parsers.ParserConfigurationException;\r\nimport javax.xml.xpath.XPathException;\r\nimport org.biojava.nbio.core.sequence.template.Sequence;\r\nimport org.biojava.nbio.core.util.XMLHelper;\r\nimport org.w3c.dom.Document;\r\nimport org.w3c.dom.Element;\r\nimport org.xml.sax.SAXException;\r\n\r\n/**\r\n * Re-designed by Paolo Pavan.\r\n * You may want to find my contacts on Github and LinkedIn for code info \r\n * or discuss major changes.\r\n * https://github.com/paolopavan\r\n * \r\n *\r\n * @author Scooter Willis <willishf at gmail dot com>\r\n * @author Paolo Pavan\r\n */\r\npublic class BlastXMLQuery implements ResultFactory {\r\n    private static final Logger log = Logger.getLogger(BlastXMLQuery.class.getName());\r\n    Document blastDoc = null;\r\n    private File targetFile;\r\n    private List<Sequence> queryReferences, databaseReferences;\r\n    private Map<String,Sequence> queryReferencesMap, databaseReferencesMap;\r\n    \r\n    @Deprecated\r\n    public BlastXMLQuery(String blastFile) throws Exception {\r\n        readFile(blastFile);\r\n    }\r\n    \r\n    public BlastXMLQuery() {\r\n        \r\n    }\r\n    public void setFile(File f){\r\n        targetFile = f;\r\n    }\r\n    /**\r\n     * \r\n     * @param maxEScore\r\n     * @return\r\n     * @throws Exception \r\n     */\r\n    @Deprecated\r\n    public LinkedHashMap<String, ArrayList<String>> getHitsQueryDef(double maxEScore) throws Exception {\r\n        LinkedHashMap<String, ArrayList<String>> hitsHashMap = new LinkedHashMap<String, ArrayList<String>>();\r\n        log.info(\"Query for hits\");\r\n        ArrayList<Element> elementList = XMLHelper.selectElements(blastDoc.getDocumentElement(), \"BlastOutput_iterations/Iteration[Iteration_hits]\");\r\n        log.info(elementList.size() + \" hits\");\r\n\r\n        for (Element element : elementList) {\r\n            Element iterationquerydefElement = XMLHelper.selectSingleElement(element, \"Iteration_query-def\");\r\n            String querydef = iterationquerydefElement.getTextContent();\r\n            Element iterationHitsElement = XMLHelper.selectSingleElement(element, \"Iteration_hits\");\r\n            ArrayList<Element> hitList = XMLHelper.selectElements(iterationHitsElement, \"Hit\");\r\n            for (Element hitElement : hitList) {\r\n                Element hitaccessionElement = XMLHelper.selectSingleElement(hitElement, \"Hit_accession\");\r\n                String hitaccession = hitaccessionElement.getTextContent();\r\n                Element hithspsElement = XMLHelper.selectSingleElement(hitElement, \"Hit_hsps\");\r\n                ArrayList<Element> hspList = XMLHelper.selectElements(hithspsElement, \"Hsp\");\r\n                for (Element hspElement : hspList) {\r\n                    Element evalueElement = XMLHelper.selectSingleElement(hspElement, \"Hsp_evalue\");\r\n                    String value = evalueElement.getTextContent();\r\n                    double evalue = Double.parseDouble(value);\r\n                    if (evalue <= maxEScore) {\r\n                        ArrayList<String> hits = hitsHashMap.get(querydef);\r\n                        if (hits == null) {\r\n                            hits = new ArrayList<String>();\r\n                            hitsHashMap.put(querydef, hits);\r\n                        }\r\n                        hits.add(hitaccession);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return hitsHashMap;\r\n    }\r\n    \r\n    private void readFile(String blastFile) throws IOException, ParseException{\r\n        log.info(\"Start reading \" + blastFile);\r\n        try {\r\n            blastDoc = XMLHelper.loadXML(blastFile);\r\n        } catch (SAXException ex) {\r\n            Logger.getLogger(BlastXMLQuery.class.getName()).log(Level.SEVERE, null, ex);\r\n            throw new ParseException(ex.getMessage(),0);\r\n        } catch (ParserConfigurationException ex) {\r\n            Logger.getLogger(BlastXMLQuery.class.getName()).log(Level.SEVERE, null, ex);\r\n            throw new ParseException(ex.getMessage(),0);\r\n        }\r\n        log.info(\"Read finished\");\r\n    }\r\n    \r\n    public List<Result> createObjects(double maxEScore) throws IOException, ParseException {\r\n        if (targetFile == null) throw new IllegalStateException(\"File to be parsed not specified.\");\r\n        \r\n        // getAbsolutePath throws SecurityException\r\n        readFile(targetFile.getAbsolutePath());\r\n        // create mappings between sequences and blast id\r\n        mapIds();\r\n        \r\n        ArrayList<Result> resultsCollection;\r\n        ArrayList<Hit> hitsCollection;\r\n        ArrayList<Hsp> hspsCollection;\r\n        \r\n        try {\r\n            // select top level elements\r\n            String program = XMLHelper.selectSingleElement(blastDoc.getDocumentElement(),\"BlastOutput_program\").getTextContent();\r\n            String version = XMLHelper.selectSingleElement(blastDoc.getDocumentElement(),\"BlastOutput_version\").getTextContent();\r\n            String reference = XMLHelper.selectSingleElement(blastDoc.getDocumentElement(),\"BlastOutput_reference\").getTextContent();\r\n            String dbFile = XMLHelper.selectSingleElement(blastDoc.getDocumentElement(),\"BlastOutput_db\").getTextContent();\r\n\r\n            log.info(\"Query for hits\");\r\n            ArrayList<Element> IterationsList = XMLHelper.selectElements(blastDoc.getDocumentElement(), \"BlastOutput_iterations/Iteration[Iteration_hits]\");\r\n            log.info(IterationsList.size() + \" results\");\r\n\r\n            resultsCollection = new ArrayList();\r\n            for (Element element : IterationsList) {\r\n                BlastResultBuilder resultBuilder = new BlastResultBuilder();\r\n                // will add BlastOutput* key sections in the result object\r\n                resultBuilder\r\n                    .setProgram(program)\r\n                    .setVersion(version)\r\n                    .setReference(reference)\r\n                    .setDbFile(dbFile);\r\n\r\n                // Iteration* section keys:\r\n                resultBuilder\r\n                    .setIterationNumber(new Integer(XMLHelper.selectSingleElement(element,\"Iteration_iter-num\").getTextContent()))\r\n                    .setQueryID(XMLHelper.selectSingleElement(element,\"Iteration_query-ID\").getTextContent())\r\n                    .setQueryDef(XMLHelper.selectSingleElement(element, \"Iteration_query-def\").getTextContent())\r\n                    .setQueryLength(new Integer(XMLHelper.selectSingleElement(element,\"Iteration_query-len\").getTextContent()));\r\n                \r\n                if (queryReferences != null) resultBuilder.setQuerySequence(queryReferencesMap.get(\r\n                        XMLHelper.selectSingleElement(element,\"Iteration_query-ID\").getTextContent()\r\n                ));\r\n\r\n\r\n\r\n                Element iterationHitsElement = XMLHelper.selectSingleElement(element, \"Iteration_hits\");\r\n                ArrayList<Element> hitList = XMLHelper.selectElements(iterationHitsElement, \"Hit\");\r\n\r\n                hitsCollection = new ArrayList();\r\n                for (Element hitElement : hitList) {\r\n                    BlastHitBuilder blastHitBuilder = new BlastHitBuilder();\r\n                    blastHitBuilder\r\n                        .setHitNum(new Integer(XMLHelper.selectSingleElement(hitElement, \"Hit_num\").getTextContent()))\r\n                        .setHitId(XMLHelper.selectSingleElement(hitElement, \"Hit_id\").getTextContent())\r\n                        .setHitDef(XMLHelper.selectSingleElement(hitElement, \"Hit_def\").getTextContent())\r\n                        .setHitAccession(XMLHelper.selectSingleElement(hitElement, \"Hit_accession\").getTextContent())\r\n                        .setHitLen(new Integer(XMLHelper.selectSingleElement(hitElement, \"Hit_len\").getTextContent()));\r\n                    \r\n                    if (databaseReferences != null) blastHitBuilder.setHitSequence(databaseReferencesMap.get(\r\n                        XMLHelper.selectSingleElement(hitElement, \"Hit_id\").getTextContent()\r\n                    ));\r\n\r\n                    Element hithspsElement = XMLHelper.selectSingleElement(hitElement, \"Hit_hsps\");\r\n                    ArrayList<Element> hspList = XMLHelper.selectElements(hithspsElement, \"Hsp\");\r\n\r\n                    hspsCollection = new ArrayList();\r\n                    for (Element hspElement : hspList) {\r\n                        Double evalue = new Double(XMLHelper.selectSingleElement(hspElement, \"Hsp_evalue\").getTextContent());\r\n\r\n                        // add the new hsp only if it pass the specified threshold. It can save lot of memory and some parsing time\r\n                        if (evalue <= maxEScore) {\r\n                            BlastHspBuilder blastHspBuilder = new BlastHspBuilder();\r\n                            blastHspBuilder\r\n                                .setHspNum(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_num\").getTextContent()))\r\n                                .setHspBitScore(new Double(XMLHelper.selectSingleElement(hspElement, \"Hsp_bit-score\").getTextContent()))\r\n                                .setHspScore(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_score\").getTextContent()))\r\n                                .setHspEvalue(evalue)\r\n                                .setHspQueryFrom(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_query-from\").getTextContent()))\r\n                                .setHspQueryTo(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_query-to\").getTextContent()))\r\n                                .setHspHitFrom(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_hit-from\").getTextContent()))\r\n                                .setHspHitTo(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_hit-to\").getTextContent()))\r\n                                .setHspQueryFrame(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_query-frame\").getTextContent()))\r\n                                .setHspHitFrame(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_hit-frame\").getTextContent()))\r\n                                .setHspIdentity(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_identity\").getTextContent()))\r\n                                .setHspPositive(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_positive\").getTextContent()))\r\n                                .setHspGaps(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_gaps\").getTextContent()))\r\n                                .setHspAlignLen(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_align-len\").getTextContent()))\r\n                                .setHspQseq(XMLHelper.selectSingleElement(hspElement, \"Hsp_qseq\").getTextContent())\r\n                                .setHspHseq(XMLHelper.selectSingleElement(hspElement, \"Hsp_hseq\").getTextContent())\r\n                                .setHspIdentityString(XMLHelper.selectSingleElement(hspElement, \"Hsp_midline\").getTextContent());\r\n\r\n                            hspsCollection.add(blastHspBuilder.createBlastHsp());\r\n                        }\r\n                    }\r\n                    // finally set the computed hsp collection and create Hit object\r\n                    blastHitBuilder.setHsps(hspsCollection);\r\n                    hitsCollection.add(blastHitBuilder.createBlastHit());\r\n                }\r\n                // finally set the computed Hit collection to the result\r\n                resultBuilder.setHits(hitsCollection);\r\n                resultsCollection.add(resultBuilder.createBlastResult());\r\n            }\r\n        } catch (XPathException e) {\r\n            throw new ParseException(e.getMessage(),0);\r\n        }\r\n        log.info(\"Parsing finished.\");\r\n        \r\n        return resultsCollection;\r\n    }\r\n    \r\n    public List<String> getFileExtensions(){\r\n        ArrayList<String> extensions = new ArrayList(1);\r\n        extensions.add(\"blastxml\");\r\n        return extensions;\r\n    }\r\n\r\n    @Override\r\n    public void setQueryReferences(List sequences) {\r\n        queryReferences = sequences;\r\n    }\r\n\r\n    @Override\r\n    public void setDatabaseReferences(List sequences) {\r\n        databaseReferences = sequences;\r\n    }\r\n    \r\n    /**\r\n     * fill the map association between sequences an a unique id\r\n     */\r\n    private void mapIds() {\r\n        if (queryReferences != null) {\r\n            queryReferencesMap = new HashMap(queryReferences.size());\r\n            for (int counter=0; counter < queryReferences.size() ; counter ++){\r\n                String id = \"Query_\"+(counter+1);\r\n                queryReferencesMap.put(id, queryReferences.get(counter));\r\n            }  \r\n        }\r\n        \r\n        if (databaseReferences != null) {\r\n            databaseReferencesMap = new HashMap(databaseReferences.size());\r\n            for (int counter=0; counter < databaseReferences.size() ; counter ++){\r\n                // this is strange: while Query_id are 1 based, Hit (database) id are 0 based\r\n                String id = \"gnl|BL_ORD_ID|\"+(counter);\r\n                databaseReferencesMap.put(id, databaseReferences.get(counter));\r\n            }  \r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void storeObjects(List<Result> results) throws IOException, ParseException {\r\n        throw new UnsupportedOperationException(\"This parser does not support writing yet.\");\r\n    }\r\n}\r\n\r\n\r\nclass BlastHsp extends org.biojava.nbio.core.search.io.Hsp {\r\n    public BlastHsp(int hspNum, double hspBitScore, int hspScore, double hspEvalue, int hspQueryFrom, int hspQueryTo, int hspHitFrom, int hspHitTo, int hspQueryFrame, int hspHitFrame, int hspIdentity, int hspPositive, int hspGaps, int hspAlignLen, String hspQseq, String hspHseq, String hspIdentityString, Double percentageIdentity, Integer mismatchCount) {\r\n        super(hspNum, hspBitScore, hspScore, hspEvalue, hspQueryFrom, hspQueryTo, hspHitFrom, hspHitTo, hspQueryFrame, hspHitFrame, hspIdentity, hspPositive, hspGaps, hspAlignLen, hspQseq, hspHseq, hspIdentityString, percentageIdentity, mismatchCount);\r\n    }\r\n    \r\n}\r\n\r\nclass BlastHit extends org.biojava.nbio.core.search.io.Hit {\r\n    public BlastHit(int hitNum, String hitId, String hitDef, String hitAccession, int hitLen, List<Hsp> hitHsps, Sequence hitSequence) {\r\n        super(hitNum, hitId, hitDef, hitAccession, hitLen, hitHsps, hitSequence);\r\n    }\r\n    \r\n}","changedPro":"package org.biojava.nbio.core.search.io.blast;\n\n\nimport org.biojava.nbio.core.search.io.Hit;\nimport org.biojava.nbio.core.search.io.Hsp;\nimport org.biojava.nbio.core.search.io.Result;\nimport org.biojava.nbio.core.search.io.ResultFactory;\nimport java.io.File;\nimport java.io.IOException;\nimport java.text.ParseException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.xpath.XPathException;\nimport org.biojava.nbio.core.sequence.template.Sequence;\nimport org.biojava.nbio.core.util.XMLHelper;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.xml.sax.SAXException;\n\n/**\n * Re-designed by Paolo Pavan on the footprint of: \n * org.biojava.nbio.genome.query.BlastXMLQuery by Scooter Willis <willishf at gmail dot com>\n * \n * You may want to find my contacts on Github and LinkedIn for code info \n * or discuss major changes.\n * https://github.com/paolopavan\n * \n *\n * @author Paolo Pavan\n */\npublic class BlastXMLParser implements ResultFactory {\n    private static final Logger log = Logger.getLogger(BlastXMLParser.class.getName());\n    Document blastDoc = null;\n    private File targetFile;\n    private List<Sequence> queryReferences, databaseReferences;\n    private Map<String,Sequence> queryReferencesMap, databaseReferencesMap;\n    \n    public BlastXMLParser() {\n        \n    }\n    public void setFile(File f){\n        targetFile = f;\n    }\n    \n    private void readFile(String blastFile) throws IOException, ParseException{\n        log.info(\"Start reading \" + blastFile);\n        try {\n            blastDoc = XMLHelper.loadXML(blastFile);\n        } catch (SAXException ex) {\n            Logger.getLogger(BlastXMLParser.class.getName()).log(Level.SEVERE, null, ex);\n            throw new ParseException(ex.getMessage(),0);\n        } catch (ParserConfigurationException ex) {\n            Logger.getLogger(BlastXMLParser.class.getName()).log(Level.SEVERE, null, ex);\n            throw new ParseException(ex.getMessage(),0);\n        }\n        log.info(\"Read finished\");\n    }\n    \n    public List<Result> createObjects(double maxEScore) throws IOException, ParseException {\n        if (targetFile == null) throw new IllegalStateException(\"File to be parsed not specified.\");\n        \n        // getAbsolutePath throws SecurityException\n        readFile(targetFile.getAbsolutePath());\n        // create mappings between sequences and blast id\n        mapIds();\n        \n        ArrayList<Result> resultsCollection;\n        ArrayList<Hit> hitsCollection;\n        ArrayList<Hsp> hspsCollection;\n        \n        try {\n            // select top level elements\n            String program = XMLHelper.selectSingleElement(blastDoc.getDocumentElement(),\"BlastOutput_program\").getTextContent();\n            String version = XMLHelper.selectSingleElement(blastDoc.getDocumentElement(),\"BlastOutput_version\").getTextContent();\n            String reference = XMLHelper.selectSingleElement(blastDoc.getDocumentElement(),\"BlastOutput_reference\").getTextContent();\n            String dbFile = XMLHelper.selectSingleElement(blastDoc.getDocumentElement(),\"BlastOutput_db\").getTextContent();\n\n            log.info(\"Query for hits in \"+ targetFile);\n            ArrayList<Element> IterationsList = XMLHelper.selectElements(blastDoc.getDocumentElement(), \"BlastOutput_iterations/Iteration[Iteration_hits]\");\n            log.info(IterationsList.size() + \" results\");\n\n            resultsCollection = new ArrayList();\n            for (Element element : IterationsList) {\n                BlastResultBuilder resultBuilder = new BlastResultBuilder();\n                // will add BlastOutput* key sections in the result object\n                resultBuilder\n                    .setProgram(program)\n                    .setVersion(version)\n                    .setReference(reference)\n                    .setDbFile(dbFile);\n\n                // Iteration* section keys:\n                resultBuilder\n                    .setIterationNumber(new Integer(XMLHelper.selectSingleElement(element,\"Iteration_iter-num\").getTextContent()))\n                    .setQueryID(XMLHelper.selectSingleElement(element,\"Iteration_query-ID\").getTextContent())\n                    .setQueryDef(XMLHelper.selectSingleElement(element, \"Iteration_query-def\").getTextContent())\n                    .setQueryLength(new Integer(XMLHelper.selectSingleElement(element,\"Iteration_query-len\").getTextContent()));\n                \n                if (queryReferences != null) resultBuilder.setQuerySequence(queryReferencesMap.get(\n                        XMLHelper.selectSingleElement(element,\"Iteration_query-ID\").getTextContent()\n                ));\n\n\n\n                Element iterationHitsElement = XMLHelper.selectSingleElement(element, \"Iteration_hits\");\n                ArrayList<Element> hitList = XMLHelper.selectElements(iterationHitsElement, \"Hit\");\n\n                hitsCollection = new ArrayList();\n                for (Element hitElement : hitList) {\n                    BlastHitBuilder blastHitBuilder = new BlastHitBuilder();\n                    blastHitBuilder\n                        .setHitNum(new Integer(XMLHelper.selectSingleElement(hitElement, \"Hit_num\").getTextContent()))\n                        .setHitId(XMLHelper.selectSingleElement(hitElement, \"Hit_id\").getTextContent())\n                        .setHitDef(XMLHelper.selectSingleElement(hitElement, \"Hit_def\").getTextContent())\n                        .setHitAccession(XMLHelper.selectSingleElement(hitElement, \"Hit_accession\").getTextContent())\n                        .setHitLen(new Integer(XMLHelper.selectSingleElement(hitElement, \"Hit_len\").getTextContent()));\n                    \n                    if (databaseReferences != null) blastHitBuilder.setHitSequence(databaseReferencesMap.get(\n                        XMLHelper.selectSingleElement(hitElement, \"Hit_id\").getTextContent()\n                    ));\n\n                    Element hithspsElement = XMLHelper.selectSingleElement(hitElement, \"Hit_hsps\");\n                    ArrayList<Element> hspList = XMLHelper.selectElements(hithspsElement, \"Hsp\");\n\n                    hspsCollection = new ArrayList();\n                    for (Element hspElement : hspList) {\n                        Double evalue = new Double(XMLHelper.selectSingleElement(hspElement, \"Hsp_evalue\").getTextContent());\n\n                        // add the new hsp only if it pass the specified threshold. It can save lot of memory and some parsing time\n                        if (evalue <= maxEScore) {\n                            BlastHspBuilder blastHspBuilder = new BlastHspBuilder();\n                            blastHspBuilder\n                                .setHspNum(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_num\").getTextContent()))\n                                .setHspBitScore(new Double(XMLHelper.selectSingleElement(hspElement, \"Hsp_bit-score\").getTextContent()))\n                                .setHspScore(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_score\").getTextContent()))\n                                .setHspEvalue(evalue)\n                                .setHspQueryFrom(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_query-from\").getTextContent()))\n                                .setHspQueryTo(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_query-to\").getTextContent()))\n                                .setHspHitFrom(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_hit-from\").getTextContent()))\n                                .setHspHitTo(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_hit-to\").getTextContent()))\n                                .setHspQueryFrame(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_query-frame\").getTextContent()))\n                                .setHspHitFrame(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_hit-frame\").getTextContent()))\n                                .setHspIdentity(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_identity\").getTextContent()))\n                                .setHspPositive(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_positive\").getTextContent()))\n                                .setHspGaps(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_gaps\").getTextContent()))\n                                .setHspAlignLen(new Integer(XMLHelper.selectSingleElement(hspElement, \"Hsp_align-len\").getTextContent()))\n                                .setHspQseq(XMLHelper.selectSingleElement(hspElement, \"Hsp_qseq\").getTextContent())\n                                .setHspHseq(XMLHelper.selectSingleElement(hspElement, \"Hsp_hseq\").getTextContent())\n                                .setHspIdentityString(XMLHelper.selectSingleElement(hspElement, \"Hsp_midline\").getTextContent());\n\n                            hspsCollection.add(blastHspBuilder.createBlastHsp());\n                        }\n                    }\n                    // finally set the computed hsp collection and create Hit object\n                    blastHitBuilder.setHsps(hspsCollection);\n                    hitsCollection.add(blastHitBuilder.createBlastHit());\n                }\n                // finally set the computed Hit collection to the result\n                resultBuilder.setHits(hitsCollection);\n                resultsCollection.add(resultBuilder.createBlastResult());\n            }\n        } catch (XPathException e) {\n            throw new ParseException(e.getMessage(),0);\n        }\n        log.info(\"Parsing of \"+targetFile+\" finished.\");\n        \n        return resultsCollection;\n    }\n    \n    public List<String> getFileExtensions(){\n        ArrayList<String> extensions = new ArrayList(1);\n        extensions.add(\"blastxml\");\n        return extensions;\n    }\n\n    @Override\n    public void setQueryReferences(List sequences) {\n        queryReferences = sequences;\n    }\n\n    @Override\n    public void setDatabaseReferences(List sequences) {\n        databaseReferences = sequences;\n    }\n    \n    /**\n     * fill the map association between sequences an a unique id\n     */\n    private void mapIds() {\n        if (queryReferences != null) {\n            queryReferencesMap = new HashMap(queryReferences.size());\n            for (int counter=0; counter < queryReferences.size() ; counter ++){\n                String id = \"Query_\"+(counter+1);\n                queryReferencesMap.put(id, queryReferences.get(counter));\n            }  \n        }\n        \n        if (databaseReferences != null) {\n            databaseReferencesMap = new HashMap(databaseReferences.size());\n            for (int counter=0; counter < databaseReferences.size() ; counter ++){\n                // this is strange: while Query_id are 1 based, Hit (database) id are 0 based\n                String id = \"gnl|BL_ORD_ID|\"+(counter);\n                databaseReferencesMap.put(id, databaseReferences.get(counter));\n            }  \n        }\n    }\n\n    @Override\n    public void storeObjects(List<Result> results) throws IOException, ParseException {\n        throw new UnsupportedOperationException(\"This parser does not support writing yet.\");\n    }\n}\n\n\nclass BlastHsp extends org.biojava.nbio.core.search.io.Hsp {\n    public BlastHsp(int hspNum, double hspBitScore, int hspScore, double hspEvalue, int hspQueryFrom, int hspQueryTo, int hspHitFrom, int hspHitTo, int hspQueryFrame, int hspHitFrame, int hspIdentity, int hspPositive, int hspGaps, int hspAlignLen, String hspQseq, String hspHseq, String hspIdentityString, Double percentageIdentity, Integer mismatchCount) {\n        super(hspNum, hspBitScore, hspScore, hspEvalue, hspQueryFrom, hspQueryTo, hspHitFrom, hspHitTo, hspQueryFrame, hspHitFrame, hspIdentity, hspPositive, hspGaps, hspAlignLen, hspQseq, hspHseq, hspIdentityString, percentageIdentity, mismatchCount);\n    }\n    \n}\n\nclass BlastHit extends org.biojava.nbio.core.search.io.Hit {\n    public BlastHit(int hitNum, String hitId, String hitDef, String hitAccession, int hitLen, List<Hsp> hitHsps, Sequence hitSequence) {\n        super(hitNum, hitId, hitDef, hitAccession, hitLen, hitHsps, hitSequence);\n    }\n    \n}","originTest":"/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\npackage org.biojava.nbio.core.search.io.blast;\r\n\r\nimport java.io.File;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport org.biojava.nbio.core.search.io.Hit;\r\nimport org.biojava.nbio.core.search.io.Hsp;\r\nimport org.biojava.nbio.core.search.io.Result;\r\nimport org.junit.After;\r\nimport org.junit.AfterClass;\r\nimport org.junit.Before;\r\nimport org.junit.BeforeClass;\r\nimport org.junit.Test;\r\nimport static org.junit.Assert.*;\r\nimport org.junit.Ignore;\r\n\r\n/**\r\n *\r\n * @author Paolo Pavan\r\n */\r\npublic class BlastXMLQueryTest {\r\n    \r\n    public BlastXMLQueryTest() {\r\n    }\r\n    \r\n    @BeforeClass\r\n    public static void setUpClass() {\r\n    }\r\n    \r\n    @AfterClass\r\n    public static void tearDownClass() {\r\n    }\r\n    \r\n    @Before\r\n    public void setUp() {\r\n    }\r\n    \r\n    @After\r\n    public void tearDown() {\r\n    }\r\n\r\n    /**\r\n     * Test of setFile method, of class BlastXMLQuery.\r\n     */\r\n    @Test\r\n    public void testSetFile() {\r\n        System.out.println(\"setFile\");\r\n        File f = null;\r\n        BlastXMLQuery instance = new BlastXMLQuery();\r\n        instance.setFile(f);\r\n    }\r\n\r\n    /**\r\n     * Test of createObjects method, of class BlastXMLQuery.\r\n     */\r\n    @Test\r\n    public void testCreateObjects() throws Exception {\r\n        System.out.println(\"createObjects\");\r\n        \r\n        String resource = \"/org/biojava/nbio/core/search/io/blast/small-blastReport.blastxml\";\r\n        URL resourceURL = getClass().getResource(resource);\r\n        File file = new File(resourceURL.getFile());\r\n        \r\n        BlastXMLQuery instance = new BlastXMLQuery();\r\n        instance.setFile(file);\r\n        \r\n        //instance.setQueryReferences(null);\r\n        //instance.setDatabaseReferences(null);\r\n        List<Result> result = instance.createObjects(1e-10);\r\n        \r\n        // test with random manual selected results\r\n        BlastHsp hsp1hit1res1 = new BlastHspBuilder()\r\n                .setHspNum(1)\r\n                .setHspBitScore(2894.82)\r\n                .setHspScore(1567)\r\n                .setHspEvalue(0)\r\n                .setHspQueryFrom(1)\r\n                .setHspQueryTo(1567)\r\n                .setHspHitFrom(616309)\r\n                .setHspHitTo(617875)\r\n                .setHspQueryFrame(1)\r\n                .setHspHitFrame(1)\r\n                .setHspIdentity(1567)\r\n                .setHspPositive(1567)\r\n                .setHspGaps(0)\r\n                .setHspAlignLen(1567)\r\n                .setHspQseq(\"TTAAATTGAGAGTTTGATCCTGGCTCAGGATGAACGCTGGTGGCGTGCCTAATACATGCAAGTCGTACGCTAGCCGCTGAATTGATCCTTCGGGTGAAGTGAGGCAATGACTAGAGTGGCGAACTGGTGAGTAACACGTAAGAAACCTGCCCTTTAGTGGGGGATAACATTTGGAAACAGATGCTAATACCGCGTAACAACAAATCACACATGTGATCTGTTTGAAAGGTCCTTTTGGATCGCTAGAGGATGGTCTTGCGGCGTATTAGCTTGTTGGTAGGGTAGAAGCCTACCAAGGCAATGATGCGTAGCCGAGTTGAGAGACTGGCCGGCCACATTGGGACTGAGACACTGCCCAAACTCCTACGGGAGGCTGCAGTAGGGAATTTTCCGCAATGCACGAAAGTGTGACGGAGCGACGCCGCGTGTGTGATGAAGGCTTTCGGGTCGTAAAGCACTGTTGTAAGGGAAGAATAACTGAATTCAGAGAAAGTTTTCAGCTTGACGGTACCTTACCAGAAAGGGATGGCTAAATACGTGCCAGCAGCCGCGGTAATACGTATGTCCCGAGCGTTATCCGGATTTATTGGGCGTAAAGCGAGCGCAGACGGTTTATTAAGTCTGATGTGAAATCCCGAGGCCCAACCTCGGAACTGCATTGGAAACTGATTTACTTGAGTGCGATAGAGGCAAGTGGAACTCCATGTGTAGCGGTGAAATGCGTAGATATGTGGAAGAACACCAGTGGCGAAAGCGGCTTGCTAGATCGTAACTGACGTTGAGGCTCGAAAGTATGGGTAGCAAACGGGATTAGATACCCCGGTAGTCCATACCGTAAACGATGGGTGCTAGTTGTTAAGAGGTTTCCGCCTCCTAGTGACGTAGCAAACGCATTAAGCACCCCGCCTGAGGAGTACGGCCGCAAGGCTAAAACTTAAAGGAATTGACGGGGACCCGCACAAGCGGTGGAGCATGTGGTTTAATTCGAAGATACGCGAAAAACCTTACCAGGTCTTGACATACCAATGATCGCTTTTGTAATGAAAGCTTTTCTTCGGAACATTGGATACAGGTGGTGCATGGTCGTCGTCAGCTCGTGTCGTGAGATGTTGGGTTAAGTCCCGCAACGAGCGCAACCCTTGTTATTAGTTGCCAGCATTTAGTTGGGCACTCTAATGAGACTGCCGGTGATAAACCGGAGGAAGGTGGGGACGACGTCAGATCATCATGCCCCTTATGACCTGGGCAACACACGTGCTACAATGGGAAGTACAACGAGTCGCAAACCGGCGACGGTAAGCTAATCTCTTAAAACTTCTCTCAGTTCGGACTGGAGTCTGCAACTCGACTCCACGAAGGCGGAATCGCTAGTAATCGCGAATCAGCATGTCGCGGTGAATACGTTCCCGGGTCTTGTACACACCGCCCGTCAAATCATGGGAGTCGGAAGTACCCAAAGTCGCTTGGCTAACTTTTAGAGGCCGGTGCCTAAGGTAAAATCGATGACTGGGATTAAGTCGTAACAAGGTAGCCGTAGGAGAACCTGCGGCTGGATCACCTCCTTTCT\")\r\n                .setHspHseq(\"TTAAATTGAGAGTTTGATCCTGGCTCAGGATGAACGCTGGTGGCGTGCCTAATACATGCAAGTCGTACGCTAGCCGCTGAATTGATCCTTCGGGTGAAGTGAGGCAATGACTAGAGTGGCGAACTGGTGAGTAACACGTAAGAAACCTGCCCTTTAGTGGGGGATAACATTTGGAAACAGATGCTAATACCGCGTAACAACAAATCACACATGTGATCTGTTTGAAAGGTCCTTTTGGATCGCTAGAGGATGGTCTTGCGGCGTATTAGCTTGTTGGTAGGGTAGAAGCCTACCAAGGCAATGATGCGTAGCCGAGTTGAGAGACTGGCCGGCCACATTGGGACTGAGACACTGCCCAAACTCCTACGGGAGGCTGCAGTAGGGAATTTTCCGCAATGCACGAAAGTGTGACGGAGCGACGCCGCGTGTGTGATGAAGGCTTTCGGGTCGTAAAGCACTGTTGTAAGGGAAGAATAACTGAATTCAGAGAAAGTTTTCAGCTTGACGGTACCTTACCAGAAAGGGATGGCTAAATACGTGCCAGCAGCCGCGGTAATACGTATGTCCCGAGCGTTATCCGGATTTATTGGGCGTAAAGCGAGCGCAGACGGTTTATTAAGTCTGATGTGAAATCCCGAGGCCCAACCTCGGAACTGCATTGGAAACTGATTTACTTGAGTGCGATAGAGGCAAGTGGAACTCCATGTGTAGCGGTGAAATGCGTAGATATGTGGAAGAACACCAGTGGCGAAAGCGGCTTGCTAGATCGTAACTGACGTTGAGGCTCGAAAGTATGGGTAGCAAACGGGATTAGATACCCCGGTAGTCCATACCGTAAACGATGGGTGCTAGTTGTTAAGAGGTTTCCGCCTCCTAGTGACGTAGCAAACGCATTAAGCACCCCGCCTGAGGAGTACGGCCGCAAGGCTAAAACTTAAAGGAATTGACGGGGACCCGCACAAGCGGTGGAGCATGTGGTTTAATTCGAAGATACGCGAAAAACCTTACCAGGTCTTGACATACCAATGATCGCTTTTGTAATGAAAGCTTTTCTTCGGAACATTGGATACAGGTGGTGCATGGTCGTCGTCAGCTCGTGTCGTGAGATGTTGGGTTAAGTCCCGCAACGAGCGCAACCCTTGTTATTAGTTGCCAGCATTTAGTTGGGCACTCTAATGAGACTGCCGGTGATAAACCGGAGGAAGGTGGGGACGACGTCAGATCATCATGCCCCTTATGACCTGGGCAACACACGTGCTACAATGGGAAGTACAACGAGTCGCAAACCGGCGACGGTAAGCTAATCTCTTAAAACTTCTCTCAGTTCGGACTGGAGTCTGCAACTCGACTCCACGAAGGCGGAATCGCTAGTAATCGCGAATCAGCATGTCGCGGTGAATACGTTCCCGGGTCTTGTACACACCGCCCGTCAAATCATGGGAGTCGGAAGTACCCAAAGTCGCTTGGCTAACTTTTAGAGGCCGGTGCCTAAGGTAAAATCGATGACTGGGATTAAGTCGTAACAAGGTAGCCGTAGGAGAACCTGCGGCTGGATCACCTCCTTTCT\")\r\n                .setHspIdentityString(\"|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\")\r\n                .createBlastHsp();\r\n        List<Hsp> hsplist = new ArrayList();\r\n        hsplist.add(hsp1hit1res1);\r\n        hsplist.add(hsp1hit1res1);\r\n        \r\n        BlastHit hit1res1 = new BlastHitBuilder()\r\n                .setHitNum(1)\r\n                .setHitId(\"gnl|BL_ORD_ID|2006\")\r\n                .setHitDef(\"CP000411 Oenococcus oeni PSU-1, complete genome\")\r\n                .setHitAccession(\"0\")\r\n                .setHitLen(1780517)\r\n                .setHsps(hsplist)\r\n                .createBlastHit();\r\n        \r\n        List<Hit> hitlist = new ArrayList();\r\n        hitlist.add(hit1res1);\r\n        \r\n        BlastResult res1 = new BlastResultBuilder()\r\n                .setProgram(\"blastn\")\r\n                .setVersion(\"BLASTN 2.2.29+\")\r\n                .setReference(\"Zheng Zhang, Scott Schwartz, Lukas Wagner, and Webb Miller (2000), &quot;A greedy algorithm for aligning DNA sequences&quot;, J Comput Biol 2000; 7(1-2):203-14.\")\r\n                .setQueryID(\"Query_1\")\r\n                .setQueryDef(\"CP000411_-_16S_rRNA Oenococcus oeni PSU-1, complete genome\")\r\n                .setQueryLength(1567)\r\n                .createBlastResult();\r\n        \r\n        Result expRes1 = result.get(0);\r\n        Hit expHit1res1 = expRes1.iterator().next();\r\n        Hsp expHsp1hit1res1 = expHit1res1.iterator().next();\r\n        \r\n        // result not testable without all hits and hsp\r\n        //assertEquals(expRes1, res1);\r\n        \r\n        // hit test\r\n        assertEquals(expHit1res1, hit1res1);\r\n        \r\n        // hsp test\r\n        assertEquals(expHsp1hit1res1, hsp1hit1res1);\r\n    }\r\n\r\n    /**\r\n     * Test of getFileExtensions method, of class BlastXMLQuery.\r\n     */\r\n    @Test\r\n    public void testGetFileExtensions() {\r\n        System.out.println(\"getFileExtensions\");\r\n        BlastXMLQuery instance = new BlastXMLQuery();\r\n        List<String> result = instance.getFileExtensions();\r\n        assertTrue(result.contains(\"blastxml\"));\r\n    }\r\n\r\n    /**\r\n     * Test of setQueryReferences method, of class BlastXMLQuery.\r\n     */\r\n    @Test\r\n    @Ignore public void testSetQueryReferences() {\r\n        System.out.println(\"setQueryReferences\");\r\n        List sequences = null;\r\n        BlastXMLQuery instance = new BlastXMLQuery();\r\n        instance.setQueryReferences(sequences);\r\n        // TODO review the generated test code and remove the default call to fail.\r\n        fail(\"The test case is a prototype.\");\r\n    }\r\n\r\n    /**\r\n     * Test of setDatabaseReferences method, of class BlastXMLQuery.\r\n     */\r\n    @Test\r\n    @Ignore public void testSetDatabaseReferences() {\r\n        System.out.println(\"setDatabaseReferences\");\r\n        List sequences = null;\r\n        BlastXMLQuery instance = new BlastXMLQuery();\r\n        instance.setDatabaseReferences(sequences);\r\n        // TODO review the generated test code and remove the default call to fail.\r\n        fail(\"The test case is a prototype.\");\r\n    }\r\n\r\n    /**\r\n     * Test of storeObjects method, of class BlastXMLQuery.\r\n     */\r\n    @Test\r\n    public void testStoreObjects() throws Exception {\r\n        // not implemented yet\r\n    }\r\n}\r\n","changedTest":"/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage org.biojava.nbio.core.search.io.blast;\n\nimport java.io.File;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.biojava.nbio.core.search.io.Hit;\nimport org.biojava.nbio.core.search.io.Hsp;\nimport org.biojava.nbio.core.search.io.Result;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.junit.Ignore;\n\n/**\n *\n * @author Paolo Pavan\n */\npublic class BlastXMLParserTest {\n    \n    public BlastXMLParserTest() {\n    }\n    \n    @BeforeClass\n    public static void setUpClass() {\n    }\n    \n    @AfterClass\n    public static void tearDownClass() {\n    }\n    \n    @Before\n    public void setUp() {\n    }\n    \n    @After\n    public void tearDown() {\n    }\n\n    /**\n     * Test of setFile method, of class BlastXMLParser.\n     */\n    @Test\n    public void testSetFile() {\n        System.out.println(\"setFile\");\n        File f = null;\n        BlastXMLParser instance = new BlastXMLParser();\n        instance.setFile(f);\n    }\n\n    /**\n     * Test of createObjects method, of class BlastXMLParser.\n     */\n    @Test\n    public void testCreateObjects() throws Exception {\n        System.out.println(\"createObjects\");\n        \n        String resource = \"/org/biojava/nbio/core/search/io/blast/small-blastReport.blastxml\";\n        URL resourceURL = getClass().getResource(resource);\n        File file = new File(resourceURL.getFile());\n        \n        BlastXMLParser instance = new BlastXMLParser();\n        instance.setFile(file);\n        \n        //instance.setQueryReferences(null);\n        //instance.setDatabaseReferences(null);\n        List<Result> result = instance.createObjects(1e-10);\n        \n        // test with random manual selected results\n        BlastHsp hsp1hit1res1 = new BlastHspBuilder()\n                .setHspNum(1)\n                .setHspBitScore(2894.82)\n                .setHspScore(1567)\n                .setHspEvalue(0)\n                .setHspQueryFrom(1)\n                .setHspQueryTo(1567)\n                .setHspHitFrom(616309)\n                .setHspHitTo(617875)\n                .setHspQueryFrame(1)\n                .setHspHitFrame(1)\n                .setHspIdentity(1567)\n                .setHspPositive(1567)\n                .setHspGaps(0)\n                .setHspAlignLen(1567)\n                .setHspQseq(\"TTAAATTGAGAGTTTGATCCTGGCTCAGGATGAACGCTGGTGGCGTGCCTAATACATGCAAGTCGTACGCTAGCCGCTGAATTGATCCTTCGGGTGAAGTGAGGCAATGACTAGAGTGGCGAACTGGTGAGTAACACGTAAGAAACCTGCCCTTTAGTGGGGGATAACATTTGGAAACAGATGCTAATACCGCGTAACAACAAATCACACATGTGATCTGTTTGAAAGGTCCTTTTGGATCGCTAGAGGATGGTCTTGCGGCGTATTAGCTTGTTGGTAGGGTAGAAGCCTACCAAGGCAATGATGCGTAGCCGAGTTGAGAGACTGGCCGGCCACATTGGGACTGAGACACTGCCCAAACTCCTACGGGAGGCTGCAGTAGGGAATTTTCCGCAATGCACGAAAGTGTGACGGAGCGACGCCGCGTGTGTGATGAAGGCTTTCGGGTCGTAAAGCACTGTTGTAAGGGAAGAATAACTGAATTCAGAGAAAGTTTTCAGCTTGACGGTACCTTACCAGAAAGGGATGGCTAAATACGTGCCAGCAGCCGCGGTAATACGTATGTCCCGAGCGTTATCCGGATTTATTGGGCGTAAAGCGAGCGCAGACGGTTTATTAAGTCTGATGTGAAATCCCGAGGCCCAACCTCGGAACTGCATTGGAAACTGATTTACTTGAGTGCGATAGAGGCAAGTGGAACTCCATGTGTAGCGGTGAAATGCGTAGATATGTGGAAGAACACCAGTGGCGAAAGCGGCTTGCTAGATCGTAACTGACGTTGAGGCTCGAAAGTATGGGTAGCAAACGGGATTAGATACCCCGGTAGTCCATACCGTAAACGATGGGTGCTAGTTGTTAAGAGGTTTCCGCCTCCTAGTGACGTAGCAAACGCATTAAGCACCCCGCCTGAGGAGTACGGCCGCAAGGCTAAAACTTAAAGGAATTGACGGGGACCCGCACAAGCGGTGGAGCATGTGGTTTAATTCGAAGATACGCGAAAAACCTTACCAGGTCTTGACATACCAATGATCGCTTTTGTAATGAAAGCTTTTCTTCGGAACATTGGATACAGGTGGTGCATGGTCGTCGTCAGCTCGTGTCGTGAGATGTTGGGTTAAGTCCCGCAACGAGCGCAACCCTTGTTATTAGTTGCCAGCATTTAGTTGGGCACTCTAATGAGACTGCCGGTGATAAACCGGAGGAAGGTGGGGACGACGTCAGATCATCATGCCCCTTATGACCTGGGCAACACACGTGCTACAATGGGAAGTACAACGAGTCGCAAACCGGCGACGGTAAGCTAATCTCTTAAAACTTCTCTCAGTTCGGACTGGAGTCTGCAACTCGACTCCACGAAGGCGGAATCGCTAGTAATCGCGAATCAGCATGTCGCGGTGAATACGTTCCCGGGTCTTGTACACACCGCCCGTCAAATCATGGGAGTCGGAAGTACCCAAAGTCGCTTGGCTAACTTTTAGAGGCCGGTGCCTAAGGTAAAATCGATGACTGGGATTAAGTCGTAACAAGGTAGCCGTAGGAGAACCTGCGGCTGGATCACCTCCTTTCT\")\n                .setHspHseq(\"TTAAATTGAGAGTTTGATCCTGGCTCAGGATGAACGCTGGTGGCGTGCCTAATACATGCAAGTCGTACGCTAGCCGCTGAATTGATCCTTCGGGTGAAGTGAGGCAATGACTAGAGTGGCGAACTGGTGAGTAACACGTAAGAAACCTGCCCTTTAGTGGGGGATAACATTTGGAAACAGATGCTAATACCGCGTAACAACAAATCACACATGTGATCTGTTTGAAAGGTCCTTTTGGATCGCTAGAGGATGGTCTTGCGGCGTATTAGCTTGTTGGTAGGGTAGAAGCCTACCAAGGCAATGATGCGTAGCCGAGTTGAGAGACTGGCCGGCCACATTGGGACTGAGACACTGCCCAAACTCCTACGGGAGGCTGCAGTAGGGAATTTTCCGCAATGCACGAAAGTGTGACGGAGCGACGCCGCGTGTGTGATGAAGGCTTTCGGGTCGTAAAGCACTGTTGTAAGGGAAGAATAACTGAATTCAGAGAAAGTTTTCAGCTTGACGGTACCTTACCAGAAAGGGATGGCTAAATACGTGCCAGCAGCCGCGGTAATACGTATGTCCCGAGCGTTATCCGGATTTATTGGGCGTAAAGCGAGCGCAGACGGTTTATTAAGTCTGATGTGAAATCCCGAGGCCCAACCTCGGAACTGCATTGGAAACTGATTTACTTGAGTGCGATAGAGGCAAGTGGAACTCCATGTGTAGCGGTGAAATGCGTAGATATGTGGAAGAACACCAGTGGCGAAAGCGGCTTGCTAGATCGTAACTGACGTTGAGGCTCGAAAGTATGGGTAGCAAACGGGATTAGATACCCCGGTAGTCCATACCGTAAACGATGGGTGCTAGTTGTTAAGAGGTTTCCGCCTCCTAGTGACGTAGCAAACGCATTAAGCACCCCGCCTGAGGAGTACGGCCGCAAGGCTAAAACTTAAAGGAATTGACGGGGACCCGCACAAGCGGTGGAGCATGTGGTTTAATTCGAAGATACGCGAAAAACCTTACCAGGTCTTGACATACCAATGATCGCTTTTGTAATGAAAGCTTTTCTTCGGAACATTGGATACAGGTGGTGCATGGTCGTCGTCAGCTCGTGTCGTGAGATGTTGGGTTAAGTCCCGCAACGAGCGCAACCCTTGTTATTAGTTGCCAGCATTTAGTTGGGCACTCTAATGAGACTGCCGGTGATAAACCGGAGGAAGGTGGGGACGACGTCAGATCATCATGCCCCTTATGACCTGGGCAACACACGTGCTACAATGGGAAGTACAACGAGTCGCAAACCGGCGACGGTAAGCTAATCTCTTAAAACTTCTCTCAGTTCGGACTGGAGTCTGCAACTCGACTCCACGAAGGCGGAATCGCTAGTAATCGCGAATCAGCATGTCGCGGTGAATACGTTCCCGGGTCTTGTACACACCGCCCGTCAAATCATGGGAGTCGGAAGTACCCAAAGTCGCTTGGCTAACTTTTAGAGGCCGGTGCCTAAGGTAAAATCGATGACTGGGATTAAGTCGTAACAAGGTAGCCGTAGGAGAACCTGCGGCTGGATCACCTCCTTTCT\")\n                .setHspIdentityString(\"|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\")\n                .createBlastHsp();\n        List<Hsp> hsplist = new ArrayList();\n        hsplist.add(hsp1hit1res1);\n        hsplist.add(hsp1hit1res1);\n        \n        BlastHit hit1res1 = new BlastHitBuilder()\n                .setHitNum(1)\n                .setHitId(\"gnl|BL_ORD_ID|2006\")\n                .setHitDef(\"CP000411 Oenococcus oeni PSU-1, complete genome\")\n                .setHitAccession(\"0\")\n                .setHitLen(1780517)\n                .setHsps(hsplist)\n                .createBlastHit();\n        \n        List<Hit> hitlist = new ArrayList();\n        hitlist.add(hit1res1);\n        \n        BlastResult res1 = new BlastResultBuilder()\n                .setProgram(\"blastn\")\n                .setVersion(\"BLASTN 2.2.29+\")\n                .setReference(\"Zheng Zhang, Scott Schwartz, Lukas Wagner, and Webb Miller (2000), &quot;A greedy algorithm for aligning DNA sequences&quot;, J Comput Biol 2000; 7(1-2):203-14.\")\n                .setQueryID(\"Query_1\")\n                .setQueryDef(\"CP000411_-_16S_rRNA Oenococcus oeni PSU-1, complete genome\")\n                .setQueryLength(1567)\n                .createBlastResult();\n        \n        Result expRes1 = result.get(0);\n        Hit expHit1res1 = expRes1.iterator().next();\n        Hsp expHsp1hit1res1 = expHit1res1.iterator().next();\n        \n        // result not testable without all hits and hsp\n        //assertEquals(expRes1, res1);\n        \n        // hit test\n        assertEquals(expHit1res1, hit1res1);\n        \n        // hsp test\n        assertEquals(expHsp1hit1res1, hsp1hit1res1);\n    }\n\n    /**\n     * Test of getFileExtensions method, of class BlastXMLParser.\n     */\n    @Test\n    public void testGetFileExtensions() {\n        System.out.println(\"getFileExtensions\");\n        BlastXMLParser instance = new BlastXMLParser();\n        List<String> result = instance.getFileExtensions();\n        assertTrue(result.contains(\"blastxml\"));\n    }\n\n    /**\n     * Test of setQueryReferences method, of class BlastXMLParser.\n     */\n    @Test\n    @Ignore public void testSetQueryReferences() {\n        System.out.println(\"setQueryReferences\");\n        List sequences = null;\n        BlastXMLParser instance = new BlastXMLParser();\n        instance.setQueryReferences(sequences);\n        // TODO review the generated test code and remove the default call to fail.\n        fail(\"The test case is a prototype.\");\n    }\n\n    /**\n     * Test of setDatabaseReferences method, of class BlastXMLParser.\n     */\n    @Test\n    @Ignore public void testSetDatabaseReferences() {\n        System.out.println(\"setDatabaseReferences\");\n        List sequences = null;\n        BlastXMLParser instance = new BlastXMLParser();\n        instance.setDatabaseReferences(sequences);\n        // TODO review the generated test code and remove the default call to fail.\n        fail(\"The test case is a prototype.\");\n    }\n\n    /**\n     * Test of storeObjects method, of class BlastXMLParser.\n     */\n    @Test\n    public void testStoreObjects() throws Exception {\n        // not implemented yet\n    }\n}\n","commitMessage":"Refactoring proposed by Jose Manuel Duarte to separate this module from the old implementation in org.biojava.nbio.genome.query.BlastXMLQuery.\n","test_commitMessage":"Refactoring proposed by Jose Manuel Duarte to separate this module from the old implementation in org.biojava.nbio.genome.query.BlastXMLQuery.\n","allZero":false}