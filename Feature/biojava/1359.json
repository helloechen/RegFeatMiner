{"repository":"biojava","prod_path":"biojava3-structure-gui/src/main/java/org/biojava3/structure/gui/JmolViewerImpl.java","test_path":"biojava3-structure-gui/src/test/java/org/biojava/structure/gui/JmolViewerImplTest.java","prod_time":"2011-08-31 14:05:45","test_time":"2011-08-31 14:05:45","type":"EDIT","proType":"EDIT","add_annotation_line":1,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":4,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"40ee2b808821b810c95e2344e0308a4c2ab8bf4b","test_commitID":"40ee2b808821b810c95e2344e0308a4c2ab8bf4b","isfound":"found test change","originPro":"package org.biojava3.structure.gui;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Graphics;\nimport java.awt.Rectangle;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.swing.Box;\nimport javax.swing.JFrame;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\n\nimport org.biojava.bio.structure.Structure;\nimport org.biojava.bio.structure.align.gui.MenuCreator;\n\npublic class JmolViewerImpl implements StructureViewer {\n\n    public static final String viewer = \"org.jmol.api.JmolSimpleViewer\";\n    public static final String adapter = \"org.jmol.api.JmolAdapter\";\n    public static final String smartAdapter = \"org.jmol.adapter.smarter.SmarterJmolAdapter\";\n    Structure structure;\n    JmolPanel jmolPanel;\n    JFrame frame;\n\n    public JmolViewerImpl() {\n\n        frame = new JFrame();\n\n        JMenuBar menu = MenuCreator.initMenu(frame, null,null);\n\n        frame.setJMenuBar(menu);\n\n        frame.addWindowListener(new WindowAdapter() {\n\n            @Override\n            public void windowClosing(WindowEvent e) {\n                frame.dispose();\n                //System.exit(0);\n            }\n        });\n\n        Container contentPane = frame.getContentPane();\n\n        Box vBox = Box.createVerticalBox();\n\n        try {\n\n            jmolPanel = new JmolPanel();\n\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            System.err.println(\"Could not find Jmol in classpath, please install first. http://www.jmol.org\");\n            return;\n        }\n        jmolPanel.setPreferredSize(new Dimension(500, 500));\n        vBox.add(jmolPanel);\n\n\n        JTextField field = new JTextField();\n\n        field.setMaximumSize(new Dimension(Short.MAX_VALUE, 30));\n        field.setText(\"enter RASMOL like command...\");\n//        RasmolCommandListener listener = new RasmolCommandListener(jmolPanel, field);\n\n//        field.addActionListener(listener);\n//        field.addMouseListener(listener);\n//        field.addKeyListener(listener);\n        vBox.add(field);\n\n        contentPane.add(vBox);\n\n\n\n        frame.pack();\n        frame.setVisible(true);\n\n    }\n\n    public void setTitle(String label) {\n        frame.setTitle(label);\n        frame.repaint();\n    }\n\n    public void setStructure(Structure structure) {\n        if (jmolPanel == null) {\n            System.err.println(\"please install Jmol first\");\n            return;\n        }\n\n        setTitle(structure.getPDBCode());\n\n        // actually this is very simple\n        // just convert the structure to a PDB file\n\n        String pdb = structure.toPDB();\n        //System.out.println(s.isNmr());\n\n        //System.out.println(pdb);\n        // Jmol could also read the file directly from your file system\n        //viewer.openFile(\"/Path/To/PDB/1tim.pdb\");\n\n        //System.out.println(pdb);\n        jmolPanel.openStringInline(pdb);\n\n        // send the PDB file to Jmol.\n        // there are also other ways to interact with Jmol, e.g make it directly\n        // access the biojava structure object, but they require more\n        // code. See the SPICE code repository for how to do this.\n    }\n\n    public void clear() {\n        // TODO Auto-generated method stub\n    }\n\n    public Color getColor() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    public Selection getSelection() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    public void repaint() {\n        // TODO Auto-generated method stub\n    }\n\n    public void setColor(Color red) {\n        // TODO Auto-generated method stub\n    }\n\n    public void setSelection(Selection selection) {\n        // TODO Auto-generated method stub\n    }\n\n    public void setStyle(RenderStyle wireframe) {\n        // TODO Auto-generated method stub\n    }\n\n    public void setZoom(int i) {\n        // TODO Auto-generated method stub\n    }\n\n    static class JmolPanel extends JPanel {\n\n        /**\n         *\n         */\n        private static final long serialVersionUID = -3661941083797644242L;\n        @SuppressWarnings(\"unchecked\")\n\t\tClass viewerC;\n        @SuppressWarnings(\"unchecked\")\n        Class adapterC;\n        @SuppressWarnings(\"unchecked\")\n        Class smartAdapterC;\n        Object viewerO;\n        Object adapterO;\n        Method evalString;\n        Method renderScreenImage;\n        Method openStringInline;\n\n        //JmolSimpleViewer viewer;\n        //JmolAdapter adapter;\n        @SuppressWarnings(\"unchecked\")\n\t\tJmolPanel() throws ClassNotFoundException {\n\n            try {\n                viewerC = Class.forName(viewer);\n\n                adapterC = Class.forName(adapter);\n                smartAdapterC = Class.forName(smartAdapter);\n\n                Method m = viewerC.getMethod(\"allocateSimpleViewer\", new Class[]{Component.class, adapterC});\n\n                Constructor constructor = smartAdapterC.getConstructor(new Class[]{});\n                adapterO = constructor.newInstance(new Object[]{});\n\n                //viewerC = JmolSimpleViewer.allocateSimpleViewer(this, adapter);\n                viewerO = m.invoke(viewerC, this, adapterO);\n\n                evalString = viewerC.getMethod(\"evalString\", String.class);\n\n                renderScreenImage = viewerC.getMethod(\"renderScreenImage\",\n                        new Class[]{Graphics.class, Dimension.class, Rectangle.class});\n\n                openStringInline = viewerC.getMethod(\"openStringInline\", new Class[]{String.class});\n\n            } catch (InstantiationException ex) {\n                Logger.getLogger(JmolViewerImpl.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (IllegalAccessException ex) {\n                Logger.getLogger(JmolViewerImpl.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (IllegalArgumentException ex) {\n                Logger.getLogger(JmolViewerImpl.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (InvocationTargetException ex) {\n                Logger.getLogger(JmolViewerImpl.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (NoSuchMethodException e) {\n                e.printStackTrace();\n            }\n\n            evalString(\"set scriptQueue on;\");\n\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        public Class getViewer() {\n            return viewerC;\n        }\n\n        public void evalString(String rasmolScript) {\n            try {\n                evalString.invoke(viewerO, rasmolScript);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void openStringInline(String pdbFile) {\n            try {\n                openStringInline.invoke(viewerO, pdbFile);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void executeCmd(String rasmolScript) {\n            try {\n                evalString.invoke(viewerO, rasmolScript);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        final Dimension currentSize = new Dimension();\n        final Rectangle rectClip = new Rectangle();\n\n        public void paint(Graphics g) {\n            getSize(currentSize);\n            g.getClipBounds(rectClip);\n            //viewer.renderScreenImage(g, currentSize, rectClip);\n\n            try {\n                renderScreenImage.invoke(viewerO, g, currentSize, rectClip);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n","changedPro":"package org.biojava3.structure.gui;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.Graphics;\nimport java.awt.Rectangle;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.swing.Box;\nimport javax.swing.JFrame;\nimport javax.swing.JMenuBar;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\n\nimport org.biojava.bio.structure.Structure;\nimport org.biojava.bio.structure.align.gui.MenuCreator;\n\npublic class JmolViewerImpl implements StructureViewer {\n\n    public static final String viewer = \"org.jmol.api.JmolSimpleViewer\";\n    public static final String adapter = \"org.jmol.api.JmolAdapter\";\n    public static final String smartAdapter = \"org.jmol.adapter.smarter.SmarterJmolAdapter\";\n    Structure structure;\n    JmolPanel jmolPanel;\n    JFrame frame;\n\n    public JmolViewerImpl() {\n\n        frame = new JFrame();\n\n        JMenuBar menu = MenuCreator.initMenu(frame, null,null);\n\n        frame.setJMenuBar(menu);\n\n        frame.addWindowListener(new WindowAdapter() {\n\n            @Override\n            public void windowClosing(WindowEvent e) {\n                frame.dispose();\n                //System.exit(0);\n            }\n        });\n\n        Container contentPane = frame.getContentPane();\n\n        Box vBox = Box.createVerticalBox();\n\n        try {\n\n            jmolPanel = new JmolPanel();\n\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            System.err.println(\"Could not find Jmol in classpath, please install first. http://www.jmol.org\");\n            return;\n        }\n        jmolPanel.setPreferredSize(new Dimension(500, 500));\n        vBox.add(jmolPanel);\n\n\n        JTextField field = new JTextField();\n\n        field.setMaximumSize(new Dimension(Short.MAX_VALUE, 30));\n        field.setText(\"enter RASMOL like command...\");\n//        RasmolCommandListener listener = new RasmolCommandListener(jmolPanel, field);\n\n//        field.addActionListener(listener);\n//        field.addMouseListener(listener);\n//        field.addKeyListener(listener);\n        vBox.add(field);\n\n        contentPane.add(vBox);\n\n\n\n        frame.pack();\n        frame.setVisible(true);\n\n    }\n\n    public void setTitle(String label) {\n        frame.setTitle(label);\n        frame.repaint();\n    }\n\n    public void setStructure(Structure structure) {\n        if (jmolPanel == null) {\n            System.err.println(\"please install Jmol first\");\n            return;\n        }\n\n        setTitle(structure.getPDBCode());\n\n        // actually this is very simple\n        // just convert the structure to a PDB file\n\n        String pdb = structure.toPDB();\n        //System.out.println(s.isNmr());\n\n        //System.out.println(pdb);\n        // Jmol could also read the file directly from your file system\n        //viewer.openFile(\"/Path/To/PDB/1tim.pdb\");\n\n        //System.out.println(pdb);\n        jmolPanel.openStringInline(pdb);\n\n        // send the PDB file to Jmol.\n        // there are also other ways to interact with Jmol, e.g make it directly\n        // access the biojava structure object, but they require more\n        // code. See the SPICE code repository for how to do this.\n    }\n\n    public void clear() {\n        // TODO Auto-generated method stub\n    }\n\n    public Color getColor() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    public Selection getSelection() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    public void repaint() {\n        // TODO Auto-generated method stub\n    }\n\n    public void setColor(Color red) {\n        // TODO Auto-generated method stub\n    }\n\n    public void setSelection(Selection selection) {\n        // TODO Auto-generated method stub\n    }\n\n    public void setStyle(RenderStyle wireframe) {\n        // TODO Auto-generated method stub\n    }\n\n    public void setZoom(int i) {\n        // TODO Auto-generated method stub\n    }\n    @SuppressWarnings(\"rawtypes\")\n    static class JmolPanel extends JPanel {\n\n        /**\n         *\n         */\n        private static final long serialVersionUID = -3661941083797644242L;\n        \n\t\tClass viewerC;\n        \n        Class adapterC;\n        \n        \n\t\tClass smartAdapterC;\n        Object viewerO;\n        Object adapterO;\n        Method evalString;\n        Method renderScreenImage;\n        Method openStringInline;\n\n        //JmolSimpleViewer viewer;\n        //JmolAdapter adapter;\n        @SuppressWarnings(\"unchecked\")\n\t\tJmolPanel() throws ClassNotFoundException {\n\n            try {\n                viewerC = Class.forName(viewer);\n\n                adapterC = Class.forName(adapter);\n                smartAdapterC = Class.forName(smartAdapter);\n\n                Method m = viewerC.getMethod(\"allocateSimpleViewer\", new Class[]{Component.class, adapterC});\n\n                Constructor constructor = smartAdapterC.getConstructor(new Class[]{});\n                adapterO = constructor.newInstance(new Object[]{});\n\n                //viewerC = JmolSimpleViewer.allocateSimpleViewer(this, adapter);\n                viewerO = m.invoke(viewerC, this, adapterO);\n\n                evalString = viewerC.getMethod(\"evalString\", String.class);\n\n                renderScreenImage = viewerC.getMethod(\"renderScreenImage\",\n                        new Class[]{Graphics.class, Dimension.class, Rectangle.class});\n\n                openStringInline = viewerC.getMethod(\"openStringInline\", new Class[]{String.class});\n\n            } catch (InstantiationException ex) {\n                Logger.getLogger(JmolViewerImpl.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (IllegalAccessException ex) {\n                Logger.getLogger(JmolViewerImpl.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (IllegalArgumentException ex) {\n                Logger.getLogger(JmolViewerImpl.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (InvocationTargetException ex) {\n                Logger.getLogger(JmolViewerImpl.class.getName()).log(Level.SEVERE, null, ex);\n            } catch (NoSuchMethodException e) {\n                e.printStackTrace();\n            }\n\n            evalString(\"set scriptQueue on;\");\n\n        }\n\n        \n        public Class getViewer() {\n            return viewerC;\n        }\n\n        public void evalString(String rasmolScript) {\n            try {\n                evalString.invoke(viewerO, rasmolScript);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void openStringInline(String pdbFile) {\n            try {\n                openStringInline.invoke(viewerO, pdbFile);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void executeCmd(String rasmolScript) {\n            try {\n                evalString.invoke(viewerO, rasmolScript);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        final Dimension currentSize = new Dimension();\n        final Rectangle rectClip = new Rectangle();\n\n        public void paint(Graphics g) {\n            getSize(currentSize);\n            g.getClipBounds(rectClip);\n            //viewer.renderScreenImage(g, currentSize, rectClip);\n\n            try {\n                renderScreenImage.invoke(viewerO, g, currentSize, rectClip);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n","originTest":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\npackage org.biojava.structure.gui;\n\nimport java.awt.Color;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport junit.framework.TestCase;\nimport org.biojava.bio.structure.Structure;\nimport org.biojava.bio.structure.io.PDBFileReader;\nimport org.biojava3.structure.gui.JmolViewerImpl;\nimport org.biojava3.structure.gui.RenderStyle;\nimport org.biojava3.structure.gui.Selection;\n\n/**\n *\n * @author Jules\n */\npublic class JmolViewerImplTest extends TestCase {\n    \n    public JmolViewerImplTest(String testName) {\n        super(testName);\n    }\n\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n    }\n\n    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n    }\n\n    public void testMe(){\n       assertTrue(true);\n    }\n    \n//    /**\n//     * Test of setStructure method, of class JmolViewerImpl.\n//     */\n//    public void testSetStructure() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        try {\n//            System.out.println(\"setStructure\");\n//            PDBFileReader pdbr = new PDBFileReader();\n//            pdbr.setAutoFetch(true);\n//            //        pdbr.setPath(\"/Users/andreas/WORK/PDB/\");\n//            String pdbCode = \"5pti\";\n//            Structure structure = pdbr.getStructureById(pdbCode);\n//            JmolViewerImpl instance = new JmolViewerImpl();\n//            instance.setStructure(structure);\n//            //try {\n//                //Thread.sleep(10000);\n//            //} catch (InterruptedException ex) {\n//             //   Logger.getLogger(JmolViewerImplTest.class.getName()).log(Level.SEVERE, null, ex);\n//            //}\n//            // TODO review the generated test code and remove the default call to fail.\n//            //fail(\"The test case is a prototype.\");\n//        } catch (IOException ex) {\n//            Logger.getLogger(JmolViewerImplTest.class.getName()).log(Level.SEVERE, null, ex);\n//        }\n//    }\n//\n//    /**\n//     * Test of clear method, of class JmolViewerImpl.\n//     */\n//    public void testClear() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"clear\");\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        instance.clear();\n//        // TODO review the generated test code and remove the default call to fail.\n//        //fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getColor method, of class JmolViewerImpl.\n//     */\n//    public void testGetColor() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"getColor\");\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        Color expResult = null;\n//        Color result = instance.getColor();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        //fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getSelection method, of class JmolViewerImpl.\n//     */\n//    public void testGetSelection() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"getSelection\");\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        Selection expResult = null;\n//        Selection result = instance.getSelection();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        //fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of repaint method, of class JmolViewerImpl.\n//     */\n//    public void testRepaint() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"repaint\");\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        instance.repaint();\n//        // TODO review the generated test code and remove the default call to fail.\n//        //fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setColor method, of class JmolViewerImpl.\n//     */\n//    public void testSetColor() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"setColor\");\n//        Color red = null;\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        instance.setColor(red);\n//        // TODO review the generated test code and remove the default call to fail.\n//        //fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setSelection method, of class JmolViewerImpl.\n//     */\n//    public void testSetSelection() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"setSelection\");\n//        Selection selection = null;\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        instance.setSelection(selection);\n//        // TODO review the generated test code and remove the default call to fail.\n//      //  fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setStyle method, of class JmolViewerImpl.\n//     */\n//    public void testSetStyle() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"setStyle\");\n//        RenderStyle wireframe = null;\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        instance.setStyle(wireframe);\n//        // TODO review the generated test code and remove the default call to fail.\n//        //fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setZoom method, of class JmolViewerImpl.\n//     */\n//    public void testSetZoom() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"setZoom\");\n//        int i = 0;\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        instance.setZoom(i);\n//        // TODO review the generated test code and remove the default call to fail.\n//       // fail(\"The test case is a prototype.\");\n//    }\n\n}\n","changedTest":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\npackage org.biojava.structure.gui;\n\n\nimport junit.framework.TestCase;\n\n/**\n *\n * @author Jules\n */\npublic class JmolViewerImplTest extends TestCase {\n    \n    public JmolViewerImplTest(String testName) {\n        super(testName);\n    }\n\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n    }\n\n    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n    }\n\n    public void testMe(){\n       assertTrue(true);\n    }\n    \n//    /**\n//     * Test of setStructure method, of class JmolViewerImpl.\n//     */\n//    public void testSetStructure() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        try {\n//            System.out.println(\"setStructure\");\n//            PDBFileReader pdbr = new PDBFileReader();\n//            pdbr.setAutoFetch(true);\n//            //        pdbr.setPath(\"/Users/andreas/WORK/PDB/\");\n//            String pdbCode = \"5pti\";\n//            Structure structure = pdbr.getStructureById(pdbCode);\n//            JmolViewerImpl instance = new JmolViewerImpl();\n//            instance.setStructure(structure);\n//            //try {\n//                //Thread.sleep(10000);\n//            //} catch (InterruptedException ex) {\n//             //   Logger.getLogger(JmolViewerImplTest.class.getName()).log(Level.SEVERE, null, ex);\n//            //}\n//            // TODO review the generated test code and remove the default call to fail.\n//            //fail(\"The test case is a prototype.\");\n//        } catch (IOException ex) {\n//            Logger.getLogger(JmolViewerImplTest.class.getName()).log(Level.SEVERE, null, ex);\n//        }\n//    }\n//\n//    /**\n//     * Test of clear method, of class JmolViewerImpl.\n//     */\n//    public void testClear() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"clear\");\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        instance.clear();\n//        // TODO review the generated test code and remove the default call to fail.\n//        //fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getColor method, of class JmolViewerImpl.\n//     */\n//    public void testGetColor() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"getColor\");\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        Color expResult = null;\n//        Color result = instance.getColor();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        //fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getSelection method, of class JmolViewerImpl.\n//     */\n//    public void testGetSelection() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"getSelection\");\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        Selection expResult = null;\n//        Selection result = instance.getSelection();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        //fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of repaint method, of class JmolViewerImpl.\n//     */\n//    public void testRepaint() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"repaint\");\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        instance.repaint();\n//        // TODO review the generated test code and remove the default call to fail.\n//        //fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setColor method, of class JmolViewerImpl.\n//     */\n//    public void testSetColor() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"setColor\");\n//        Color red = null;\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        instance.setColor(red);\n//        // TODO review the generated test code and remove the default call to fail.\n//        //fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setSelection method, of class JmolViewerImpl.\n//     */\n//    public void testSetSelection() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"setSelection\");\n//        Selection selection = null;\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        instance.setSelection(selection);\n//        // TODO review the generated test code and remove the default call to fail.\n//      //  fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setStyle method, of class JmolViewerImpl.\n//     */\n//    public void testSetStyle() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"setStyle\");\n//        RenderStyle wireframe = null;\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        instance.setStyle(wireframe);\n//        // TODO review the generated test code and remove the default call to fail.\n//        //fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setZoom method, of class JmolViewerImpl.\n//     */\n//    public void testSetZoom() {\n//    \tif (  java.awt.GraphicsEnvironment.isHeadless())\n//    \t\treturn;\n//        System.out.println(\"setZoom\");\n//        int i = 0;\n//        JmolViewerImpl instance = new JmolViewerImpl();\n//        instance.setZoom(i);\n//        // TODO review the generated test code and remove the default call to fail.\n//       // fail(\"The test case is a prototype.\");\n//    }\n\n}\n","commitMessage":"fixing all javadoc warnings in biojava-structure-gui\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@9151 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"fixing all javadoc warnings in biojava-structure-gui\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@9151 7c6358e6-4a41-0410-a743-a5b2a554c398\n","allZero":false}