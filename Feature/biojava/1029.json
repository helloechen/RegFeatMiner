{"repository":"biojava","prod_path":"biojava-core/src/main/java/org/biojava/nbio/core/sequence/loader/GenbankProxySequenceReader.java","test_path":"biojava-core/src/test/java/org/biojava/nbio/core/sequence/loader/GenbankProxySequenceReaderTest.java","prod_time":"2021-10-30 14:11:19","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":1,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"7cc316f6c1e2d6a3247e45b33d59d711e6a3619e","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * @author Karl Nicholas <github:karlnicholas>\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 08-08-2013\n *\n */\npackage org.biojava.nbio.core.sequence.loader;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.AccessionID;\nimport org.biojava.nbio.core.sequence.DNASequence;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.compound.DNACompoundSet;\nimport org.biojava.nbio.core.sequence.compound.NucleotideCompound;\nimport org.biojava.nbio.core.sequence.features.*;\nimport org.biojava.nbio.core.sequence.io.GenbankSequenceParser;\nimport org.biojava.nbio.core.sequence.io.GenericGenbankHeaderParser;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author Karl Nicholas <github:karlnicholas>\n * @author Jacek Grzebyta <github:jgrzebyta>\n */\npublic class GenbankProxySequenceReader<C extends Compound> extends StringProxySequenceReader<C> implements FeaturesKeyWordInterface, DatabaseReferenceInterface, FeatureRetriever {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(GenbankProxySequenceReader.class);\n\n\tprivate static final String eutilBaseURL = \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/\"; //\n\tprivate String genbankDirectoryCache = null;\n\tprivate GenbankSequenceParser<AbstractSequence<C>, C> genbankParser;\n\tprivate GenericGenbankHeaderParser<AbstractSequence<C>, C> headerParser;\n\tprivate String header;\n\tprivate Map<String, List<AbstractFeature<AbstractSequence<C>, C>>> features;\n\n\n\t/**\n\t *\n\t * @throws InterruptedException\n\t * @throws IOException\n\t * @throws CompoundNotFoundException\n\t */\n\tpublic GenbankProxySequenceReader(\n\t\t\tString genbankDirectoryCache,\n\t\t\tString accessionID,\n\t\t\tCompoundSet<C> compoundSet ) throws IOException, InterruptedException, CompoundNotFoundException {\n\n\t\tsetGenbankDirectoryCache(genbankDirectoryCache);\n\t\tsetCompoundSet(compoundSet);\n\n\t\tString db = compoundSet instanceof AminoAcidCompoundSet ? \"protein\" : \"nuccore\";\n\n\t\tInputStream inStream = getBufferedInputStream(accessionID, db);\n\t\tgenbankParser = new GenbankSequenceParser<AbstractSequence<C>, C>();\n\n\t\tsetContents(genbankParser.getSequence(new BufferedReader(new InputStreamReader(inStream)), 0));\n\t\theaderParser = genbankParser.getSequenceHeaderParser();\n\t\theader = genbankParser.getHeader();\n\t\tfeatures = genbankParser.getFeatures();\n\n\t\tif (compoundSet.getClass().equals(AminoAcidCompoundSet.class)) {\n\t\t\tif (!genbankParser.getCompoundType().equals(compoundSet)) {\n\t\t\t\tlogger.error(\"Declared compount type {} does not mach the real: {}\", genbankParser.getCompoundType().toString(), compoundSet.toString());\n\t\t\t\tthrow new IOException(\"Wrong declared compound type for: \" + accessionID);\n\t\t\t}\n\t\t}\n\n\t\tinStream.close();\n\t}\n\n\tprivate BufferedInputStream getBufferedInputStream(String accessionID, String db) throws IOException, InterruptedException {\n\t\tBufferedInputStream inStream = null;\n\t\tif (genbankDirectoryCache != null && genbankDirectoryCache.length() > 0) {\n\t\t\tFile f = new File(genbankDirectoryCache + File.separatorChar + accessionID + \".gb\");\n\t\t\tif (f.exists()) {\n\t\t\t\tlogger.debug(\"Reading: {}\", f.toString());\n\t\t\t\tinStream = new BufferedInputStream(new FileInputStream(f));\n\t\t\t} else {\n\t\t\t\tInputStream in = getEutilsInputStream(accessionID, db);\n\t\t\t\tcopyInputStreamToFile(in, f);\n\t\t\t\tinStream = new BufferedInputStream(new FileInputStream(f));\n\t\t\t}\n\t\t} else {\n\t\t\tinStream = new BufferedInputStream(getEutilsInputStream(accessionID, db));\n\t\t}\n\t\treturn inStream;\n\t}\n\n\tprivate void copyInputStreamToFile(InputStream in, File f) throws IOException, InterruptedException {\n\t\tFileOutputStream out = new FileOutputStream(f);\n\t\tbyte[] buffer = new byte[1024];\n\t\tint len = in.read(buffer);\n\t\twhile (len != -1) {\n\t\t\tout.write(buffer, 0, len);\n\t\t\tlen = in.read(buffer);\n\t\t\tif (Thread.interrupted()) {\n\t\t\t\tin.close();\n\t\t\t\tout.close();\n\t\t\t\tthrow new InterruptedException();\n\t\t\t}\n\t\t}\n\t\tin.close();\n\t\tout.close();\n\t}\n\n\tprivate InputStream getEutilsInputStream(String accessionID, String db) throws IOException {\n\t\tString genbankURL = eutilBaseURL + \"efetch.fcgi?db=\" + db + \"&id=\" + accessionID + \"&rettype=gb&retmode=text\";\n\t\tlogger.trace(\"Loading: {}\", genbankURL);\n\t\tURL genbank = new URL(genbankURL);\n\t\tURLConnection genbankConnection = genbank.openConnection();\n\t\treturn genbankConnection.getInputStream();\n\t}\n\n\t/**\n\t * Local directory cache of Genbank that can be downloaded\n\t *\n\t * @return the uniprotDirectoryCache\n\t */\n\tpublic String getGenbankDirectoryCache() {\n\t\treturn genbankDirectoryCache;\n\t}\n\n\t/**\n\t * @param genbankDirectoryCache\n\t */\n\tpublic void setGenbankDirectoryCache(String genbankDirectoryCache) {\n\t\tif (genbankDirectoryCache != null) {\n\t\t\tFile f = new File(genbankDirectoryCache);\n\t\t\tif (!f.exists()) {\n\t\t\t\tf.mkdirs();\n\t\t\t}\n\t\t}\n\t\tthis.genbankDirectoryCache = genbankDirectoryCache;\n\t}\n\n\tpublic String getHeader() {\n\t\treturn header;\n\t}\n\n\tpublic GenericGenbankHeaderParser<AbstractSequence<C>, C> getHeaderParser() {\n\t\treturn headerParser;\n\t}\n\t@Override\n\tpublic Map<String, List<AbstractFeature<AbstractSequence<C>, C>>> getFeatures() {\n\t\treturn features;\n\t}\n\n\t@Override\n\tpublic Map<String, List<DBReferenceInfo>> getDatabaseReferences() {\n\t\treturn genbankParser.getDatabaseReferences();\n\t}\n\n\t@Override\n\tpublic List<String> getKeyWords() {\n\t\treturn genbankParser.getKeyWords();\n\t}\n\n\tpublic static void main(String[] args) throws Throwable {\n\n\t\tGenbankProxySequenceReader<AminoAcidCompound> genbankProteinReader\n\t\t\t\t= new GenbankProxySequenceReader<AminoAcidCompound>(\"/tmp\", \"NP_000257\", AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\t\tProteinSequence proteinSequence = new ProteinSequence(genbankProteinReader);\n\t\tgenbankProteinReader.getHeaderParser().parseHeader(genbankProteinReader.getHeader(), proteinSequence);\n\t\tlogger.info(\"Sequence ({},{})={}...\", proteinSequence.getAccession(), proteinSequence.getLength(), proteinSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankProteinReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankProteinReader.getDatabaseReferences());\n\t\tproteinSequence.getFeatures();\n\n\t\tGenbankProxySequenceReader<NucleotideCompound> genbankDNAReader\n\t\t\t\t= new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"NM_001126\", DNACompoundSet.getDNACompoundSet());\n\t\tDNASequence dnaSequence = new DNASequence(genbankDNAReader);\n\t\tgenbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n\t\tdnaSequence.setAccession(new AccessionID(\"NM_001126\"));\n\t\tlogger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n\t\tgenbankDNAReader\n\t\t\t\t= new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"NM_000266\", DNACompoundSet.getDNACompoundSet());\n\t\tdnaSequence = new DNASequence(genbankDNAReader);\n\t\tgenbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n\t\tlogger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n\t\tgenbankDNAReader\n\t\t\t\t= new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"AV254721\", DNACompoundSet.getDNACompoundSet());\n\t\tdnaSequence = new DNASequence(genbankDNAReader);\n\t\tgenbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n\t\tlogger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n\t\tgenbankDNAReader\n\t\t\t\t= new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"AV254721.2\", DNACompoundSet.getDNACompoundSet());\n\t\tdnaSequence = new DNASequence(genbankDNAReader);\n\t\tgenbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n\t\tlogger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n\t\tgenbankDNAReader\n\t\t\t\t= new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"U49845\", DNACompoundSet.getDNACompoundSet());\n\t\tdnaSequence = new DNASequence(genbankDNAReader);\n\t\tgenbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n\t\tlogger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n\t\tgenbankDNAReader\n\t\t\t\t= new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"GI:1293613\", DNACompoundSet.getDNACompoundSet());\n\t\tdnaSequence = new DNASequence(genbankDNAReader);\n\t\tgenbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n\t\tlogger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n\t\tgenbankDNAReader\n\t\t\t\t= new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"14109166\", DNACompoundSet.getDNACompoundSet());\n\t\tdnaSequence = new DNASequence(genbankDNAReader);\n\t\tgenbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n\t\tlogger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n\t\t/*\n\t\t GenbankProxySequenceReader genbankProxyReader = new GenbankProxySequenceReader(\"/tmp\");\n\t\t Sequence<?> sequence;\n\n\t\t sequence = genbankProxyReader.getDNASequence(new AccessionID(\"NM_001126\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n\t\t sequence = genbankProxyReader.getDNASequence(new AccessionID(\"NM_000266\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n\t\t sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"NP_000257\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n\t\t sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"AV254721\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n\t\t sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"AV254721.2\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n\t\t sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"U49845\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n\t\t sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"GI:1293613\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n\t\t sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"14109166\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\t\t */\n\t}\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * @author Karl Nicholas <github:karlnicholas>\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 08-08-2013\n *\n */\npackage org.biojava.nbio.core.sequence.loader;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.AccessionID;\nimport org.biojava.nbio.core.sequence.DNASequence;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.compound.DNACompoundSet;\nimport org.biojava.nbio.core.sequence.compound.NucleotideCompound;\nimport org.biojava.nbio.core.sequence.features.*;\nimport org.biojava.nbio.core.sequence.io.GenbankSequenceParser;\nimport org.biojava.nbio.core.sequence.io.GenericGenbankHeaderParser;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author Karl Nicholas <github:karlnicholas>\n * @author Jacek Grzebyta <github:jgrzebyta>\n */\npublic class GenbankProxySequenceReader<C extends Compound> extends StringProxySequenceReader<C> implements FeaturesKeyWordInterface, DatabaseReferenceInterface, FeatureRetriever {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(GenbankProxySequenceReader.class);\n\n\tprivate static final String eutilBaseURL = \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/\"; //\n\tprivate String genbankDirectoryCache = null;\n\tprivate GenbankSequenceParser<AbstractSequence<C>, C> genbankParser;\n\tprivate GenericGenbankHeaderParser<AbstractSequence<C>, C> headerParser;\n\tprivate String header;\n\tprivate Map<String, List<AbstractFeature<AbstractSequence<C>, C>>> features;\n\n\n\t/**\n\t *\n\t * @throws InterruptedException\n\t * @throws IOException\n\t * @throws CompoundNotFoundException\n\t */\n\tpublic GenbankProxySequenceReader(\n\t\t\tString genbankDirectoryCache,\n\t\t\tString accessionID,\n\t\t\tCompoundSet<C> compoundSet ) throws IOException, InterruptedException, CompoundNotFoundException {\n\n\t\tsetGenbankDirectoryCache(genbankDirectoryCache);\n\t\tsetCompoundSet(compoundSet);\n\n\t\tString db = compoundSet instanceof AminoAcidCompoundSet ? \"protein\" : \"nuccore\";\n\n\t\tInputStream inStream = getBufferedInputStream(accessionID, db);\n\t\tgenbankParser = new GenbankSequenceParser<AbstractSequence<C>, C>();\n\n\t\tsetContents(genbankParser.getSequence(new BufferedReader(new InputStreamReader(inStream)), 0));\n\t\theaderParser = genbankParser.getSequenceHeaderParser();\n\t\theader = genbankParser.getHeader();\n\t\tfeatures = genbankParser.getFeatures();\n\n\t\tif (compoundSet.getClass().equals(AminoAcidCompoundSet.class)) {\n\t\t\tif (!genbankParser.getCompoundType().equals(compoundSet)) {\n\t\t\t\tlogger.error(\"Declared compount type {} does not mach the real: {}\", genbankParser.getCompoundType().toString(), compoundSet.toString());\n\t\t\t\tthrow new IOException(\"Wrong declared compound type for: \" + accessionID);\n\t\t\t}\n\t\t}\n\n\t\tinStream.close();\n\t}\n\n\tprivate BufferedInputStream getBufferedInputStream(String accessionID, String db) throws IOException, InterruptedException {\n\t\tBufferedInputStream inStream = null;\n\t\tif (genbankDirectoryCache != null && genbankDirectoryCache.length() > 0) {\n\t\t\tFile f = new File(genbankDirectoryCache + File.separatorChar + accessionID + \".gb\");\n\t\t\tif (f.exists()) {\n\t\t\t\tlogger.debug(\"Reading: {}\", f.toString());\n\t\t\t\tinStream = new BufferedInputStream(new FileInputStream(f));\n\t\t\t} else {\n\t\t\t\tInputStream in = getEutilsInputStream(accessionID, db);\n\t\t\t\tcopyInputStreamToFile(in, f);\n\t\t\t\tinStream = new BufferedInputStream(new FileInputStream(f));\n\t\t\t}\n\t\t} else {\n\t\t\tinStream = new BufferedInputStream(getEutilsInputStream(accessionID, db));\n\t\t}\n\t\treturn inStream;\n\t}\n\n\tprivate void copyInputStreamToFile(InputStream in, File f) throws IOException, InterruptedException {\n\t\ttry (FileOutputStream out = new FileOutputStream(f)) {\n\t\t\tbyte[] buffer = new byte[1024];\n\t\t\tint len = in.read(buffer);\n\t\t\twhile (len != -1) {\n\t\t\t\tout.write(buffer, 0, len);\n\t\t\t\tlen = in.read(buffer);\n\t\t\t\tif (Thread.interrupted()) {\n\t\t\t\t\tin.close();\n\t\t\t\t\tout.close();\n\t\t\t\t\tthrow new InterruptedException();\n\t\t\t\t}\n\t\t\t}\n\t\t\tin.close();\n\t\t}\n\t}\n\n\tprivate InputStream getEutilsInputStream(String accessionID, String db) throws IOException {\n\t\tString genbankURL = eutilBaseURL + \"efetch.fcgi?db=\" + db + \"&id=\" + accessionID + \"&rettype=gb&retmode=text\";\n\t\tlogger.trace(\"Loading: {}\", genbankURL);\n\t\tURL genbank = new URL(genbankURL);\n\t\tURLConnection genbankConnection = genbank.openConnection();\n\t\treturn genbankConnection.getInputStream();\n\t}\n\n\t/**\n\t * Local directory cache of Genbank that can be downloaded\n\t *\n\t * @return the uniprotDirectoryCache\n\t */\n\tpublic String getGenbankDirectoryCache() {\n\t\treturn genbankDirectoryCache;\n\t}\n\n\t/**\n\t * @param genbankDirectoryCache\n\t */\n\tpublic void setGenbankDirectoryCache(String genbankDirectoryCache) {\n\t\tif (genbankDirectoryCache != null) {\n\t\t\tFile f = new File(genbankDirectoryCache);\n\t\t\tif (!f.exists()) {\n\t\t\t\tf.mkdirs();\n\t\t\t}\n\t\t}\n\t\tthis.genbankDirectoryCache = genbankDirectoryCache;\n\t}\n\n\tpublic String getHeader() {\n\t\treturn header;\n\t}\n\n\tpublic GenericGenbankHeaderParser<AbstractSequence<C>, C> getHeaderParser() {\n\t\treturn headerParser;\n\t}\n\t@Override\n\tpublic Map<String, List<AbstractFeature<AbstractSequence<C>, C>>> getFeatures() {\n\t\treturn features;\n\t}\n\n\t@Override\n\tpublic Map<String, List<DBReferenceInfo>> getDatabaseReferences() {\n\t\treturn genbankParser.getDatabaseReferences();\n\t}\n\n\t@Override\n\tpublic List<String> getKeyWords() {\n\t\treturn genbankParser.getKeyWords();\n\t}\n\n\tpublic static void main(String[] args) throws Throwable {\n\n\t\tGenbankProxySequenceReader<AminoAcidCompound> genbankProteinReader\n\t\t\t\t= new GenbankProxySequenceReader<AminoAcidCompound>(\"/tmp\", \"NP_000257\", AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\t\tProteinSequence proteinSequence = new ProteinSequence(genbankProteinReader);\n\t\tgenbankProteinReader.getHeaderParser().parseHeader(genbankProteinReader.getHeader(), proteinSequence);\n\t\tlogger.info(\"Sequence ({},{})={}...\", proteinSequence.getAccession(), proteinSequence.getLength(), proteinSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankProteinReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankProteinReader.getDatabaseReferences());\n\t\tproteinSequence.getFeatures();\n\n\t\tGenbankProxySequenceReader<NucleotideCompound> genbankDNAReader\n\t\t\t\t= new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"NM_001126\", DNACompoundSet.getDNACompoundSet());\n\t\tDNASequence dnaSequence = new DNASequence(genbankDNAReader);\n\t\tgenbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n\t\tdnaSequence.setAccession(new AccessionID(\"NM_001126\"));\n\t\tlogger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n\t\tgenbankDNAReader\n\t\t\t\t= new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"NM_000266\", DNACompoundSet.getDNACompoundSet());\n\t\tdnaSequence = new DNASequence(genbankDNAReader);\n\t\tgenbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n\t\tlogger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n\t\tgenbankDNAReader\n\t\t\t\t= new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"AV254721\", DNACompoundSet.getDNACompoundSet());\n\t\tdnaSequence = new DNASequence(genbankDNAReader);\n\t\tgenbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n\t\tlogger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n\t\tgenbankDNAReader\n\t\t\t\t= new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"AV254721.2\", DNACompoundSet.getDNACompoundSet());\n\t\tdnaSequence = new DNASequence(genbankDNAReader);\n\t\tgenbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n\t\tlogger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n\t\tgenbankDNAReader\n\t\t\t\t= new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"U49845\", DNACompoundSet.getDNACompoundSet());\n\t\tdnaSequence = new DNASequence(genbankDNAReader);\n\t\tgenbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n\t\tlogger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n\t\tgenbankDNAReader\n\t\t\t\t= new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"GI:1293613\", DNACompoundSet.getDNACompoundSet());\n\t\tdnaSequence = new DNASequence(genbankDNAReader);\n\t\tgenbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n\t\tlogger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n\t\tgenbankDNAReader\n\t\t\t\t= new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"14109166\", DNACompoundSet.getDNACompoundSet());\n\t\tdnaSequence = new DNASequence(genbankDNAReader);\n\t\tgenbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n\t\tlogger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n\t\tlogger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n\t\tlogger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n\t\t/*\n\t\t GenbankProxySequenceReader genbankProxyReader = new GenbankProxySequenceReader(\"/tmp\");\n\t\t Sequence<?> sequence;\n\n\t\t sequence = genbankProxyReader.getDNASequence(new AccessionID(\"NM_001126\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n\t\t sequence = genbankProxyReader.getDNASequence(new AccessionID(\"NM_000266\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n\t\t sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"NP_000257\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n\t\t sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"AV254721\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n\t\t sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"AV254721.2\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n\t\t sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"U49845\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n\t\t sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"GI:1293613\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n\t\t sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"14109166\"));\n\t\t System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\t\t */\n\t}\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.sequence.loader;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.features.AbstractFeature;\nimport org.biojava.nbio.core.sequence.features.FeatureInterface;\nimport org.biojava.nbio.core.sequence.features.Qualifier;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.channels.Channels;\nimport java.nio.channels.ReadableByteChannel;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Testing example for issue #834\n *\n * @author Jacek Grzebyta\n * @author Paolo Pavan\n */\n@RunWith(Parameterized.class)\npublic class GenbankProxySequenceReaderTest {\n\n\tprivate String gi;\n\tprivate final static Logger logger = LoggerFactory.getLogger(GenbankProxySequenceReaderTest.class);\n\n\tpublic GenbankProxySequenceReaderTest(String gi) {\n\t\tthis.gi = gi;\n\t}\n\n\t@Parameterized.Parameters\n\tpublic static Collection<String[]> getExamples() {\n\t\tString[][] accessorIds = new String[][]{\n\t\t\t{\"399235158\"},\n\t\t\t{\"7525057\"},\n\t\t\t{\"379015144\"},\n\t\t\t{\"381353147\"},\n\t\t\t{\"381353148\"},\n\t\t\t{\"152970917\"},\n\t\t\t{\"381353149\"},\n\t\t\t{\"254839678\"}\n\t\t};\n\n\t\treturn Arrays.asList(accessorIds);\n\t}\n\n\t/**\n\t * In {@link GenbankProxySequenceReader} there is a check to see if the requested files are already in the temp\n\t * directory before attempting to retrieve them from the remote server. so simply copying the test files to the temp\n\t * directory avoids calling out to the server and hitting a 429 status code from the server which fails the build.\n\t * @throws IOException\n\t */\n\t@Before\n\tpublic void copyTestFiles() throws IOException {\n\t\tCollection<String[]> accessorIds = getExamples();\n\t\tfor (String[] arr: accessorIds) {\n\t\t\tcopyTestFileToWorkingDirectory(arr[0]+\".gb\");\n\t\t}\n\t}\n\n\t/**\n\t * Convenience method for {@link GenbankProxySequenceReaderTest#copyTestFiles()}\n\t * @param filename name of the file to copy from the resource folder\n\t * @throws IOException when something goes wrong with copying the files.\n\t */\n\tprivate void copyTestFileToWorkingDirectory(String filename) throws IOException {\n\t\tString destRoot = System.getProperty(\"java.io.tmpdir\");\n\n\t\t//if the directory does not end with a slash or backslash then add one\n\t\tif(!(destRoot.endsWith(\"/\") || destRoot.endsWith(\"\\\\\"))){\n\t\t\tdestRoot += destRoot.contains(\"/\")? \"/\" : \"\\\\\";\n\t\t}\n\n\t\tString dest =  destRoot + filename;\n\t\tString src = \"org/biojava/nbio/core/sequence/loader/\" + filename;\n\n\t\t//Remove any pre-existing files\n\t\tFile d = new File(dest);\n\t\td.delete();\n\n\t\ttry(FileOutputStream destination = new FileOutputStream(d);\n\t\tInputStream is = this.getClass().getClassLoader().getResourceAsStream(src);\n\t\tReadableByteChannel source = Channels.newChannel(is)) {\n\n\t\t\tdestination.getChannel().transferFrom(source, 0, Long.MAX_VALUE);\n\t\t}\n\t}\n\n\n\t@Test\n\tpublic void testFeatures() throws IOException, InterruptedException, CompoundNotFoundException {\n\t\tlogger.info(\"run test for protein: {}\", gi);\n\t\tGenbankProxySequenceReader<AminoAcidCompound> genbankReader\n\t\t\t\t= new GenbankProxySequenceReader<>(System.getProperty(\"java.io.tmpdir\"),\n\t\t\t\t\t\tthis.gi,\n\t\t\t\t\t\tAminoAcidCompoundSet.getAminoAcidCompoundSet());\n\n\t\t// why only tests on protein sequences?\n\t\tProteinSequence seq = new ProteinSequence(genbankReader);\n\n\t\tAssert.assertNotNull(\"protein sequence is null\", seq);\n\n\t\t/*\n\t\t parse description from header. There is no separate interface/abstract class for method getHeader()\n\t\t so it should be done here (manualy).\n\t\t */\n\t\tgenbankReader.getHeaderParser().parseHeader(genbankReader.getHeader(), seq);\n\n\t\t// test description\n\t\tAssert.assertNotNull(seq.getDescription());\n\n\t\t// test accession Id\n\t\tlogger.info(\"accession id: {}\", seq.getAccession().getID());\n\t\tAssert.assertNotNull(seq.getAccession().getID());\n\t\t// test GID number\n\t\tif( seq.getAccession().getIdentifier() != null) { // GI: in header now optional. See #596\n\t\t\tAssert.assertEquals(gi, seq.getAccession().getIdentifier());\n\t\t\tlogger.info(\"found identifier '{}'\", seq.getAccession().getIdentifier());\n\t\t}\n\t\t// test taxonomy id\n\t\tlogger.info(\"taxonomy id: {}\", seq.getTaxonomy().getID());\n\t\tAssert.assertNotNull(seq.getTaxonomy().getID());\n\t\tAssert.assertNotNull(Integer.decode(seq.getTaxonomy().getID().split(\":\")[1]));\n\n\t\t// test taxonomy name\n\t\tString taxonName = seq.getFeaturesByType(\"source\").get(0).getQualifiers().get(\"organism\").get(0).getValue();\n\t\tlogger.info(\"taxonomy name '{}'\", taxonName);\n\t\tAssert.assertNotNull(taxonName);\n\n\t\tif (seq.getFeaturesByType(\"CDS\").size() > 0) {\n\t\t\tFeatureInterface<AbstractSequence<AminoAcidCompound>, AminoAcidCompound> CDS = seq.getFeaturesByType(\"CDS\").get(0);\n\t\t\tlogger.info(\"CDS: {}\", CDS);\n\t\t\tString codedBy = CDS.getQualifiers().get(\"coded_by\").get(0).getValue();\n\t\t\tAssert.assertNotNull(codedBy);\n\t\t\tAssert.assertTrue(!codedBy.isEmpty());\n\t\t\tlogger.info(\"\\t\\tcoded_by: {}\", codedBy);\n\t\t}\n\n\t\t// genbank has limits on requests per second, we need to give it some time for next test or otherwise we get 429 http error codes - JD 2018-12-14\n\t\t// See https://github.com/biojava/biojava/issues/837\n\t\tThread.sleep(500);\n\t}\n\n\t@Test\n\tpublic void testProteinSequenceFactoring() throws Exception {\n\t\tlogger.info(\"create protein sequence test for target {}\", gi);\n\n\t\tGenbankProxySequenceReader<AminoAcidCompound> genbankReader\n\t\t\t\t= new GenbankProxySequenceReader<>(System.getProperty(\"java.io.tmpdir\"),\n\t\t\t\t\t\tthis.gi,\n\t\t\t\t\t\tAminoAcidCompoundSet.getAminoAcidCompoundSet());\n\n\t\tProteinSequence seq = new ProteinSequence(genbankReader);\n\n\t\t// if target protein contain CDS/coded_by than it should contain parent nucleotide seq\n\t\tList<AbstractFeature<AbstractSequence<AminoAcidCompound>, AminoAcidCompound>> CDSs = genbankReader.getFeatures().get(\"CDS\");\n\n\t\tif (CDSs != null) {\n\t\t\tif (CDSs.size() == 1) {\n\t\t\t\tfinal Map<String, List<Qualifier>> qualifiers = CDSs.get(0).getQualifiers();\n\t\t\t\tList<Qualifier> codedByQualifiers = qualifiers.get(\"coded_by\");\n\t\t\t\tQualifier codedBy = codedByQualifiers.get(0);\n\t\t\t\tif (codedBy != null) {\n\n\t\t\t\t\tAbstractSequence<?> parentSeq = seq.getParentSequence();\n\t\t\t\t\tAssert.assertNotNull(parentSeq);\n\n\t\t\t\t\t/*\n\t\t\t\t\t Sometimes protein might have many 'parents' with different accessions\n\t\t\t\t\t so accession is not set.\n\n\t\t\t\t\t That test is always failed\n\t\t\t\t\t */\n\t\t\t\t\t//Assert.assertTrue(parentSeq.getAccession());\n\t\t\t\t\tAssert.assertTrue(!parentSeq.getSequenceAsString().isEmpty());\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.info(\"target {} has no CDS\", gi);\n\t\t}\n\n\t\t// genbank has limits on requests per second, we need to give it some time for next test or otherwise we get 429 http error codes - JD 2018-12-14\n\t\t// See https://github.com/biojava/biojava/issues/837\n\t\tThread.sleep(500);\n\n\t}\n}\n","changedTest":"","commitMessage":"Correcting a few issues found by sonarqube\n","test_commitMessage":"","allZero":false}