{"repository":"biojava","prod_path":"biojava-structure/src/main/java/org/biojava/bio/structure/cath/CathDomain.java","test_path":"biojava-integrationtest/src/test/java/org/biojava/structure/test/cath/CathDomainTest.java","prod_time":"2015-01-30 06:34:57","test_time":"2015-01-30 06:34:57","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":2,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":2,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"ac224492a348dfb69e069ccff4ae03b0c5d2087c","test_commitID":"ac224492a348dfb69e069ccff4ae03b0c5d2087c","isfound":"found test change","originPro":"/*\n * BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Author: Daniel Asarnow\n * Date:   2012-7-23\n */\n\npackage org.biojava.bio.structure.cath;\n\n/**\n * @author Daniel Asarnow\n */\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport org.biojava.bio.structure.ResidueRange;\nimport org.biojava.bio.structure.StructureIdentifier;\n\n/**\n * A class which represents a single CATH domain.\n */\npublic class CathDomain implements Serializable, StructureIdentifier {\n\n    public static final long serialVersionUID = 1L;\n\n    /**\n     * The CATH domain code. Always 7 characters in length, combining the PDB and chain letter with the number of the domain within CATH.\n     * Example: 1aoiA00\n     * If the chain letter '0', domain refers to an entire PDB entry.\n     */\n    String domainName; // 7 characters 1oaiA00\n\n    /**\n     * The class number of this domain.\n     */\n    Integer classId; // C\n\n    /**\n     * The architecture number of this domain.\n     */\n    Integer architectureId; // A\n\n    /**\n     * The topology number of this domain.\n     */\n    Integer topologyId; // T\n\n    /**\n     * The homologous superfamily number of this domain.\n     */\n    Integer homologyId; // H\n\n    /**\n     * The sequence family (35% identity) number of this domain.\n     */\n    Integer sequenceFamilyId; // S\n\n    /**\n     * The \"orthologous\" sequence family (60% identity) number of this domain.\n     */\n    Integer orthologousSequenceFamilyId; // O\n\n    /**\n     * The \"Like\" sequence family (95% identity) number of this domain.\n     */\n    Integer likeSequenceFamilyId; // L\n\n    /**\n     * The identical sequence family (100% identity) number of this domain.\n     */\n\n    Integer identicalSequenceFamilyId; // I\n\n    /**\n     * The count of this domain among the identical sequence family members.\n     */\n    Integer domainCounter; // D\n\n    /**\n     * The domain length..\n     */\n    Integer length;\n\n    /**\n     * The resolution of the domain structure. Nominally in Angstroms,\n     * the values 999.000 and 1000.000 signify NMR structures and obsolete structures, respectively.\n     */\n    Double resolution;\n\n    /**\n     * The format and version of the CathDomainDescriptionFile.\n     */\n    String format;\n\n    /**\n     * The CATH version.\n     */\n    String version;\n\n    Date date;\n\n    /**\n     * The so-called name field holds a potentially long description of the domain.\n     */\n    String name;\n\n    /**\n     * Complete source organism listing.\n     */\n    String source;\n\n    /**\n     * FASTA header.\n     */\n    String sequenceHeader;\n\n    /**\n     * FASTA sequence.\n     */\n    String sequence;\n\n    /**\n     * List of all sub-domain segments.\n     */\n    List<CathSegment> segments;\n\n    /**\n     * A (potentially long) comment. Usually empty.\n     */\n    String comment;\n\n    public String getDomainName() {\n        return domainName;\n    }\n\n    public void setDomainName(String domainName) {\n        this.domainName = domainName;\n    }\n\n    /**\n     * Returns a string of the form {@code PDBID.CHAIN}.\n     * For example: {@code 1hiv.A}.\n     * @deprecated This method is poorly named; use {@link #getThePdbId()} or {@link #getPdbIdAndChain()} instead\n     */\n    @Override\n\t@Deprecated\n    public String getPdbId() {\n         return getPdbIdAndChain();\n    }\n    \n    /**\n     * Returns the PDB ID.\n     */\n    public String getThePdbId() {\n    \treturn domainName.substring(0, 4);\n    }\n    \n    /**\n     * Returns a string of the form {@code PDBID.CHAIN}.\n     * For example: {@code 1hiv.A}.\n     */\n    public String getPdbIdAndChain() {\n    \treturn domainName.substring(0, 4) +\n                (!domainName.substring(4, 5).equals(\"0\") ? \".\" + domainName.substring(4, 5) : \"\");\n    }\n\n    public Integer getDomainId() {\n        return Integer.parseInt(domainName.substring(5));\n    }\n\n    public Integer getClassId() {\n        return classId;\n    }\n\n    public void setClassId(Integer classId) {\n        this.classId = classId;\n    }\n\n    public Integer getArchitectureId() {\n        return architectureId;\n    }\n\n    public void setArchitectureId(Integer architectureId) {\n        this.architectureId = architectureId;\n    }\n\n    public Integer getTopologyId() {\n        return topologyId;\n    }\n\n    public void setTopologyId(Integer topologyId) {\n        this.topologyId = topologyId;\n    }\n\n    public Integer getHomologyId() {\n        return homologyId;\n    }\n\n    public void setHomologyId(Integer homologyId) {\n        this.homologyId = homologyId;\n    }\n\n    public Integer getSequenceFamilyId() {\n        return sequenceFamilyId;\n    }\n\n    public void setSequenceFamilyId(Integer sequenceFamilyId) {\n        this.sequenceFamilyId = sequenceFamilyId;\n    }\n\n    public Integer getOrthologousSequenceFamilyId() {\n        return orthologousSequenceFamilyId;\n    }\n\n    public void setOrthologousSequenceFamilyId(Integer orthologousSequenceFamilyId) {\n        this.orthologousSequenceFamilyId = orthologousSequenceFamilyId;\n    }\n\n    public Integer getLikeSequenceFamilyId() {\n        return likeSequenceFamilyId;\n    }\n\n    public void setLikeSequenceFamilyId(Integer likeSequenceFamilyId) {\n        this.likeSequenceFamilyId = likeSequenceFamilyId;\n    }\n\n    public Integer getIdenticalSequenceFamilyId() {\n        return identicalSequenceFamilyId;\n    }\n\n    public void setIdenticalSequenceFamilyId(Integer identicalSequenceFamilyId) {\n        this.identicalSequenceFamilyId = identicalSequenceFamilyId;\n    }\n\n    public Integer getDomainCounter() {\n        return domainCounter;\n    }\n\n    public void setDomainCounter(Integer domainCounter) {\n        this.domainCounter = domainCounter;\n    }\n\n    public Integer getLength() {\n        return length;\n    }\n\n    public void setLength(Integer length) {\n        this.length = length;\n    }\n\n    public Double getResolution() {\n        return resolution;\n    }\n\n    public void setResolution(Double resolution) {\n        this.resolution = resolution;\n    }\n\n    public void setCATH(String cathCode) {\n        String[] token = cathCode.split(\"[.]\");\n        setClassId(Integer.parseInt(token[0]));\n        setArchitectureId(Integer.parseInt(token[1]));\n        setTopologyId(Integer.parseInt(token[2]));\n        setHomologyId(Integer.parseInt(token[3]));\n    }\n\n    public String getCATH() {\n        return Integer.toString(getClassId()) + \".\" +\n                Integer.toString(getArchitectureId()) + \".\" +\n                Integer.toString(getTopologyId()) + \".\" +\n                Integer.toString(getHomologyId());\n    }\n\n    public void setSOLID(String cathCode) {\n        String[] token = cathCode.split(\"[.]\");\n        setSequenceFamilyId(Integer.parseInt(token[0]));\n        setOrthologousSequenceFamilyId(Integer.parseInt(token[1]));\n        setLikeSequenceFamilyId(Integer.parseInt(token[2]));\n        setIdenticalSequenceFamilyId(Integer.parseInt(token[3]));\n        setDomainCounter(Integer.parseInt(token[4]));\n    }\n\n    public String getSOILD() {\n        return Integer.toString(getSequenceFamilyId()) + \".\" +\n                Integer.toString(getOrthologousSequenceFamilyId()) + \".\" +\n                Integer.toString(getLikeSequenceFamilyId()) + \".\" +\n                Integer.toString(getIdenticalSequenceFamilyId()) + \".\" +\n                Integer.toString(getDomainCounter());\n    }\n\n    public Integer getClassificationId(CathCategory cathCategory) {\n        switch (cathCategory) {\n            case Class:\n                return getClassId();\n            case Architecture:\n                return getArchitectureId();\n            case Topolgy:\n                return getTopologyId();\n            case Homology:\n                return getHomologyId();\n            case SequenceFamily:\n                return getSequenceFamilyId();\n            case OrthologousSequenceFamily:\n                return getOrthologousSequenceFamilyId();\n            case LikeSequenceFamily:\n                return getLikeSequenceFamilyId();\n            case IdenticalSequenceFamily:\n                return getIdenticalSequenceFamilyId();\n            case DomainCounter:\n                return getDomainCounter();\n            default:\n                return null;\n        }\n    }\n\n    public String getFormat() {\n        return format;\n    }\n\n    public void setFormat(String format) {\n        this.format = format;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    public void setVersion(String version) {\n        this.version = version;\n    }\n\n    public Date getDate() {\n        return date;\n    }\n\n    public void setDate(Date date) {\n        this.date = date;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getSource() {\n        return source;\n    }\n\n    public void setSource(String source) {\n        this.source = source;\n    }\n\n    public String getSequenceHeader() {\n        return sequenceHeader;\n    }\n\n    public void setSequenceHeader(String sequenceHeader) {\n        this.sequenceHeader = sequenceHeader;\n    }\n\n    public String getSequence() {\n        return sequence;\n    }\n\n    public void setSequence(String sequence) {\n        this.sequence = sequence;\n    }\n\n    public List<CathSegment> getSegments() {\n        return segments;\n    }\n\n    public void setSegments(List<CathSegment> segments) {\n        this.segments = segments;\n    }\n\n    public String getComment() {\n        return comment;\n    }\n\n    public void setComment(String comment) {\n        this.comment = comment;\n    }\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"CathDomain [domainName=\" + domainName + \", classId=\" + classId\n\t\t\t\t+ \", architectureId=\" + architectureId + \", topologyId=\"\n\t\t\t\t+ topologyId + \", homologyId=\" + homologyId\n\t\t\t\t+ \", sequenceFamilyId=\" + sequenceFamilyId\n\t\t\t\t+ \", orthologousSequenceFamilyId=\"\n\t\t\t\t+ orthologousSequenceFamilyId + \", likeSequenceFamilyId=\"\n\t\t\t\t+ likeSequenceFamilyId + \", identicalSequenceFamilyId=\"\n\t\t\t\t+ identicalSequenceFamilyId + \", domainCounter=\"\n\t\t\t\t+ domainCounter + \", length=\" + length + \", resolution=\"\n\t\t\t\t+ resolution + \", format=\" + format + \", version=\" + version\n\t\t\t\t+ \", date=\" + date + \", name=\" + name + \", source=\" + source\n\t\t\t\t+ \", sequenceHeader=\" + sequenceHeader + \", sequence=\"\n\t\t\t\t+ sequence + \", segments=\" + segments + \", comment=\" + comment\n\t\t\t\t+ \"]\";\n\t}\n\n\t@Override\n\tpublic String getIdentifier() {\n\t\treturn getThePdbId() + \".\" + ResidueRange.toString(getResidueRanges());\n\t}\n\n\t@Override\n\tpublic List<ResidueRange> getResidueRanges() {\n\t\tList<ResidueRange> ranges = new ArrayList<ResidueRange>();\n\t\tString chain = String.valueOf(getDomainName().charAt(getDomainName().length() - 3));\n\t\tfor (CathSegment segment : this.getSegments()) {\n\t\t\tranges.add(new ResidueRange(chain, segment.getStart(), segment.getStop()));\n\t\t}\n\t\treturn ranges;\n\t}\n\n\t@Override\n\tpublic List<String> getRanges() {\n\t\treturn ResidueRange.toStrings(getResidueRanges());\n\t}\n\n}\n","changedPro":"/*\n * BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Author: Daniel Asarnow\n * Date:   2012-7-23\n */\n\npackage org.biojava.bio.structure.cath;\n\n/**\n * @author Daniel Asarnow\n */\n\nimport org.biojava.bio.structure.ResidueRange;\nimport org.biojava.bio.structure.StructureIdentifier;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * A class which represents a single CATH domain.\n */\npublic class CathDomain implements Serializable, StructureIdentifier {\n\n    public static final long serialVersionUID = 1L;\n\n    /**\n     * The CATH domain code. Always 7 characters in length, combining the PDB and chain letter with the number of the domain within CATH.\n     * Example: 1aoiA00\n     * If the chain letter '0', domain refers to an entire PDB entry.\n     */\n    String domainName; // 7 characters 1oaiA00\n\n    /**\n     * The class number of this domain.\n     */\n    Integer classId; // C\n\n    /**\n     * The architecture number of this domain.\n     */\n    Integer architectureId; // A\n\n    /**\n     * The topology number of this domain.\n     */\n    Integer topologyId; // T\n\n    /**\n     * The homologous superfamily number of this domain.\n     */\n    Integer homologyId; // H\n\n    /**\n     * The sequence family (35% identity) number of this domain.\n     */\n    Integer sequenceFamilyId; // S\n\n    /**\n     * The \"orthologous\" sequence family (60% identity) number of this domain.\n     */\n    Integer orthologousSequenceFamilyId; // O\n\n    /**\n     * The \"Like\" sequence family (95% identity) number of this domain.\n     */\n    Integer likeSequenceFamilyId; // L\n\n    /**\n     * The identical sequence family (100% identity) number of this domain.\n     */\n\n    Integer identicalSequenceFamilyId; // I\n\n    /**\n     * The count of this domain among the identical sequence family members.\n     */\n    Integer domainCounter; // D\n\n    /**\n     * The domain length..\n     */\n    Integer length;\n\n    /**\n     * The resolution of the domain structure. Nominally in Angstroms,\n     * the values 999.000 and 1000.000 signify NMR structures and obsolete structures, respectively.\n     */\n    Double resolution;\n\n    /**\n     * The format and version of the CathDomainDescriptionFile.\n     */\n    String format;\n\n    /**\n     * The CATH version.\n     */\n    String version;\n\n    Date date;\n\n    /**\n     * The so-called name field holds a potentially long description of the domain.\n     */\n    String name;\n\n    /**\n     * Complete source organism listing.\n     */\n    String source;\n\n    /**\n     * FASTA header.\n     */\n    String sequenceHeader;\n\n    /**\n     * FASTA sequence.\n     */\n    String sequence;\n\n    /**\n     * List of all sub-domain segments.\n     */\n    List<CathSegment> segments;\n\n    /**\n     * A (potentially long) comment. Usually empty.\n     */\n    String comment;\n\n    public String getDomainName() {\n        return domainName;\n    }\n\n    public void setDomainName(String domainName) {\n        this.domainName = domainName;\n    }\n\n    /**\n     * Returns a string of the form {@code PDBID.CHAIN}.\n     * For example: {@code 1hiv.A}.\n     * @deprecated This method is poorly named; use {@link #getThePdbId()} or {@link #getPdbIdAndChain()} instead\n     */\n    @Override\n\t@Deprecated\n    public String getPdbId() {\n         return getPdbIdAndChain();\n    }\n    \n    /**\n     * Returns the PDB ID.\n     */\n    public String getThePdbId() {\n    \treturn domainName.substring(0, 4);\n    }\n    \n    /**\n     * Returns a string of the form {@code PDBID.CHAIN}.\n     * For example: {@code 1hiv.A}.\n     */\n    public String getPdbIdAndChain() {\n    \treturn domainName.substring(0, 4) +\n                (!domainName.substring(4, 5).equals(\"0\") ? \".\" + domainName.substring(4, 5) : \"\");\n    }\n\n    public Integer getDomainId() {\n        return Integer.parseInt(domainName.substring(5));\n    }\n\n    public Integer getClassId() {\n        return classId;\n    }\n\n    public void setClassId(Integer classId) {\n        this.classId = classId;\n    }\n\n    public Integer getArchitectureId() {\n        return architectureId;\n    }\n\n    public void setArchitectureId(Integer architectureId) {\n        this.architectureId = architectureId;\n    }\n\n    public Integer getTopologyId() {\n        return topologyId;\n    }\n\n    public void setTopologyId(Integer topologyId) {\n        this.topologyId = topologyId;\n    }\n\n    public Integer getHomologyId() {\n        return homologyId;\n    }\n\n    public void setHomologyId(Integer homologyId) {\n        this.homologyId = homologyId;\n    }\n\n    public Integer getSequenceFamilyId() {\n        return sequenceFamilyId;\n    }\n\n    public void setSequenceFamilyId(Integer sequenceFamilyId) {\n        this.sequenceFamilyId = sequenceFamilyId;\n    }\n\n    public Integer getOrthologousSequenceFamilyId() {\n        return orthologousSequenceFamilyId;\n    }\n\n    public void setOrthologousSequenceFamilyId(Integer orthologousSequenceFamilyId) {\n        this.orthologousSequenceFamilyId = orthologousSequenceFamilyId;\n    }\n\n    public Integer getLikeSequenceFamilyId() {\n        return likeSequenceFamilyId;\n    }\n\n    public void setLikeSequenceFamilyId(Integer likeSequenceFamilyId) {\n        this.likeSequenceFamilyId = likeSequenceFamilyId;\n    }\n\n    public Integer getIdenticalSequenceFamilyId() {\n        return identicalSequenceFamilyId;\n    }\n\n    public void setIdenticalSequenceFamilyId(Integer identicalSequenceFamilyId) {\n        this.identicalSequenceFamilyId = identicalSequenceFamilyId;\n    }\n\n    public Integer getDomainCounter() {\n        return domainCounter;\n    }\n\n    public void setDomainCounter(Integer domainCounter) {\n        this.domainCounter = domainCounter;\n    }\n\n    public Integer getLength() {\n        return length;\n    }\n\n    public void setLength(Integer length) {\n        this.length = length;\n    }\n\n    public Double getResolution() {\n        return resolution;\n    }\n\n    public void setResolution(Double resolution) {\n        this.resolution = resolution;\n    }\n\n    public void setCATH(String cathCode) {\n        String[] token = cathCode.split(\"[.]\");\n        setClassId(Integer.parseInt(token[0]));\n        setArchitectureId(Integer.parseInt(token[1]));\n        setTopologyId(Integer.parseInt(token[2]));\n        setHomologyId(Integer.parseInt(token[3]));\n    }\n\n    public String getCATH() {\n        return Integer.toString(getClassId()) + \".\" +\n                Integer.toString(getArchitectureId()) + \".\" +\n                Integer.toString(getTopologyId()) + \".\" +\n                Integer.toString(getHomologyId());\n    }\n\n    public void setSOLID(String cathCode) {\n        String[] token = cathCode.split(\"[.]\");\n        setSequenceFamilyId(Integer.parseInt(token[0]));\n        setOrthologousSequenceFamilyId(Integer.parseInt(token[1]));\n        setLikeSequenceFamilyId(Integer.parseInt(token[2]));\n        setIdenticalSequenceFamilyId(Integer.parseInt(token[3]));\n        setDomainCounter(Integer.parseInt(token[4]));\n    }\n\n    public String getSOILD() {\n        return Integer.toString(getSequenceFamilyId()) + \".\" +\n                Integer.toString(getOrthologousSequenceFamilyId()) + \".\" +\n                Integer.toString(getLikeSequenceFamilyId()) + \".\" +\n                Integer.toString(getIdenticalSequenceFamilyId()) + \".\" +\n                Integer.toString(getDomainCounter());\n    }\n\n    public Integer getClassificationId(CathCategory cathCategory) {\n        switch (cathCategory) {\n            case Class:\n                return getClassId();\n            case Architecture:\n                return getArchitectureId();\n            case Topolgy:\n                return getTopologyId();\n            case Homology:\n                return getHomologyId();\n            case SequenceFamily:\n                return getSequenceFamilyId();\n            case OrthologousSequenceFamily:\n                return getOrthologousSequenceFamilyId();\n            case LikeSequenceFamily:\n                return getLikeSequenceFamilyId();\n            case IdenticalSequenceFamily:\n                return getIdenticalSequenceFamilyId();\n            case DomainCounter:\n                return getDomainCounter();\n            default:\n                return null;\n        }\n    }\n\n    public String getFormat() {\n        return format;\n    }\n\n    public void setFormat(String format) {\n        this.format = format;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    public void setVersion(String version) {\n        this.version = version;\n    }\n\n    public Date getDate() {\n        return date;\n    }\n\n    public void setDate(Date date) {\n        this.date = date;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getSource() {\n        return source;\n    }\n\n    public void setSource(String source) {\n        this.source = source;\n    }\n\n    public String getSequenceHeader() {\n        return sequenceHeader;\n    }\n\n    public void setSequenceHeader(String sequenceHeader) {\n        this.sequenceHeader = sequenceHeader;\n    }\n\n    public String getSequence() {\n        return sequence;\n    }\n\n    public void setSequence(String sequence) {\n        this.sequence = sequence;\n    }\n\n    public List<CathSegment> getSegments() {\n        return segments;\n    }\n\n    public void setSegments(List<CathSegment> segments) {\n        this.segments = segments;\n    }\n\n    public String getComment() {\n        return comment;\n    }\n\n    public void setComment(String comment) {\n        this.comment = comment;\n    }\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"CathDomain [domainName=\" + domainName + \", classId=\" + classId\n\t\t\t\t+ \", architectureId=\" + architectureId + \", topologyId=\"\n\t\t\t\t+ topologyId + \", homologyId=\" + homologyId\n\t\t\t\t+ \", sequenceFamilyId=\" + sequenceFamilyId\n\t\t\t\t+ \", orthologousSequenceFamilyId=\"\n\t\t\t\t+ orthologousSequenceFamilyId + \", likeSequenceFamilyId=\"\n\t\t\t\t+ likeSequenceFamilyId + \", identicalSequenceFamilyId=\"\n\t\t\t\t+ identicalSequenceFamilyId + \", domainCounter=\"\n\t\t\t\t+ domainCounter + \", length=\" + length + \", resolution=\"\n\t\t\t\t+ resolution + \", format=\" + format + \", version=\" + version\n\t\t\t\t+ \", date=\" + date + \", name=\" + name + \", source=\" + source\n\t\t\t\t+ \", sequenceHeader=\" + sequenceHeader + \", sequence=\"\n\t\t\t\t+ sequence + \", segments=\" + segments + \", comment=\" + comment\n\t\t\t\t+ \"]\";\n\t}\n\n\t@Override\n\tpublic String getIdentifier() {\n\t\treturn getThePdbId() + \".\" + ResidueRange.toString(getResidueRanges());\n\t}\n\n\t@Override\n\tpublic List<ResidueRange> getResidueRanges() {\n\t\tList<ResidueRange> ranges = new ArrayList<ResidueRange>();\n\t\tString chain = String.valueOf(getDomainName().charAt(getDomainName().length() - 3));\n\t\tfor (CathSegment segment : this.getSegments()) {\n\t\t\tranges.add(new ResidueRange(chain, segment.getStart(), segment.getStop()));\n\t\t}\n\t\treturn ranges;\n\t}\n\n\t@Override\n\tpublic List<String> getRanges() {\n\t\treturn ResidueRange.toStrings(getResidueRanges());\n\t}\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.structure.test.cath;\n\nimport static org.junit.Assert.*;\n\nimport org.biojava.bio.structure.cath.CathDomain;\nimport org.biojava.bio.structure.cath.CathFactory;\nimport org.junit.Test;\n\n\n/**\n * A test for {@link CathDomain}.\n * @author dmyersturnbull\n */\npublic class CathDomainTest {\n\t@Test\n\tpublic void test() {\n\t\tString id = \"1qvrC03\";\n\t\tCathDomain domain = CathFactory.getCathDatabase().getDomainByCathId(id);\n\t\tassertEquals(\"1qvr.C_332-400,C_514-540\", domain.getIdentifier());\n\t}\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.structure.test.cath;\n\nimport org.biojava.bio.structure.cath.CathDomain;\nimport org.biojava.bio.structure.cath.CathFactory;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\n\n/**\n * A test for {@link CathDomain}.\n * @author dmyersturnbull\n */\npublic class CathDomainTest {\n\t@Test\n\tpublic void test() {\n\t\tString id = \"1qvrC03\";\n\t\tCathDomain domain = CathFactory.getCathDatabase().getDomainByCathId(id);\n\t\tassertEquals(\"1qvr.C_332-400,C_514-540\", domain.getIdentifier());\n\t}\n}\n","commitMessage":"Ran Optimize Imports across the whole project.\n","test_commitMessage":"Ran Optimize Imports across the whole project.\n","allZero":false}