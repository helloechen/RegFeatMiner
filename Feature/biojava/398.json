{"repository":"biojava","prod_path":"biojava-alignment/src/main/java/org/biojava/nbio/alignment/routines/GuanUberbacher.java","test_path":"biojava-alignment/src/test/java/org/biojava/nbio/alignment/routines/GuanUberbacherTest.java","prod_time":"2015-09-16 22:43:32","test_time":"2015-09-16 22:43:32","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":2,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":2,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"5ad3cc9e93ee928561a4423a0ac9a3835370b1b7","test_commitID":"5ad3cc9e93ee928561a4423a0ac9a3835370b1b7","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on August 11, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment.routines;\n\nimport org.biojava.nbio.alignment.template.AlignedSequence;\nimport org.biojava.nbio.alignment.template.GapPenalty;\nimport org.biojava.nbio.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\n/**\n * Guan and Uberbacher defined an algorithm for pairwise global sequence alignments (from the first until the last\n * {@link Compound} of each {@link Sequence}).  This class performs such global sequence comparisons efficiently by\n * dynamic programming with a space requirement reduced from quadratic (a multiple of query sequence length times\n * target sequence length) to only linear (a multiple of query sequence length).  The counterpoint to this reduction in\n * space complexity is a modest (a multiple < 2) increase in time.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} of the alignment pair is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class GuanUberbacher<S extends Sequence<C>, C extends Compound> extends AnchoredPairwiseSequenceAligner<S, C> {\n\n    private static int defaultCutsPerSection = 10;\n\n    /**\n     * Sets the default number of cuts added to each section during each pass.\n     * @param defaultCutsPerSection the default number of cuts added to each section during each pass\n     */\n    public static void setDefaultCutsPerSection(int defaultCutsPerSection) {\n        defaultCutsPerSection = Math.max(1, defaultCutsPerSection);\n    }\n\n    /**\n     * Before running a pairwise global sequence alignment, data must be sent in via calls to\n     * {@link #setQuery(Sequence)}, {@link #setTarget(Sequence)}, {@link #setGapPenalty(GapPenalty)}, and\n     * {@link #setSubstitutionMatrix(SubstitutionMatrix)}.\n     */\n    public GuanUberbacher() {\n    \tsetDefaultCutsPerSection(defaultCutsPerSection);\n    }\n\n    /**\n     * Prepares for a pairwise global sequence alignment.\n     *\n     * @param query the first {@link Sequence} of the pair to align\n     * @param target the second {@link Sequence} of the pair to align\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public GuanUberbacher(S query, S target, GapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n        setDefaultCutsPerSection(defaultCutsPerSection);\n    }\n\n    /**\n     * Prepares for a pairwise global sequence alignment.\n     *\n     * @param query the first {@link Sequence} of the pair to align\n     * @param target the second {@link Sequence} of the pair to align\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     * @param cutsPerSection the number of cuts added to each section during each pass\n     */\n    public GuanUberbacher(S query, S target, GapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix,\n            int cutsPerSection) {\n        super(query, target, gapPenalty, subMatrix);\n        setCutsPerSection(cutsPerSection);\n    }\n\n    /**\n     * Returns the number of cuts added to each section during each pass.\n     *\n     * @return the number of cuts added to each section during each pass\n     */\n    public int getCutsPerSection() {\n        return cutsPerSection;\n    }\n\n    /**\n     * Sets the number of cuts added to each section during each pass.\n     *\n     * @param cutsPerSection the number of cuts added to each section during each pass\n     */\n    public void setCutsPerSection(int cutsPerSection) {\n        this.cutsPerSection = Math.max(1, cutsPerSection);\n    }\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on August 11, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment.routines;\n\nimport org.biojava.nbio.core.alignment.template.AlignedSequence;\nimport org.biojava.nbio.alignment.template.GapPenalty;\nimport org.biojava.nbio.core.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\n/**\n * Guan and Uberbacher defined an algorithm for pairwise global sequence alignments (from the first until the last\n * {@link Compound} of each {@link Sequence}).  This class performs such global sequence comparisons efficiently by\n * dynamic programming with a space requirement reduced from quadratic (a multiple of query sequence length times\n * target sequence length) to only linear (a multiple of query sequence length).  The counterpoint to this reduction in\n * space complexity is a modest (a multiple < 2) increase in time.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} of the alignment pair is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class GuanUberbacher<S extends Sequence<C>, C extends Compound> extends AnchoredPairwiseSequenceAligner<S, C> {\n\n    private static int defaultCutsPerSection = 10;\n\n    /**\n     * Sets the default number of cuts added to each section during each pass.\n     * @param defaultCutsPerSection the default number of cuts added to each section during each pass\n     */\n    public static void setDefaultCutsPerSection(int defaultCutsPerSection) {\n        defaultCutsPerSection = Math.max(1, defaultCutsPerSection);\n    }\n\n    /**\n     * Before running a pairwise global sequence alignment, data must be sent in via calls to\n     * {@link #setQuery(Sequence)}, {@link #setTarget(Sequence)}, {@link #setGapPenalty(GapPenalty)}, and\n     * {@link #setSubstitutionMatrix(SubstitutionMatrix)}.\n     */\n    public GuanUberbacher() {\n    \tsetDefaultCutsPerSection(defaultCutsPerSection);\n    }\n\n    /**\n     * Prepares for a pairwise global sequence alignment.\n     *\n     * @param query the first {@link Sequence} of the pair to align\n     * @param target the second {@link Sequence} of the pair to align\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public GuanUberbacher(S query, S target, GapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n        setDefaultCutsPerSection(defaultCutsPerSection);\n    }\n\n    /**\n     * Prepares for a pairwise global sequence alignment.\n     *\n     * @param query the first {@link Sequence} of the pair to align\n     * @param target the second {@link Sequence} of the pair to align\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     * @param cutsPerSection the number of cuts added to each section during each pass\n     */\n    public GuanUberbacher(S query, S target, GapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix,\n            int cutsPerSection) {\n        super(query, target, gapPenalty, subMatrix);\n        setCutsPerSection(cutsPerSection);\n    }\n\n    /**\n     * Returns the number of cuts added to each section during each pass.\n     *\n     * @return the number of cuts added to each section during each pass\n     */\n    public int getCutsPerSection() {\n        return cutsPerSection;\n    }\n\n    /**\n     * Sets the number of cuts added to each section during each pass.\n     *\n     * @param cutsPerSection the number of cuts added to each section during each pass\n     */\n    public void setCutsPerSection(int cutsPerSection) {\n        this.cutsPerSection = Math.max(1, cutsPerSection);\n    }\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on August 11, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment.routines;\n\nimport org.biojava.nbio.alignment.SimpleGapPenalty;\nimport org.biojava.nbio.alignment.SubstitutionMatrixHelper;\nimport org.biojava.nbio.alignment.template.GapPenalty;\nimport org.biojava.nbio.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.DNASequence;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AmbiguityDNACompoundSet;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.NucleotideCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\npublic class GuanUberbacherTest {\n\n\tprivate static final double PRECISION = 0.00000001;\n\t\n    private ProteinSequence query, target;\n    private GapPenalty gaps;\n    private SubstitutionMatrix<AminoAcidCompound> blosum62;\n    private GuanUberbacher<ProteinSequence, AminoAcidCompound> alignment, self;\n\n    @Before\n    public void setup() throws CompoundNotFoundException { \n        query = new ProteinSequence(\"ARND\");\n        target = new ProteinSequence(\"RDG\");\n        gaps = new SimpleGapPenalty(10, 1);\n        blosum62 = SubstitutionMatrixHelper.getBlosum62();\n        alignment = new GuanUberbacher<ProteinSequence, AminoAcidCompound>(query, target, gaps, blosum62);\n        self = new GuanUberbacher<ProteinSequence, AminoAcidCompound>(query, query, gaps, blosum62);\n    }\n\n    @Test\n    public void testGuanUberbacher() {\n        GuanUberbacher<ProteinSequence, AminoAcidCompound> gu =\n                new GuanUberbacher<ProteinSequence, AminoAcidCompound>();\n        gu.setQuery(query);\n        gu.setTarget(target);\n        gu.setGapPenalty(gaps);\n        gu.setSubstitutionMatrix(blosum62);\n        assertEquals(gu.getScore(), alignment.getScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetComputationTime() {\n        assertTrue(alignment.getComputationTime() > 0);\n        assertTrue(self.getComputationTime() > 0);\n    }\n\n    @Test\n    public void testGetProfile() {\n        assertEquals(String.format(\"ARND%n-RDG%n\"), alignment.getProfile().toString());\n        assertEquals(String.format(\"ARND%nARND%n\"), self.getProfile().toString());\n    }\n\n    @Test\n    public void testGetMaxScore() {\n        assertEquals(21, alignment.getMaxScore(), PRECISION);\n        assertEquals(21, self.getMaxScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetMinScore() {\n        assertEquals(-27, alignment.getMinScore(), PRECISION);\n        assertEquals(-28, self.getMinScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetScore() {\n        assertEquals(-6, alignment.getScore(), PRECISION);\n        assertEquals(21, self.getScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetPair() {\n        assertEquals(String.format(\"ARND%n-RDG%n\"), alignment.getPair().toString());\n        assertEquals(String.format(\"ARND%nARND%n\"), self.getPair().toString());\n    }\n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_shorter_query() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"A\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"AT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tGuanUberbacher<DNASequence, NucleotideCompound> aligner = new GuanUberbacher<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)5, (short)2), SubstitutionMatrixHelper.getNuc4_4());\n\t\tassertEquals(String.format(\"A-%nAT%n\"), aligner.getPair().toString());\n    }\n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_shorter_target() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"AT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"A\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tGuanUberbacher<DNASequence, NucleotideCompound> aligner = new GuanUberbacher<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)5, (short)2), SubstitutionMatrixHelper.getNuc4_4());\n\t\tassertEquals(String.format(\"AT%nA-%n\"), aligner.getPair().toString());\n    }\n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_multiple_cuts() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"AAT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"AATG\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tGuanUberbacher<DNASequence, NucleotideCompound> aligner = new GuanUberbacher<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)2), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.setCutsPerSection(2); // 3 bases with 2 cuts\n\t\tassertEquals(String.format(\"AAT-%nAATG%n\"), aligner.getPair().toString());\n    }\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on August 11, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment.routines;\n\nimport org.biojava.nbio.alignment.SimpleGapPenalty;\nimport org.biojava.nbio.core.alignment.matrices.SubstitutionMatrixHelper;\nimport org.biojava.nbio.alignment.template.GapPenalty;\nimport org.biojava.nbio.core.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.DNASequence;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AmbiguityDNACompoundSet;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.NucleotideCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\npublic class GuanUberbacherTest {\n\n\tprivate static final double PRECISION = 0.00000001;\n\t\n    private ProteinSequence query, target;\n    private GapPenalty gaps;\n    private SubstitutionMatrix<AminoAcidCompound> blosum62;\n    private GuanUberbacher<ProteinSequence, AminoAcidCompound> alignment, self;\n\n    @Before\n    public void setup() throws CompoundNotFoundException { \n        query = new ProteinSequence(\"ARND\");\n        target = new ProteinSequence(\"RDG\");\n        gaps = new SimpleGapPenalty(10, 1);\n        blosum62 = SubstitutionMatrixHelper.getBlosum62();\n        alignment = new GuanUberbacher<ProteinSequence, AminoAcidCompound>(query, target, gaps, blosum62);\n        self = new GuanUberbacher<ProteinSequence, AminoAcidCompound>(query, query, gaps, blosum62);\n    }\n\n    @Test\n    public void testGuanUberbacher() {\n        GuanUberbacher<ProteinSequence, AminoAcidCompound> gu =\n                new GuanUberbacher<ProteinSequence, AminoAcidCompound>();\n        gu.setQuery(query);\n        gu.setTarget(target);\n        gu.setGapPenalty(gaps);\n        gu.setSubstitutionMatrix(blosum62);\n        assertEquals(gu.getScore(), alignment.getScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetComputationTime() {\n        assertTrue(alignment.getComputationTime() > 0);\n        assertTrue(self.getComputationTime() > 0);\n    }\n\n    @Test\n    public void testGetProfile() {\n        assertEquals(String.format(\"ARND%n-RDG%n\"), alignment.getProfile().toString());\n        assertEquals(String.format(\"ARND%nARND%n\"), self.getProfile().toString());\n    }\n\n    @Test\n    public void testGetMaxScore() {\n        assertEquals(21, alignment.getMaxScore(), PRECISION);\n        assertEquals(21, self.getMaxScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetMinScore() {\n        assertEquals(-27, alignment.getMinScore(), PRECISION);\n        assertEquals(-28, self.getMinScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetScore() {\n        assertEquals(-6, alignment.getScore(), PRECISION);\n        assertEquals(21, self.getScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetPair() {\n        assertEquals(String.format(\"ARND%n-RDG%n\"), alignment.getPair().toString());\n        assertEquals(String.format(\"ARND%nARND%n\"), self.getPair().toString());\n    }\n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_shorter_query() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"A\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"AT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tGuanUberbacher<DNASequence, NucleotideCompound> aligner = new GuanUberbacher<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)5, (short)2), SubstitutionMatrixHelper.getNuc4_4());\n\t\tassertEquals(String.format(\"A-%nAT%n\"), aligner.getPair().toString());\n    }\n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_shorter_target() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"AT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"A\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tGuanUberbacher<DNASequence, NucleotideCompound> aligner = new GuanUberbacher<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)5, (short)2), SubstitutionMatrixHelper.getNuc4_4());\n\t\tassertEquals(String.format(\"AT%nA-%n\"), aligner.getPair().toString());\n    }\n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_multiple_cuts() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"AAT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"AATG\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tGuanUberbacher<DNASequence, NucleotideCompound> aligner = new GuanUberbacher<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)2), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.setCutsPerSection(2); // 3 bases with 2 cuts\n\t\tassertEquals(String.format(\"AAT-%nAATG%n\"), aligner.getPair().toString());\n    }\n}\n","commitMessage":"Massive refactoring: moved alignment data structures from biojava-alignment to biojava-core.\nMantaining main biological data structures in core will help to avoid problems of unwanted dependency. Unfortunately the substitution matrices related classes are tight coupled with SimpleSequencePair class and were moved too from alignment.\n\nUpdated pom file to remove dependency of core from alignment module temporary added by first implementation of SearchIO.\n","test_commitMessage":"Massive refactoring: moved alignment data structures from biojava-alignment to biojava-core.\nMantaining main biological data structures in core will help to avoid problems of unwanted dependency. Unfortunately the substitution matrices related classes are tight coupled with SimpleSequencePair class and were moved too from alignment.\n\nUpdated pom file to remove dependency of core from alignment module temporary added by first implementation of SearchIO.\n","allZero":false}