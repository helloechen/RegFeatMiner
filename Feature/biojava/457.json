{"repository":"biojava","prod_path":"biojava-core/src/main/java/org/biojava/nbio/core/sequence/loader/GenbankProxySequenceReader.java","test_path":"biojava-core/src/test/java/org/biojava/nbio/core/sequence/loader/GenbankProxySequenceReaderTest.java","prod_time":"2015-12-03 20:16:57","test_time":"2015-12-03 20:16:57","type":"EDIT","proType":"EDIT","add_annotation_line":1,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"c9af1d7117f6a77745e02be58fa2d491b78c9a6d","test_commitID":"c9af1d7117f6a77745e02be58fa2d491b78c9a6d","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n * \n * @author Karl Nicholas <github:karlnicholas>\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 08-08-2013\n *\n */\npackage org.biojava.nbio.core.sequence.loader;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.AccessionID;\nimport org.biojava.nbio.core.sequence.DNASequence;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.compound.DNACompoundSet;\nimport org.biojava.nbio.core.sequence.compound.NucleotideCompound;\nimport org.biojava.nbio.core.sequence.features.*;\nimport org.biojava.nbio.core.sequence.io.GenbankSequenceParser;\nimport org.biojava.nbio.core.sequence.io.GenericGenbankHeaderParser;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\n\n/**\n * @author Karl Nicholas <github:karlnicholas>\n * @author Jacek Grzebyta <github:jgrzebyta>\n */\npublic class GenbankProxySequenceReader<C extends Compound> extends StringProxySequenceReader<C> implements FeaturesKeyWordInterface, DatabaseReferenceInterface, FeatureRetriever {\n\n\tprivate final static Logger logger = LoggerFactory.getLogger(GenbankProxySequenceReader.class);\n\n\tprivate static final String eutilBaseURL = \"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/\"; //\n    private String genbankDirectoryCache = null;\n    private GenbankSequenceParser<AbstractSequence<C>, C> genbankParser;\n    private GenericGenbankHeaderParser<AbstractSequence<C>, C> headerParser;\n    private String header;\n    private HashMap<String, ArrayList<AbstractFeature>> features;\n    \n\n    /**\n     * \n     * @throws InterruptedException \n     * @throws IOException \n     * @throws CompoundNotFoundException \n     */\n    public GenbankProxySequenceReader(\n            String genbankDirectoryCache,\n            String accessionID,\n            CompoundSet<C> compoundSet ) throws IOException, InterruptedException, CompoundNotFoundException {\n\n        setGenbankDirectoryCache(genbankDirectoryCache);\n        setCompoundSet(compoundSet);\n\n        String db = compoundSet instanceof AminoAcidCompoundSet ? \"protein\" : \"nuccore\";\n\n        InputStream inStream = getBufferedInputStream(accessionID, db);\n        genbankParser = new GenbankSequenceParser<AbstractSequence<C>, C>();\n\n        setContents(genbankParser.getSequence(new BufferedReader(new InputStreamReader(inStream)), 0));\n        headerParser = genbankParser.getSequenceHeaderParser();\n        header = genbankParser.getHeader();\n        features = genbankParser.getFeatures();\n\n        if (compoundSet.getClass().equals(AminoAcidCompoundSet.class)) {\n            if (!genbankParser.getCompoundType().equals(compoundSet)) {\n                logger.error(\"Declared compount type {} does not mach the real: {}\", genbankParser.getCompoundType().toString(), compoundSet.toString());\n                throw new IOException(\"Wrong declared compound type for: \" + accessionID); \n            }\n        }\n\n        inStream.close();\n    }\n\n    private BufferedInputStream getBufferedInputStream(String accessionID, String db) throws IOException, InterruptedException {\n        BufferedInputStream inStream = null;\n        if (genbankDirectoryCache != null && genbankDirectoryCache.length() > 0) {\n            File f = new File(genbankDirectoryCache + File.separatorChar + accessionID + \".gb\");\n            if (f.exists()) {\n                logger.debug(\"Reading: {}\", f.toString());\n                inStream = new BufferedInputStream(new FileInputStream(f));\n            } else {\n                InputStream in = getEutilsInputStream(accessionID, db);\n                copyInputStreamToFile(in, f);\n                inStream = new BufferedInputStream(new FileInputStream(f));\n            }\n        } else {\n            inStream = new BufferedInputStream(getEutilsInputStream(accessionID, db));\n        }\n        return inStream;\n    }\n\n    private void copyInputStreamToFile(InputStream in, File f) throws IOException, InterruptedException {\n        FileOutputStream out = new FileOutputStream(f);\n        byte[] buffer = new byte[1024];\n        int len = in.read(buffer);\n        while (len != -1) {\n            out.write(buffer, 0, len);\n            len = in.read(buffer);\n            if (Thread.interrupted()) {\n                in.close();\n                out.close();\n                throw new InterruptedException();\n            }\n        }\n        in.close();\n        out.close();\n    }\n\n    private InputStream getEutilsInputStream(String accessionID, String db) throws IOException {\n        String genbankURL = eutilBaseURL + \"efetch.fcgi?db=\" + db + \"&id=\" + accessionID + \"&rettype=gb&retmode=text\";\n        logger.trace(\"Loading: {}\", genbankURL);\n        URL genbank = new URL(genbankURL);\n        URLConnection genbankConnection = genbank.openConnection();\n        return genbankConnection.getInputStream();\n    }\n\n    /**\n     * Local directory cache of Genbank that can be downloaded\n     *\n     * @return the uniprotDirectoryCache\n     */\n    public String getGenbankDirectoryCache() {\n        return genbankDirectoryCache;\n    }\n\n    /**\n     * @param genbankDirectoryCache\n     */\n    public void setGenbankDirectoryCache(String genbankDirectoryCache) {\n        if (genbankDirectoryCache != null) {\n            File f = new File(genbankDirectoryCache);\n            if (!f.exists()) {\n                f.mkdirs();\n            }\n        }\n        this.genbankDirectoryCache = genbankDirectoryCache;\n    }\n\n    public String getHeader() {\n        return header;\n    }\n\n    public GenericGenbankHeaderParser<AbstractSequence<C>, C> getHeaderParser() {\n        return headerParser;\n    }\n    public HashMap<String, ArrayList<AbstractFeature>> getFeatures() {\n        return features;\n    }\n\n    @Override\n    public LinkedHashMap<String, ArrayList<DBReferenceInfo>> getDatabaseReferences() {\n        return genbankParser.getDatabaseReferences();\n    }\n\n    @Override\n    public ArrayList<String> getKeyWords() {\n        return genbankParser.getKeyWords();\n    }\n\n    public static void main(String[] args) throws Throwable {\n\n        GenbankProxySequenceReader<AminoAcidCompound> genbankProteinReader\n                = new GenbankProxySequenceReader<AminoAcidCompound>(\"/tmp\", \"NP_000257\", AminoAcidCompoundSet.getAminoAcidCompoundSet());\n        ProteinSequence proteinSequence = new ProteinSequence(genbankProteinReader);\n        genbankProteinReader.getHeaderParser().parseHeader(genbankProteinReader.getHeader(), proteinSequence);\n        logger.info(\"Sequence ({},{})={}...\", proteinSequence.getAccession(), proteinSequence.getLength(), proteinSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankProteinReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankProteinReader.getDatabaseReferences());\n        proteinSequence.getFeatures();\n\n        GenbankProxySequenceReader<NucleotideCompound> genbankDNAReader\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"NM_001126\", DNACompoundSet.getDNACompoundSet());\n        DNASequence dnaSequence = new DNASequence(genbankDNAReader);\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n        dnaSequence.setAccession(new AccessionID(\"NM_001126\"));\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n        genbankDNAReader\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"NM_000266\", DNACompoundSet.getDNACompoundSet());\n        dnaSequence = new DNASequence(genbankDNAReader);\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n        genbankDNAReader\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"AV254721\", DNACompoundSet.getDNACompoundSet());\n        dnaSequence = new DNASequence(genbankDNAReader);\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n        genbankDNAReader\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"AV254721.2\", DNACompoundSet.getDNACompoundSet());\n        dnaSequence = new DNASequence(genbankDNAReader);\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n        genbankDNAReader\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"U49845\", DNACompoundSet.getDNACompoundSet());\n        dnaSequence = new DNASequence(genbankDNAReader);\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n        genbankDNAReader\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"GI:1293613\", DNACompoundSet.getDNACompoundSet());\n        dnaSequence = new DNASequence(genbankDNAReader);\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n        genbankDNAReader\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"14109166\", DNACompoundSet.getDNACompoundSet());\n        dnaSequence = new DNASequence(genbankDNAReader);\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n        /*\n         GenbankProxySequenceReader genbankProxyReader = new GenbankProxySequenceReader(\"/tmp\");\n         Sequence<?> sequence;\n\n         sequence = genbankProxyReader.getDNASequence(new AccessionID(\"NM_001126\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n         sequence = genbankProxyReader.getDNASequence(new AccessionID(\"NM_000266\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\t\t\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"NP_000257\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\t\t\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"AV254721\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\t\t\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"AV254721.2\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\t\t\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"U49845\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\t\t\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"GI:1293613\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\t\t\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"14109166\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n         */\n    }\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n * \n * @author Karl Nicholas <github:karlnicholas>\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 08-08-2013\n *\n */\npackage org.biojava.nbio.core.sequence.loader;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.AccessionID;\nimport org.biojava.nbio.core.sequence.DNASequence;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.compound.DNACompoundSet;\nimport org.biojava.nbio.core.sequence.compound.NucleotideCompound;\nimport org.biojava.nbio.core.sequence.features.*;\nimport org.biojava.nbio.core.sequence.io.GenbankSequenceParser;\nimport org.biojava.nbio.core.sequence.io.GenericGenbankHeaderParser;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\n\n/**\n * @author Karl Nicholas <github:karlnicholas>\n * @author Jacek Grzebyta <github:jgrzebyta>\n */\npublic class GenbankProxySequenceReader<C extends Compound> extends StringProxySequenceReader<C> implements FeaturesKeyWordInterface, DatabaseReferenceInterface, FeatureRetriever {\n\n\tprivate final static Logger logger = LoggerFactory.getLogger(GenbankProxySequenceReader.class);\n\n\tprivate static final String eutilBaseURL = \"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/\"; //\n    private String genbankDirectoryCache = null;\n    private GenbankSequenceParser<AbstractSequence<C>, C> genbankParser;\n    private GenericGenbankHeaderParser<AbstractSequence<C>, C> headerParser;\n    private String header;\n    private HashMap<String, ArrayList<AbstractFeature>> features;\n    \n\n    /**\n     * \n     * @throws InterruptedException \n     * @throws IOException \n     * @throws CompoundNotFoundException \n     */\n    public GenbankProxySequenceReader(\n            String genbankDirectoryCache,\n            String accessionID,\n            CompoundSet<C> compoundSet ) throws IOException, InterruptedException, CompoundNotFoundException {\n\n        setGenbankDirectoryCache(genbankDirectoryCache);\n        setCompoundSet(compoundSet);\n\n        String db = compoundSet instanceof AminoAcidCompoundSet ? \"protein\" : \"nuccore\";\n\n        InputStream inStream = getBufferedInputStream(accessionID, db);\n        genbankParser = new GenbankSequenceParser<AbstractSequence<C>, C>();\n\n        setContents(genbankParser.getSequence(new BufferedReader(new InputStreamReader(inStream)), 0));\n        headerParser = genbankParser.getSequenceHeaderParser();\n        header = genbankParser.getHeader();\n        features = genbankParser.getFeatures();\n\n        if (compoundSet.getClass().equals(AminoAcidCompoundSet.class)) {\n            if (!genbankParser.getCompoundType().equals(compoundSet)) {\n                logger.error(\"Declared compount type {} does not mach the real: {}\", genbankParser.getCompoundType().toString(), compoundSet.toString());\n                throw new IOException(\"Wrong declared compound type for: \" + accessionID); \n            }\n        }\n\n        inStream.close();\n    }\n\n    private BufferedInputStream getBufferedInputStream(String accessionID, String db) throws IOException, InterruptedException {\n        BufferedInputStream inStream = null;\n        if (genbankDirectoryCache != null && genbankDirectoryCache.length() > 0) {\n            File f = new File(genbankDirectoryCache + File.separatorChar + accessionID + \".gb\");\n            if (f.exists()) {\n                logger.debug(\"Reading: {}\", f.toString());\n                inStream = new BufferedInputStream(new FileInputStream(f));\n            } else {\n                InputStream in = getEutilsInputStream(accessionID, db);\n                copyInputStreamToFile(in, f);\n                inStream = new BufferedInputStream(new FileInputStream(f));\n            }\n        } else {\n            inStream = new BufferedInputStream(getEutilsInputStream(accessionID, db));\n        }\n        return inStream;\n    }\n\n    private void copyInputStreamToFile(InputStream in, File f) throws IOException, InterruptedException {\n        FileOutputStream out = new FileOutputStream(f);\n        byte[] buffer = new byte[1024];\n        int len = in.read(buffer);\n        while (len != -1) {\n            out.write(buffer, 0, len);\n            len = in.read(buffer);\n            if (Thread.interrupted()) {\n                in.close();\n                out.close();\n                throw new InterruptedException();\n            }\n        }\n        in.close();\n        out.close();\n    }\n\n    private InputStream getEutilsInputStream(String accessionID, String db) throws IOException {\n        String genbankURL = eutilBaseURL + \"efetch.fcgi?db=\" + db + \"&id=\" + accessionID + \"&rettype=gb&retmode=text\";\n        logger.trace(\"Loading: {}\", genbankURL);\n        URL genbank = new URL(genbankURL);\n        URLConnection genbankConnection = genbank.openConnection();\n        return genbankConnection.getInputStream();\n    }\n\n    /**\n     * Local directory cache of Genbank that can be downloaded\n     *\n     * @return the uniprotDirectoryCache\n     */\n    public String getGenbankDirectoryCache() {\n        return genbankDirectoryCache;\n    }\n\n    /**\n     * @param genbankDirectoryCache\n     */\n    public void setGenbankDirectoryCache(String genbankDirectoryCache) {\n        if (genbankDirectoryCache != null) {\n            File f = new File(genbankDirectoryCache);\n            if (!f.exists()) {\n                f.mkdirs();\n            }\n        }\n        this.genbankDirectoryCache = genbankDirectoryCache;\n    }\n\n    public String getHeader() {\n        return header;\n    }\n\n    public GenericGenbankHeaderParser<AbstractSequence<C>, C> getHeaderParser() {\n        return headerParser;\n    }\n    @Override\n\tpublic HashMap<String, ArrayList<AbstractFeature>> getFeatures() {\n        return features;\n    }\n\n    @Override\n    public LinkedHashMap<String, ArrayList<DBReferenceInfo>> getDatabaseReferences() {\n        return genbankParser.getDatabaseReferences();\n    }\n\n    @Override\n    public ArrayList<String> getKeyWords() {\n        return genbankParser.getKeyWords();\n    }\n\n    public static void main(String[] args) throws Throwable {\n\n        GenbankProxySequenceReader<AminoAcidCompound> genbankProteinReader\n                = new GenbankProxySequenceReader<AminoAcidCompound>(\"/tmp\", \"NP_000257\", AminoAcidCompoundSet.getAminoAcidCompoundSet());\n        ProteinSequence proteinSequence = new ProteinSequence(genbankProteinReader);\n        genbankProteinReader.getHeaderParser().parseHeader(genbankProteinReader.getHeader(), proteinSequence);\n        logger.info(\"Sequence ({},{})={}...\", proteinSequence.getAccession(), proteinSequence.getLength(), proteinSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankProteinReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankProteinReader.getDatabaseReferences());\n        proteinSequence.getFeatures();\n\n        GenbankProxySequenceReader<NucleotideCompound> genbankDNAReader\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"NM_001126\", DNACompoundSet.getDNACompoundSet());\n        DNASequence dnaSequence = new DNASequence(genbankDNAReader);\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n        dnaSequence.setAccession(new AccessionID(\"NM_001126\"));\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n        genbankDNAReader\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"NM_000266\", DNACompoundSet.getDNACompoundSet());\n        dnaSequence = new DNASequence(genbankDNAReader);\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n        genbankDNAReader\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"AV254721\", DNACompoundSet.getDNACompoundSet());\n        dnaSequence = new DNASequence(genbankDNAReader);\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n        genbankDNAReader\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"AV254721.2\", DNACompoundSet.getDNACompoundSet());\n        dnaSequence = new DNASequence(genbankDNAReader);\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n        genbankDNAReader\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"U49845\", DNACompoundSet.getDNACompoundSet());\n        dnaSequence = new DNASequence(genbankDNAReader);\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n        genbankDNAReader\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"GI:1293613\", DNACompoundSet.getDNACompoundSet());\n        dnaSequence = new DNASequence(genbankDNAReader);\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n        genbankDNAReader\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"14109166\", DNACompoundSet.getDNACompoundSet());\n        dnaSequence = new DNASequence(genbankDNAReader);\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\n\n        /*\n         GenbankProxySequenceReader genbankProxyReader = new GenbankProxySequenceReader(\"/tmp\");\n         Sequence<?> sequence;\n\n         sequence = genbankProxyReader.getDNASequence(new AccessionID(\"NM_001126\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\n         sequence = genbankProxyReader.getDNASequence(new AccessionID(\"NM_000266\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\t\t\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"NP_000257\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\t\t\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"AV254721\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\t\t\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"AV254721.2\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\t\t\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"U49845\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\t\t\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"GI:1293613\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n\t\t\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"14109166\"));\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\n         */\n    }\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.sequence.loader;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.features.FeatureInterface;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport org.biojava.nbio.core.sequence.features.AbstractFeature;\nimport org.biojava.nbio.core.sequence.features.Qualifier;\nimport org.junit.Ignore;\n\n/**\n * Testing example for issue #834\n *\n * @author Jacek Grzebyta\n * @author Paolo Pavan\n * @see InfoTask\n */\n@RunWith(Parameterized.class)\npublic class GenbankProxySequenceReaderTest {\n\n    private String gi;\n    private final static Logger logger = LoggerFactory.getLogger(GenbankProxySequenceReaderTest.class);\n\n    public GenbankProxySequenceReaderTest(String gi) {\n        this.gi = gi;\n    }\n\n    @Parameterized.Parameters\n    public static Collection<String[]> getExamples() {\n        String[][] out = new String[][]{\n            {\"399235158\"},\n            {\"7525057\"},\n            {\"379015144\"},\n            {\"381353147\"},\n            {\"381353148\"},\n            {\"152970917\"},\n            {\"381353149\"},\n            {\"254839678\"}\n        };\n\n        return Arrays.asList(out);\n    }\n\n    @Test\n    public void testFeatures() throws IOException, InterruptedException, CompoundNotFoundException {\n        logger.info(\"run test for protein: {}\", gi);\n        GenbankProxySequenceReader<AminoAcidCompound> genbankReader\n                = new GenbankProxySequenceReader<AminoAcidCompound>(System.getProperty(\"java.io.tmpdir\"),\n                        this.gi,\n                        AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\n        // why only tests on protein sequences?\n        ProteinSequence seq = new ProteinSequence(genbankReader);\n\n        Assert.assertNotNull(\"protein sequence is null\", seq);\n\n        /*\n         parse description from header. There is no separate interface/abstract class for method getHeader()\n         so it should be done here (manualy).\n         */\n        genbankReader.getHeaderParser().parseHeader(genbankReader.getHeader(), seq);\n\n        // test description\n        Assert.assertTrue(seq.getDescription() != null);\n\n        // test accession Id\n        logger.info(\"accession id: {}\", seq.getAccession().getID());\n        Assert.assertNotNull(seq.getAccession().getID());\n        // test GID number\n        Assert.assertEquals(gi, seq.getAccession().getIdentifier());\n        logger.info(\"found identifier '{}'\", seq.getAccession().getIdentifier());\n\n        // test taxonomy id\n        logger.info(\"taxonomy id: {}\", seq.getTaxonomy().getID());\n        Assert.assertNotNull(seq.getTaxonomy().getID());\n        Assert.assertNotNull(Integer.decode(seq.getTaxonomy().getID().split(\":\")[1]));\n\n        // test taxonomy name\n        String taxonName = seq.getFeaturesByType(\"source\").get(0).getQualifiers().get(\"organism\").getValue();\n        logger.info(\"taxonomy name '{}'\", taxonName);\n        Assert.assertNotNull(taxonName);\n\n        if (seq.getFeaturesByType(\"CDS\").size() > 0) {\n            FeatureInterface<AbstractSequence<AminoAcidCompound>, AminoAcidCompound> CDS = seq.getFeaturesByType(\"CDS\").get(0);\n            logger.info(\"CDS: {}\", CDS);\n            String codedBy = CDS.getQualifiers().get(\"coded_by\").getValue();\n            Assert.assertNotNull(codedBy);\n            Assert.assertTrue(!codedBy.isEmpty());\n            logger.info(\"\\t\\tcoded_by: {}\", codedBy);\n        }\n    }\n\n    @Test\n    public void testProteinSequenceFactoring() throws Exception {\n        logger.info(\"create protein sequence test for target {}\", gi);\n\n        GenbankProxySequenceReader<AminoAcidCompound> genbankReader\n                = new GenbankProxySequenceReader<AminoAcidCompound>(System.getProperty(\"java.io.tmpdir\"),\n                        this.gi,\n                        AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\n        ProteinSequence seq = new ProteinSequence(genbankReader);\n\n        // if target protein contain CDS/coded_by than it should contain parent nucleotide seq\n        ArrayList<AbstractFeature> CDSs = genbankReader.getFeatures().get(\"CDS\");\n\n        if (CDSs != null) {\n            if (CDSs.size() == 1) {\n                Qualifier codedBy = (Qualifier) CDSs.get(0).getQualifiers().get(\"coded_by\");\n                if (codedBy != null) {\n\n                    AbstractSequence<?> parentSeq = seq.getParentSequence();\n                    Assert.assertNotNull(parentSeq);\n\n                    /* \n                     Sometimes protein might have many 'parents' with different accessions\n                     so accession is not set.\n                \n                     That test is always failed\n                     */\n                    //Assert.assertTrue(parentSeq.getAccession()); \n                    Assert.assertTrue(!parentSeq.getSequenceAsString().isEmpty());\n                }\n            }\n        } else {\n            logger.info(\"target {} has no CDS\", gi);\n        }\n\n    }\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.sequence.loader;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.features.FeatureInterface;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport org.biojava.nbio.core.sequence.features.AbstractFeature;\nimport org.biojava.nbio.core.sequence.features.Qualifier;\n\n/**\n * Testing example for issue #834\n *\n * @author Jacek Grzebyta\n * @author Paolo Pavan\n * @see InfoTask\n */\n@RunWith(Parameterized.class)\npublic class GenbankProxySequenceReaderTest {\n\n    private String gi;\n    private final static Logger logger = LoggerFactory.getLogger(GenbankProxySequenceReaderTest.class);\n\n    public GenbankProxySequenceReaderTest(String gi) {\n        this.gi = gi;\n    }\n\n    @Parameterized.Parameters\n    public static Collection<String[]> getExamples() {\n        String[][] out = new String[][]{\n            {\"399235158\"},\n            {\"7525057\"},\n            {\"379015144\"},\n            {\"381353147\"},\n            {\"381353148\"},\n            {\"152970917\"},\n            {\"381353149\"},\n            {\"254839678\"}\n        };\n\n        return Arrays.asList(out);\n    }\n\n    @Test\n    public void testFeatures() throws IOException, InterruptedException, CompoundNotFoundException {\n        logger.info(\"run test for protein: {}\", gi);\n        GenbankProxySequenceReader<AminoAcidCompound> genbankReader\n                = new GenbankProxySequenceReader<AminoAcidCompound>(System.getProperty(\"java.io.tmpdir\"),\n                        this.gi,\n                        AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\n        // why only tests on protein sequences?\n        ProteinSequence seq = new ProteinSequence(genbankReader);\n\n        Assert.assertNotNull(\"protein sequence is null\", seq);\n\n        /*\n         parse description from header. There is no separate interface/abstract class for method getHeader()\n         so it should be done here (manualy).\n         */\n        genbankReader.getHeaderParser().parseHeader(genbankReader.getHeader(), seq);\n\n        // test description\n        Assert.assertTrue(seq.getDescription() != null);\n\n        // test accession Id\n        logger.info(\"accession id: {}\", seq.getAccession().getID());\n        Assert.assertNotNull(seq.getAccession().getID());\n        // test GID number\n        Assert.assertEquals(gi, seq.getAccession().getIdentifier());\n        logger.info(\"found identifier '{}'\", seq.getAccession().getIdentifier());\n\n        // test taxonomy id\n        logger.info(\"taxonomy id: {}\", seq.getTaxonomy().getID());\n        Assert.assertNotNull(seq.getTaxonomy().getID());\n        Assert.assertNotNull(Integer.decode(seq.getTaxonomy().getID().split(\":\")[1]));\n\n        // test taxonomy name\n        String taxonName = seq.getFeaturesByType(\"source\").get(0).getQualifiers().get(\"organism\").getValue();\n        logger.info(\"taxonomy name '{}'\", taxonName);\n        Assert.assertNotNull(taxonName);\n\n        if (seq.getFeaturesByType(\"CDS\").size() > 0) {\n            FeatureInterface<AbstractSequence<AminoAcidCompound>, AminoAcidCompound> CDS = seq.getFeaturesByType(\"CDS\").get(0);\n            logger.info(\"CDS: {}\", CDS);\n            String codedBy = CDS.getQualifiers().get(\"coded_by\").getValue();\n            Assert.assertNotNull(codedBy);\n            Assert.assertTrue(!codedBy.isEmpty());\n            logger.info(\"\\t\\tcoded_by: {}\", codedBy);\n        }\n    }\n\n    @Test\n    public void testProteinSequenceFactoring() throws Exception {\n        logger.info(\"create protein sequence test for target {}\", gi);\n\n        GenbankProxySequenceReader<AminoAcidCompound> genbankReader\n                = new GenbankProxySequenceReader<AminoAcidCompound>(System.getProperty(\"java.io.tmpdir\"),\n                        this.gi,\n                        AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\n        ProteinSequence seq = new ProteinSequence(genbankReader);\n\n        // if target protein contain CDS/coded_by than it should contain parent nucleotide seq\n        ArrayList<AbstractFeature> CDSs = genbankReader.getFeatures().get(\"CDS\");\n\n        if (CDSs != null) {\n            if (CDSs.size() == 1) {\n                Qualifier codedBy = (Qualifier) CDSs.get(0).getQualifiers().get(\"coded_by\");\n                if (codedBy != null) {\n\n                    AbstractSequence<?> parentSeq = seq.getParentSequence();\n                    Assert.assertNotNull(parentSeq);\n\n                    /* \n                     Sometimes protein might have many 'parents' with different accessions\n                     so accession is not set.\n                \n                     That test is always failed\n                     */\n                    //Assert.assertTrue(parentSeq.getAccession()); \n                    Assert.assertTrue(!parentSeq.getSequenceAsString().isEmpty());\n                }\n            }\n        } else {\n            logger.info(\"target {} has no CDS\", gi);\n        }\n\n    }\n}\n","commitMessage":"Fixing some minor warnings\n","test_commitMessage":"Fixing some minor warnings\n","allZero":false}