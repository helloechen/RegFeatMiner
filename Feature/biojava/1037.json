{"repository":"biojava","prod_path":"biojava-core/src/main/java/org/biojava/nbio/core/sequence/io/CasePreservingProteinSequenceCreator.java","test_path":"biojava-core/src/test/java/org/biojava/nbio/core/sequence/io/CasePreservingProteinSequenceCreatorTest.java","prod_time":"2021-11-16 06:04:29","test_time":"2021-11-16 06:04:29","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":5,"del_classname_line":0,"del_condition_line":0,"del_field_line":1,"del_import_line":1,"del_packageid_line":0,"del_parameter_line":1,"del_return_line":0,"label":"POSITIVE","prod_commitID":"c3700d5a3038a7fb2b8691a24dda26645f0a33d8","test_commitID":"c3700d5a3038a7fb2b8691a24dda26645f0a33d8","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\nimport org.biojava.nbio.core.sequence.template.ProxySequenceReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Locale;\n\n/**\n * A sequence creator which preserves the case of its input string in\n * the user collection of the returned ProteinSequence.\n *\n * <p>The user collection will be the same length as the resulting ProteinSequence.\n * Each object can be cast to a Boolean. If true, the corresponding position in\n * the input file was uppercase.\n *\n * <h3>Example</h3>\n * <code><pre>CasePreservingProteinSequenceCreator creator =\n *    new CasePreservingProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet());\n *AbstractSequence<AminoAcidCompound> seq = creator.getSequence(\"aaAA\",0);\n *System.out.println(seq.getSequenceAsString()); //\"AAAA\"\n *System.out.println(seq.getUserCollection()); //\"[false, false, true, true]\"\n *</code></pre>\n */\npublic class CasePreservingProteinSequenceCreator extends ProteinSequenceCreator {\n\n\tprivate final static Logger logger = LoggerFactory.getLogger(CasePreservingProteinSequenceCreator.class);\n\n\tpublic CasePreservingProteinSequenceCreator(\n\t\t\tCompoundSet<AminoAcidCompound> compoundSet) {\n\t\tsuper(compoundSet);\n\t}\n\n\t/**\n\t *\n\t * @see org.biojava.nbio.core.sequence.io.ProteinSequenceCreator#getSequence(org.biojava.nbio.core.sequence.template.ProxySequenceReader, long)\n\t */\n\t@Override\n\tpublic AbstractSequence<AminoAcidCompound> getSequence(\n\t\t\tProxySequenceReader<AminoAcidCompound> proxyLoader, long index) {\n\t\tAbstractSequence<AminoAcidCompound> seq = super.getSequence(proxyLoader, index);\n\t\tseq.setUserCollection(getStringCase(proxyLoader.getSequenceAsString()));\n\t\treturn seq;\n\t}\n\n\t/* (non-Javadoc)\n\t * @see org.biojava.nbio.core.sequence.io.ProteinSequenceCreator#getSequence(java.lang.String, long)\n\t */\n\t@Override\n\tpublic AbstractSequence<AminoAcidCompound> getSequence(String sequence,\n\t\t\tlong index) throws CompoundNotFoundException {\n\t\tAbstractSequence<AminoAcidCompound> seq = super.getSequence(sequence.toUpperCase(Locale.ENGLISH), index);\n\t\tseq.setUserCollection(getStringCase(sequence));\n\t\treturn seq;\n\t}\n\n\n\t/**\n\t * Assumes all compounds were uppercase\n\t * @see org.biojava.nbio.core.sequence.io.ProteinSequenceCreator#getSequence(java.util.List)\n\t */\n\t@Override\n\tpublic AbstractSequence<AminoAcidCompound> getSequence(\n\t\t\tList<AminoAcidCompound> list) {\n\t\tAbstractSequence<AminoAcidCompound> seq =super.getSequence(list);\n\t\tCollection<Object> strCase = new ArrayList<Object>(seq.getLength());\n\t\tfor(int i=0;i<seq.getLength();i++) {\n\t\t\tstrCase.add(true);\n\t\t}\n\t\tseq.setUserCollection(strCase);\n\t\treturn seq;\n\t}\n\n\t/**\n\t * Returns a list of Booleans of the same length as the input, specifying\n\t * whether each character was uppercase or not.\n\t * @param str A string. Should not contain unicode supplemental characters.\n\t * @return a list of Booleans of the same length as the input, specifying\n\t * whether each character was uppercase or not.\n\t * This list contains only Booleans.\n\t */\n\tprivate static List<Object> getStringCase(String str) {\n\t\tList<Object> types = new ArrayList<Object>(str.length());\n\t\tfor(int i=0;i<str.length();i++) {\n\t\t\ttypes.add(Character.isUpperCase(str.charAt(i)));\n\t\t}\n\t\treturn types;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tCasePreservingProteinSequenceCreator creator = new CasePreservingProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\t\tAbstractSequence<AminoAcidCompound> seq = creator.getSequence(\"aaAA\",0);\n\t\tlogger.info(\"Sequence: {}\", seq.getSequenceAsString()); //\"AAAA\"\n\t\tlogger.info(\"User Collection: {}\", seq.getUserCollection()); //\"[false, false, true, true]\"\n\t}\n\n\t/**\n\t * Takes a {@link ProteinSequence} which was created by a\n\t * {@link CasePreservingProteinSequenceCreator}. Uses the case info\n\t * stored in the user collection to modify the output array.\n\t *\n\t * <p>Sets elements of the output array which correspond to lowercase letters\n\t * to null.\n\t *\n\t * @param seq Input sequence with case stored as the user collection\n\t * @param out\n\t */\n\tpublic static void setLowercaseToNull( ProteinSequence seq,\n\t\t\tObject[] out) {\n\t\t// should have been set by seq creator\n\t\tCollection<Object> userCollection = seq.getUserCollection();\n\t\tif(userCollection == null)\n\t\t\tthrow new IllegalArgumentException(\"Sequence doesn't contain valid case info\");\n\t\tif(userCollection.size() != out.length)\n\t\t\tthrow new IllegalArgumentException(\"Sequence length doesn't math output array length\");\n\n\t\tint pos = 0;\n\t\tfor(Object isAligned : userCollection) {\n\t\t\tassert(isAligned instanceof Boolean);\n\t\t\tif(!(Boolean)isAligned) {\n\t\t\t\tout[pos] = null;\n\t\t\t}\n\t\t\tpos++;\n\t\t}\n\t}\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\nimport org.biojava.nbio.core.sequence.template.ProxySequenceReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Locale;\n\n/**\n * A sequence creator which preserves the case of its input string in\n * the user collection of the returned ProteinSequence.\n *\n * <p>The user collection will be the same length as the resulting ProteinSequence.\n * Each object can be cast to a Boolean. If true, the corresponding position in\n * the input file was uppercase.\n *\n * <h3>Example</h3>\n * <code><pre>CasePreservingProteinSequenceCreator creator =\n *    new CasePreservingProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet());\n *AbstractSequence<AminoAcidCompound> seq = creator.getSequence(\"aaAA\",0);\n *System.out.println(seq.getSequenceAsString()); //\"AAAA\"\n *System.out.println(seq.getUserCollection()); //\"[false, false, true, true]\"\n *</code></pre>\n */\npublic class CasePreservingProteinSequenceCreator extends ProteinSequenceCreator {\n\n\n\tpublic CasePreservingProteinSequenceCreator(\n\t\t\tCompoundSet<AminoAcidCompound> compoundSet) {\n\t\tsuper(compoundSet);\n\t}\n\n\t/**\n\t *\n\t * @see org.biojava.nbio.core.sequence.io.ProteinSequenceCreator#getSequence(org.biojava.nbio.core.sequence.template.ProxySequenceReader, long)\n\t */\n\t@Override\n\tpublic AbstractSequence<AminoAcidCompound> getSequence(\n\t\t\tProxySequenceReader<AminoAcidCompound> proxyLoader, long index) {\n\t\tAbstractSequence<AminoAcidCompound> seq = super.getSequence(proxyLoader, index);\n\t\tseq.setUserCollection(getStringCase(proxyLoader.getSequenceAsString()));\n\t\treturn seq;\n\t}\n\n\t/* (non-Javadoc)\n\t * @see org.biojava.nbio.core.sequence.io.ProteinSequenceCreator#getSequence(java.lang.String, long)\n\t */\n\t@Override\n\tpublic AbstractSequence<AminoAcidCompound> getSequence(String sequence,\n\t\t\tlong index) throws CompoundNotFoundException {\n\t\tAbstractSequence<AminoAcidCompound> seq = super.getSequence(sequence.toUpperCase(Locale.ENGLISH), index);\n\t\tseq.setUserCollection(getStringCase(sequence));\n\t\treturn seq;\n\t}\n\n\n\t/**\n\t * Assumes all compounds were uppercase\n\t * @see org.biojava.nbio.core.sequence.io.ProteinSequenceCreator#getSequence(java.util.List)\n\t */\n\t@Override\n\tpublic AbstractSequence<AminoAcidCompound> getSequence(\n\t\t\tList<AminoAcidCompound> list) {\n\t\tAbstractSequence<AminoAcidCompound> seq =super.getSequence(list);\n\t\tCollection<Object> strCase = new ArrayList<Object>(seq.getLength());\n\t\tfor(int i=0;i<seq.getLength();i++) {\n\t\t\tstrCase.add(true);\n\t\t}\n\t\tseq.setUserCollection(strCase);\n\t\treturn seq;\n\t}\n\n\t/**\n\t * Returns a list of Booleans of the same length as the input, specifying\n\t * whether each character was uppercase or not.\n\t * @param str A string. Should not contain unicode supplemental characters.\n\t * @return a list of Booleans of the same length as the input, specifying\n\t * whether each character was uppercase or not.\n\t * This list contains only Booleans.\n\t */\n\tprivate static List<Object> getStringCase(String str) {\n\t\tList<Object> types = new ArrayList<Object>(str.length());\n\t\tfor(int i=0;i<str.length();i++) {\n\t\t\ttypes.add(Character.isUpperCase(str.charAt(i)));\n\t\t}\n\t\treturn types;\n\t}\n\n\n\t/**\n\t * Takes a {@link ProteinSequence} which was created by a\n\t * {@link CasePreservingProteinSequenceCreator}. Uses the case info\n\t * stored in the user collection to modify the output array.\n\t *\n\t * <p>Sets elements of the output array which correspond to lowercase letters\n\t * to null.\n\t *\n\t * @param seq Input sequence with case stored as the user collection\n\t * @param out\n\t */\n\tpublic static void setLowercaseToNull( ProteinSequence seq,\n\t\t\tObject[] out) {\n\t\t// should have been set by seq creator\n\t\tCollection<Object> userCollection = seq.getUserCollection();\n\t\tif(userCollection == null)\n\t\t\tthrow new IllegalArgumentException(\"Sequence doesn't contain valid case info\");\n\t\tif(userCollection.size() != out.length)\n\t\t\tthrow new IllegalArgumentException(\"Sequence length doesn't math output array length\");\n\n\t\tint pos = 0;\n\t\tfor(Object isAligned : userCollection) {\n\t\t\tassert(isAligned instanceof Boolean);\n\t\t\tif(!(Boolean)isAligned) {\n\t\t\t\tout[pos] = null;\n\t\t\t}\n\t\t\tpos++;\n\t\t}\n\t}\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.junit.Test;\n\nimport java.util.Collection;\n\nimport static org.junit.Assert.*;\n\npublic class CasePreservingProteinSequenceCreatorTest {\n\n\t@Test\n\tpublic void testConstructor() throws CompoundNotFoundException {\n\t\tCasePreservingProteinSequenceCreator creator = new CasePreservingProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\n\t\tString seq = \"aCDEfgHI-Jkl\";\n\t\tProteinSequence prot = (ProteinSequence) creator.getSequence(seq, 0);\n\t\tCollection<Object> uppercase = prot.getUserCollection();\n\n\t\t//test some assumptions. Hopefully work on non-english locals too?\n\t\tassertFalse(Character.isUpperCase('-'));\n\t\tassertFalse(Character.isUpperCase('.'));\n\n\t\tassertEquals(\"Lengths differ\",seq.length(),uppercase.size());\n\n\t\tint i=0;\n\t\tfor(Object obj : uppercase) {\n\t\t\tassertTrue(\"Not a Boolean\",obj instanceof Boolean);\n\t\t\tBoolean bool = (Boolean)obj;\n\t\t\tassertEquals(\"Doesn't match case of \"+seq.charAt(i),Character.isUpperCase(seq.charAt(i)),bool);\n\t\t\ti++;\n\t\t}\n\t}\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\nclass CasePreservingProteinSequenceCreatorTest {\n\n\t@Test\n\tvoid testConstructor() throws CompoundNotFoundException {\n\t\tCasePreservingProteinSequenceCreator creator = new CasePreservingProteinSequenceCreator(\n\t\t\t\tAminoAcidCompoundSet.getAminoAcidCompoundSet());\n\n\t\tString seq = \"aCDEfgHI-Jkl\";\n\t\tProteinSequence prot = (ProteinSequence) creator.getSequence(seq, 0);\n\t\tCollection<Object> uppercase = prot.getUserCollection();\n\n\t\t// test some assumptions. Hopefully work on non-english locals too?\n\t\tassertFalse(Character.isUpperCase('-'));\n\t\tassertFalse(Character.isUpperCase('.'));\n\n\t\tassertEquals(seq.length(), uppercase.size(), \"Lengths differ\");\n\n\t\tint i = 0;\n\t\tfor (Object obj : uppercase) {\n\t\t\tassertTrue(obj instanceof Boolean, \"Not a Boolean\");\n\t\t\tBoolean bool = (Boolean) obj;\n\t\t\tassertEquals(Character.isUpperCase(seq.charAt(i)), bool, \"Doesn't match case of \" + seq.charAt(i));\n\t\t\ti++;\n\t\t}\n\t}\n\n\t@Test\n\tvoid booleanConversion() throws CompoundNotFoundException {\n\t\tCasePreservingProteinSequenceCreator creator = new CasePreservingProteinSequenceCreator(\n\t\t\t\tAminoAcidCompoundSet.getAminoAcidCompoundSet());\n\t\tAbstractSequence<AminoAcidCompound> seq = creator.getSequence(\"aaAA\", 0);\n\t\tassertEquals(\"AAAA\", seq.getSequenceAsString());\n\t\tBoolean[] expected = new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.TRUE };\n\t\tIterator<Object> userCollection = seq.getUserCollection().iterator();\n\t\tfor (int i = 0; i < seq.getLength(); i++) {\n\t\t\tassertEquals(expected[i], userCollection.next());\n\t\t}\n\n\t}\n\n}\n","commitMessage":"move CasePreservingProteinSequenceCreator  main to junit\n","test_commitMessage":"move CasePreservingProteinSequenceCreator  main to junit\n","allZero":false}