{"repository":"biojava","prod_path":"biojava3-structure/src/main/java/org/biojava/bio/structure/ResidueNumber.java","test_path":"biojava3-structure/src/test/java/org/biojava/bio/structure/ResidueNumberTest.java","prod_time":"2011-09-14 07:40:38","test_time":"","type":"","proType":"EDIT","add_annotation_line":1,"add_call_line":7,"add_classname_line":1,"add_condition_line":5,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":1,"add_return_line":5,"del_annotation_line":0,"del_call_line":0,"del_classname_line":1,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"9dd1d1593543fa1e31d642d02620a55d2515f638","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Jun 17, 2010\n * Author: ap3 \n *\n */\n\npackage org.biojava.bio.structure;\n\nimport java.io.Serializable;\nimport java.io.StringWriter;\n\n/** Everything that is needed to uniquely describe a residue position\n * \n * @author Andreas Prlic\n *\n */\npublic class ResidueNumber implements Serializable\n{\n\n\tprivate static final long serialVersionUID = 1773011704758536083L;\n\tprivate String chainId;\n\tprivate Character insCode;\n\tprivate Integer seqNum;\n\n\tpublic ResidueNumber() {\n\t}\n\n\tpublic ResidueNumber(String chainId, Integer residueNumber, Character insCode) {\n\t\tthis.chainId = chainId;\n\t\tthis.seqNum = residueNumber;\n\t\tthis.insCode = insCode;\n\t}\n\n\tpublic String getChainId()\n\t{\n\t\treturn chainId;\n\t}\n\tpublic void setChainId(String chainId)\n\t{\n\t\tthis.chainId = chainId;\n\t}\n\tpublic Character getInsCode()\n\t{\n\t\treturn insCode;\n\t}\n\tpublic void setInsCode(Character insCode)\n\t{\n\t\tthis.insCode = insCode;\n\t}\n\tpublic Integer getSeqNum()\n\t{\n\t\treturn seqNum;\n\t}\n\tpublic void setSeqNum(Integer seqNum)\n\t{\n\t\tthis.seqNum = seqNum;\n\t}\n\n\t/**\n\t * Require chainId, insCode, and seqNum to be equal\n\t * @param obj\n\t * @return\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (!(obj instanceof ResidueNumber))\n\t\t\treturn false;\n\n\t\tif (obj==this)\n\t\t\treturn true;\n\n\t\tResidueNumber anNumber = (ResidueNumber) obj;\n\n\n\n\t\tif (insCode!=null) {\n\t\t\tif (insCode != anNumber.getInsCode()) \n\t\t\t\treturn false;\n\t\t} else {\n\t\t\tif (anNumber.getInsCode()!=null)\n\t\t\t\treturn false;\n\t\t}\n\t\tif (seqNum!=null) {\n\t\t\tif (!seqNum.equals(anNumber.getSeqNum()))\n\t\t\t\treturn false;\n\t\t} else {\n\t\t\tif (anNumber.getSeqNum()!=null)\n\t\t\t\treturn false;\n\t\t}\n\n\t\tif ( chainId != null) {\n\t\t\tif ( ! chainId.equals(anNumber.getChainId()))\n\t\t\t\treturn false;\n\t\t} else {\n\t\t\tif ( anNumber.getChainId() != null)\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tint result = 17;\n\t\tresult = 31 * result + (chainId != null ? chainId.hashCode() : 0);\n\t\tresult = 31 * result + (seqNum != null ? seqNum.hashCode() : 0);\n\t\tresult = 31 * result + (insCode==null ? 0 : insCode.hashCode());\n\t\treturn result;\n\t}\n\n\t/**\n\t * @return The residue number and insertion code as a string, eg \"74A\"\n\t * @see java.lang.Object#toString()\n\t */\n\t@Override\n\tpublic String toString() {\n\n\t\tStringWriter writer = new StringWriter();\n\t\t//\t   if ( chainId != null){\n\t\t\t//\t\t   writer.append(chainId);\n\t\t\t//\t\t   writer.append(\":\");\n\t\t\t//\t   }\n\t\twriter.append(seqNum+\"\");\n\t\tif (  insCode != null && \n\t\t\t\t( insCode != ' '))\n\t\t\twriter.append(insCode);\n\n\t\treturn writer.toString();\n\t}\n\n\t/**\n\t * @return The chain, number, and insertion code as a string, eg \"B  74A\" or \"A    1 \"\n\t */\n\tpublic String toPDB() {\n\t\tString insCodeS ;\n\t\tif ( insCode != null)\n\t\t\tinsCodeS = insCode+\"\";\n\t\telse insCodeS = \" \";\n\t\treturn String.format(\"%s%4d%-2s\", chainId, seqNum, insCodeS);\n\t}\n\n\t\n\t/** Convert a string representation of a residue number to a residue number object.\n\t * The string representation can be a integer followed by a character.\n\t * \n\t * @param pdb_code\n\t * @return a ResidueNumber object\n\t */\n\tpublic static ResidueNumber fromString(String pdb_code) {\n\t\tResidueNumber residueNumber = new ResidueNumber();\n\t\tInteger resNum = null;\n\t\tString icode = null;\t\t\n\t\t\n\t\ttry {\n\t\t\tresNum = Integer.parseInt(pdb_code);\n\t\t} catch ( NumberFormatException e){\n\t\t\t// there is an insertion code..\n\t\t\n\t\t\t// Split at any position that's either:\n\t\t\t// preceded by a digit and followed by a non-digit, or\n\t\t\t// preceded by a non-digit and followed by a digit.\n\t\t\tString[] spl = pdb_code.split(\"(?<=\\\\d)(?=\\\\D)|(?<=\\\\D)(?=\\\\d)\");\n\t\t\tif ( spl.length == 2){\n\t\t\t\tresNum = Integer.parseInt(spl[0]);\n\t\t\t\ticode = spl[1];\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\t\t\n\t\tresidueNumber.setSeqNum(resNum);\n\t\tif ( icode == null)\n\t\t\tresidueNumber.setInsCode(null);\n\t\telse if ( icode.length() > 0)\n\t\t\tresidueNumber.setInsCode(icode.charAt(0));\n\t\treturn residueNumber;\n\t}\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Jun 17, 2010\n * Author: ap3 \n *\n */\n\npackage org.biojava.bio.structure;\n\nimport java.io.Serializable;\nimport java.io.StringWriter;\n\n/** Everything that is needed to uniquely describe a residue position\n * \n * @author Andreas Prlic\n *\n */\npublic class ResidueNumber implements Serializable, Comparable<ResidueNumber>\n{\n\n\tprivate static final long serialVersionUID = 1773011704758536083L;\n\tprivate String chainId;\n\tprivate Character insCode;\n\tprivate Integer seqNum;\n\n\tpublic ResidueNumber() {\n\t}\n\n\tpublic ResidueNumber(String chainId, Integer residueNumber, Character insCode) {\n\t\tthis.chainId = chainId;\n\t\tthis.seqNum = residueNumber;\n\t\tthis.insCode = insCode;\n\t}\n\n\tpublic String getChainId()\n\t{\n\t\treturn chainId;\n\t}\n\tpublic void setChainId(String chainId)\n\t{\n\t\tthis.chainId = chainId;\n\t}\n\tpublic Character getInsCode()\n\t{\n\t\treturn insCode;\n\t}\n\tpublic void setInsCode(Character insCode)\n\t{\n\t\tthis.insCode = insCode;\n\t}\n\tpublic Integer getSeqNum()\n\t{\n\t\treturn seqNum;\n\t}\n\tpublic void setSeqNum(Integer seqNum)\n\t{\n\t\tthis.seqNum = seqNum;\n\t}\n\n\t/**\n\t * Require chainId, insCode, and seqNum to be equal\n\t * @param obj\n\t * @return\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (!(obj instanceof ResidueNumber))\n\t\t\treturn false;\n\n\t\tif (obj==this)\n\t\t\treturn true;\n\n\t\tResidueNumber anNumber = (ResidueNumber) obj;\n\n\n\n\t\tif (insCode!=null) {\n\t\t\tif (insCode != anNumber.getInsCode()) \n\t\t\t\treturn false;\n\t\t} else {\n\t\t\tif (anNumber.getInsCode()!=null)\n\t\t\t\treturn false;\n\t\t}\n\t\tif (seqNum!=null) {\n\t\t\tif (!seqNum.equals(anNumber.getSeqNum()))\n\t\t\t\treturn false;\n\t\t} else {\n\t\t\tif (anNumber.getSeqNum()!=null)\n\t\t\t\treturn false;\n\t\t}\n\n\t\tif ( chainId != null) {\n\t\t\tif ( ! chainId.equals(anNumber.getChainId()))\n\t\t\t\treturn false;\n\t\t} else {\n\t\t\tif ( anNumber.getChainId() != null)\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tint result = 17;\n\t\tresult = 31 * result + (chainId != null ? chainId.hashCode() : 0);\n\t\tresult = 31 * result + (seqNum != null ? seqNum.hashCode() : 0);\n\t\tresult = 31 * result + (insCode==null ? 0 : insCode.hashCode());\n\t\treturn result;\n\t}\n\n\t/**\n\t * @return The residue number and insertion code as a string, eg \"74A\"\n\t * @see java.lang.Object#toString()\n\t */\n\t@Override\n\tpublic String toString() {\n\n\t\tStringWriter writer = new StringWriter();\n\t\t//\t   if ( chainId != null){\n\t\t\t//\t\t   writer.append(chainId);\n\t\t\t//\t\t   writer.append(\":\");\n\t\t\t//\t   }\n\t\twriter.append(seqNum+\"\");\n\t\tif (  insCode != null && \n\t\t\t\t( insCode != ' '))\n\t\t\twriter.append(insCode);\n\n\t\treturn writer.toString();\n\t}\n\n\t/**\n\t * @return The chain, number, and insertion code as a string, eg \"B  74A\" or \"A    1 \"\n\t */\n\tpublic String toPDB() {\n\t\tString insCodeS ;\n\t\tif ( insCode != null)\n\t\t\tinsCodeS = insCode+\"\";\n\t\telse insCodeS = \" \";\n\t\treturn String.format(\"%s%4d%-2s\", chainId, seqNum, insCodeS);\n\t}\n\n\t\n\t/** Convert a string representation of a residue number to a residue number object.\n\t * The string representation can be a integer followed by a character.\n\t * \n\t * @param pdb_code\n\t * @return a ResidueNumber object\n\t */\n\tpublic static ResidueNumber fromString(String pdb_code) {\n\t\tResidueNumber residueNumber = new ResidueNumber();\n\t\tInteger resNum = null;\n\t\tString icode = null;\t\t\n\t\t\n\t\ttry {\n\t\t\tresNum = Integer.parseInt(pdb_code);\n\t\t} catch ( NumberFormatException e){\n\t\t\t// there is an insertion code..\n\t\t\n\t\t\t// Split at any position that's either:\n\t\t\t// preceded by a digit and followed by a non-digit, or\n\t\t\t// preceded by a non-digit and followed by a digit.\n\t\t\tString[] spl = pdb_code.split(\"(?<=\\\\d)(?=\\\\D)|(?<=\\\\D)(?=\\\\d)\");\n\t\t\tif ( spl.length == 2){\n\t\t\t\tresNum = Integer.parseInt(spl[0]);\n\t\t\t\ticode = spl[1];\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\t\t\n\t\tresidueNumber.setSeqNum(resNum);\n\t\tif ( icode == null)\n\t\t\tresidueNumber.setInsCode(null);\n\t\telse if ( icode.length() > 0)\n\t\t\tresidueNumber.setInsCode(icode.charAt(0));\n\t\treturn residueNumber;\n\t}\n\n\t@Override\n\tpublic int compareTo(ResidueNumber other) {\n\t\n\t\t// compare chain ID\n\t\tif ( this.getChainId() != null && other.getChainId() != null ) {\n\t\t\tint chainComp = this.getChainId().compareTo(other.getChainId()); \n\t\t\tif (  chainComp != 0 )\n\t\t\t\treturn chainComp;\n\t\t\t\n\t\t}\n\t\t\t\n\t\t// if equal sequence position, compare insCode\n\t\tif ( this.getSeqNum() == other.getSeqNum()) {\n\t\t\tif (this.getInsCode() != null && other.getInsCode() != null) {\n\t\t\t\treturn this.getInsCode().compareTo(other.getInsCode());\n\t\t\t}\n\t\t\tif ( this.getInsCode() == null && other.getInsCode() != null)\n\t\t\t\treturn -1;\n\t\t\telse return 1;\n\t\t}\n\t\treturn getSeqNum().compareTo(other.getSeqNum());\n\t\t\n\t}\n}\n","originTest":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\npackage org.biojava.bio.structure;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport junit.framework.TestCase;\n\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\n\n/**\n *\n * @author Jules Jacobsen <jacobsen@ebi.ac.uk>\n */\npublic class ResidueNumberTest extends TestCase {\n\n    public ResidueNumberTest() {\n    }\n\n    @BeforeClass\n    public static void setUpClass() throws Exception {\n    }\n\n    @AfterClass\n    public static void tearDownClass() throws Exception {\n    }\n\n    @Before\n    public void setUp() {\n    }\n\n    @After\n    public void tearDown() {\n    }\n\n    /**\n     * Test of getChainId method, of class ResidueNumber.\n     */\n    @Test\n    public void testGetSetChainId() {\n//        System.out.println(\"getChainId\");\n        ResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n        String expResult = \"A\";\n        String result = instance.getChainId();\n        assertEquals(expResult, result);\n    }\n\n    /**\n     * Test of getInsCode method, of class ResidueNumber.\n     */\n    @Test\n    public void testGetSetInsCode() {\n//        System.out.println(\"getInsCode\");\n        ResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n        Character expResult = ' ';\n        Character result = instance.getInsCode();\n        assertEquals(expResult, result);\n    }\n\n    /**\n     * Test of getSeqNum method, of class ResidueNumber.\n     */\n    @Test\n    public void testGetSetResidueNumber() {\n//        System.out.println(\"getSeqNum\");\n        ResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n        Integer expResult = 42;\n        Integer result = instance.getSeqNum();\n        assertEquals(expResult, result);\n\n    }\n\n\n    /**\n     * Test of equals method, of class ResidueNumber.\n     */\n    @Test\n    public void testEquals() {\n//        System.out.println(\"equals\");\n        ResidueNumber number1 = new ResidueNumber(\"A\", 42, ' ');\n        ResidueNumber number2 = new ResidueNumber(\"A\", 42, ' ');\n        boolean expResult = true;\n        boolean result = number2.equals(number1);\n        assertEquals(expResult, result);\n\n        Set<ResidueNumber> numberSet= new HashSet<ResidueNumber>();\n        numberSet.add(number1);\n        numberSet.add(number2);\n        assertEquals(1, numberSet.size());\n\n    }\n\n    /**\n     * Test of hashCode method, of class ResidueNumber.\n     */\n    @Test\n    public void testHashCode() {\n//        System.out.println(\"hashCode\");\n        ResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n        int expResult = 570246;\n        int result = instance.hashCode();\n        assertEquals(expResult, result);\n    }\n\n    /**\n     * Test of toString method, of class ResidueNumber.\n     */\n    @Test\n    public void testToString() {\n//        System.out.println(\"toString\");\n        ResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n        String expResult = \"42\";\n        String result = instance.toString();\n        assertEquals(expResult, result);\n\n    }\n\n    /**\n     * Test of toPDB method, of class ResidueNumber.\n     */\n    @Test\n    public void testToPDB() {\n\n        ResidueNumber instance  = new ResidueNumber(\"A\", 42, ' ');\n        ResidueNumber instance2 = new ResidueNumber(\"A\", 42, null);\n\n        String expResult = \"A  42  \";\n        String result1 = instance.toPDB();\n        assertEquals(expResult, result1);\n\n        String result2 = instance2.toPDB();\n        assertEquals(expResult, result2);\n    }\n\n\n\n}","changedTest":"","commitMessage":"new util method in StructureUtils, preparation for XML serialization of SCOP and a new SCOPInstallation that is powered by web service requests to require minimum memory.  Also a few other improvements\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@9230 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"","allZero":false}