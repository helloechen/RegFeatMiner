{"repository":"biojava","prod_path":"biojava3-structure/src/main/java/org/biojava/bio/structure/rcsb/RCSBLigandsFactory.java","test_path":"biojava3-structure/src/test/java/org/biojava/bio/structure/rcsb/RCSBLigandsFactoryTest.java","prod_time":"2013-07-08 10:57:25","test_time":"2013-07-08 10:57:25","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":60,"add_classname_line":0,"add_condition_line":20,"add_field_line":2,"add_import_line":2,"add_packageid_line":0,"add_parameter_line":11,"add_return_line":16,"del_annotation_line":0,"del_call_line":3,"del_classname_line":0,"del_condition_line":0,"del_field_line":1,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":2,"del_return_line":2,"label":"POSITIVE","prod_commitID":"3a939ef8e02aa2a34dcd3613da4b5e403eb52af2","test_commitID":"3a939ef8e02aa2a34dcd3613da4b5e403eb52af2","isfound":"found test change","originPro":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 2013-06-13\n * Created by Douglas Myers-Turnbull\n *\n * @since 3.0.6\n */\npackage org.biojava.bio.structure.rcsb;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\n\n/**\n * Fetches information from <a href=\"http://www.pdb.org/pdb/software/rest.do#descPDB\">RCSB's RESTful Web Service Interface</a>.\n * A factory for {@link RCSBLigands RCSBLigands} from {@code ligandInfo} XML files. The factory methods will\n * return null if the data was not found (rather than throwing an exception); client code should test for this. This is\n * for consistency: if the factory could not read some part (corresponding to a field in a class in\n * {@code rcsb.descriptions}) of the XML file, either because it was blank or contained an error that could not be\n * safely ignored, that field will simply be null. This holds even for numerical values. On some parse errors, the error\n * will additionally be printed to standard error.\n * \n * Example usage:\n * <pre>\n * RCSBDescription description = RCSBDescriptionFactory.get(\"1w0p\");\n * System.out.println(description.getPdbId()); // prints \"1w0p\"\n * </pre>\n * \n * @see <a href=\"http://www.pdb.org/pdb/software/rest.do#descPDB\">RCSB RESTful</a>\n * \n * @author dmyerstu\n * @since 3.0.6\n */\n\npublic class RCSBLigandsFactory {\n\n\tprivate static final Logger logger = LogManager.getLogger(RCSBLigandsFactory.class.getPackage().getName());\n\n\tprivate static final String URL_STUB = \"http://www.pdb.org/pdb/rest/ligandInfo?structureId=\";\n\n\t/**\n\t * @return An {@link RCSBLigands} from the XML file loaded as {@code stream}. Prefer calling {@link #get(String)} if\n\t *         you want data directly from RCSB's RESTful service.\n\t * @see RCSBDescriptionFactory#get(String)\n\t */\n\tpublic static RCSBLigands get(InputStream stream) {\n\n\t\tNodeList data;\n\t\ttry {\n\t\t\tdata = ReadUtils.getNodes(stream);\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Couldn't parse XML\", e);\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t// first get the ligandInfo\n\t\tRCSBLigands ligands = new RCSBLigands();\n\t\tElement structureIdE = null;\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\tstructureIdE = (Element) data.item(i);\n\t\t\tif (structureIdE.getNodeName().equals(\"ligandInfo\")) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// now get individual ligands\n\t\tdata = structureIdE.getChildNodes();\n\t\tElement ligandE = null;\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\tligandE = (Element) data.item(i);\n\t\t\tif (ligandE.getNodeName().equals(\"ligand\")) {\n\t\t\t\tif (ligands.getPdbId() == null) {\n\t\t\t\t\tligands.setPdbId(ligandE.getAttribute(\"structureId\"));\n\t\t\t\t}\n\t\t\t\tRCSBLigand ligand = makeLigand(ligandE);\n\t\t\t\tligands.addLigand(ligand);\n\t\t\t}\n\t\t}\n\n\t\treturn ligands;\n\n\t}\n\n\tprivate static RCSBLigand makeLigand(Element ligandE) {\n\t\tRCSBLigand ligand = new RCSBLigand();\n\t\tligand.setId(ligandE.getAttribute(\"chemicalID\"));\n\t\tligand.setType(ligandE.getAttribute(\"type\"));\n\t\tligand.setWeight(ReadUtils.toDouble(ligandE.getAttribute(\"molecularWeight\")));\n\t\tElement element = null;\n\t\tNodeList data = ligandE.getChildNodes();\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\telement = (Element) data.item(i);\n\t\t\tif (element.getNodeName().equals(\"chemicalName\")) {\n\t\t\t\tligand.setName(element.getTextContent());\n\t\t\t} else if (element.getNodeName().equals(\"formula\")) {\n\t\t\t\tligand.setFormula(element.getTextContent());\n\t\t\t} else if (element.getNodeName().equals(\"InChIKey\")) {\n\t\t\t\tligand.setInChIKey(element.getTextContent());\n\t\t\t} else if (element.getNodeName().equals(\"InChI\")) {\n\t\t\t\tligand.setInChI(element.getTextContent());\n\t\t\t} else if (element.getNodeName().equals(\"smiles\")) {\n\t\t\t\tligand.setSmiles(element.getTextContent());\n\t\t\t}\n\t\t}\n\t\treturn ligand;\n\t}\n\n\t/**\n\t * @return An {@link RCSBLigands} from the XML file at\n\t *         {@code \"http://www.pdb.org/pdb/rest/describeMol?structureId=pdbId\"}. This is the preferred factory\n\t *         method, unless a different URL or input source is required.\n\t * @see RCSBDescriptionFactory#get(InputStream)\n\t */\n\tpublic static RCSBLigands get(String pdbId) {\n\t\tInputStream is;\n\t\ttry {\n\t\t\tURL url = new URL(URL_STUB + pdbId);\n\t\t\tis = url.openConnection().getInputStream();\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Couldn't open connection\", e);\n\t\t\treturn null;\n\t\t}\n\t\treturn get(is);\n\t}\n\n}\n","changedPro":"/**\n * BioJava development code\n * \n * This code may be freely distributed and modified under the terms of the GNU Lesser General Public Licence. This\n * should be distributed with the code. If you do not have a copy, see:\n * \n * http://www.gnu.org/copyleft/lesser.html\n * \n * Copyright for this code is held jointly by the individual authors. These should be listed in @author doc comments.\n * \n * For more information on the BioJava project and its aims, or to join the biojava-l mailing list, visit the home page\n * at:\n * \n * http://www.biojava.org/\n * \n * Created on 2013-06-13 Created by Douglas Myers-Turnbull\n * \n * @since 3.0.6\n */\npackage org.biojava.bio.structure.rcsb;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\n\n/**\n * Fetches information from <a href=\"http://www.pdb.org/pdb/software/rest.do#descPDB\">RCSB's RESTful Web Service\n * Interface</a>. A factory for {@link RCSBLigands RCSBLigands} from {@code ligandInfo} XML files. The factory methods\n * will return null if the data was not found (rather than throwing an exception); client code should test for this.\n * This is for consistency: if the factory could not read some part (corresponding to a field in a class in\n * {@code rcsb.descriptions}) of the XML file, either because it was blank or contained an error that could not be\n * safely ignored, that field will simply be null. This holds even for numerical values. On some parse errors, the error\n * will additionally be printed to standard error.\n * \n * Example usage:\n * \n * <pre>\n * RCSBLigands ligands = RCSBLigandsFactory.getFromPdbIds(&quot;1w0p&quot;);\n * List<RCSBLigand> list = ligands.getLigands();\n * System.out.println(list.get(0).getFormula()); // prints &quot;CA 2&quot;\n * System.out.println(list.get(1).getFormula()); // prints &quot;C11 H19 N O9&quot;\n * </pre>\n * \n * @see <a href=\"http://www.pdb.org/pdb/software/rest.do#descPDB\">RCSB RESTful</a>\n * \n * @author dmyerstu\n * @since 3.0.6\n */\n\npublic class RCSBLigandsFactory {\n\n\tprivate static final String HET_URL_STUB = \"http://www.pdb.org/pdb/rest/describeHet?chemicalID=\";\n\n\tprivate static final Logger logger = LogManager.getLogger(RCSBLigandsFactory.class.getPackage().getName());\n\n\tprivate static final String PDB_URL_STUB = \"http://www.pdb.org/pdb/rest/ligandInfo?structureId=\";\n\n\t/**\n\t * @return A list of {@link RCSBLigand RCSBLigands} from the XML file loaded as {@code stream}. Prefer calling\n\t *         {@link #getFromHeteroAtomId(String)} if you want data directly from RCSB's RESTful service.\n\t * @see RCSBDescriptionFactory#get(String)\n\t */\n\tpublic static RCSBLigand getFromHeteroAtomId(InputStream stream) {\n\t\treturn getFromHeteroAtomIds(stream).get(0);\n\t}\n\n\t/**\n\t * @return An {@link RCSBLigands} from the XML file at\n\t *         {@code \"http://www.pdb.org/pdb/rest/describeHet?chemicalID=hetid\"}. This is the preferred factory method,\n\t *         unless a different URL or input source is required.\n\t * @see RCSBDescriptionFactory#get(InputStream)\n\t */\n\tpublic static RCSBLigand getFromHeteroAtomId(String heteroAtomId) {\n\t\treturn getFromHeteroAtomIds(heteroAtomId).get(0);\n\t}\n\n\t/**\n\t * @return A list of {@link RCSBLigand RCSBLigands} from the XML file loaded as {@code stream}. Prefer calling\n\t *         {@link #getFromHeteroAtomId(String)} if you want data directly from RCSB's RESTful service.\n\t * @see RCSBDescriptionFactory#get(String)\n\t */\n\tpublic static List<RCSBLigand> getFromHeteroAtomIds(InputStream stream) {\n\n\t\tNodeList data;\n\t\ttry {\n\t\t\tdata = ReadUtils.getNodes(stream);\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Couldn't parse XML\", e);\n\t\t\treturn null;\n\t\t}\n\n\t\tList<RCSBLigand> ligands = new ArrayList<RCSBLigand>();\n\n\t\t// first get the ligandInfo\n\t\tElement structureIdE = null;\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\tstructureIdE = (Element) data.item(i);\n\t\t\tif (structureIdE.getNodeName().equals(\"ligandInfo\")) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// now get individual ligands\n\t\tdata = structureIdE.getChildNodes();\n\t\tElement ligandE = null;\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\tligandE = (Element) data.item(i);\n\t\t\tif (ligandE.getNodeName().equals(\"ligand\")) {\n\t\t\t\tRCSBLigand ligand = makeLigand(ligandE);\n\t\t\t\tligands.add(ligand);\n\t\t\t}\n\t\t}\n\n\t\treturn ligands;\n\n\t}\n\n\t/**\n\t * @return An {@link RCSBLigands} from the XML file at\n\t *         {@code \"http://www.pdb.org/pdb/rest/describeHet?chemicalID=hetid\"}. This is the preferred factory method,\n\t *         unless a different URL or input source is required.\n\t * @see RCSBDescriptionFactory#get(InputStream)\n\t */\n\tpublic static List<RCSBLigand> getFromHeteroAtomIds(List<String> heteroAtomIds) {\n\t\tString[] x = new String[heteroAtomIds.size()];\n\t\theteroAtomIds.toArray(x);\n\t\treturn getFromHeteroAtomIds(x); // somewhat cheating here\n\t}\n\n\t/**\n\t * @return An {@link RCSBLigands} from the XML file at\n\t *         {@code \"http://www.pdb.org/pdb/rest/describeHet?chemicalID=hetid\"}. This is the preferred factory method,\n\t *         unless a different URL or input source is required.\n\t * @see RCSBDescriptionFactory#get(InputStream)\n\t */\n\tpublic static List<RCSBLigand> getFromHeteroAtomIds(String... heteroAtomIds) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < heteroAtomIds.length; i++) {\n\t\t\tif (i > 0) sb.append(\",\");\n\t\t\tsb.append(heteroAtomIds[i]);\n\t\t}\n\t\tInputStream is;\n\t\ttry {\n\t\t\tURL url = new URL(HET_URL_STUB + sb.toString());\n\t\t\tis = url.openConnection().getInputStream();\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Couldn't open connection\", e);\n\t\t\treturn null;\n\t\t}\n\t\treturn getFromHeteroAtomIds(is);\n\t}\n\n\t/**\n\t * @return An {@link RCSBLigands} from the XML file loaded as {@code stream}. Prefer calling\n\t *         {@link #getFromPdbId(String)} if you want data directly from RCSB's RESTful service.\n\t * @see RCSBDescriptionFactory#get(String)\n\t */\n\tpublic static List<RCSBLigands> getFromPdbIds(InputStream stream) {\n\n\t\tNodeList dataaa;\n\t\ttry {\n\t\t\tdataaa = ReadUtils.getNodes(stream);\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Couldn't parse XML\", e);\n\t\t\treturn null;\n\t\t}\n\n\t\t// first we have to handle the element \"ligandsInEntry\", which is not present if we have only 1 structure\n\n\t\tList<RCSBLigands> ligandsList = new ArrayList<RCSBLigands>();\n\n\t\tElement structureIdE = null;\n\t\t\n\t\tfor (int k = 0; k < dataaa.getLength(); k++) {\n\t\t\t\n\t\t\tif (dataaa.item(k).getNodeType() != 1) continue;\n\t\t\tstructureIdE = (Element) dataaa.item(k);\n\t\t\tif (structureIdE.getNodeName().equals(\"structureId\")) {\n\t\t\t\t\n\n\t\t\t\t\n\n\t\t\t\t// now get the ligandInfo\n\t\t\t\tNodeList data = structureIdE.getChildNodes();\n\t\t\t\tRCSBLigands ligands = new RCSBLigands();\n\t\t\t\tElement ligandIdE = null;\n\t\t\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\t\t\tligandIdE = (Element) data.item(i);\n\t\t\t\t\tif (ligandIdE.getNodeName().equals(\"ligandInfo\")) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// now get individual ligands\n\t\t\t\tdata = ligandIdE.getChildNodes();\n\t\t\t\tElement ligandE = null;\n\t\t\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\t\t\tligandE = (Element) data.item(i);\n\t\t\t\t\tif (ligandE.getNodeName().equals(\"ligand\")) {\n\t\t\t\t\t\tif (ligands.getPdbId() == null) {\n\t\t\t\t\t\t\tligands.setPdbId(ligandE.getAttribute(\"structureId\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tRCSBLigand ligand = makeLigand(ligandE);\n\t\t\t\t\t\tligands.addLigand(ligand);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tligandsList.add(ligands);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\treturn ligandsList;\n\n\t}\n\n\t/**\n\t * @return An {@link RCSBLigands} from the XML file loaded as {@code stream}. Prefer calling\n\t *         {@link #getFromPdbId(String)} if you want data directly from RCSB's RESTful service.\n\t * @see RCSBDescriptionFactory#get(String)\n\t */\n\tpublic static RCSBLigands getFromPdbId(InputStream stream) {\n\n\t\tNodeList data;\n\t\ttry {\n\t\t\tdata = ReadUtils.getNodes(stream);\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Couldn't parse XML\", e);\n\t\t\treturn null;\n\t\t}\n\n\t\t// first get the ligandInfo\n\t\tRCSBLigands ligands = new RCSBLigands();\n\t\tElement structureIdE = null;\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\tstructureIdE = (Element) data.item(i);\n\t\t\tif (structureIdE.getNodeName().equals(\"ligandInfo\")) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// now get individual ligands\n\t\tdata = structureIdE.getChildNodes();\n\t\tElement ligandE = null;\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\tligandE = (Element) data.item(i);\n\t\t\tif (ligandE.getNodeName().equals(\"ligand\")) {\n\t\t\t\tif (ligands.getPdbId() == null) {\n\t\t\t\t\tligands.setPdbId(ligandE.getAttribute(\"structureId\"));\n\t\t\t\t}\n\t\t\t\tRCSBLigand ligand = makeLigand(ligandE);\n\t\t\t\tligands.addLigand(ligand);\n\t\t\t}\n\t\t}\n\n\t\treturn ligands;\n\n\t}\n\n\t/**\n\t * @return An {@link RCSBLigands} from the XML file at\n\t *         {@code \"http://www.pdb.org/pdb/rest/describeMol?structureId=pdbId\"}. This is the preferred factory\n\t *         method, unless a different URL or input source is required.\n\t * @see RCSBDescriptionFactory#get(InputStream)\n\t */\n\tpublic static List<RCSBLigands> getFromPdbIds(List<String> pdbIds) {\n\t\tString[] x = new String[pdbIds.size()];\n\t\tpdbIds.toArray(x);\n\t\treturn getFromPdbIds(x);\n\t}\n\n\t/**\n\t * @return An {@link RCSBLigands} from the XML file at\n\t *         {@code \"http://www.pdb.org/pdb/rest/describeMol?structureId=pdbId\"}. This is the preferred factory\n\t *         method, unless a different URL or input source is required.\n\t * @see RCSBDescriptionFactory#get(InputStream)\n\t */\n\tpublic static RCSBLigands getFromPdbIds(String pdbId) {\n\t\tInputStream is;\n\t\ttry {\n\t\t\tURL url = new URL(PDB_URL_STUB + pdbId);\n\t\t\tis = url.openConnection().getInputStream();\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Couldn't open connection\", e);\n\t\t\treturn null;\n\t\t}\n\t\treturn getFromPdbId(is);\n\t}\n\n\t/**\n\t * @return An {@link RCSBLigands} from the XML file at\n\t *         {@code \"http://www.pdb.org/pdb/rest/describeMol?structureId=pdbId\"}. This is the preferred factory\n\t *         method, unless a different URL or input source is required.\n\t * @see RCSBDescriptionFactory#get(InputStream)\n\t */\n\tpublic static List<RCSBLigands> getFromPdbIds(String... pdbIds) {\n\t\tInputStream is;\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < pdbIds.length; i++) {\n\t\t\tif (i > 0) sb.append(\",\");\n\t\t\tsb.append(pdbIds[i]);\n\t\t}\n\t\ttry {\n\t\t\tURL url = new URL(PDB_URL_STUB + sb.toString());\n\t\t\tis = url.openConnection().getInputStream();\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Couldn't open connection\", e);\n\t\t\treturn null;\n\t\t}\n\t\treturn getFromPdbIds(is);\n\t}\n\n\t/**\n\t * @return An {@link RCSBLigands} from the XML file at\n\t *         {@code \"http://www.pdb.org/pdb/rest/describeMol?structureId=pdbId\"}. This is the preferred factory\n\t *         method, unless a different URL or input source is required.\n\t * @see RCSBDescriptionFactory#get(InputStream)\n\t */\n\tpublic static RCSBLigands getFromPdbId(String pdbId) {\n\t\tInputStream is;\n\t\ttry {\n\t\t\tURL url = new URL(PDB_URL_STUB + pdbId);\n\t\t\tis = url.openConnection().getInputStream();\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Couldn't open connection\", e);\n\t\t\treturn null;\n\t\t}\n\t\treturn getFromPdbId(is);\n\t}\n\n\tprivate static RCSBLigand makeLigand(Element ligandE) {\n\t\tRCSBLigand ligand = new RCSBLigand();\n\t\tligand.setId(ligandE.getAttribute(\"chemicalID\"));\n\t\tligand.setType(ligandE.getAttribute(\"type\"));\n\t\tligand.setWeight(ReadUtils.toDouble(ligandE.getAttribute(\"molecularWeight\")));\n\t\tElement element = null;\n\t\tNodeList data = ligandE.getChildNodes();\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\telement = (Element) data.item(i);\n\t\t\tif (element.getNodeName().equals(\"chemicalName\")) {\n\t\t\t\tligand.setName(element.getTextContent());\n\t\t\t} else if (element.getNodeName().equals(\"formula\")) {\n\t\t\t\tligand.setFormula(element.getTextContent());\n\t\t\t} else if (element.getNodeName().equals(\"InChIKey\")) {\n\t\t\t\tligand.setInChIKey(element.getTextContent());\n\t\t\t} else if (element.getNodeName().equals(\"InChI\")) {\n\t\t\t\tligand.setInChI(element.getTextContent());\n\t\t\t} else if (element.getNodeName().equals(\"smiles\")) {\n\t\t\t\tligand.setSmiles(element.getTextContent());\n\t\t\t}\n\t\t}\n\t\treturn ligand;\n\t}\n\n}\n","originTest":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 2013-06-24\n * Created by Douglas Myers-Turnbull\n *\n * @since 3.0.6\n */\npackage org.biojava.bio.structure.rcsb;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.List;\n\nimport org.junit.Test;\n\n\n\npublic class RCSBLigandsFactoryTest {\n\n\n\tprivate static final String TEST_DIR = \"src/test/resources/\";\n\t\n\t/**\n\t * Opens the file as a {@link FileInputStream}. Copied from ResourceList, which is not in biojava.\n\t */\n\tprivate FileInputStream openStream(String filename) {\n\t\tFile file = new File(TEST_DIR + filename);\n\t\tFileInputStream fis;\n\t\ttry {\n\t\t\tfis = new FileInputStream(file);\n\t\t} catch (FileNotFoundException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\treturn fis;\n\t}\n\n\t/**\n\t * Tests on the live database. Just makes sure the resource can be found.\n\t * If this test fails, it may be because the database changed.\n\t */\n\t@Test\n\tpublic void testUrl() {\n\t\tRCSBLigands ligands = RCSBLigandsFactory.get(\"1w0p\");\n\t\tassertEquals(4, ligands.getLigands().size());\n\t\tassertEquals(\"CA\", ligands.getLigands().get(0).getId());\n\t}\n\n\t/**\n\t * Covers all the basic features, including EC numbers. Does not cover multiple polymers or multiple chains.\n\t */\n\t@Test\n\tpublic void test1() {\n\t\tRCSBLigands description = RCSBLigandsFactory.get(openStream(\"describeMol/4hhb_ligands.xml\"));\n\t\t\n\t\tassertEquals(\"4HHB\", description.getPdbId());\n\t\tList<RCSBLigand> ligands = description.getLigands();\n\t\tassertEquals(2, ligands.size());\n\t\t\n\t\tRCSBLigand ligand;\n\t\t\n\t\tligand = ligands.get(0);\n\t\tassertEquals(\"HEM\", ligand.getId());\n\t\tassertEquals(\"non-polymer\", ligand.getType());\n\t\tassertEquals(616.487, ligand.getWeight(), 0.0);\n\t\tassertEquals(\"PROTOPORPHYRIN IX CONTAINING FE\", ligand.getName());\n\t\tassertEquals(\"C34 H32 FE N4 O4\", ligand.getFormula());\n\t\tassertEquals(\"FEDYMSUPMFCVOD-UJJXFSCMSA-N\", ligand.getInChIKey());\n\t\tassertEquals(\"InChI=1S/C34H34N4O4/c1-7-21-17(3)25-13-26-19(5)23(9-11-33(39)40)31(37-26)16-32-24(10-12-34(41)42)20(6)28(38-32)15-30-22(8-2)18(4)27(36-30)14-29(21)35-25/h7-8,13-16,36-37H,1-2,9-12H2,3-6H3,(H,39,40)(H,41,42)/b25-13-,26-13-,27-14-,28-15-,29-14-,30-15-,31-16-,32-16-\", ligand.getInChI());\n\t\tassertEquals(\"Cc1c2/cc/3\\\\nc(/cc\\\\4/c(c(/c(/[nH]4)c/c5n/c(c\\\\c(c1CCC(=O)O)[nH]2)/C(=C5C)CCC(=O)O)C=C)C)C(=C3C)C=C\", ligand.getSmiles());\n\n\t\tligand = ligands.get(1);\n\t\tassertEquals(\"PO4\", ligand.getId());\n\t\tassertEquals(\"non-polymer\", ligand.getType());\n\t\tassertEquals(94.971, ligand.getWeight(), 0.0);\n\t\tassertEquals(\"PHOSPHATE ION\", ligand.getName());\n\t\tassertEquals(\"O4 P -3\", ligand.getFormula());\n\t\tassertEquals(\"NBIIXXVUZAFLBC-UHFFFAOYSA-K\", ligand.getInChIKey());\n\t\tassertEquals(\"InChI=1S/H3O4P/c1-5(2,3)4/h(H3,1,2,3,4)/p-3\", ligand.getInChI());\n\t\tassertEquals(\"[O-]P(=O)([O-])[O-]\", ligand.getSmiles());\n\t}\n\n}\n","changedTest":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 2013-06-24\n * Created by Douglas Myers-Turnbull\n *\n * @since 3.0.6\n */\npackage org.biojava.bio.structure.rcsb;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.List;\n\nimport org.junit.Test;\n\n\n/**\n * Tests {@link RCSBLigandsFactory}.\n * @author dmyerstu\n */\npublic class RCSBLigandsFactoryTest {\n\n\n\tprivate static final String TEST_DIR = \"src/test/resources/\";\n\t\n\t/**\n\t * Opens the file as a {@link FileInputStream}. Copied from ResourceList, which is not in biojava.\n\t */\n\tprivate FileInputStream openStream(String filename) {\n\t\tFile file = new File(TEST_DIR + filename);\n\t\tFileInputStream fis;\n\t\ttry {\n\t\t\tfis = new FileInputStream(file);\n\t\t} catch (FileNotFoundException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\treturn fis;\n\t}\n\n\t/**\n\t * Tests on the live database. Just makes sure the resource can be found.\n\t * If this test fails, it may be because the database changed.\n\t */\n\t@Test\n\tpublic void testFromPdbIdUrl() {\n\t\tRCSBLigands ligands = RCSBLigandsFactory.getFromPdbId(\"1w0p\");\n\t\tassertEquals(4, ligands.getLigands().size());\n\t\tassertEquals(\"CA\", ligands.getLigands().get(0).getId());\n\t}\n\n\t/**\n\t * Tests on the live database. Just makes sure the resource can be found.\n\t * If this test fails, it may be because the database changed.\n\t */\n\t@Test\n\tpublic void testFromPdbIdsUrl() {\n\t\tList<RCSBLigands> ligands = RCSBLigandsFactory.getFromPdbIds(\"1w0p\", \"4hhb\");\n\t\tassertEquals(4, ligands.get(0).getLigands().size());\n\t\tassertEquals(\"CA\", ligands.get(0).getLigands().get(0).getId());\n\t\tassertEquals(2, ligands.get(1).getLigands().size());\n\t\tassertEquals(\"HEM\", ligands.get(1).getLigands().get(0).getId());\n\t\tassertEquals(\"C34 H32 FE N4 O4\", ligands.get(1).getLigands().get(0).getFormula());\n\t\tassertEquals(\"O4 P -3\", ligands.get(1).getLigands().get(1).getFormula());\n\t}\n\n\t@Test\n\tpublic void testFromPdbId() {\n\t\tRCSBLigands description = RCSBLigandsFactory.getFromPdbId(openStream(\"describeMol/4hhb_ligands.xml\"));\n\t\t\n\t\tassertEquals(\"4HHB\", description.getPdbId());\n\t\tList<RCSBLigand> ligands = description.getLigands();\n\t\tassertEquals(2, ligands.size());\n\t\t\n\t\tRCSBLigand ligand;\n\t\t\n\t\tligand = ligands.get(0);\n\t\tassertEquals(\"HEM\", ligand.getId());\n\t\tassertEquals(\"non-polymer\", ligand.getType());\n\t\tassertEquals(616.487, ligand.getWeight(), 0.0);\n\t\tassertEquals(\"PROTOPORPHYRIN IX CONTAINING FE\", ligand.getName());\n\t\tassertEquals(\"C34 H32 FE N4 O4\", ligand.getFormula());\n\t\tassertEquals(\"FEDYMSUPMFCVOD-UJJXFSCMSA-N\", ligand.getInChIKey());\n\t\tassertEquals(\"InChI=1S/C34H34N4O4/c1-7-21-17(3)25-13-26-19(5)23(9-11-33(39)40)31(37-26)16-32-24(10-12-34(41)42)20(6)28(38-32)15-30-22(8-2)18(4)27(36-30)14-29(21)35-25/h7-8,13-16,36-37H,1-2,9-12H2,3-6H3,(H,39,40)(H,41,42)/b25-13-,26-13-,27-14-,28-15-,29-14-,30-15-,31-16-,32-16-\", ligand.getInChI());\n\t\tassertEquals(\"Cc1c2/cc/3\\\\nc(/cc\\\\4/c(c(/c(/[nH]4)c/c5n/c(c\\\\c(c1CCC(=O)O)[nH]2)/C(=C5C)CCC(=O)O)C=C)C)C(=C3C)C=C\", ligand.getSmiles());\n\n\t\tligand = ligands.get(1);\n\t\tassertEquals(\"PO4\", ligand.getId());\n\t\tassertEquals(\"non-polymer\", ligand.getType());\n\t\tassertEquals(94.971, ligand.getWeight(), 0.0);\n\t\tassertEquals(\"PHOSPHATE ION\", ligand.getName());\n\t\tassertEquals(\"O4 P -3\", ligand.getFormula());\n\t\tassertEquals(\"NBIIXXVUZAFLBC-UHFFFAOYSA-K\", ligand.getInChIKey());\n\t\tassertEquals(\"InChI=1S/H3O4P/c1-5(2,3)4/h(H3,1,2,3,4)/p-3\", ligand.getInChI());\n\t\tassertEquals(\"[O-]P(=O)([O-])[O-]\", ligand.getSmiles());\n\t}\n\n\t@Test\n\tpublic void testFromHeteroAtomIdsUrl() {\n\t\tList<RCSBLigand> ligands = RCSBLigandsFactory.getFromHeteroAtomIds(\"NAG\", \"EBW\");\n\t\tassertEquals(\"Wrong number of ligands\", 2, ligands.size());\n\t\tassertEquals(\"Wrong formula\", \"C8 H15 N O6\", ligands.get(0).getFormula());\n\t\tassertEquals(\"Wrong formula\", \"C27 H38 N2 O 2\", ligands.get(1).getFormula());\n\t}\n\t\n\t@Test\n\tpublic void testFromHeteroAtomIdUrl() {\n\t\tList<RCSBLigand> ligands = RCSBLigandsFactory.getFromHeteroAtomIds(\"NAG\");\n\t\tassertEquals(\"Wrong number of ligands\", 1, ligands.size());\n\t\tRCSBLigand ligand = ligands.get(0);\n\t\tassertEquals(\"Wrong formula\", \"C8 H15 N O6\", ligand.getFormula());\n\t}\n\t\n}\n","commitMessage":"1. Made RCSBLigandsFactory handle describeHet queries. 2. Wrote helper\nmethods for using ligandInfo and describeHet queries with multiple PDB\nIds. 3. Made a backwards-incompatible change: renamed RCSBLigands.get()\nto RCSBLigands.getFromPdbId(). This shouldn't be a problem because the\nclass is so new and has not yet been included in any stable release; if\nit is this commit can be reverted. 4. Fixed example usage in header\ncomment.","test_commitMessage":"1. Made RCSBLigandsFactory handle describeHet queries. 2. Wrote helper\nmethods for using ligandInfo and describeHet queries with multiple PDB\nIds. 3. Made a backwards-incompatible change: renamed RCSBLigands.get()\nto RCSBLigands.getFromPdbId(). This shouldn't be a problem because the\nclass is so new and has not yet been included in any stable release; if\nit is this commit can be reverted. 4. Fixed example usage in header\ncomment.","allZero":false}