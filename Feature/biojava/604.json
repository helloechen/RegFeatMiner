{"repository":"biojava","prod_path":"biojava-structure/src/main/java/org/biojava/nbio/structure/xtal/CrystalBuilder.java","test_path":"biojava-structure/src/test/java/org/biojava/nbio/structure/xtal/TestCrystalBuilder.java","prod_time":"2016-05-07 07:48:29","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":10,"add_classname_line":0,"add_condition_line":3,"add_field_line":1,"add_import_line":1,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":10,"del_classname_line":0,"del_condition_line":3,"del_field_line":1,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"dbfeeb9a47e87e079ebddcc1adc2c41895c94787","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.structure.xtal;\n\n\nimport org.biojava.nbio.structure.*;\nimport org.biojava.nbio.structure.contact.AtomContactSet;\nimport org.biojava.nbio.structure.contact.StructureInterface;\nimport org.biojava.nbio.structure.contact.StructureInterfaceList;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.vecmath.Matrix4d;\nimport javax.vecmath.Point3i;\nimport javax.vecmath.Vector3d;\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\n\n\n/**\n * A class containing methods to find interfaces in a given crystallographic Structure by\n * reconstructing the crystal lattice through application of symmetry operators\n *\n * @author duarte_j\n *\n */\npublic class CrystalBuilder {\n\n\t// Default number of cell neighbors to try in interface search (in 3 directions of space).\n\t// In the search, only bounding box overlaps are tried, thus there's not so much overhead in adding\n\t// more cells. We actually tested it and using numCells from 1 to 10 didn't change runtimes at all.\n\t// Examples with interfaces in distant neighbor cells:\n\t//   2nd neighbors: 3hz3, 1wqj, 2de3, 1jcd\n\t//   3rd neighbors: 3bd3, 1men, 2gkp, 1wui\n\t//   5th neighbors: 2ahf, 2h2z\n\t//   6th neighbors: 1was (in fact interfaces appear only at 5th neighbors for it)\n\t// Maybe this could be avoided by previously translating the given molecule to the first cell,\n\t// BUT! some bona fide cases exist, e.g. 2d3e: it is properly placed at the origin but the molecule\n\t// is enormously long in comparison with the dimensions of the unit cell, some interfaces come at the 7th neighbor.\n\t// After a scan of the whole PDB (Oct 2013) using numCells=50, the highest one was 4jgc with\n\t// interfaces up to the 11th neighbor. Other high ones (9th neighbors) are 4jbm and 4k3t.\n\t// We set the default value to 12 based on that (having not seen any difference in runtime)\n\tpublic static final int DEF_NUM_CELLS = 12;\n\n\t/**\n\t * Default maximum distance between two chains to be considered an interface.\n\t * @see #getUniqueInterfaces(double)\n\t */\n\tpublic static final double DEFAULT_INTERFACE_DISTANCE_CUTOFF = 5.5;\n\n\tpublic static final Matrix4d IDENTITY = new Matrix4d(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);\n\n\n\t/**\n\t * Whether to consider HETATOMs in contact calculations\n\t */\n\tprivate static final boolean INCLUDE_HETATOMS = true;\n\n\tprivate Structure structure;\n\tprivate PDBCrystallographicInfo crystallographicInfo;\n\tprivate int numChainsAu;\n\tprivate int numOperatorsSg;\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(CrystalBuilder.class);\n\n\tprivate int numCells;\n\n\tprivate ArrayList<CrystalTransform> visited;\n\n\tprivate boolean isCrystallographic;\n\n\n\n\tpublic CrystalBuilder(Structure structure) {\n\t\tthis.structure = structure;\n\n\t\tthis.crystallographicInfo = structure.getCrystallographicInfo();\n\n\t\tthis.numChainsAu = structure.getChains().size();\n\t\tthis.numOperatorsSg = 1;\n\n\n\t\tif (structure.isCrystallographic()) {\n\n\t\t\tthis.isCrystallographic = true;\n\t\t\t// we need to check space group not null for the cases where the entry is crystallographic but\n\t\t\t// the space group is not a standard one recognized by biojava, e.g. 1mnk (SG: 'I 21')\n\t\t\tif (this.crystallographicInfo.getSpaceGroup()==null) {\n\t\t\t\tlogger.warn(\"Could not find a space group, will only calculate asymmetric unit interfaces.\");\n\t\t\t\tthis.isCrystallographic = false;\n\t\t\t} else {\n\t\t\t\tthis.numOperatorsSg = this.crystallographicInfo.getSpaceGroup().getMultiplicity();\n\t\t\t}\n\t\t\t// we need to check crystal cell not null for the rare cases where the entry is crystallographic but\n\t\t\t// the crystal cell is not given, e.g. 2i68, 2xkm, 4bpq\n\t\t\tif (this.crystallographicInfo.getCrystalCell()==null) {\n\t\t\t\tlogger.warn(\"Could not find a crystal cell definition, will only calculate asymmetric unit interfaces.\");\n\t\t\t\tthis.isCrystallographic = false;\n\t\t\t}\n\n\t\t} else {\n\t\t\tthis.isCrystallographic = false;\n\t\t}\n\n\t\tthis.numCells = DEF_NUM_CELLS;\n\n\t}\n\n\t/**\n\t * Set the number of neighboring crystal cells that will be used in the search for contacts\n\t * @param numCells\n\t */\n\tpublic void setNumCells(int numCells) {\n\t\tthis.numCells = numCells;\n\t}\n\n\tprivate void initialiseVisited() {\n\t\tvisited = new ArrayList<CrystalTransform>();\n\t}\n\n\n\n\t/**\n\t * Returns the list of unique interfaces that the given Structure has upon\n\t * generation of all crystal symmetry mates. An interface is defined as any pair of chains\n\t * that contact, i.e. for which there is at least a pair of atoms (one from each chain) within\n\t * the default cutoff distance.\n\t * @return\n\t * @see #DEFAULT_INTERFACE_DISTANCE_CUTOFF\n\t */\n\tpublic StructureInterfaceList getUniqueInterfaces() {\n\t\treturn getUniqueInterfaces(DEFAULT_INTERFACE_DISTANCE_CUTOFF);\n\t}\n\n\t/**\n\t * Returns the list of unique interfaces that the given Structure has upon\n\t * generation of all crystal symmetry mates. An interface is defined as any pair of chains\n\t * that contact, i.e. for which there is at least a pair of atoms (one from each chain) within\n\t * the given cutoff distance.\n\t * @param cutoff the distance cutoff for 2 chains to be considered in contact\n\t * @return\n\t */\n\tpublic StructureInterfaceList getUniqueInterfaces(double cutoff) {\n\n\n\t\tStructureInterfaceList set = new StructureInterfaceList();\n\n\t\t// certain structures in the PDB are not macromolecules (contain no polymeric chains at all), e.g. 1ao2\n\t\t// with the current mmCIF parsing, those will be empty since purely non-polymeric chains are removed\n\t\t// see commit e9562781f23da0ebf3547146a307d7edd5741090\n\t\tif (structure.getChains().size()==0) {\n\t\t\tlogger.warn(\"No chains present in the structure! No interfaces will be calculated\");\n\t\t\treturn set;\n\t\t}\n\n\n\n\t\t// initialising the visited ArrayList for keeping track of symmetry redundancy\n\t\tinitialiseVisited();\n\n\n\n\t\t// the isCrystallographic() condition covers 3 cases:\n\t\t// a) entries with expMethod X-RAY/other diffraction and defined crystalCell (most usual case)\n\t\t// b) entries with expMethod null but defined crystalCell (e.g. PDB file with CRYST1 record but no expMethod annotation)\n\t\t// c) entries with expMethod not X-RAY (e.g. NMR) and defined crystalCell (NMR entries do have a dummy CRYST1 record \"1 1 1 90 90 90 P1\")\n\t\t// d) isCrystallographic will be false if the structure is crystallographic but the space group was not recognized\n\n\n\t\tcalcInterfacesCrystal(set, cutoff);\n\n\n\t\treturn set;\n\t}\n\n\t/**\n\t * Calculate interfaces between original asymmetric unit and neighboring\n\t * whole unit cells, including the original full unit cell i.e. i=0,j=0,k=0\n\t * @param set\n\t * @param cutoff\n\t */\n\tprivate void calcInterfacesCrystal(StructureInterfaceList set, double cutoff) {\n\n\n\t\t// initialising debugging vars\n\t\tlong start = -1;\n\t\tlong end = -1;\n\t\tint trialCount = 0;\n\t\tint skippedRedundant = 0;\n\t\tint skippedAUsNoOverlap = 0;\n\t\tint skippedChainsNoOverlap = 0;\n\t\tint skippedSelfEquivalent = 0;\n\n\n\t\tMatrix4d[] ops = null;\n\t\tif (isCrystallographic) {\n\t\t\tops = structure.getCrystallographicInfo().getTransformationsOrthonormal();\n\t\t} else {\n\t\t\tops = new Matrix4d[1];\n\t\t\tops[0] = new Matrix4d(IDENTITY);\n\t\t}\n\n\t\t// The bounding boxes of all AUs of the unit cell\n\t\tUnitCellBoundingBox bbGrid = new UnitCellBoundingBox(numOperatorsSg, numChainsAu);;\n\t\t// we calculate all the bounds of each of the asym units, those will then be reused and translated\n\t\tbbGrid.setBbs(structure, ops, INCLUDE_HETATOMS);\n\n\n\t\t// if not crystallographic there's no search to do in other cells, only chains within \"AU\" will be checked\n\t\tif (!isCrystallographic) numCells = 0;\n\n\t\tboolean verbose = logger.isDebugEnabled();\n\n\t\tif (verbose) {\n\t\t\ttrialCount = 0;\n\t\t\tstart= System.currentTimeMillis();\n\t\t\tint neighbors = (2*numCells+1)*(2*numCells+1)*(2*numCells+1)-1;\n\t\t\tint auTrials = (numChainsAu*(numChainsAu-1))/2;\n\t\t\tint trials = numChainsAu*numOperatorsSg*numChainsAu*neighbors;\n\t\t\tlogger.debug(\"Chain clash trials within original AU: \"+auTrials);\n\t\t\tlogger.debug(\n\t\t\t\t\t\"Chain clash trials between the original AU and the neighbouring \"+neighbors+\n\t\t\t\t\t\" whole unit cells (\"+numCells+\" neighbours)\" +\n\t\t\t\t\t\"(2x\"+numChainsAu+\"chains x \"+numOperatorsSg+\"AUs x \"+neighbors+\"cells) : \"+trials);\n\t\t\tlogger.debug(\"Total trials: \"+(auTrials+trials));\n\t\t}\n\n\n\t\tfor (int a=-numCells;a<=numCells;a++) {\n\t\t\tfor (int b=-numCells;b<=numCells;b++) {\n\t\t\t\tfor (int c=-numCells;c<=numCells;c++) {\n\n\t\t\t\t\tPoint3i trans = new Point3i(a,b,c);\n\t\t\t\t\tVector3d transOrth = new Vector3d(a,b,c);\n\t\t\t\t\tif (a!=0 || b!=0 || c!=0)\n\t\t\t\t\t\t// we avoid doing the transformation for 0,0,0 (in case it's not crystallographic)\n\t\t\t\t\t\tthis.crystallographicInfo.getCrystalCell().transfToOrthonormal(transOrth);\n\t\t\t\t\tUnitCellBoundingBox bbGridTrans = bbGrid.getTranslatedBbs(transOrth);\n\n\t\t\t\t\tfor (int n=0;n<numOperatorsSg;n++) {\n\n\t\t\t\t\t\t// short-cut strategies\n\t\t\t\t\t\t// 1) we skip first of all if the bounding boxes of the AUs don't overlap\n\t\t\t\t\t\tif (!bbGrid.getAuBoundingBox(0).overlaps(bbGridTrans.getAuBoundingBox(n), cutoff)) {\n\t\t\t\t\t\t\tskippedAUsNoOverlap++;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// 2) we check if we didn't already see its equivalent symmetry operator partner\n\t\t\t\t\t\tCrystalTransform tt = new CrystalTransform(this.crystallographicInfo.getSpaceGroup(), n);\n\t\t\t\t\t\ttt.translate(trans);\n\t\t\t\t\t\tif (isRedundant(tt)) {\n\t\t\t\t\t\t\tskippedRedundant++;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\taddVisited(tt);\n\n\n\t\t\t\t\t\tboolean selfEquivalent = false;\n\n\t\t\t\t\t\t// 3) an operator can be \"self redundant\" if it is the inverse of itself (involutory, e.g. all pure 2-folds with no translation)\n\t\t\t\t\t\tif (tt.isEquivalent(tt)) {\n\t\t\t\t\t\t\tlogger.debug(\"Transform \"+tt+\" is equivalent to itself, will skip half of i-chains to j-chains comparisons\");\n\t\t\t\t\t\t\t// in this case we can't skip the operator, but we can skip half of the matrix comparisons e.g. j>i\n\t\t\t\t\t\t\t// we set a flag and do that within the loop below\n\t\t\t\t\t\t\tselfEquivalent = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tStringBuilder builder = null;\n\t\t\t\t\t\tif (verbose) builder = new StringBuilder(tt+\" \");\n\n\t\t\t\t\t\t// Now that we know that boxes overlap and operator is not redundant, we have to go to the details\n\t\t\t\t\t\tint contactsFound = 0;\n\n\t\t\t\t\t\tfor (int j=0;j<numChainsAu;j++) {\n\t\t\t\t\t\t\tfor (int i=0;i<numChainsAu;i++) { // we only have to compare the original asymmetric unit to every full cell around\n\n\t\t\t\t\t\t\t\tif(selfEquivalent && (j>i)) {\n\t\t\t\t\t\t\t\t\t// in case of self equivalency of the operator we can safely skip half of the matrix\n\t\t\t\t\t\t\t\t\tskippedSelfEquivalent++;\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// special case of original AU, we don't compare a chain to itself\n\t\t\t\t\t\t\t\tif (n==0 && a==0 && b==0 && c==0 && i==j) continue;\n\n\t\t\t\t\t\t\t\t// before calculating the AtomContactSet we check for overlap, then we save putting atoms into the grid\n\t\t\t\t\t\t\t\tif (!bbGrid.getChainBoundingBox(0,i).overlaps(bbGridTrans.getChainBoundingBox(n,j),cutoff)) {\n\t\t\t\t\t\t\t\t\tskippedChainsNoOverlap++;\n\t\t\t\t\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\t\t\t\t\tbuilder.append(\".\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttrialCount++;\n\n\t\t\t\t\t\t\t\t// finally we've gone through all short-cuts and the 2 chains seem to be close enough:\n\t\t\t\t\t\t\t\t// we do the calculation of contacts\n\t\t\t\t\t\t\t\tChain chainj = null;\n\t\t\t\t\t\t\t\tChain chaini = structure.getChain(i);\n\n\t\t\t\t\t\t\t\tif (n==0 && a==0 && b==0 && c==0) {\n\t\t\t\t\t\t\t\t\tchainj = structure.getChain(j);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tchainj = (Chain)structure.getChain(j).clone();\n\t\t\t\t\t\t\t\t\tMatrix4d m = new Matrix4d(ops[n]);\n\t\t\t\t\t\t\t\t\ttranslate(m, transOrth);\n\t\t\t\t\t\t\t\t\tCalc.transform(chainj,m);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tStructureInterface interf = calcContacts(chaini, chainj, cutoff, tt, builder);\n\n\t\t\t\t\t\t\t\tif (interf!=null) {\n\t\t\t\t\t\t\t\t\tcontactsFound++;\n\t\t\t\t\t\t\t\t\tset.add(interf);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif( verbose ) {\n\t\t\t\t\t\t\tif (a==0 && b==0 && c==0 && n==0)\n\t\t\t\t\t\t\t\tbuilder.append(\" \"+contactsFound+\"(\"+(numChainsAu*(numChainsAu-1))/2+\")\");\n\t\t\t\t\t\t\telse if (selfEquivalent)\n\t\t\t\t\t\t\t\tbuilder.append(\" \"+contactsFound+\"(\"+(numChainsAu*(numChainsAu+1))/2+\")\");\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tbuilder.append(\" \"+contactsFound+\"(\"+numChainsAu*numChainsAu+\")\");\n\n\t\t\t\t\t\t\tlogger.debug(builder.toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tend = System.currentTimeMillis();\n\t\tlogger.debug(\"\\n\"+trialCount+\" chain-chain clash trials done. Time \"+(end-start)/1000+\"s\");\n\t\tlogger.debug(\"  skipped (not overlapping AUs)       : \"+skippedAUsNoOverlap);\n\t\tlogger.debug(\"  skipped (not overlapping chains)    : \"+skippedChainsNoOverlap);\n\t\tlogger.debug(\"  skipped (sym redundant op pairs)    : \"+skippedRedundant);\n\t\tlogger.debug(\"  skipped (sym redundant self op)     : \"+skippedSelfEquivalent);\n\n\t\tlogger.debug(\"Found \"+set.size()+\" interfaces.\");\n\t}\n\n\tprivate StructureInterface calcContacts(Chain chaini, Chain chainj, double cutoff, CrystalTransform tt, StringBuilder builder) {\n\t\t// note that we don't consider hydrogens when calculating contacts\n\t\tAtomContactSet graph = StructureTools.getAtomsInContact(chaini, chainj, cutoff, INCLUDE_HETATOMS);\n\n\t\tif (graph.size()>0) {\n\t\t\tif (builder != null) builder.append(\"x\");\n\n\t\t\tCrystalTransform transf = new CrystalTransform(this.crystallographicInfo.getSpaceGroup());\n\t\t\tStructureInterface interf = new StructureInterface(\n\t\t\t\t\tStructureTools.getAllAtomArray(chaini), StructureTools.getAllAtomArray(chainj),\n\t\t\t\t\tchaini.getChainID(), chainj.getChainID(),\n\t\t\t\t\tgraph,\n\t\t\t\t\ttransf, tt);\n\n\t\t\treturn interf;\n\n\t\t} else {\n\t\t\tif (builder != null) builder.append(\"o\");\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate void addVisited(CrystalTransform tt) {\n\t\tvisited.add(tt);\n\t}\n\n\t/**\n\t * Checks whether given transformId/translation is symmetry redundant\n\t * Two transformations are symmetry redundant if their matrices (4d) multiplication gives the identity, i.e.\n\t * if one is the inverse of the other.\n\t * @param tt\n\t * @return\n\t */\n\tprivate boolean isRedundant(CrystalTransform tt) {\n\n\t\tIterator<CrystalTransform> it = visited.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tCrystalTransform v = it.next();\n\n\t\t\tif (tt.isEquivalent(v)) {\n\n\t\t\t\tlogger.debug(\"Skipping redundant transformation: \"+tt+\", equivalent to \"+v);\n\n\t\t\t\t// there's only 1 possible equivalent partner for each visited matrix\n\t\t\t\t// (since the equivalent is its inverse matrix and the inverse matrix is unique)\n\t\t\t\t// thus once the partner has been seen, we don't need to check it ever again\n\t\t\t\tit.remove();\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic void translate(Matrix4d m, Vector3d translation) {\n\t\tm.m03 = m.m03+translation.x;\n\t\tm.m13 = m.m13+translation.y;\n\t\tm.m23 = m.m23+translation.z;\n\t}\n\n//\t/**\n//\t * If NCS operators are given in MTRIX records, a bigger AU has to be constructed based on those.\n//\t * Later they have to be removed with {@link #removeExtraChains()}\n//\t */\n//\tprivate void constructFullStructure() {\n//\n//\t\tif (this.crystallographicInfo.getNcsOperators()==null ||\n//\t\t\tthis.crystallographicInfo.getNcsOperators().length==0) {\n//\t\t\t// normal case: nothing to do\n//\t\t\treturn;\n//\t\t}\n//\n//\t\t// first we store the original chains in a new list to be able to restore the structure to its original state afterwards\n//\t\torigChains = new ArrayList<Chain>();\n//\t\tfor (Chain chain:structure.getChains()) {\n//\t\t\torigChains.add(chain);\n//\t\t}\n//\n//\t\t// if we are here, it means that the NCS operators exist and we have to complete the given AU by applying them\n//\t\tMatrix4d[] ncsOps = this.crystallographicInfo.getNcsOperators();\n//\n//\t\tif (verbose)\n//\t\t\tSystem.out.println(ncsOps.length+\" NCS operators found, generating new AU...\");\n//\n//\n//\t\tfor (int i=0;i<ncsOps.length;i++) {\n//\t\t\tStructure transformedStruct = (Structure)structure.clone();\n//\t\t\tCalc.transform(transformedStruct, ncsOps[i]);\n//\n//\t\t\tfor (Chain chain: transformedStruct.getChains()) {\n//\t\t\t\t// we assign a new AU id (chain ID) consisting in original chain ID + an operator index from 1 to n\n//\t\t\t\tchain.setChainID(chain.getChainID()+(i+1));\n//\t\t\t\tstructure.addChain(chain);\n//\t\t\t}\n//\t\t}\n//\n//\t\t// now we have more chains in AU, we have to update the value\n//\t\tthis.numChainsAu = structure.getChains().size();\n//\t}\n//\n//\t/**\n//\t * Removes the extra chains that were added to the original structure in {@link #constructFullStructure()}\n//\t */\n//\tprivate void removeExtraChains() {\n//\t\tstructure.setChains(origChains);\n//\t}\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.structure.xtal;\n\n\nimport org.biojava.nbio.structure.*;\nimport org.biojava.nbio.structure.contact.AtomContactSet;\nimport org.biojava.nbio.structure.contact.StructureInterface;\nimport org.biojava.nbio.structure.contact.StructureInterfaceList;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.vecmath.Matrix4d;\nimport javax.vecmath.Point3i;\nimport javax.vecmath.Vector3d;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\n\n\n/**\n * A class containing methods to find interfaces in a given crystallographic Structure by\n * reconstructing the crystal lattice through application of symmetry operators\n *\n * @author Jose Duarte\n *\n */\npublic class CrystalBuilder {\n\n\t// Default number of cell neighbors to try in interface search (in 3 directions of space).\n\t// In the search, only bounding box overlaps are tried, thus there's not so much overhead in adding\n\t// more cells. We actually tested it and using numCells from 1 to 10 didn't change runtimes at all.\n\t// Examples with interfaces in distant neighbor cells:\n\t//   2nd neighbors: 3hz3, 1wqj, 2de3, 1jcd\n\t//   3rd neighbors: 3bd3, 1men, 2gkp, 1wui\n\t//   5th neighbors: 2ahf, 2h2z\n\t//   6th neighbors: 1was (in fact interfaces appear only at 5th neighbors for it)\n\t// Maybe this could be avoided by previously translating the given molecule to the first cell,\n\t// BUT! some bona fide cases exist, e.g. 2d3e: it is properly placed at the origin but the molecule\n\t// is enormously long in comparison with the dimensions of the unit cell, some interfaces come at the 7th neighbor.\n\t// After a scan of the whole PDB (Oct 2013) using numCells=50, the highest one was 4jgc with\n\t// interfaces up to the 11th neighbor. Other high ones (9th neighbors) are 4jbm and 4k3t.\n\t// We set the default value to 12 based on that (having not seen any difference in runtime)\n\tpublic static final int DEF_NUM_CELLS = 12;\n\n\t/**\n\t * Default maximum distance between two chains to be considered an interface.\n\t * @see #getUniqueInterfaces(double)\n\t */\n\tpublic static final double DEFAULT_INTERFACE_DISTANCE_CUTOFF = 5.5;\n\n\tpublic static final Matrix4d IDENTITY = new Matrix4d(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);\n\n\n\t/**\n\t * Whether to consider HETATOMs in contact calculations\n\t */\n\tprivate static final boolean INCLUDE_HETATOMS = true;\n\n\tprivate Structure structure;\n\tprivate PDBCrystallographicInfo crystallographicInfo;\n\tprivate int numPolyChainsAu;\n\tprivate int numOperatorsSg;\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(CrystalBuilder.class);\n\n\tprivate int numCells;\n\n\tprivate ArrayList<CrystalTransform> visited;\n\n\tprivate boolean isCrystallographic;\n\n\n\n\tpublic CrystalBuilder(Structure structure) {\n\t\tthis.structure = structure;\n\n\t\tthis.crystallographicInfo = structure.getCrystallographicInfo();\n\n\t\tthis.numPolyChainsAu = structure.getPolyChains().size();\n\t\tthis.numOperatorsSg = 1;\n\n\n\t\tif (structure.isCrystallographic()) {\n\n\t\t\tthis.isCrystallographic = true;\n\t\t\t// we need to check space group not null for the cases where the entry is crystallographic but\n\t\t\t// the space group is not a standard one recognized by biojava, e.g. 1mnk (SG: 'I 21')\n\t\t\tif (this.crystallographicInfo.getSpaceGroup()==null) {\n\t\t\t\tlogger.warn(\"Could not find a space group, will only calculate asymmetric unit interfaces.\");\n\t\t\t\tthis.isCrystallographic = false;\n\t\t\t} else {\n\t\t\t\tthis.numOperatorsSg = this.crystallographicInfo.getSpaceGroup().getMultiplicity();\n\t\t\t}\n\t\t\t// we need to check crystal cell not null for the rare cases where the entry is crystallographic but\n\t\t\t// the crystal cell is not given, e.g. 2i68, 2xkm, 4bpq\n\t\t\tif (this.crystallographicInfo.getCrystalCell()==null) {\n\t\t\t\tlogger.warn(\"Could not find a crystal cell definition, will only calculate asymmetric unit interfaces.\");\n\t\t\t\tthis.isCrystallographic = false;\n\t\t\t}\n\n\t\t} else {\n\t\t\tthis.isCrystallographic = false;\n\t\t}\n\n\t\tthis.numCells = DEF_NUM_CELLS;\n\n\t}\n\n\t/**\n\t * Set the number of neighboring crystal cells that will be used in the search for contacts\n\t * @param numCells\n\t */\n\tpublic void setNumCells(int numCells) {\n\t\tthis.numCells = numCells;\n\t}\n\n\tprivate void initialiseVisited() {\n\t\tvisited = new ArrayList<CrystalTransform>();\n\t}\n\n\n\n\t/**\n\t * Returns the list of unique interfaces that the given Structure has upon\n\t * generation of all crystal symmetry mates. An interface is defined as any pair of chains\n\t * that contact, i.e. for which there is at least a pair of atoms (one from each chain) within\n\t * the default cutoff distance.\n\t * @return\n\t * @see #DEFAULT_INTERFACE_DISTANCE_CUTOFF\n\t */\n\tpublic StructureInterfaceList getUniqueInterfaces() {\n\t\treturn getUniqueInterfaces(DEFAULT_INTERFACE_DISTANCE_CUTOFF);\n\t}\n\n\t/**\n\t * Returns the list of unique interfaces that the given Structure has upon\n\t * generation of all crystal symmetry mates. An interface is defined as any pair of chains\n\t * that contact, i.e. for which there is at least a pair of atoms (one from each chain) within\n\t * the given cutoff distance.\n\t * @param cutoff the distance cutoff for 2 chains to be considered in contact\n\t * @return\n\t */\n\tpublic StructureInterfaceList getUniqueInterfaces(double cutoff) {\n\n\n\t\tStructureInterfaceList set = new StructureInterfaceList();\n\n\t\t// certain structures in the PDB are not macromolecules (contain no polymeric chains at all), e.g. 1ao2\n\t\t// with the current mmCIF parsing, those will be empty since purely non-polymeric chains are removed\n\t\t// see commit e9562781f23da0ebf3547146a307d7edd5741090\n\t\tif (numPolyChainsAu==0) {\n\t\t\tlogger.warn(\"No chains present in the structure! No interfaces will be calculated\");\n\t\t\treturn set;\n\t\t}\n\n\n\n\t\t// initialising the visited ArrayList for keeping track of symmetry redundancy\n\t\tinitialiseVisited();\n\n\n\n\t\t// the isCrystallographic() condition covers 3 cases:\n\t\t// a) entries with expMethod X-RAY/other diffraction and defined crystalCell (most usual case)\n\t\t// b) entries with expMethod null but defined crystalCell (e.g. PDB file with CRYST1 record but no expMethod annotation)\n\t\t// c) entries with expMethod not X-RAY (e.g. NMR) and defined crystalCell (NMR entries do have a dummy CRYST1 record \"1 1 1 90 90 90 P1\")\n\t\t// d) isCrystallographic will be false if the structure is crystallographic but the space group was not recognized\n\n\n\t\tcalcInterfacesCrystal(set, cutoff);\n\n\n\t\treturn set;\n\t}\n\n\t/**\n\t * Calculate interfaces between original asymmetric unit and neighboring\n\t * whole unit cells, including the original full unit cell i.e. i=0,j=0,k=0\n\t * @param set\n\t * @param cutoff\n\t */\n\tprivate void calcInterfacesCrystal(StructureInterfaceList set, double cutoff) {\n\n\n\t\t// initialising debugging vars\n\t\tlong start = -1;\n\t\tlong end = -1;\n\t\tint trialCount = 0;\n\t\tint skippedRedundant = 0;\n\t\tint skippedAUsNoOverlap = 0;\n\t\tint skippedChainsNoOverlap = 0;\n\t\tint skippedSelfEquivalent = 0;\n\n\n\t\tMatrix4d[] ops = null;\n\t\tif (isCrystallographic) {\n\t\t\tops = structure.getCrystallographicInfo().getTransformationsOrthonormal();\n\t\t} else {\n\t\t\tops = new Matrix4d[1];\n\t\t\tops[0] = new Matrix4d(IDENTITY);\n\t\t}\n\n\t\t// The bounding boxes of all AUs of the unit cell\n\t\tUnitCellBoundingBox bbGrid = new UnitCellBoundingBox(numOperatorsSg, numPolyChainsAu);;\n\t\t// we calculate all the bounds of each of the asym units, those will then be reused and translated\n\t\tbbGrid.setBbs(structure, ops, INCLUDE_HETATOMS);\n\n\n\t\t// if not crystallographic there's no search to do in other cells, only chains within \"AU\" will be checked\n\t\tif (!isCrystallographic) numCells = 0;\n\n\t\tboolean verbose = logger.isDebugEnabled();\n\n\t\tif (verbose) {\n\t\t\ttrialCount = 0;\n\t\t\tstart= System.currentTimeMillis();\n\t\t\tint neighbors = (2*numCells+1)*(2*numCells+1)*(2*numCells+1)-1;\n\t\t\tint auTrials = (numPolyChainsAu*(numPolyChainsAu-1))/2;\n\t\t\tint trials = numPolyChainsAu*numOperatorsSg*numPolyChainsAu*neighbors;\n\t\t\tlogger.debug(\"Chain clash trials within original AU: \"+auTrials);\n\t\t\tlogger.debug(\n\t\t\t\t\t\"Chain clash trials between the original AU and the neighbouring \"+neighbors+\n\t\t\t\t\t\" whole unit cells (\"+numCells+\" neighbours)\" +\n\t\t\t\t\t\"(2x\"+numPolyChainsAu+\"chains x \"+numOperatorsSg+\"AUs x \"+neighbors+\"cells) : \"+trials);\n\t\t\tlogger.debug(\"Total trials: \"+(auTrials+trials));\n\t\t}\n\n\n\t\tfor (int a=-numCells;a<=numCells;a++) {\n\t\t\tfor (int b=-numCells;b<=numCells;b++) {\n\t\t\t\tfor (int c=-numCells;c<=numCells;c++) {\n\n\t\t\t\t\tPoint3i trans = new Point3i(a,b,c);\n\t\t\t\t\tVector3d transOrth = new Vector3d(a,b,c);\n\t\t\t\t\tif (a!=0 || b!=0 || c!=0)\n\t\t\t\t\t\t// we avoid doing the transformation for 0,0,0 (in case it's not crystallographic)\n\t\t\t\t\t\tthis.crystallographicInfo.getCrystalCell().transfToOrthonormal(transOrth);\n\t\t\t\t\tUnitCellBoundingBox bbGridTrans = bbGrid.getTranslatedBbs(transOrth);\n\n\t\t\t\t\tfor (int n=0;n<numOperatorsSg;n++) {\n\n\t\t\t\t\t\t// short-cut strategies\n\t\t\t\t\t\t// 1) we skip first of all if the bounding boxes of the AUs don't overlap\n\t\t\t\t\t\tif (!bbGrid.getAuBoundingBox(0).overlaps(bbGridTrans.getAuBoundingBox(n), cutoff)) {\n\t\t\t\t\t\t\tskippedAUsNoOverlap++;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// 2) we check if we didn't already see its equivalent symmetry operator partner\n\t\t\t\t\t\tCrystalTransform tt = new CrystalTransform(this.crystallographicInfo.getSpaceGroup(), n);\n\t\t\t\t\t\ttt.translate(trans);\n\t\t\t\t\t\tif (isRedundant(tt)) {\n\t\t\t\t\t\t\tskippedRedundant++;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\taddVisited(tt);\n\n\n\t\t\t\t\t\tboolean selfEquivalent = false;\n\n\t\t\t\t\t\t// 3) an operator can be \"self redundant\" if it is the inverse of itself (involutory, e.g. all pure 2-folds with no translation)\n\t\t\t\t\t\tif (tt.isEquivalent(tt)) {\n\t\t\t\t\t\t\tlogger.debug(\"Transform \"+tt+\" is equivalent to itself, will skip half of i-chains to j-chains comparisons\");\n\t\t\t\t\t\t\t// in this case we can't skip the operator, but we can skip half of the matrix comparisons e.g. j>i\n\t\t\t\t\t\t\t// we set a flag and do that within the loop below\n\t\t\t\t\t\t\tselfEquivalent = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tStringBuilder builder = null;\n\t\t\t\t\t\tif (verbose) builder = new StringBuilder(tt+\" \");\n\n\t\t\t\t\t\t// Now that we know that boxes overlap and operator is not redundant, we have to go to the details\n\t\t\t\t\t\tint contactsFound = 0;\n\n\t\t\t\t\t\tList<Chain> polyChains = structure.getPolyChains();\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (int j=0;j<numPolyChainsAu;j++) {\n\t\t\t\t\t\t\tfor (int i=0;i<numPolyChainsAu;i++) { // we only have to compare the original asymmetric unit to every full cell around\n\n\t\t\t\t\t\t\t\tif(selfEquivalent && (j>i)) {\n\t\t\t\t\t\t\t\t\t// in case of self equivalency of the operator we can safely skip half of the matrix\n\t\t\t\t\t\t\t\t\tskippedSelfEquivalent++;\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// special case of original AU, we don't compare a chain to itself\n\t\t\t\t\t\t\t\tif (n==0 && a==0 && b==0 && c==0 && i==j) continue;\n\n\t\t\t\t\t\t\t\t// before calculating the AtomContactSet we check for overlap, then we save putting atoms into the grid\n\t\t\t\t\t\t\t\tif (!bbGrid.getChainBoundingBox(0,i).overlaps(bbGridTrans.getChainBoundingBox(n,j),cutoff)) {\n\t\t\t\t\t\t\t\t\tskippedChainsNoOverlap++;\n\t\t\t\t\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\t\t\t\t\tbuilder.append(\".\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttrialCount++;\n\n\t\t\t\t\t\t\t\t// finally we've gone through all short-cuts and the 2 chains seem to be close enough:\n\t\t\t\t\t\t\t\t// we do the calculation of contacts\n\t\t\t\t\t\t\t\tChain chainj = null;\n\t\t\t\t\t\t\t\tChain chaini = polyChains.get(i);\n\n\t\t\t\t\t\t\t\tif (n==0 && a==0 && b==0 && c==0) {\n\t\t\t\t\t\t\t\t\tchainj = polyChains.get(j);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tchainj = (Chain)polyChains.get(j).clone();\n\t\t\t\t\t\t\t\t\tMatrix4d m = new Matrix4d(ops[n]);\n\t\t\t\t\t\t\t\t\ttranslate(m, transOrth);\n\t\t\t\t\t\t\t\t\tCalc.transform(chainj,m);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tStructureInterface interf = calcContacts(chaini, chainj, cutoff, tt, builder);\n\n\t\t\t\t\t\t\t\tif (interf!=null) {\n\t\t\t\t\t\t\t\t\tcontactsFound++;\n\t\t\t\t\t\t\t\t\tset.add(interf);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif( verbose ) {\n\t\t\t\t\t\t\tif (a==0 && b==0 && c==0 && n==0)\n\t\t\t\t\t\t\t\tbuilder.append(\" \"+contactsFound+\"(\"+(numPolyChainsAu*(numPolyChainsAu-1))/2+\")\");\n\t\t\t\t\t\t\telse if (selfEquivalent)\n\t\t\t\t\t\t\t\tbuilder.append(\" \"+contactsFound+\"(\"+(numPolyChainsAu*(numPolyChainsAu+1))/2+\")\");\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tbuilder.append(\" \"+contactsFound+\"(\"+numPolyChainsAu*numPolyChainsAu+\")\");\n\n\t\t\t\t\t\t\tlogger.debug(builder.toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tend = System.currentTimeMillis();\n\t\tlogger.debug(\"\\n\"+trialCount+\" chain-chain clash trials done. Time \"+(end-start)/1000+\"s\");\n\t\tlogger.debug(\"  skipped (not overlapping AUs)       : \"+skippedAUsNoOverlap);\n\t\tlogger.debug(\"  skipped (not overlapping chains)    : \"+skippedChainsNoOverlap);\n\t\tlogger.debug(\"  skipped (sym redundant op pairs)    : \"+skippedRedundant);\n\t\tlogger.debug(\"  skipped (sym redundant self op)     : \"+skippedSelfEquivalent);\n\n\t\tlogger.debug(\"Found \"+set.size()+\" interfaces.\");\n\t}\n\n\tprivate StructureInterface calcContacts(Chain chaini, Chain chainj, double cutoff, CrystalTransform tt, StringBuilder builder) {\n\t\t// note that we don't consider hydrogens when calculating contacts\n\t\tAtomContactSet graph = StructureTools.getAtomsInContact(chaini, chainj, cutoff, INCLUDE_HETATOMS);\n\n\t\tif (graph.size()>0) {\n\t\t\tif (builder != null) builder.append(\"x\");\n\n\t\t\tCrystalTransform transf = new CrystalTransform(this.crystallographicInfo.getSpaceGroup());\n\t\t\tStructureInterface interf = new StructureInterface(\n\t\t\t\t\tStructureTools.getAllAtomArray(chaini), StructureTools.getAllAtomArray(chainj),\n\t\t\t\t\tchaini.getName(), chainj.getName(),\n\t\t\t\t\tgraph,\n\t\t\t\t\ttransf, tt);\n\n\t\t\treturn interf;\n\n\t\t} else {\n\t\t\tif (builder != null) builder.append(\"o\");\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate void addVisited(CrystalTransform tt) {\n\t\tvisited.add(tt);\n\t}\n\n\t/**\n\t * Checks whether given transformId/translation is symmetry redundant\n\t * Two transformations are symmetry redundant if their matrices (4d) multiplication gives the identity, i.e.\n\t * if one is the inverse of the other.\n\t * @param tt\n\t * @return\n\t */\n\tprivate boolean isRedundant(CrystalTransform tt) {\n\n\t\tIterator<CrystalTransform> it = visited.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tCrystalTransform v = it.next();\n\n\t\t\tif (tt.isEquivalent(v)) {\n\n\t\t\t\tlogger.debug(\"Skipping redundant transformation: \"+tt+\", equivalent to \"+v);\n\n\t\t\t\t// there's only 1 possible equivalent partner for each visited matrix\n\t\t\t\t// (since the equivalent is its inverse matrix and the inverse matrix is unique)\n\t\t\t\t// thus once the partner has been seen, we don't need to check it ever again\n\t\t\t\tit.remove();\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic void translate(Matrix4d m, Vector3d translation) {\n\t\tm.m03 = m.m03+translation.x;\n\t\tm.m13 = m.m13+translation.y;\n\t\tm.m23 = m.m23+translation.z;\n\t}\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.structure.xtal;\n\nimport org.biojava.nbio.structure.Structure;\nimport org.biojava.nbio.structure.StructureException;\nimport org.biojava.nbio.structure.StructureIO;\nimport org.biojava.nbio.structure.align.util.AtomCache;\nimport org.biojava.nbio.structure.contact.StructureInterfaceList;\nimport org.junit.Test;\n\nimport java.io.IOException;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class TestCrystalBuilder {\n\n\t@Test\n\tpublic void test1NMR() throws IOException, StructureException {\n\n\t\t// a monomer NMR entry: must have no interfaces\n\n\t\tAtomCache cache = new AtomCache();\n\n\t\tStructureIO.setAtomCache(cache);\n\n\t\tcache.setUseMmCif(false);\n\t\tStructure s1 = StructureIO.getStructure(\"1NMR\");\n\n\t\tCrystalBuilder cb = new CrystalBuilder(s1);\n\t\tStructureInterfaceList interfaces = cb.getUniqueInterfaces(5.5);\n\t\tassertTrue(interfaces.size()==0);\n\n\t}\n\n\t@Test\n\tpublic void test1B8G() throws IOException, StructureException {\n\n\t\t// a crystallographic entry: several interfaces\n\n\t\tAtomCache cache = new AtomCache();\n\n\t\tStructureIO.setAtomCache(cache);\n\n\t\tcache.setUseMmCif(false);\n\t\tStructure s1 = StructureIO.getStructure(\"1B8G\");\n\t\tCrystalBuilder cb = new CrystalBuilder(s1);\n\t\tStructureInterfaceList interfaces = cb.getUniqueInterfaces(5.5);\n\t\tassertTrue(interfaces.size()>1);\n\n\n\t}\n\n\t@Test\n\tpublic void test2MFZ() throws IOException, StructureException {\n\n\t\t// a dimer NMR entry: must have 1 interface\n\n\t\tAtomCache cache = new AtomCache();\n\n\t\tStructureIO.setAtomCache(cache);\n\n\t\tcache.setUseMmCif(false);\n\t\tStructure s1 = StructureIO.getStructure(\"2MFZ\");\n\t\tCrystalBuilder cb = new CrystalBuilder(s1);\n\t\tStructureInterfaceList interfaces = cb.getUniqueInterfaces(5.5);\n\t\tassertTrue(interfaces.size()==1);\n\n\t}\n\n\t@Test\n\tpublic void test4MF8() throws IOException, StructureException {\n\n\t\t// a crystallographic structure with protein+DNA: has only 3 prot-prot interfaces the rest are DNA-involving ones\n\n\t\tAtomCache cache = new AtomCache();\n\n\t\tStructureIO.setAtomCache(cache);\n\n\t\tcache.setUseMmCif(false);\n\t\tStructure s1 = StructureIO.getStructure(\"4MF8\");\n\t\tCrystalBuilder cb = new CrystalBuilder(s1);\n\t\tStructureInterfaceList interfaces = cb.getUniqueInterfaces(5.5);\n\t\tassertTrue(interfaces.size()>3);\n\n\t}\n\n\t@Test\n\tpublic void test2H2Z() throws IOException, StructureException {\n\n\t\t// a crystallographic structure C 1 2 1.\n\t\t// Should have a minimum number of contacts of 3, from the C number given in:\n\t\t// Wukowitz & Yeates, Nature Structural Biology, 1995\n\t\t// the molecule happens to be placed quite far from the origin, so this tests if we really capture all contacts\n\n\t\tAtomCache cache = new AtomCache();\n\n\t\tStructureIO.setAtomCache(cache);\n\n\t\tcache.setUseMmCif(false);\n\t\tStructure s1 = StructureIO.getStructure(\"2H2Z\");\n\t\tCrystalBuilder cb = new CrystalBuilder(s1);\n\t\tStructureInterfaceList interfaces = cb.getUniqueInterfaces(5.5);\n\t\tassertTrue(interfaces.size()>=3);\n\n\t}\n}\n","changedTest":"","commitMessage":"Fixing issue with TestInterfaceClustering","test_commitMessage":"","allZero":false}