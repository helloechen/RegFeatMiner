{"repository":"biojava","prod_path":"biojava-core/src/main/java/org/biojava/nbio/core/sequence/loader/GenbankProxySequenceReader.java","test_path":"biojava-core/src/test/java/org/biojava/nbio/core/sequence/loader/GenbankProxySequenceReaderTest.java","prod_time":"2015-02-24 22:54:48","test_time":"2015-02-24 22:54:48","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":2,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":2,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"24982545a7c35791df9725e9aae3ab2428b9b467","test_commitID":"24982545a7c35791df9725e9aae3ab2428b9b467","isfound":"found test change","originPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n * \r\n * @author Karl Nicholas <github:karlnicholas>\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n * Created on 08-08-2013\r\n *\r\n */\r\npackage org.biojava.nbio.core.sequence.loader;\r\n\r\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\r\nimport org.biojava.nbio.core.sequence.AccessionID;\r\nimport org.biojava.nbio.core.sequence.DNASequence;\r\nimport org.biojava.nbio.core.sequence.ProteinSequence;\r\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\r\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\r\nimport org.biojava.nbio.core.sequence.compound.DNACompoundSet;\r\nimport org.biojava.nbio.core.sequence.compound.NucleotideCompound;\r\nimport org.biojava.nbio.core.sequence.features.*;\r\nimport org.biojava.nbio.core.sequence.io.GenbankSequenceParser;\r\nimport org.biojava.nbio.core.sequence.io.GenericGenbankHeaderParser;\r\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\r\nimport org.biojava.nbio.core.sequence.template.Compound;\r\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.io.*;\r\nimport java.net.URL;\r\nimport java.net.URLConnection;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.LinkedHashMap;\r\n\r\n/**\r\n * @author Karl Nicholas <github:karlnicholas>\r\n * @author Jacek Grzebyta <github:jgrzebyta>\r\n */\r\npublic class GenbankProxySequenceReader<C extends Compound> extends StringProxySequenceReader<C> implements FeaturesKeyWordInterface, DatabaseReferenceInterface, FeatureRetriever {\r\n\r\n\tprivate final static Logger logger = LoggerFactory.getLogger(GenbankProxySequenceReader.class);\r\n\r\n\tprivate static final String eutilBaseURL = \"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/\"; //\r\n    private String genbankDirectoryCache = null;\r\n    private GenbankSequenceParser<AbstractSequence<C>, C> genbankParser;\r\n    private GenericGenbankHeaderParser<AbstractSequence<C>, C> headerParser;\r\n    private String header;\r\n    private HashMap<String, ArrayList<AbstractFeature>> features;\r\n    \r\n\r\n    /**\r\n     * \r\n     * @throws InterruptedException \r\n     * @throws IOException \r\n     * @throws CompoundNotFoundException \r\n     */\r\n    public GenbankProxySequenceReader(\r\n            String genbankDirectoryCache,\r\n            String accessionID,\r\n            CompoundSet<C> compoundSet ) throws IOException, InterruptedException, CompoundNotFoundException {\r\n\r\n        setGenbankDirectoryCache(genbankDirectoryCache);\r\n        setCompoundSet(compoundSet);\r\n\r\n        String db = compoundSet instanceof AminoAcidCompoundSet ? \"protein\" : \"nuccore\";\r\n\r\n        InputStream inStream = getBufferedInputStream(accessionID, db);\r\n        genbankParser = new GenbankSequenceParser<AbstractSequence<C>, C>();\r\n\r\n        setContents(genbankParser.getSequence(new BufferedReader(new InputStreamReader(inStream)), 0));\r\n        headerParser = genbankParser.getSequenceHeaderParser();\r\n        header = genbankParser.getHeader();\r\n        features = genbankParser.getFeatures();\r\n\r\n        if (compoundSet.equals(AminoAcidCompoundSet.class)) {\r\n            if (!genbankParser.getCompoundType().equals(compoundSet)) {\r\n                logger.error(\"Declared compount type {} does not mach the real: {}\", genbankParser.getCompoundType().toString(), compoundSet.toString());\r\n                throw new IOException(\"Wrong declared compound type for: \" + accessionID); \r\n            }\r\n        }\r\n\r\n        inStream.close();\r\n    }\r\n\r\n    private BufferedInputStream getBufferedInputStream(String accessionID, String db) throws IOException, InterruptedException {\r\n        BufferedInputStream inStream = null;\r\n        if (genbankDirectoryCache != null && genbankDirectoryCache.length() > 0) {\r\n            File f = new File(genbankDirectoryCache + File.separatorChar + accessionID + \".gb\");\r\n            if (f.exists()) {\r\n                logger.info(\"Reading: {}\", f.toString());\r\n                inStream = new BufferedInputStream(new FileInputStream(f));\r\n            } else {\r\n                InputStream in = getEutilsInputStream(accessionID, db);\r\n                copyInputStreamToFile(in, f);\r\n                inStream = new BufferedInputStream(new FileInputStream(f));\r\n            }\r\n        } else {\r\n            inStream = new BufferedInputStream(getEutilsInputStream(accessionID, db));\r\n        }\r\n        return inStream;\r\n    }\r\n\r\n    private void copyInputStreamToFile(InputStream in, File f) throws IOException, InterruptedException {\r\n        FileOutputStream out = new FileOutputStream(f);\r\n        byte[] buffer = new byte[1024];\r\n        int len = in.read(buffer);\r\n        while (len != -1) {\r\n            out.write(buffer, 0, len);\r\n            len = in.read(buffer);\r\n            if (Thread.interrupted()) {\r\n                in.close();\r\n                out.close();\r\n                throw new InterruptedException();\r\n            }\r\n        }\r\n        in.close();\r\n        out.close();\r\n    }\r\n\r\n    private InputStream getEutilsInputStream(String accessionID, String db) throws IOException {\r\n        String genbankURL = eutilBaseURL + \"efetch.fcgi?db=\" + db + \"&id=\" + accessionID + \"&rettype=gb&retmode=text\";\r\n        logger.info(\"Loading: {}\", genbankURL);\r\n        URL genbank = new URL(genbankURL);\r\n        URLConnection genbankConnection = genbank.openConnection();\r\n        return genbankConnection.getInputStream();\r\n    }\r\n\r\n    /**\r\n     * Local directory cache of Genbank that can be downloaded\r\n     *\r\n     * @return the uniprotDirectoryCache\r\n     */\r\n    public String getGenbankDirectoryCache() {\r\n        return genbankDirectoryCache;\r\n    }\r\n\r\n    /**\r\n     * @param genbankDirectoryCache\r\n     */\r\n    public void setGenbankDirectoryCache(String genbankDirectoryCache) {\r\n        if (genbankDirectoryCache != null) {\r\n            File f = new File(genbankDirectoryCache);\r\n            if (!f.exists()) {\r\n                f.mkdirs();\r\n            }\r\n        }\r\n        this.genbankDirectoryCache = genbankDirectoryCache;\r\n    }\r\n\r\n    public String getHeader() {\r\n        return header;\r\n    }\r\n\r\n    public GenericGenbankHeaderParser<AbstractSequence<C>, C> getHeaderParser() {\r\n        return headerParser;\r\n    }\r\n    public HashMap<String, ArrayList<AbstractFeature>> getFeatures() {\r\n        return features;\r\n    }\r\n\r\n    @Override\r\n    public LinkedHashMap<String, ArrayList<DBReferenceInfo>> getDatabaseReferences() {\r\n        return genbankParser.getDatabaseReferences();\r\n    }\r\n\r\n    @Override\r\n    public ArrayList<String> getKeyWords() {\r\n        return genbankParser.getKeyWords();\r\n    }\r\n\r\n    public static void main(String[] args) throws Throwable {\r\n\r\n        GenbankProxySequenceReader<AminoAcidCompound> genbankProteinReader\r\n                = new GenbankProxySequenceReader<AminoAcidCompound>(\"/tmp\", \"NP_000257\", AminoAcidCompoundSet.getAminoAcidCompoundSet());\r\n        ProteinSequence proteinSequence = new ProteinSequence(genbankProteinReader);\r\n        genbankProteinReader.getHeaderParser().parseHeader(genbankProteinReader.getHeader(), proteinSequence);\r\n        logger.info(\"Sequence ({},{})={}...\", proteinSequence.getAccession(), proteinSequence.getLength(), proteinSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankProteinReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankProteinReader.getDatabaseReferences());\r\n        proteinSequence.getFeatures();\r\n\r\n        GenbankProxySequenceReader<NucleotideCompound> genbankDNAReader\r\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"NM_001126\", DNACompoundSet.getDNACompoundSet());\r\n        DNASequence dnaSequence = new DNASequence(genbankDNAReader);\r\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\r\n        dnaSequence.setAccession(new AccessionID(\"NM_001126\"));\r\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\r\n\r\n        genbankDNAReader\r\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"NM_000266\", DNACompoundSet.getDNACompoundSet());\r\n        dnaSequence = new DNASequence(genbankDNAReader);\r\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\r\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\r\n\r\n        genbankDNAReader\r\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"AV254721\", DNACompoundSet.getDNACompoundSet());\r\n        dnaSequence = new DNASequence(genbankDNAReader);\r\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\r\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\r\n\r\n        genbankDNAReader\r\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"AV254721.2\", DNACompoundSet.getDNACompoundSet());\r\n        dnaSequence = new DNASequence(genbankDNAReader);\r\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\r\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\r\n\r\n        genbankDNAReader\r\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"U49845\", DNACompoundSet.getDNACompoundSet());\r\n        dnaSequence = new DNASequence(genbankDNAReader);\r\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\r\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\r\n\r\n        genbankDNAReader\r\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"GI:1293613\", DNACompoundSet.getDNACompoundSet());\r\n        dnaSequence = new DNASequence(genbankDNAReader);\r\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\r\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\r\n\r\n        genbankDNAReader\r\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"14109166\", DNACompoundSet.getDNACompoundSet());\r\n        dnaSequence = new DNASequence(genbankDNAReader);\r\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\r\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\r\n\r\n        /*\r\n         GenbankProxySequenceReader genbankProxyReader = new GenbankProxySequenceReader(\"/tmp\");\r\n         Sequence<?> sequence;\r\n\r\n         sequence = genbankProxyReader.getDNASequence(new AccessionID(\"NM_001126\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n\r\n         sequence = genbankProxyReader.getDNASequence(new AccessionID(\"NM_000266\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n\t\t\r\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"NP_000257\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n\t\t\r\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"AV254721\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n\t\t\r\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"AV254721.2\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n\t\t\r\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"U49845\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n\t\t\r\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"GI:1293613\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n\t\t\r\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"14109166\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n         */\r\n    }\r\n}\r\n","changedPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n * \r\n * @author Karl Nicholas <github:karlnicholas>\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n * Created on 08-08-2013\r\n *\r\n */\r\npackage org.biojava.nbio.core.sequence.loader;\r\n\r\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\r\nimport org.biojava.nbio.core.sequence.AccessionID;\r\nimport org.biojava.nbio.core.sequence.DNASequence;\r\nimport org.biojava.nbio.core.sequence.ProteinSequence;\r\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\r\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\r\nimport org.biojava.nbio.core.sequence.compound.DNACompoundSet;\r\nimport org.biojava.nbio.core.sequence.compound.NucleotideCompound;\r\nimport org.biojava.nbio.core.sequence.features.*;\r\nimport org.biojava.nbio.core.sequence.io.GenbankSequenceParser;\r\nimport org.biojava.nbio.core.sequence.io.GenericGenbankHeaderParser;\r\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\r\nimport org.biojava.nbio.core.sequence.template.Compound;\r\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.io.*;\r\nimport java.net.URL;\r\nimport java.net.URLConnection;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.LinkedHashMap;\r\n\r\n/**\r\n * @author Karl Nicholas <github:karlnicholas>\r\n * @author Jacek Grzebyta <github:jgrzebyta>\r\n */\r\npublic class GenbankProxySequenceReader<C extends Compound> extends StringProxySequenceReader<C> implements FeaturesKeyWordInterface, DatabaseReferenceInterface, FeatureRetriever {\r\n\r\n\tprivate final static Logger logger = LoggerFactory.getLogger(GenbankProxySequenceReader.class);\r\n\r\n\tprivate static final String eutilBaseURL = \"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/\"; //\r\n    private String genbankDirectoryCache = null;\r\n    private GenbankSequenceParser<AbstractSequence<C>, C> genbankParser;\r\n    private GenericGenbankHeaderParser<AbstractSequence<C>, C> headerParser;\r\n    private String header;\r\n    private HashMap<String, ArrayList<AbstractFeature>> features;\r\n    \r\n\r\n    /**\r\n     * \r\n     * @throws InterruptedException \r\n     * @throws IOException \r\n     * @throws CompoundNotFoundException \r\n     */\r\n    public GenbankProxySequenceReader(\r\n            String genbankDirectoryCache,\r\n            String accessionID,\r\n            CompoundSet<C> compoundSet ) throws IOException, InterruptedException, CompoundNotFoundException {\r\n\r\n        setGenbankDirectoryCache(genbankDirectoryCache);\r\n        setCompoundSet(compoundSet);\r\n\r\n        String db = compoundSet instanceof AminoAcidCompoundSet ? \"protein\" : \"nuccore\";\r\n\r\n        InputStream inStream = getBufferedInputStream(accessionID, db);\r\n        genbankParser = new GenbankSequenceParser<AbstractSequence<C>, C>();\r\n\r\n        setContents(genbankParser.getSequence(new BufferedReader(new InputStreamReader(inStream)), 0));\r\n        headerParser = genbankParser.getSequenceHeaderParser();\r\n        header = genbankParser.getHeader();\r\n        features = genbankParser.getFeatures();\r\n\r\n        if (compoundSet.equals(AminoAcidCompoundSet.class)) {\r\n            if (!genbankParser.getCompoundType().equals(compoundSet)) {\r\n                logger.error(\"Declared compount type {} does not mach the real: {}\", genbankParser.getCompoundType().toString(), compoundSet.toString());\r\n                throw new IOException(\"Wrong declared compound type for: \" + accessionID); \r\n            }\r\n        }\r\n\r\n        inStream.close();\r\n    }\r\n\r\n    private BufferedInputStream getBufferedInputStream(String accessionID, String db) throws IOException, InterruptedException {\r\n        BufferedInputStream inStream = null;\r\n        if (genbankDirectoryCache != null && genbankDirectoryCache.length() > 0) {\r\n            File f = new File(genbankDirectoryCache + File.separatorChar + accessionID + \".gb\");\r\n            if (f.exists()) {\r\n                logger.debug(\"Reading: {}\", f.toString());\r\n                inStream = new BufferedInputStream(new FileInputStream(f));\r\n            } else {\r\n                InputStream in = getEutilsInputStream(accessionID, db);\r\n                copyInputStreamToFile(in, f);\r\n                inStream = new BufferedInputStream(new FileInputStream(f));\r\n            }\r\n        } else {\r\n            inStream = new BufferedInputStream(getEutilsInputStream(accessionID, db));\r\n        }\r\n        return inStream;\r\n    }\r\n\r\n    private void copyInputStreamToFile(InputStream in, File f) throws IOException, InterruptedException {\r\n        FileOutputStream out = new FileOutputStream(f);\r\n        byte[] buffer = new byte[1024];\r\n        int len = in.read(buffer);\r\n        while (len != -1) {\r\n            out.write(buffer, 0, len);\r\n            len = in.read(buffer);\r\n            if (Thread.interrupted()) {\r\n                in.close();\r\n                out.close();\r\n                throw new InterruptedException();\r\n            }\r\n        }\r\n        in.close();\r\n        out.close();\r\n    }\r\n\r\n    private InputStream getEutilsInputStream(String accessionID, String db) throws IOException {\r\n        String genbankURL = eutilBaseURL + \"efetch.fcgi?db=\" + db + \"&id=\" + accessionID + \"&rettype=gb&retmode=text\";\r\n        logger.trace(\"Loading: {}\", genbankURL);\r\n        URL genbank = new URL(genbankURL);\r\n        URLConnection genbankConnection = genbank.openConnection();\r\n        return genbankConnection.getInputStream();\r\n    }\r\n\r\n    /**\r\n     * Local directory cache of Genbank that can be downloaded\r\n     *\r\n     * @return the uniprotDirectoryCache\r\n     */\r\n    public String getGenbankDirectoryCache() {\r\n        return genbankDirectoryCache;\r\n    }\r\n\r\n    /**\r\n     * @param genbankDirectoryCache\r\n     */\r\n    public void setGenbankDirectoryCache(String genbankDirectoryCache) {\r\n        if (genbankDirectoryCache != null) {\r\n            File f = new File(genbankDirectoryCache);\r\n            if (!f.exists()) {\r\n                f.mkdirs();\r\n            }\r\n        }\r\n        this.genbankDirectoryCache = genbankDirectoryCache;\r\n    }\r\n\r\n    public String getHeader() {\r\n        return header;\r\n    }\r\n\r\n    public GenericGenbankHeaderParser<AbstractSequence<C>, C> getHeaderParser() {\r\n        return headerParser;\r\n    }\r\n    public HashMap<String, ArrayList<AbstractFeature>> getFeatures() {\r\n        return features;\r\n    }\r\n\r\n    @Override\r\n    public LinkedHashMap<String, ArrayList<DBReferenceInfo>> getDatabaseReferences() {\r\n        return genbankParser.getDatabaseReferences();\r\n    }\r\n\r\n    @Override\r\n    public ArrayList<String> getKeyWords() {\r\n        return genbankParser.getKeyWords();\r\n    }\r\n\r\n    public static void main(String[] args) throws Throwable {\r\n\r\n        GenbankProxySequenceReader<AminoAcidCompound> genbankProteinReader\r\n                = new GenbankProxySequenceReader<AminoAcidCompound>(\"/tmp\", \"NP_000257\", AminoAcidCompoundSet.getAminoAcidCompoundSet());\r\n        ProteinSequence proteinSequence = new ProteinSequence(genbankProteinReader);\r\n        genbankProteinReader.getHeaderParser().parseHeader(genbankProteinReader.getHeader(), proteinSequence);\r\n        logger.info(\"Sequence ({},{})={}...\", proteinSequence.getAccession(), proteinSequence.getLength(), proteinSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankProteinReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankProteinReader.getDatabaseReferences());\r\n        proteinSequence.getFeatures();\r\n\r\n        GenbankProxySequenceReader<NucleotideCompound> genbankDNAReader\r\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"NM_001126\", DNACompoundSet.getDNACompoundSet());\r\n        DNASequence dnaSequence = new DNASequence(genbankDNAReader);\r\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\r\n        dnaSequence.setAccession(new AccessionID(\"NM_001126\"));\r\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\r\n\r\n        genbankDNAReader\r\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"NM_000266\", DNACompoundSet.getDNACompoundSet());\r\n        dnaSequence = new DNASequence(genbankDNAReader);\r\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\r\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\r\n\r\n        genbankDNAReader\r\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"AV254721\", DNACompoundSet.getDNACompoundSet());\r\n        dnaSequence = new DNASequence(genbankDNAReader);\r\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\r\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\r\n\r\n        genbankDNAReader\r\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"AV254721.2\", DNACompoundSet.getDNACompoundSet());\r\n        dnaSequence = new DNASequence(genbankDNAReader);\r\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\r\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\r\n\r\n        genbankDNAReader\r\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"U49845\", DNACompoundSet.getDNACompoundSet());\r\n        dnaSequence = new DNASequence(genbankDNAReader);\r\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\r\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\r\n\r\n        genbankDNAReader\r\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"GI:1293613\", DNACompoundSet.getDNACompoundSet());\r\n        dnaSequence = new DNASequence(genbankDNAReader);\r\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\r\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\r\n\r\n        genbankDNAReader\r\n                = new GenbankProxySequenceReader<NucleotideCompound>(\"/tmp\", \"14109166\", DNACompoundSet.getDNACompoundSet());\r\n        dnaSequence = new DNASequence(genbankDNAReader);\r\n        genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\r\n        logger.info(\"Sequence ({},{})={}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\r\n        logger.info(\"Keywords: {}\", genbankDNAReader.getKeyWords());\r\n        logger.info(\"DatabaseReferences: {}\", genbankDNAReader.getDatabaseReferences());\r\n\r\n        /*\r\n         GenbankProxySequenceReader genbankProxyReader = new GenbankProxySequenceReader(\"/tmp\");\r\n         Sequence<?> sequence;\r\n\r\n         sequence = genbankProxyReader.getDNASequence(new AccessionID(\"NM_001126\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n\r\n         sequence = genbankProxyReader.getDNASequence(new AccessionID(\"NM_000266\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n\t\t\r\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"NP_000257\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n\t\t\r\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"AV254721\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n\t\t\r\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"AV254721.2\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n\t\t\r\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"U49845\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n\t\t\r\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"GI:1293613\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n\t\t\r\n         sequence = genbankProxyReader.getProteinSequence(new AccessionID(\"14109166\"));\r\n         System.out.println(\"Sequence\" + \"(\" + sequence.getLength() + \")=\" + sequence.getSequenceAsString().substring(0, 10) + \"...\");\r\n         */\r\n    }\r\n}\r\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.sequence.loader;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.features.FeatureInterface;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Collection;\n\n/**\n * Testing example for issue #834\n *\n * @author Jacek Grzebyta\n * @author Paolo Pavan\n * @see InfoTask\n */\n@RunWith(Parameterized.class)\npublic class GenbankProxySequenceReaderTest {\n\n    private String gi;\n    private final static Logger logger = LoggerFactory.getLogger(GenbankProxySequenceReaderTest.class);\n\n    public GenbankProxySequenceReaderTest(String gi) {\n        this.gi = gi;\n    }\n\n    @Parameterized.Parameters\n    public static Collection<String[]> getExamples() {\n        String[][] out = new String[][]{\n            {\"399235158\"},\n            {\"7525057\"},\n            {\"34567\"},\n            {\"379015144\"},\n            {\"381353147\"},\n            {\"381353148\"},\n            {\"152970917\"},\n            {\"7856885\"},\n            {\"381353149\"},\n            {\"254839678\"}\n        };\n\n        return Arrays.asList(out);\n    }\n\n    @Test\n    public void biojava3() throws IOException, InterruptedException, CompoundNotFoundException {\n        logger.info(\"run test for protein: {}\", gi);\n        GenbankProxySequenceReader<AminoAcidCompound> genbankReader\n                = new GenbankProxySequenceReader<AminoAcidCompound>(System.getProperty(\"java.io.tmpdir\"),\n                        this.gi,\n                        AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\n        // why only tests on protein sequences?\n        ProteinSequence seq = new ProteinSequence(genbankReader, AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\n        Assert.assertNotNull(\"protein sequence is null\", seq);\n        genbankReader.getHeaderParser().parseHeader(genbankReader.getHeader(), seq);\n\n        Assert.assertTrue(seq.getDescription() != null);\n\n        Assert.assertFalse(seq.getFeaturesKeyWord().getKeyWords().isEmpty());\n        Assert.assertFalse(seq.getFeaturesByType(\"source\").get(0).getSource().isEmpty());\n\n        logger.info(\"taxonomy id: {}\", seq.getTaxonomy().getID());\n        Assert.assertNotNull(seq.getTaxonomy().getID());\n        Assert.assertNotNull(seq.getSequenceAsString());\n\n        if (seq.getFeaturesByType(\"CDS\").size() > 0) {\n            FeatureInterface<AbstractSequence<AminoAcidCompound>, AminoAcidCompound> CDS = seq.getFeaturesByType(\"CDS\").get(0);\n            logger.info(\"CDS: {}\", CDS);\n            String codedBy = CDS.getQualifiers().get(\"coded_by\").getValue();\n            Assert.assertNotNull(codedBy);\n            Assert.assertTrue(!codedBy.isEmpty());\n            logger.info(\"\\t\\tcoded_by: {}\", codedBy);\n        }\n    }\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.sequence.loader;\n\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.features.FeatureInterface;\nimport org.biojava.nbio.core.sequence.template.AbstractSequence;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport org.biojava.nbio.core.sequence.features.AbstractFeature;\nimport org.biojava.nbio.core.sequence.features.Qualifier;\nimport org.junit.Ignore;\n\n/**\n * Testing example for issue #834\n *\n * @author Jacek Grzebyta\n * @author Paolo Pavan\n * @see InfoTask\n */\n@RunWith(Parameterized.class)\npublic class GenbankProxySequenceReaderTest {\n\n    private String gi;\n    private final static Logger logger = LoggerFactory.getLogger(GenbankProxySequenceReaderTest.class);\n\n    public GenbankProxySequenceReaderTest(String gi) {\n        this.gi = gi;\n    }\n\n    @Parameterized.Parameters\n    public static Collection<String[]> getExamples() {\n        String[][] out = new String[][]{\n            {\"399235158\"},\n            {\"7525057\"},\n            {\"34567\"},\n            {\"379015144\"},\n            {\"381353147\"},\n            {\"381353148\"},\n            {\"152970917\"},\n            {\"7856885\"},\n            {\"381353149\"},\n            {\"254839678\"}\n        };\n\n        return Arrays.asList(out);\n    }\n\n    @Test\n    public void testFeatures() throws IOException, InterruptedException, CompoundNotFoundException {\n        logger.info(\"run test for protein: {}\", gi);\n        GenbankProxySequenceReader<AminoAcidCompound> genbankReader\n                = new GenbankProxySequenceReader<AminoAcidCompound>(System.getProperty(\"java.io.tmpdir\"),\n                        this.gi,\n                        AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\n        // why only tests on protein sequences?\n        ProteinSequence seq = new ProteinSequence(genbankReader);\n\n        Assert.assertNotNull(\"protein sequence is null\", seq);\n        \n        /*\n        parse description from header. There is no separate interface/abstract class for method getHeader()\n        so it should be done here (manualy).\n        */\n        genbankReader.getHeaderParser().parseHeader(genbankReader.getHeader(), seq);\n        Assert.assertTrue(seq.getDescription() != null);\n\n        Assert.assertFalse(seq.getFeaturesKeyWord().getKeyWords().isEmpty());\n        Assert.assertFalse(seq.getFeaturesByType(\"source\").get(0).getSource().isEmpty());\n\n        logger.info(\"taxonomy id: {}\", seq.getTaxonomy().getID());\n        Assert.assertNotNull(seq.getTaxonomy().getID());\n        Assert.assertNotNull(seq.getSequenceAsString());\n\n        if (seq.getFeaturesByType(\"CDS\").size() > 0) {\n            FeatureInterface<AbstractSequence<AminoAcidCompound>, AminoAcidCompound> CDS = seq.getFeaturesByType(\"CDS\").get(0);\n            logger.info(\"CDS: {}\", CDS);\n            String codedBy = CDS.getQualifiers().get(\"coded_by\").getValue();\n            Assert.assertNotNull(codedBy);\n            Assert.assertTrue(!codedBy.isEmpty());\n            logger.info(\"\\t\\tcoded_by: {}\", codedBy);\n        }\n    }\n\n    @Test\n    public void testProteinSequenceFactoring() throws Exception {\n        logger.info(\"create protein sequence test for target {}\", gi);\n\n        GenbankProxySequenceReader<AminoAcidCompound> genbankReader\n                = new GenbankProxySequenceReader<AminoAcidCompound>(System.getProperty(\"java.io.tmpdir\"),\n                        this.gi,\n                        AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\n        ProteinSequence seq = new ProteinSequence(genbankReader);\n\n        // if target protein contain CDS/coded_by than it should contain parent nucleotide seq\n        ArrayList<AbstractFeature> CDSs = genbankReader.getFeatures().get(\"CDS\");\n\n        if (CDSs != null) {\n            if (CDSs.size() == 1) {\n                Qualifier codedBy = (Qualifier) CDSs.get(0).getQualifiers().get(\"coded_by\");\n                if (codedBy != null) {\n\n                    AbstractSequence<?> parentSeq = seq.getParentSequence();\n                    Assert.assertNotNull(parentSeq);\n\n                    /* \n                     Sometimes protein might have many 'parents' with different accessions\n                     so accession is not set.\n                \n                     That test is always failed\n                     */\n                    //Assert.assertTrue(parentSeq.getAccession()); \n                    Assert.assertTrue(!parentSeq.getSequenceAsString().isEmpty());\n                }\n            }\n        } else {\n            logger.info(\"target {} has no CDS\", gi);\n        }\n\n    }\n}\n","commitMessage":"create new simple InsdcParser test\nadd loading parent DNASequence in factory\nchange logger levels in GenbankProxySequenceReader\nadd documentation to tests\n","test_commitMessage":"create new simple InsdcParser test\nadd loading parent DNASequence in factory\nchange logger levels in GenbankProxySequenceReader\nadd documentation to tests\n","allZero":false}