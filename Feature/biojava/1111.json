{"repository":"biojava","prod_path":"biojava-alignment/src/main/java/org/biojava/nbio/alignment/SimpleProfileProfileAligner.java","test_path":"biojava-alignment/src/test/java/org/biojava/nbio/alignment/SimpleProfileProfileAlignerTest.java","prod_time":"2024-04-18 15:26:14","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":1,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":1,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"b18212163e0fd9ff56da13ef258005b7d0decced","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 30, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.core.alignment.template.ProfilePair;\nimport org.biojava.nbio.core.alignment.template.Profile;\nimport org.biojava.nbio.core.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.alignment.SimpleProfilePair;\nimport org.biojava.nbio.alignment.template.*;\nimport org.biojava.nbio.core.alignment.template.AlignedSequence.Step;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\nimport java.util.List;\nimport java.util.concurrent.Future;\n\n/**\n * Implements a simple (naive) {@link Aligner} for a pair of {@link Profile}s.  This is basically an extension of the\n * {@link NeedlemanWunsch} pairwise sequence aligner to pairwise profile alignment using a sum-of-pairs score.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} in the pair of alignment {@link Profile}s is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class SimpleProfileProfileAligner<S extends Sequence<C>, C extends Compound>\n\t\textends AbstractProfileProfileAligner<S, C> {\n\n\t/**\n\t * Before running a profile-profile alignment, data must be sent in via calls to\n\t * {@link #setQuery(Profile)}, {@link #setTarget(Profile)}, {@link #setGapPenalty(GapPenalty)}, and\n\t * {@link #setSubstitutionMatrix(SubstitutionMatrix)}.\n\t */\n\tpublic SimpleProfileProfileAligner() {\n\t}\n\n\t/**\n\t * Prepares for a profile-profile alignment.\n\t *\n\t * @param query the first {@link Profile} of the pair to align\n\t * @param target the second {@link Profile} of the pair to align\n\t * @param gapPenalty the gap penalties used during alignment\n\t * @param subMatrix the set of substitution scores used during alignment\n\t */\n\tpublic SimpleProfileProfileAligner(Profile<S, C> query, Profile<S, C> target, GapPenalty gapPenalty,\n\t\t\tSubstitutionMatrix<C> subMatrix) {\n\t\tsuper(query, target, gapPenalty, subMatrix);\n\t}\n\n\t/**\n\t * Prepares for a profile-profile alignment run concurrently.\n\t *\n\t * @param query the first {@link Profile} of the pair to align, still to be calculated\n\t * @param target the second {@link Profile} of the pair to align, still to be calculated\n\t * @param gapPenalty the gap penalties used during alignment\n\t * @param subMatrix the set of substitution scores used during alignment\n\t */\n\tpublic SimpleProfileProfileAligner(Future<ProfilePair<S, C>> query, Future<ProfilePair<S, C>> target,\n\t\t\tGapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix) {\n\t\tsuper(query, target, gapPenalty, subMatrix);\n\t}\n\n\t/**\n\t * Prepares for a profile-profile alignment run concurrently.\n\t *\n\t * @param query the first {@link Profile} of the pair to align\n\t * @param target the second {@link Profile} of the pair to align, still to be calculated\n\t * @param gapPenalty the gap penalties used during alignment\n\t * @param subMatrix the set of substitution scores used during alignment\n\t */\n\tpublic SimpleProfileProfileAligner(Profile<S, C> query, Future<ProfilePair<S, C>> target, GapPenalty gapPenalty,\n\t\t\tSubstitutionMatrix<C> subMatrix) {\n\t\tsuper(query, target, gapPenalty, subMatrix);\n\t}\n\n\t/**\n\t * Prepares for a profile-profile alignment run concurrently.\n\t *\n\t * @param query the first {@link Profile} of the pair to align, still to be calculated\n\t * @param target the second {@link Profile} of the pair to align\n\t * @param gapPenalty the gap penalties used during alignment\n\t * @param subMatrix the set of substitution scores used during alignment\n\t */\n\tpublic SimpleProfileProfileAligner(Future<ProfilePair<S, C>> query, Profile<S, C> target, GapPenalty gapPenalty,\n\t\t\tSubstitutionMatrix<C> subMatrix) {\n\t\tsuper(query, target, gapPenalty, subMatrix);\n\t}\n\n\t// method for AbstractMatrixAligner\n\n\t@Override\n\tprotected void setProfile(List<Step> sx, List<Step> sy) {\n\t\tprofile = pair = new SimpleProfilePair<S, C>(getQuery(), getTarget(), sx, sy);\n\t}\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 30, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.core.alignment.template.ProfilePair;\nimport org.biojava.nbio.core.alignment.template.Profile;\nimport org.biojava.nbio.core.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.alignment.SimpleProfilePair;\nimport org.biojava.nbio.alignment.template.*;\nimport org.biojava.nbio.core.alignment.template.AlignedSequence.Step;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\nimport java.util.List;\nimport java.util.concurrent.Future;\n\n/**\n * Implements a simple (naive) {@link Aligner} for a pair of {@link Profile}s.  This is basically an extension of the\n * {@link NeedlemanWunsch} pairwise sequence aligner to pairwise profile alignment using a sum-of-pairs score.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} in the pair of alignment {@link Profile}s is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class SimpleProfileProfileAligner<S extends Sequence<C>, C extends Compound>\n\t\textends AbstractProfileProfileAligner<S, C> {\n\n\t/**\n\t * Before running a profile-profile alignment, data must be sent in via calls to\n\t * {@link #setQuery(Profile)}, {@link #setTarget(Profile)}, {@link #setGapPenalty(GapPenalty)}, and\n\t * {@link #setSubstitutionMatrix(SubstitutionMatrix)}.\n\t */\n\tpublic SimpleProfileProfileAligner() {\n\t}\n\n\t/**\n\t * Prepares for a profile-profile alignment.\n\t *\n\t * @param query the first {@link Profile} of the pair to align\n\t * @param target the second {@link Profile} of the pair to align\n\t * @param gapPenalty the gap penalties used during alignment\n\t * @param subMatrix the set of substitution scores used during alignment\n\t */\n\tpublic SimpleProfileProfileAligner(Profile<S, C> query, Profile<S, C> target, GapPenalty gapPenalty,\n\t\t\tSubstitutionMatrix<C> subMatrix) {\n\t\tsuper(query, target, gapPenalty, subMatrix);\n\t}\n\n\t/**\n\t * Prepares for a profile-profile alignment run concurrently.\n\t *\n\t * @param query the first {@link Profile} of the pair to align, still to be calculated\n\t * @param target the second {@link Profile} of the pair to align, still to be calculated\n\t * @param gapPenalty the gap penalties used during alignment\n\t * @param subMatrix the set of substitution scores used during alignment\n\t */\n\tpublic SimpleProfileProfileAligner(Future<ProfilePair<S, C>> query, Future<ProfilePair<S, C>> target,\n\t\t\tGapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix) {\n\t\tsuper(query, target, gapPenalty, subMatrix);\n\t}\n\n\t/**\n\t * Prepares for a profile-profile alignment run concurrently.\n\t *\n\t * @param query the first {@link Profile} of the pair to align\n\t * @param target the second {@link Profile} of the pair to align, still to be calculated\n\t * @param gapPenalty the gap penalties used during alignment\n\t * @param subMatrix the set of substitution scores used during alignment\n\t */\n\tpublic SimpleProfileProfileAligner(Profile<S, C> query, Future<ProfilePair<S, C>> target, GapPenalty gapPenalty,\n\t\t\tSubstitutionMatrix<C> subMatrix) {\n\t\tsuper(query, target, gapPenalty, subMatrix);\n\t}\n\n\t/**\n\t * Prepares for a profile-profile alignment run concurrently.\n\t *\n\t * @param query the first {@link Profile} of the pair to align, still to be calculated\n\t * @param target the second {@link Profile} of the pair to align\n\t * @param gapPenalty the gap penalties used during alignment\n\t * @param subMatrix the set of substitution scores used during alignment\n\t */\n\tpublic SimpleProfileProfileAligner(Future<ProfilePair<S, C>> query, Profile<S, C> target, GapPenalty gapPenalty,\n\t\t\tSubstitutionMatrix<C> subMatrix) {\n\t\tsuper(query, target, gapPenalty, subMatrix);\n\t}\n\n\t// method for AbstractMatrixAligner\n\n\t@Override\n\tprotected void setProfile(List<Step> sx, List<Step> sy) {\n\t\tprofile = pair = new SimpleProfilePair<>(getQuery(), getTarget(), sx, sy);\n\t}\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on July 7, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.alignment.template.GapPenalty;\nimport org.biojava.nbio.core.alignment.SimpleProfile;\nimport org.biojava.nbio.core.alignment.matrices.SubstitutionMatrixHelper;\nimport org.biojava.nbio.core.alignment.template.Profile;\nimport org.biojava.nbio.core.alignment.template.ProfilePair;\nimport org.biojava.nbio.core.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class SimpleProfileProfileAlignerTest {\n\n\tprivate static final double PRECISION = 0.00000001;\n\n\tprivate ProteinSequence protein1, protein2, protein3, protein4;\n\tprivate GapPenalty gaps;\n\tprivate SubstitutionMatrix<AminoAcidCompound> blosum62;\n\tprivate Profile<ProteinSequence, AminoAcidCompound> prof1, prof2, prof3, prof4;\n\tprivate SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound> sppa1, sppa2, sppa3;\n\tprivate ProfilePair<ProteinSequence, AminoAcidCompound> pp1, pp2, all;\n\n\t@Before\n\tpublic void setup() throws CompoundNotFoundException {\n\t\tprotein1 = new ProteinSequence(\"ARND\");\n\t\tprotein2 = new ProteinSequence(\"ARND\");\n\t\tprotein3 = new ProteinSequence(\"HILK\");\n\t\tprotein4 = new ProteinSequence(\"ANDR\");\n\t\tgaps = new SimpleGapPenalty(2, 1);\n\t\tblosum62 = SubstitutionMatrixHelper.getBlosum62();\n\t\tprof1 = new SimpleProfile<ProteinSequence, AminoAcidCompound>(protein1);\n\t\tprof2 = new SimpleProfile<ProteinSequence, AminoAcidCompound>(protein2);\n\t\tprof3 = new SimpleProfile<ProteinSequence, AminoAcidCompound>(protein3);\n\t\tprof4 = new SimpleProfile<ProteinSequence, AminoAcidCompound>(protein4);\n\t\tsppa1 = new SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound>(prof1, prof2, gaps, blosum62);\n\t\tpp1 = sppa1.getPair();\n\t\tsppa2 = new SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound>(prof3, prof4, gaps, blosum62);\n\t\tpp2 = sppa2.getPair();\n\t\tsppa3 = new SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound>(pp1, pp2, gaps, blosum62);\n\t\tall = sppa3.getPair();\n\t}\n\n\t@Test\n\tpublic void testSimpleProfileProfileAligner() {\n\t\tSimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound> alig =\n\t\t\t\tnew SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound>();\n\t\talig.setQuery(prof1);\n\t\talig.setTarget(prof2);\n\t\talig.setGapPenalty(gaps);\n\t\talig.setSubstitutionMatrix(blosum62);\n\t\tassertEquals(alig.getScore(), sppa1.getScore(), PRECISION);\n\t}\n\n\t@Test\n\tpublic void testSimpleProfileProfileAlignerProfileOfSCProfileOfSCGapPenaltySubstitutionMatrixOfC() {\n\t\tassertNotNull(sppa1);\n\t\tassertNotNull(sppa2);\n\t\tassertNotNull(sppa3);\n\t}\n\n\t@Test\n\tpublic void testGetQuery() {\n\t\tassertEquals(prof1, sppa1.getQuery());\n\t\tassertEquals(prof3, sppa2.getQuery());\n\t\tassertEquals(pp1, sppa3.getQuery());\n\t}\n\n\t@Test\n\tpublic void testGetTarget() {\n\t\tassertEquals(prof2, sppa1.getTarget());\n\t\tassertEquals(prof4, sppa2.getTarget());\n\t\tassertEquals(pp2, sppa3.getTarget());\n\t}\n\n\t@Test\n\tpublic void testGetGapPenalty() {\n\t\tassertEquals(gaps, sppa1.getGapPenalty());\n\t\tassertEquals(gaps, sppa2.getGapPenalty());\n\t\tassertEquals(gaps, sppa3.getGapPenalty());\n\t}\n\n\t@Test\n\tpublic void testGetSubstitutionMatrix() {\n\t\tassertEquals(blosum62, sppa1.getSubstitutionMatrix());\n\t\tassertEquals(blosum62, sppa2.getSubstitutionMatrix());\n\t\tassertEquals(blosum62, sppa3.getSubstitutionMatrix());\n\t}\n\n\t@Test\n\tpublic void testIsStoringScoreMatrix() {\n\t\tassertFalse(sppa1.isStoringScoreMatrix());\n\t\tassertFalse(sppa2.isStoringScoreMatrix());\n\t\tassertFalse(sppa3.isStoringScoreMatrix());\n\t}\n\n\t@Test\n\tpublic void testGetScoreMatrix() {\n\t\tint[][][] scores = sppa1.getScoreMatrix();\n\t\tassertEquals(1, scores[2][1][1]);\n\t\tscores = sppa2.getScoreMatrix();\n\t\tassertEquals(-7, scores[3][4][0]);\n\t\tscores = sppa3.getScoreMatrix();\n\t\tassertEquals(1, scores[1][2][2]);\n\t}\n\n\t@Test\n\tpublic void testGetScoreMatrixAsString() {\n\t\tassertEquals(String.format(\n\t\t\t\t\"Substitution%n\" +\n\t\t\t\t\"        A   R   N   D%n\" +\n\t\t\t\t\"    0  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n\t\t\t\t\"A  -\\u221E   4  -4  -6  -7%n\" +\n\t\t\t\t\"R  -\\u221E  -4   9   1  -2%n\" +\n\t\t\t\t\"N  -\\u221E  -6   1  15   7%n\" +\n\t\t\t\t\"D  -\\u221E  -7  -2   7  21%n\" +\n\t\t\t\t\"%nDeletion%n\" +\n\t\t\t\t\"        A   R   N   D%n\" +\n\t\t\t\t\"   -2  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n\t\t\t\t\"A  -3  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n\t\t\t\t\"R  -4   1  -7  -9 -10%n\" +\n\t\t\t\t\"N  -5   0   6  -2  -5%n\" +\n\t\t\t\t\"D  -6  -1   5  12   4%n\" +\n\t\t\t\t\"%nInsertion%n\" +\n\t\t\t\t\"        A   R   N   D%n\" +\n\t\t\t\t\"   -2  -3  -4  -5  -6%n\" +\n\t\t\t\t\"A  -\\u221E  -\\u221E   1   0  -1%n\" +\n\t\t\t\t\"R  -\\u221E  -\\u221E  -7   6   5%n\" +\n\t\t\t\t\"N  -\\u221E  -\\u221E  -9  -2  12%n\" +\n\t\t\t\t\"D  -\\u221E  -\\u221E -10  -5   4%n\"),\n\t\t\t\tsppa1.getScoreMatrixAsString());\n\t\tassertEquals(String.format(\n\t\t\t\t\"Substitution%n\" +\n\t\t\t\t\"        A   N   D   R%n\" +\n\t\t\t\t\"    0  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n\t\t\t\t\"H  -\\u221E  -2  -2  -5  -5%n\" +\n\t\t\t\t\"I  -\\u221E  -4  -5  -5  -8%n\" +\n\t\t\t\t\"L  -\\u221E  -5  -7  -9  -7%n\" +\n\t\t\t\t\"K  -\\u221E  -6  -5  -7  -6%n\" +\n\t\t\t\t\"%nDeletion%n\" +\n\t\t\t\t\"        A   N   D   R%n\" +\n\t\t\t\t\"   -2  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n\t\t\t\t\"H  -3  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n\t\t\t\t\"I  -4  -5  -5  -8  -8%n\" +\n\t\t\t\t\"L  -5  -6  -6  -8  -9%n\" +\n\t\t\t\t\"K  -6  -7  -7  -9 -10%n\" +\n\t\t\t\t\"%nInsertion%n\" +\n\t\t\t\t\"        A   N   D   R%n\" +\n\t\t\t\t\"   -2  -3  -4  -5  -6%n\" +\n\t\t\t\t\"H  -\\u221E  -\\u221E  -5  -5  -6%n\" +\n\t\t\t\t\"I  -\\u221E  -\\u221E  -7  -8  -8%n\" +\n\t\t\t\t\"L  -\\u221E  -\\u221E  -8  -9 -10%n\" +\n\t\t\t\t\"K  -\\u221E  -\\u221E  -9  -8  -9%n\"),\n\t\t\t\tsppa2.getScoreMatrixAsString());\n\t\tassertEquals(String.format(\n\t\t\t\t\"Substitution%n\" +\n\t\t\t\t\"        -   H   I   L   K%n\" +\n\t\t\t\t\"    0  -\\u221E  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n\t\t\t\t\"A  -\\u221E   4  -5  -5  -6  -7%n\" +\n\t\t\t\t\"R  -\\u221E  -4   4  -1  -2   3%n\" +\n\t\t\t\t\"N  -\\u221E  -6   5   3  -2   0%n\" +\n\t\t\t\t\"D  -\\u221E  -7   0   7  -1   0%n\" +\n\t\t\t\t\"%nDeletion%n\" +\n\t\t\t\t\"        -   H   I   L   K%n\" +\n\t\t\t\t\"   -2  -\\u221E  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n\t\t\t\t\"A  -3  -\\u221E  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n\t\t\t\t\"R  -4   1  -8  -8  -9 -10%n\" +\n\t\t\t\t\"N  -5   0   1  -4  -5   0%n\" +\n\t\t\t\t\"D  -6  -1   2   0  -5  -1%n\" +\n\t\t\t\t\"%nInsertion%n\" +\n\t\t\t\t\"        -   H   I   L   K%n\" +\n\t\t\t\t\"   -2  -3  -4  -5  -6  -7%n\" +\n\t\t\t\t\"A  -\\u221E  -\\u221E   1   0  -1  -2%n\" +\n\t\t\t\t\"R  -\\u221E  -\\u221E  -7   1   0  -1%n\" +\n\t\t\t\t\"N  -\\u221E  -\\u221E  -9   2   1   0%n\" +\n\t\t\t\t\"D  -\\u221E  -\\u221E -10  -3   4   3%n\"),\n\t\t\t\tsppa3.getScoreMatrixAsString());\n\t}\n\n\t@Test\n\tpublic void testGetComputationTime() {\n\t\tassertTrue(sppa1.getComputationTime() > 0);\n\t\tassertTrue(sppa2.getComputationTime() > 0);\n\t\tassertTrue(sppa3.getComputationTime() > 0);\n\t}\n\n\t@Test\n\tpublic void testGetProfile() {\n\t\tassertEquals(sppa1.getProfile().toString(), String.format(\"ARND%nARND%n\"));\n\t\tassertEquals(sppa2.getProfile().toString(), String.format(\"-HILK%nAND-R%n\"));\n\t\tassertEquals(sppa3.getProfile().toString(), String.format(\"ARND--%nARND--%n--HILK%nA-ND-R%n\"));\n\t}\n\n\t@Test\n\tpublic void testGetMaxScore() {\n\t\tassertEquals(21, sppa1.getMaxScore(), PRECISION);\n\t\tassertEquals(21, sppa2.getMaxScore(), PRECISION);\n\t\tassertEquals(21, sppa3.getMaxScore(), PRECISION);\n\t}\n\n\t@Test\n\tpublic void testGetMinScore() {\n\t\tassertEquals(-12, sppa1.getMinScore(), PRECISION);\n\t\tassertEquals(-12, sppa2.getMinScore(), PRECISION);\n\t\tassertEquals(-13, sppa3.getMinScore(), PRECISION);\n\t}\n\n\t@Test\n\tpublic void testGetScore() {\n\t\tassertEquals(21, sppa1.getScore(), PRECISION);\n\t\tassertEquals(-6, sppa2.getScore(), PRECISION);\n\t\tassertEquals(3, sppa3.getScore(), PRECISION);\n\t}\n\n\t@Test\n\tpublic void testGetPair() {\n\t\tassertEquals(String.format(\"ARND%nARND%n\"), pp1.toString());\n\t\tassertEquals(String.format(\"-HILK%nAND-R%n\"), pp2.toString());\n\t\tassertEquals(String.format(\"ARND--%nARND--%n--HILK%nA-ND-R%n\"), all.toString());\n\t}\n\n}\n","changedTest":"","commitMessage":"Fix sonar issue S2293 Replace the type specification in this constructor call with the diamond operator ('<>')\n","test_commitMessage":"","allZero":false}