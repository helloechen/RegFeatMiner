{"repository":"biojava","prod_path":"biojava3-structure/src/main/java/org/biojava/bio/structure/scop/RemoteScopInstallation.java","test_path":"biojava3-structure/src/test/java/org/biojava/bio/structure/scop/RemoteScopInstallationTest.java","prod_time":"2013-11-01 09:31:36","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":10,"add_classname_line":0,"add_condition_line":10,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":1,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":1,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":1,"label":"NEGATIVE","prod_commitID":"77a2ae5a028b2fb5e4b05686c916618f79366715","test_commitID":"","isfound":"not found test change","originPro":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Aug 30, 2011\n * Created by Andreas Prlic\n *\n * @since 3.0.2\n */\npackage org.biojava.bio.structure.scop;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.biojava.bio.structure.align.client.JFatCatClient;\nimport org.biojava.bio.structure.align.util.HTTPConnectionTools;\nimport org.biojava.bio.structure.scop.server.ScopDescriptions;\nimport org.biojava.bio.structure.scop.server.ScopDomains;\nimport org.biojava.bio.structure.scop.server.ScopNodes;\nimport org.biojava.bio.structure.scop.server.XMLUtil;\n\n\n/** A class that fetches information about SCOP from a remote data-source. It requires port 80 to open for HTTP connection.\n *\n * @author Andreas Prlic\n *\n */\npublic class RemoteScopInstallation implements ScopDatabase {\n\n\tpublic static final String DEFAULT_SERVER = \"http://source.rcsb.org/jfatcatserver/domains/\";\n\n\tString server = DEFAULT_SERVER;\n\n\n\tpublic static void main(String[] args){\n\n\t\tScopDatabase scop = new RemoteScopInstallation();\n\t\tScopFactory.setScopDatabase(scop);\n\n\t\t//System.out.println(scop.getByCategory(ScopCategory.Superfamily));\n\n\t\tSystem.out.println(scop.getDomainsForPDB(\"4HHB\"));\n\t}\n\n\n\tpublic String getServer() {\n\t\treturn server;\n\t}\n\n\tpublic void setServer(String server) {\n\t\tthis.server = server;\n\t}\n\n\t@Override\n\tpublic List<ScopDescription> getByCategory(ScopCategory category) {\n\t\tList<ScopDescription> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getByCategory?category=\"+category.toString());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\t\t\t//System.out.println(xml);\n\t\t\tScopDescriptions container = ScopDescriptions.fromXML(xml);\n\t\t\tresults = container.getScopDescription();\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopDescription> filterByClassificationId(String query) {\n\t\tList<ScopDescription> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"filterByClassificationId?query=\"+query);\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tScopDescriptions container = ScopDescriptions.fromXML(xml);\n\t\t\tresults = container.getScopDescription();\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopNode> getTree(ScopDomain domain) {\n\t\tList<ScopNode> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getTree?scopId=\"+domain.getScopId());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tScopNodes container = ScopNodes.fromXML(xml);\n\t\t\tresults = container.getScopNode();\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopDomain> filterByDomainName(String query) {\n\t\tList<ScopDomain> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"filterByDomainName?query=\"+query);\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tScopDomains container = ScopDomains.fromXML(xml);\n\t\t\tresults = container.getScopDomain();\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopDescription> filterByDescription(String query) {\n\t\tList<ScopDescription> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"filterByDescription?query=\"+query);\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tScopDescriptions container = ScopDescriptions.fromXML(xml);\n\t\t\tresults = container.getScopDescription();\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic ScopDescription getScopDescriptionBySunid(int sunid) {\n\n\t\tScopDescription desc = null;\n\n\n\t\ttry {\n\n\t\t\tURL u = new URL(server + \"getScopDescriptionBySunid?sunid=\"+sunid);\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tdesc = XMLUtil.getScopDescriptionFromXML(xml);\n\n\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn desc;\n\t}\n\n\t@Override\n\tpublic List<ScopDomain> getDomainsForPDB(String pdbId) {\n\t\tList<ScopDomain> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getDomainsForPDB?pdbId=\"+pdbId);\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tScopDomains container = ScopDomains.fromXML(xml);\n\t\t\tresults = container.getScopDomain();\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n\n\tprivate ScopDomain requestRemoteDomainByScopID(String scopId)\n\tthrows IOException{\n\t\tURL u = new URL(server + \"getDomainByScopID?scopId=\"+scopId);\n\t\t//System.out.println(u);\n\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\treturn XMLUtil.getScopDomainFromXML(xml);\n\n\t}\n\n\t@Override\n\tpublic ScopDomain getDomainByScopID(String scopId) {\n\t\tScopDomain desc = null;\n\t\tint i = 0;\n\t\twhile ( desc == null && i < 3){\n\t\t\ti++;\n\t\t\ttry {\n\t\t\t\tdesc = requestRemoteDomainByScopID(scopId);\n\t\t\t\ti = 100;\n\t\t\t\tbreak;\n\t\t\t} catch (Exception e){\n\t\t\t\te.printStackTrace();\n\t\t\t\t// sleep 3 seconds and try again\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(3000);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\te1.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn desc;\n\t}\n\n\t@Override\n\tpublic ScopNode getScopNode(int sunid) {\n\t\tScopNode desc = null;\n\t\tif( sunid == 0) {\n\t\t    // root node\n\t\t    return null;\n\t\t}\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getScopNode?sunid=\"+sunid);\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tdesc = XMLUtil.getScopNodeFromXML(xml);\n\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn desc;\n\t}\n\n\t@Override\n\tpublic String getScopVersion() {\n\t\tString version = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getScopVersion\");\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tversion = JFatCatClient.convertStreamToString(response);\n\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn version.trim();\n\t}\n\n\t@Override\n\tpublic List<ScopDomain> getScopDomainsBySunid(Integer sunid) {\n\t\tList<ScopDomain> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getScopDomainsBySunid?sunid=\"+sunid);\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tScopDomains container = ScopDomains.fromXML(xml);\n\t\t\tresults = container.getScopDomain();\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n\n\n\t@Override\n\tpublic List<String> getComments(int sunid) {\n\t\treturn new ArrayList<String>(1);\n\t}\n\n}\n","changedPro":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Aug 30, 2011\n * Created by Andreas Prlic\n *\n * @since 3.0.2\n */\npackage org.biojava.bio.structure.scop;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.biojava.bio.structure.align.client.JFatCatClient;\nimport org.biojava.bio.structure.align.util.HTTPConnectionTools;\nimport org.biojava.bio.structure.scop.server.ScopDescriptions;\nimport org.biojava.bio.structure.scop.server.ScopDomains;\nimport org.biojava.bio.structure.scop.server.ScopNodes;\nimport org.biojava.bio.structure.scop.server.XMLUtil;\n\n\n/** A class that fetches information about SCOP from a remote data-source. It requires port 80 to open for HTTP connection.\n *\n * @author Andreas Prlic\n *\n */\npublic class RemoteScopInstallation implements ScopDatabase {\n\n\tpublic static final String DEFAULT_SERVER = \"http://source.rcsb.org/jfatcatserver/domains/\";\n\n\tString server = DEFAULT_SERVER;\n\n\n\tpublic static void main(String[] args){\n\n\t\tScopDatabase scop = new RemoteScopInstallation();\n\t\tScopFactory.setScopDatabase(scop);\n\n\t\t//System.out.println(scop.getByCategory(ScopCategory.Superfamily));\n\n\t\tSystem.out.println(scop.getDomainsForPDB(\"4HHB\"));\n\t}\n\n\n\tpublic String getServer() {\n\t\treturn server;\n\t}\n\n\tpublic void setServer(String server) {\n\t\tthis.server = server;\n\t}\n\n\t@Override\n\tpublic List<ScopDescription> getByCategory(ScopCategory category) {\n\t\tList<ScopDescription> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getByCategory?category=\"+category.toString());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopDescriptions container = ScopDescriptions.fromXML(xml);\n\t\t\t\tresults = container.getScopDescription();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopDescription> filterByClassificationId(String query) {\n\t\tList<ScopDescription> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"filterByClassificationId?query=\"+query);\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopDescriptions container = ScopDescriptions.fromXML(xml);\n\t\t\t\tresults = container.getScopDescription();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopNode> getTree(ScopDomain domain) {\n\t\tList<ScopNode> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getTree?scopId=\"+domain.getScopId());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopNodes container = ScopNodes.fromXML(xml);\n\t\t\t\tresults = container.getScopNode();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopDomain> filterByDomainName(String query) {\n\t\tList<ScopDomain> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"filterByDomainName?query=\"+query);\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopDomains container = ScopDomains.fromXML(xml);\n\t\t\t\tresults = container.getScopDomain();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopDescription> filterByDescription(String query) {\n\t\tList<ScopDescription> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"filterByDescription?query=\"+query);\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopDescriptions container = ScopDescriptions.fromXML(xml);\n\t\t\t\tresults = container.getScopDescription();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic ScopDescription getScopDescriptionBySunid(int sunid) {\n\n\t\tScopDescription desc = null;\n\n\n\t\ttry {\n\n\t\t\tURL u = new URL(server + \"getScopDescriptionBySunid?sunid=\"+sunid);\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tdesc = XMLUtil.getScopDescriptionFromXML(xml);\n\t\t\t}\n\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn desc;\n\t}\n\n\t@Override\n\tpublic List<ScopDomain> getDomainsForPDB(String pdbId) {\n\t\tList<ScopDomain> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getDomainsForPDB?pdbId=\"+pdbId);\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif( !xml.trim().isEmpty()) {\n\t\t\t\tScopDomains container = ScopDomains.fromXML(xml);\n\t\t\t\tresults = container.getScopDomain();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n\n\tprivate ScopDomain requestRemoteDomainByScopID(String scopId)\n\tthrows IOException{\n\t\tURL u = new URL(server + \"getDomainByScopID?scopId=\"+scopId);\n\t\t//System.out.println(u);\n\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n        if( !xml.trim().isEmpty()) {\n        \treturn XMLUtil.getScopDomainFromXML(xml);\n        }\n        return null;\n\t}\n\n\t@Override\n\tpublic ScopDomain getDomainByScopID(String scopId) {\n\t\tScopDomain desc = null;\n\t\tint i = 0;\n\t\twhile ( desc == null && i < 3){\n\t\t\ti++;\n\t\t\ttry {\n\t\t\t\tdesc = requestRemoteDomainByScopID(scopId);\n\t\t\t\ti = 100;\n\t\t\t\tbreak;\n\t\t\t} catch (Exception e){\n\t\t\t\te.printStackTrace();\n\t\t\t\t// sleep 3 seconds and try again\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(3000);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\te1.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn desc;\n\t}\n\n\t@Override\n\tpublic ScopNode getScopNode(int sunid) {\n\t\tScopNode desc = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getScopNode?sunid=\"+sunid);\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif( !xml.trim().isEmpty()) {\n\t\t\t\tdesc = XMLUtil.getScopNodeFromXML(xml);\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn desc;\n\t}\n\n\t@Override\n\tpublic String getScopVersion() {\n\t\tString version = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getScopVersion\");\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tversion = JFatCatClient.convertStreamToString(response);\n\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn version.trim();\n\t}\n\n\t@Override\n\tpublic List<ScopDomain> getScopDomainsBySunid(Integer sunid) {\n\t\tList<ScopDomain> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getScopDomainsBySunid?sunid=\"+sunid);\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif( !xml.trim().isEmpty()) {\n\t\t\t\tScopDomains container = ScopDomains.fromXML(xml);\n\t\t\t\tresults = container.getScopDomain();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn results;\n\t}\n\n\n\t@Override\n\tpublic List<String> getComments(int sunid) {\n\t\treturn new ArrayList<String>(1);\n\t}\n\n}\n","originTest":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.bio.structure.scop;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameters;\n\n/**\n * Tests {@link ScopInstallation}.\n * @author Spencer Bliven\n * @since 3.0.6\n */\n@RunWith(Parameterized.class)\npublic class RemoteScopInstallationTest extends ScopDatabaseTest {\n\n    public RemoteScopInstallationTest(String tag,ScopDatabase scop) {\n        super(tag,scop);\n    }\n\n    //@Parameters\n    @Parameters(name=\"{0}\")\n    public static Collection<Object[]> availableDatabases() {\n        ArrayList<Object[]> databases = new ArrayList<Object[]>();\n        RemoteScopInstallation scop;\n        scop = new RemoteScopInstallation();\n        databases.add(new Object[] {scop.getScopVersion().trim(), scop});\n        return databases;\n    }\n}\n","changedTest":"","commitMessage":"Handling empty XML responses in RemoteScopInstallation\n\nEmpty responses return null. This is consistent with how\nnull gets encoded as XML.\n","test_commitMessage":"","allZero":false}