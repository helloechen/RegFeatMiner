{"repository":"biojava","prod_path":"biojava-core/src/main/java/org/biojava/nbio/core/search/io/Hsp.java","test_path":"biojava-core/src/test/java/org/biojava/nbio/core/search/io/HspTest.java","prod_time":"2024-04-18 15:26:14","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"b18212163e0fd9ff56da13ef258005b7d0decced","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.search.io;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.biojava.nbio.core.alignment.SimpleAlignedSequence;\nimport org.biojava.nbio.core.alignment.SimpleSequencePair;\nimport org.biojava.nbio.core.alignment.template.AlignedSequence.Step;\nimport org.biojava.nbio.core.alignment.template.SequencePair;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.DNASequence;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.RNASequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.compound.DNACompoundSet;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * This class models a search Hsp.\n * You will retrieve a list of this using iterator of a Hit\n *\n * Designed by Paolo Pavan.\n * You may want to find my contacts on Github and LinkedIn for code info\n * or discuss major changes.\n * https://github.com/paolopavan\n *\n * @author Paolo Pavan\n */\n\npublic abstract class Hsp <S extends Sequence<C>, C extends Compound> {\n\tprivate static final Logger logger = LoggerFactory.getLogger(Hsp.class);\n\tprivate Integer hspNum;\n\tprivate Double hspBitScore;\n\tprivate Integer hspScore;\n\tprivate Double hspEvalue;\n\tprivate Integer hspQueryFrom;\n\tprivate Integer hspQueryTo;\n\tprivate Integer hspHitFrom;\n\tprivate Integer hspHitTo;\n\tprivate Integer hspQueryFrame;\n\tprivate Integer hspHitFrame;\n\tprivate Integer hspIdentity;\n\tprivate Integer hspPositive;\n\tprivate Integer hspGaps;\n\tprivate Integer hspAlignLen;\n\tprivate String hspQseq;\n\tprivate String hspHseq;\n\tprivate String hspIdentityString;\n\tprivate Double percentageIdentity = null;\n\tprivate Integer mismatchCount = null;\n\tprivate SimpleSequencePair<S, C> returnAln;\n\n\t@Override\n\tpublic int hashCode() {\n\t\tint hash = 5;\n\t\thash = 67 * hash + (this.hspQseq != null ? this.hspQseq.hashCode() : 0);\n\t\thash = 67 * hash + (this.hspHseq != null ? this.hspHseq.hashCode() : 0);\n\t\thash = 67 * hash + (this.hspIdentityString != null ? this.hspIdentityString.hashCode() : 0);\n\t\treturn hash;\n\t}\n\t/**\n\t * Experimental.\n\t * Wants to implement conceptual comparisons of search results.\n\t * Fields unrelated to search are deliberately not considered.\n\t *\n\t * In HSP case, alignment representation strings are considered.\n\t * @return true if HSP alignments are the same,\n\t * false otherwise or if alignment strings are undetermined\n\t */\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (getClass() != obj.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Hsp<?, ?> other = (Hsp<?, ?>) obj;\n\t\tif ((this.hspQseq == null) ? (other.hspQseq != null) : !this.hspQseq.equals(other.hspQseq)) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((this.hspHseq == null) ? (other.hspHseq != null) : !this.hspHseq.equals(other.hspHseq)) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((this.hspIdentityString == null) ? (other.hspIdentityString != null) : !this.hspIdentityString.equals(other.hspIdentityString)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic SequencePair<S,C> getAlignment(){\n\t\tif (returnAln != null) return returnAln;\n\n\t\tSimpleAlignedSequence<S,C> alignedQuery, alignedHit;\n\t\t// queryFrom e hitTo?\n\t\tint numBefore, numAfter;\n\n\t\talignedQuery = new SimpleAlignedSequence(getSequence(hspQseq), getAlignmentsSteps(hspQseq));\n\t\talignedHit = new SimpleAlignedSequence(getSequence(hspHseq), getAlignmentsSteps(hspHseq));\n\n\t\treturnAln = new SimpleSequencePair<S, C>(alignedQuery, alignedHit);\n\n\t\treturn returnAln;\n\t}\n\n\tprivate Sequence getSequence(String gappedSequenceString){\n\t\tif (gappedSequenceString == null) return null;\n\n\t\tSequence returnSeq = null;\n\t\tString sequenceString = gappedSequenceString.replace(\"-\", \"\");\n\n\t\ttry {\n\t\t\tif (sequenceString.matches(\"^[ACTG]+$\"))\n\t\t\t\treturnSeq = new DNASequence(sequenceString, DNACompoundSet.getDNACompoundSet());\n\t\t\telse if (sequenceString.matches(\"^[ACUG]+$\"))\n\t\t\t\treturnSeq = new RNASequence(sequenceString, DNACompoundSet.getDNACompoundSet());\n\t\t\telse\n\t\t\t\treturnSeq = new ProteinSequence(sequenceString, AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\t\t} catch (CompoundNotFoundException ex) {\n\t\t\tlogger.error(\"Unexpected error, could not find compound when creating Sequence object from Hsp\", ex);\n\t\t}\n\t\treturn returnSeq;\n\t}\n\n\tprivate List<Step> getAlignmentsSteps(String gappedSequenceString){\n\t\tList<Step> returnList = new ArrayList<Step>();\n\n\t\tfor (char c: gappedSequenceString.toCharArray()){\n\t\t\tif (c=='-') returnList.add(Step.GAP); else returnList.add(Step.COMPOUND);\n\t\t}\n\t\treturn returnList;\n\t}\n\n\tpublic int getHspNum() {\n\t\treturn hspNum;\n\t}\n\n\tpublic double getHspBitScore() {\n\t\treturn hspBitScore;\n\t}\n\n\tpublic int getHspScore() {\n\t\treturn hspScore;\n\t}\n\n\tpublic double getHspEvalue() {\n\t\treturn hspEvalue;\n\t}\n\n\tpublic int getHspQueryFrom() {\n\t\treturn hspQueryFrom;\n\t}\n\n\tpublic int getHspQueryTo() {\n\t\treturn hspQueryTo;\n\t}\n\n\tpublic int getHspHitFrom() {\n\t\treturn hspHitFrom;\n\t}\n\n\tpublic int getHspHitTo() {\n\t\treturn hspHitTo;\n\t}\n\n\tpublic int getHspQueryFrame() {\n\t\treturn hspQueryFrame;\n\t}\n\n\tpublic int getHspHitFrame() {\n\t\treturn hspHitFrame;\n\t}\n\n\tpublic int getHspIdentity() {\n\t\treturn hspIdentity;\n\t}\n\n\tpublic int getHspPositive() {\n\t\treturn hspPositive;\n\t}\n\n\tpublic int getHspGaps() {\n\t\treturn hspGaps;\n\t}\n\n\tpublic int getHspAlignLen() {\n\t\treturn hspAlignLen;\n\t}\n\t/**\n\t * HSP aligned query sequence string\n\t * @return\n\t */\n\tpublic String getHspQseq() {\n\t\treturn hspQseq;\n\t}\n\t/**\n\t * HSP aligned hit sequence string\n\t * @return\n\t */\n\tpublic String getHspHseq() {\n\t\treturn hspHseq;\n\t}\n\t/**\n\t * Identity string representing correspondence between aligned residues\n\t * @return\n\t */\n\tpublic String getHspIdentityString() {\n\t\treturn hspIdentityString;\n\t}\n\n\tpublic Double getPercentageIdentity() {\n\t\tif (percentageIdentity != null) return percentageIdentity;\n\t\tif (hspIdentity!= null && hspAlignLen != null) return (double)hspIdentity/hspAlignLen;\n\t\treturn null;\n\t}\n\n\tpublic Integer getMismatchCount() {\n\t\tif (mismatchCount != null) return mismatchCount;\n\t\tif (hspIdentity!= null && hspAlignLen != null) return hspIdentity-hspAlignLen;\n\t\treturn null;\n\t}\n\n\tpublic Hsp(int hspNum, double hspBitScore, int hspScore, double hspEvalue, int hspQueryFrom, int hspQueryTo, int hspHitFrom, int hspHitTo, int hspQueryFrame, int hspHitFrame, int hspIdentity, int hspPositive, int hspGaps, int hspAlignLen, String hspQseq, String hspHseq, String hspIdentityString, Double percentageIdentity, Integer mismatchCount) {\n\t\tthis.hspNum = hspNum;\n\t\tthis.hspBitScore = hspBitScore;\n\t\tthis.hspScore = hspScore;\n\t\tthis.hspEvalue = hspEvalue;\n\t\tthis.hspQueryFrom = hspQueryFrom;\n\t\tthis.hspQueryTo = hspQueryTo;\n\t\tthis.hspHitFrom = hspHitFrom;\n\t\tthis.hspHitTo = hspHitTo;\n\t\tthis.hspQueryFrame = hspQueryFrame;\n\t\tthis.hspHitFrame = hspHitFrame;\n\t\tthis.hspIdentity = hspIdentity;\n\t\tthis.hspPositive = hspPositive;\n\t\tthis.hspGaps = hspGaps;\n\t\tthis.hspIdentity = hspAlignLen;\n\t\tthis.hspQseq = hspQseq;\n\t\tthis.hspHseq = hspHseq;\n\t\tthis.hspIdentityString = hspIdentityString;\n\t\tthis.percentageIdentity = percentageIdentity;\n\t\tthis.mismatchCount = mismatchCount;\n\n\t\t// sanity check\n\t\tif (percentageIdentity != null && (percentageIdentity < 0 || percentageIdentity >1))\n\t\t\tthrow new IllegalArgumentException(\"Percentage identity must be between 0 and 1\");\n\n\t}\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.search.io;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.biojava.nbio.core.alignment.SimpleAlignedSequence;\nimport org.biojava.nbio.core.alignment.SimpleSequencePair;\nimport org.biojava.nbio.core.alignment.template.AlignedSequence.Step;\nimport org.biojava.nbio.core.alignment.template.SequencePair;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.DNASequence;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.RNASequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.compound.DNACompoundSet;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * This class models a search Hsp.\n * You will retrieve a list of this using iterator of a Hit\n *\n * Designed by Paolo Pavan.\n * You may want to find my contacts on Github and LinkedIn for code info\n * or discuss major changes.\n * https://github.com/paolopavan\n *\n * @author Paolo Pavan\n */\n\npublic abstract class Hsp <S extends Sequence<C>, C extends Compound> {\n\tprivate static final Logger logger = LoggerFactory.getLogger(Hsp.class);\n\tprivate Integer hspNum;\n\tprivate Double hspBitScore;\n\tprivate Integer hspScore;\n\tprivate Double hspEvalue;\n\tprivate Integer hspQueryFrom;\n\tprivate Integer hspQueryTo;\n\tprivate Integer hspHitFrom;\n\tprivate Integer hspHitTo;\n\tprivate Integer hspQueryFrame;\n\tprivate Integer hspHitFrame;\n\tprivate Integer hspIdentity;\n\tprivate Integer hspPositive;\n\tprivate Integer hspGaps;\n\tprivate Integer hspAlignLen;\n\tprivate String hspQseq;\n\tprivate String hspHseq;\n\tprivate String hspIdentityString;\n\tprivate Double percentageIdentity = null;\n\tprivate Integer mismatchCount = null;\n\tprivate SimpleSequencePair<S, C> returnAln;\n\n\t@Override\n\tpublic int hashCode() {\n\t\tint hash = 5;\n\t\thash = 67 * hash + (this.hspQseq != null ? this.hspQseq.hashCode() : 0);\n\t\thash = 67 * hash + (this.hspHseq != null ? this.hspHseq.hashCode() : 0);\n\t\thash = 67 * hash + (this.hspIdentityString != null ? this.hspIdentityString.hashCode() : 0);\n\t\treturn hash;\n\t}\n\t/**\n\t * Experimental.\n\t * Wants to implement conceptual comparisons of search results.\n\t * Fields unrelated to search are deliberately not considered.\n\t *\n\t * In HSP case, alignment representation strings are considered.\n\t * @return true if HSP alignments are the same,\n\t * false otherwise or if alignment strings are undetermined\n\t */\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (getClass() != obj.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tfinal Hsp<?, ?> other = (Hsp<?, ?>) obj;\n\t\tif ((this.hspQseq == null) ? (other.hspQseq != null) : !this.hspQseq.equals(other.hspQseq)) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((this.hspHseq == null) ? (other.hspHseq != null) : !this.hspHseq.equals(other.hspHseq)) {\n\t\t\treturn false;\n\t\t}\n\t\tif ((this.hspIdentityString == null) ? (other.hspIdentityString != null) : !this.hspIdentityString.equals(other.hspIdentityString)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic SequencePair<S,C> getAlignment(){\n\t\tif (returnAln != null) return returnAln;\n\n\t\tSimpleAlignedSequence<S,C> alignedQuery, alignedHit;\n\t\t// queryFrom e hitTo?\n\t\tint numBefore, numAfter;\n\n\t\talignedQuery = new SimpleAlignedSequence(getSequence(hspQseq), getAlignmentsSteps(hspQseq));\n\t\talignedHit = new SimpleAlignedSequence(getSequence(hspHseq), getAlignmentsSteps(hspHseq));\n\n\t\treturnAln = new SimpleSequencePair<>(alignedQuery, alignedHit);\n\n\t\treturn returnAln;\n\t}\n\n\tprivate Sequence getSequence(String gappedSequenceString){\n\t\tif (gappedSequenceString == null) return null;\n\n\t\tSequence returnSeq = null;\n\t\tString sequenceString = gappedSequenceString.replace(\"-\", \"\");\n\n\t\ttry {\n\t\t\tif (sequenceString.matches(\"^[ACTG]+$\"))\n\t\t\t\treturnSeq = new DNASequence(sequenceString, DNACompoundSet.getDNACompoundSet());\n\t\t\telse if (sequenceString.matches(\"^[ACUG]+$\"))\n\t\t\t\treturnSeq = new RNASequence(sequenceString, DNACompoundSet.getDNACompoundSet());\n\t\t\telse\n\t\t\t\treturnSeq = new ProteinSequence(sequenceString, AminoAcidCompoundSet.getAminoAcidCompoundSet());\n\t\t} catch (CompoundNotFoundException ex) {\n\t\t\tlogger.error(\"Unexpected error, could not find compound when creating Sequence object from Hsp\", ex);\n\t\t}\n\t\treturn returnSeq;\n\t}\n\n\tprivate List<Step> getAlignmentsSteps(String gappedSequenceString){\n\t\tList<Step> returnList = new ArrayList<>();\n\n\t\tfor (char c: gappedSequenceString.toCharArray()){\n\t\t\tif (c=='-') returnList.add(Step.GAP); else returnList.add(Step.COMPOUND);\n\t\t}\n\t\treturn returnList;\n\t}\n\n\tpublic int getHspNum() {\n\t\treturn hspNum;\n\t}\n\n\tpublic double getHspBitScore() {\n\t\treturn hspBitScore;\n\t}\n\n\tpublic int getHspScore() {\n\t\treturn hspScore;\n\t}\n\n\tpublic double getHspEvalue() {\n\t\treturn hspEvalue;\n\t}\n\n\tpublic int getHspQueryFrom() {\n\t\treturn hspQueryFrom;\n\t}\n\n\tpublic int getHspQueryTo() {\n\t\treturn hspQueryTo;\n\t}\n\n\tpublic int getHspHitFrom() {\n\t\treturn hspHitFrom;\n\t}\n\n\tpublic int getHspHitTo() {\n\t\treturn hspHitTo;\n\t}\n\n\tpublic int getHspQueryFrame() {\n\t\treturn hspQueryFrame;\n\t}\n\n\tpublic int getHspHitFrame() {\n\t\treturn hspHitFrame;\n\t}\n\n\tpublic int getHspIdentity() {\n\t\treturn hspIdentity;\n\t}\n\n\tpublic int getHspPositive() {\n\t\treturn hspPositive;\n\t}\n\n\tpublic int getHspGaps() {\n\t\treturn hspGaps;\n\t}\n\n\tpublic int getHspAlignLen() {\n\t\treturn hspAlignLen;\n\t}\n\t/**\n\t * HSP aligned query sequence string\n\t * @return\n\t */\n\tpublic String getHspQseq() {\n\t\treturn hspQseq;\n\t}\n\t/**\n\t * HSP aligned hit sequence string\n\t * @return\n\t */\n\tpublic String getHspHseq() {\n\t\treturn hspHseq;\n\t}\n\t/**\n\t * Identity string representing correspondence between aligned residues\n\t * @return\n\t */\n\tpublic String getHspIdentityString() {\n\t\treturn hspIdentityString;\n\t}\n\n\tpublic Double getPercentageIdentity() {\n\t\tif (percentageIdentity != null) return percentageIdentity;\n\t\tif (hspIdentity!= null && hspAlignLen != null) return (double)hspIdentity/hspAlignLen;\n\t\treturn null;\n\t}\n\n\tpublic Integer getMismatchCount() {\n\t\tif (mismatchCount != null) return mismatchCount;\n\t\tif (hspIdentity!= null && hspAlignLen != null) return hspIdentity-hspAlignLen;\n\t\treturn null;\n\t}\n\n\tpublic Hsp(int hspNum, double hspBitScore, int hspScore, double hspEvalue, int hspQueryFrom, int hspQueryTo, int hspHitFrom, int hspHitTo, int hspQueryFrame, int hspHitFrame, int hspIdentity, int hspPositive, int hspGaps, int hspAlignLen, String hspQseq, String hspHseq, String hspIdentityString, Double percentageIdentity, Integer mismatchCount) {\n\t\tthis.hspNum = hspNum;\n\t\tthis.hspBitScore = hspBitScore;\n\t\tthis.hspScore = hspScore;\n\t\tthis.hspEvalue = hspEvalue;\n\t\tthis.hspQueryFrom = hspQueryFrom;\n\t\tthis.hspQueryTo = hspQueryTo;\n\t\tthis.hspHitFrom = hspHitFrom;\n\t\tthis.hspHitTo = hspHitTo;\n\t\tthis.hspQueryFrame = hspQueryFrame;\n\t\tthis.hspHitFrame = hspHitFrame;\n\t\tthis.hspIdentity = hspIdentity;\n\t\tthis.hspPositive = hspPositive;\n\t\tthis.hspGaps = hspGaps;\n\t\tthis.hspIdentity = hspAlignLen;\n\t\tthis.hspQseq = hspQseq;\n\t\tthis.hspHseq = hspHseq;\n\t\tthis.hspIdentityString = hspIdentityString;\n\t\tthis.percentageIdentity = percentageIdentity;\n\t\tthis.mismatchCount = mismatchCount;\n\n\t\t// sanity check\n\t\tif (percentageIdentity != null && (percentageIdentity < 0 || percentageIdentity >1))\n\t\t\tthrow new IllegalArgumentException(\"Percentage identity must be between 0 and 1\");\n\n\t}\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.search.io;\n\nimport org.biojava.nbio.core.alignment.template.SequencePair;\nimport org.biojava.nbio.core.search.io.blast.BlastHspBuilder;\nimport org.biojava.nbio.core.sequence.DNASequence;\nimport org.biojava.nbio.core.sequence.compound.NucleotideCompound;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\n/**\n * @author Paolo Pavan\n */\n\npublic class HspTest {\n\n\tHsp hspImpl = new BlastHspBuilder()\n\t\t\t\t.setHspNum(1)\n\t\t\t\t.setHspBitScore(377.211)\n\t\t\t\t.setHspEvalue(8.04143e-093)\n\t\t\t\t.setHspQueryFrom(1)\n\t\t\t\t.setHspQueryTo(224)\n\t\t\t\t.setHspHitFrom(1035)\n\t\t\t\t.setHspHitTo(811)\n\t\t\t\t.setHspQueryFrame(-1)\n\t\t\t\t.setHspIdentity(213)\n\t\t\t\t.setHspPositive(213)\n\t\t\t\t.setHspGaps(5)\n\t\t\t\t.setHspAlignLen(227)\n\t\t\t\t.setHspQseq(\"CTGACGACAGCCATGCACCACCTGTCTCGACTTTCCCCCGAAGGGCACCTAATGTATCTCTACCTCGTTAGTCGGATGTCAAGACCTGGTAAGGTTTTTTCGCGTATCTTCGAATTAAACCACATACTCCACTGCTTGTGCGG-CCCCCGTCAATTCCTTTGAGTTTCAACCTTGCGGCCGTACTCCC-AGGTGGA-TACTTATTGTGTTAACTCCGGCACGGAAGG\")\n\t\t\t\t.setHspHseq(\"CTGACGACAACCATGCACCACCTGTCTCAACTTTCCCC-GAAGGGCACCTAATGTATCTCTACTTCGTTAGTTGGATGTCAAGACCTGGTAAGGTT-CTTCGCGTTGCTTCGAATTAAACCACATACTCCACTGCTTGTGCGGGCCCCCGTCAATTCCTTTGAGTTTCAACCTTGCGGTCGTACTCCCCAGGTGGATTACTTATTGTGTTAACTCCGGCACAGAAGG\")\n\t\t\t\t.setHspIdentityString(\"||||||||| |||||||||||||||||| ||||||||| |||||||||||||||||||||||| |||||||| |||||||||||||||||||||||  |||||||  |||||||||||||||||||||||||||||||||||| |||||||||||||||||||||||||||||||||| ||||||||| ||||||| |||||||||||||||||||||||| |||||\")\n\t\t\t\t.createBlastHsp();\n\n\tHsp uncompleteHsp = new BlastHspBuilder()\n\t\t\t\t.setPercentageIdentity(100.00/100)\n\t\t\t\t.setHspAlignLen(48)\n\t\t\t\t.setMismatchCount(0)\n\t\t\t\t.setHspGaps(0)\n\t\t\t\t.setHspQueryFrom(1)\n\t\t\t\t.setHspQueryTo(48)\n\t\t\t\t.setHspHitFrom(344)\n\t\t\t\t.setHspHitTo(391)\n\t\t\t\t.setHspEvalue(4e-19)\n\t\t\t\t.setHspBitScore(95.6)\n\t\t\t\t.createBlastHsp();\n\n\tpublic HspTest() {\n\t}\n\n\t@BeforeClass\n\tpublic static void setUpClass() {\n\t}\n\n\t@AfterClass\n\tpublic static void tearDownClass() {\n\t}\n\n\t@Before\n\tpublic void setUp() {\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t}\n\n\t/**\n\t * Test of hashCode method, of class Hsp.\n\t */\n\t@Test\n\tpublic void testHashCode() {\n\t\tSystem.out.println(\"hashCode\");\n\t\tHsp instance;\n\t\tint expResult;\n\t\tint result;\n\n\t\tinstance = new BlastHspBuilder()\n\t\t\t\t.setHspNum(1)\n\t\t\t\t.setHspBitScore(377.211)\n\t\t\t\t.setHspEvalue(8.04143e-093)\n\t\t\t\t.setHspQueryFrom(1)\n\t\t\t\t.setHspQueryTo(224)\n\t\t\t\t.setHspHitFrom(1035)\n\t\t\t\t.setHspHitTo(811)\n\t\t\t\t.setHspQueryFrame(-1)\n\t\t\t\t.setHspIdentity(213)\n\t\t\t\t.setHspPositive(213)\n\t\t\t\t.setHspGaps(5)\n\t\t\t\t.setHspAlignLen(227)\n\t\t\t\t.setHspQseq(\"CTGACGACAGCCATGCACCACCTGTCTCGACTTTCCCCCGAAGGGCACCTAATGTATCTCTACCTCGTTAGTCGGATGTCAAGACCTGGTAAGGTTTTTTCGCGTATCTTCGAATTAAACCACATACTCCACTGCTTGTGCGG-CCCCCGTCAATTCCTTTGAGTTTCAACCTTGCGGCCGTACTCCC-AGGTGGA-TACTTATTGTGTTAACTCCGGCACGGAAGG\")\n\t\t\t\t.setHspHseq(\"CTGACGACAACCATGCACCACCTGTCTCAACTTTCCCC-GAAGGGCACCTAATGTATCTCTACTTCGTTAGTTGGATGTCAAGACCTGGTAAGGTT-CTTCGCGTTGCTTCGAATTAAACCACATACTCCACTGCTTGTGCGGGCCCCCGTCAATTCCTTTGAGTTTCAACCTTGCGGTCGTACTCCCCAGGTGGATTACTTATTGTGTTAACTCCGGCACAGAAGG\")\n\t\t\t\t.setHspIdentityString(\"||||||||| |||||||||||||||||| ||||||||| |||||||||||||||||||||||| |||||||| |||||||||||||||||||||||  |||||||  |||||||||||||||||||||||||||||||||||| |||||||||||||||||||||||||||||||||| ||||||||| ||||||| |||||||||||||||||||||||| |||||\")\n\t\t\t\t.createBlastHsp();\n\n\t\texpResult = hspImpl.hashCode();\n\t\tresult = instance.hashCode();\n\t\tassertEquals(expResult, result);\n\n\t\tinstance = new BlastHspBuilder()\n\t\t\t\t.setPercentageIdentity(100.00/100)\n\t\t\t\t.setHspAlignLen(48)\n\t\t\t\t.setMismatchCount(0)\n\t\t\t\t.setHspGaps(0)\n\t\t\t\t.setHspQueryFrom(1)\n\t\t\t\t.setHspQueryTo(48)\n\t\t\t\t.setHspHitFrom(344)\n\t\t\t\t.setHspHitTo(391)\n\t\t\t\t.setHspEvalue(4e-19)\n\t\t\t\t.setHspBitScore(95.6)\n\t\t\t\t.createBlastHsp();\n\n\t\texpResult = uncompleteHsp.hashCode();\n\t\tresult = instance.hashCode();\n\t\tassertEquals(expResult, result);\n\n\t\tHsp uncompleteHsp2 = new BlastHspBuilder()\n\t\t\t\t.setPercentageIdentity(100.00/100)\n\t\t\t\t.setHspAlignLen(48)\n\t\t\t\t.setMismatchCount(0)\n\t\t\t\t.setHspGaps(0)\n\t\t\t\t.setHspQueryFrom(1)\n\t\t\t\t.setHspQueryTo(48)\n\t\t\t\t.setHspHitFrom(344)\n\t\t\t\t.setHspHitTo(391)\n\t\t\t\t.setHspEvalue(4e-19)\n\t\t\t\t.setHspBitScore(95.6)\n\t\t\t\t.createBlastHsp();\n\n\t\tassertEquals(uncompleteHsp.hashCode(), uncompleteHsp2.hashCode());\n\t}\n\n\t/**\n\t * Test of equals method, of class Hsp.\n\t */\n\t@Test\n\tpublic void testEquals() {\n\t\tSystem.out.println(\"equals\");\n\t\tObject o;\n\t\to = new BlastHspBuilder()\n\t\t\t\t.setHspNum(1)\n\t\t\t\t.setHspBitScore(377.211)\n\t\t\t\t.setHspEvalue(8.04143e-093)\n\t\t\t\t.setHspQueryFrom(1)\n\t\t\t\t.setHspQueryTo(224)\n\t\t\t\t.setHspHitFrom(1035)\n\t\t\t\t.setHspHitTo(811)\n\t\t\t\t.setHspQueryFrame(-1)\n\t\t\t\t.setHspIdentity(213)\n\t\t\t\t.setHspPositive(213)\n\t\t\t\t.setHspGaps(5)\n\t\t\t\t.setHspAlignLen(227)\n\t\t\t\t.setHspQseq(\"CTGACGACAGCCATGCACCACCTGTCTCGACTTTCCCCCGAAGGGCACCTAATGTATCTCTACCTCGTTAGTCGGATGTCAAGACCTGGTAAGGTTTTTTCGCGTATCTTCGAATTAAACCACATACTCCACTGCTTGTGCGG-CCCCCGTCAATTCCTTTGAGTTTCAACCTTGCGGCCGTACTCCC-AGGTGGA-TACTTATTGTGTTAACTCCGGCACGGAAGG\")\n\t\t\t\t.setHspHseq(\"CTGACGACAACCATGCACCACCTGTCTCAACTTTCCCC-GAAGGGCACCTAATGTATCTCTACTTCGTTAGTTGGATGTCAAGACCTGGTAAGGTT-CTTCGCGTTGCTTCGAATTAAACCACATACTCCACTGCTTGTGCGGGCCCCCGTCAATTCCTTTGAGTTTCAACCTTGCGGTCGTACTCCCCAGGTGGATTACTTATTGTGTTAACTCCGGCACAGAAGG\")\n\t\t\t\t.setHspIdentityString(\"||||||||| |||||||||||||||||| ||||||||| |||||||||||||||||||||||| |||||||| |||||||||||||||||||||||  |||||||  |||||||||||||||||||||||||||||||||||| |||||||||||||||||||||||||||||||||| ||||||||| ||||||| |||||||||||||||||||||||| |||||\")\n\t\t\t\t.createBlastHsp();\n\t\tHsp instance = hspImpl;\n\n\t\tassertEquals(o, instance);\n\n\t\t// example of Hsp retrieved from uncomplete report.\n\t\t// (Those HSP may come from a tabular format, for example)\n\t\to = new BlastHspBuilder()\n\t\t\t\t.setPercentageIdentity(100.00/100)\n\t\t\t\t.setHspAlignLen(48)\n\t\t\t\t.setMismatchCount(0)\n\t\t\t\t.setHspGaps(0)\n\t\t\t\t.setHspQueryFrom(1)\n\t\t\t\t.setHspQueryTo(48)\n\t\t\t\t.setHspHitFrom(344)\n\t\t\t\t.setHspHitTo(391)\n\t\t\t\t.setHspEvalue(4e-19)\n\t\t\t\t.setHspBitScore(95.6)\n\t\t\t\t.createBlastHsp();\n\n\t\tassertEquals(uncompleteHsp, o);\n\t}\n\n\t/**\n\t * Test of getAlignment method, of class Hsp.\n\t */\n\t@Test\n\tpublic void testGetAlignment() {\n\t\tSystem.out.println(\"getAlignment\");\n\n\t\tSequencePair<DNASequence, NucleotideCompound> aln = hspImpl.getAlignment();\n\n\t\tStringBuilder s = new StringBuilder();\n\t\ts.append(hspImpl.getHspQseq());\n\t\ts.append(String.format(\"%n\"));\n\t\ts.append(hspImpl.getHspHseq());\n\t\ts.append(String.format(\"%n\"));\n\n\t\tString expResult = s.toString();\n\n\t\tString result = aln.toString();\n\n\t\tassertEquals(expResult, result);\n\t}\n\n}\n","changedTest":"","commitMessage":"Fix sonar issue S2293 Replace the type specification in this constructor call with the diamond operator ('<>')\n","test_commitMessage":"","allZero":true}