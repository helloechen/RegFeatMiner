{"repository":"biojava","prod_path":"biojava-alignment/src/main/java/org/biojava/nbio/alignment/NeedlemanWunsch.java","test_path":"biojava-alignment/src/test/java/org/biojava/nbio/alignment/NeedlemanWunschTest.java","prod_time":"2015-09-16 22:43:32","test_time":"2015-09-16 22:43:32","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":2,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":2,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"5ad3cc9e93ee928561a4423a0ac9a3835370b1b7","test_commitID":"5ad3cc9e93ee928561a4423a0ac9a3835370b1b7","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 11, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.alignment.routines.AnchoredPairwiseSequenceAligner;\nimport org.biojava.nbio.alignment.template.AlignedSequence;\nimport org.biojava.nbio.alignment.template.GapPenalty;\nimport org.biojava.nbio.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\n/**\n * Needleman and Wunsch defined an algorithm for pairwise global sequence alignments (from the first until the last\n * {@link Compound} of each {@link Sequence}).  This class performs such global sequence comparisons efficiently by\n * dynamic programming.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} of the alignment pair is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class NeedlemanWunsch<S extends Sequence<C>, C extends Compound> extends AnchoredPairwiseSequenceAligner<S, C> {\n\n    /**\n     * Before running a pairwise global sequence alignment, data must be sent in via calls to\n     * {@link #setQuery(Sequence)}, {@link #setTarget(Sequence)}, {@link #setGapPenalty(GapPenalty)}, and\n     * {@link #setSubstitutionMatrix(SubstitutionMatrix)}.\n     */\n    public NeedlemanWunsch() {\n    }\n\n    /**\n     * Prepares for a pairwise global sequence alignment.\n     *\n     * @param query the first {@link Sequence} of the pair to align\n     * @param target the second {@link Sequence} of the pair to align\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public NeedlemanWunsch(S query, S target, GapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n    }\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 11, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.alignment.routines.AnchoredPairwiseSequenceAligner;\nimport org.biojava.nbio.core.alignment.template.AlignedSequence;\nimport org.biojava.nbio.alignment.template.GapPenalty;\nimport org.biojava.nbio.core.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\n/**\n * Needleman and Wunsch defined an algorithm for pairwise global sequence alignments (from the first until the last\n * {@link Compound} of each {@link Sequence}).  This class performs such global sequence comparisons efficiently by\n * dynamic programming.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} of the alignment pair is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class NeedlemanWunsch<S extends Sequence<C>, C extends Compound> extends AnchoredPairwiseSequenceAligner<S, C> {\n\n    /**\n     * Before running a pairwise global sequence alignment, data must be sent in via calls to\n     * {@link #setQuery(Sequence)}, {@link #setTarget(Sequence)}, {@link #setGapPenalty(GapPenalty)}, and\n     * {@link #setSubstitutionMatrix(SubstitutionMatrix)}.\n     */\n    public NeedlemanWunsch() {\n    }\n\n    /**\n     * Prepares for a pairwise global sequence alignment.\n     *\n     * @param query the first {@link Sequence} of the pair to align\n     * @param target the second {@link Sequence} of the pair to align\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public NeedlemanWunsch(S query, S target, GapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n    }\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 17, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.alignment.template.GapPenalty;\nimport org.biojava.nbio.alignment.template.PairwiseSequenceAligner;\nimport org.biojava.nbio.alignment.template.SequencePair;\nimport org.biojava.nbio.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.DNASequence;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AmbiguityDNACompoundSet;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.DNACompoundSet;\nimport org.biojava.nbio.core.sequence.compound.NucleotideCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\npublic class NeedlemanWunschTest {\n\n\tprivate static final double PRECISION = 0.00000001;\n\t\n    private ProteinSequence query, target;\n    private GapPenalty gaps;\n    private SubstitutionMatrix<AminoAcidCompound> blosum62;\n    private NeedlemanWunsch<ProteinSequence, AminoAcidCompound> alignment, self;\n\n    @Before\n    public void setup() throws CompoundNotFoundException { \n        query = new ProteinSequence(\"ARND\");\n        target = new ProteinSequence(\"RDG\");\n        gaps = new SimpleGapPenalty(10, 1);\n        blosum62 = SubstitutionMatrixHelper.getBlosum62();\n        alignment = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, target, gaps, blosum62);\n        self = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, query, gaps, blosum62);\n    }\n\n\t@Test\n\tpublic void testComplex() throws Exception {\n\n\t\tshort match = 2, gop = -5, gep = -3; // 2, 5, and 3 are coprime; -2 is the mismatch score\n\t\tSimpleSubstitutionMatrix<NucleotideCompound> mx = new SimpleSubstitutionMatrix<NucleotideCompound>(new DNACompoundSet(), match, (short)-match);\n\n\t\tDNASequence a = new DNASequence(\"CGTAT  ATATCGCGCGCGCGATATATATATCT TCTCTAAAAAAA\".replaceAll(\" \", \"\"));\n\t\tDNASequence b = new DNASequence(\"GGTATATATATCGCGCGCACGAT TATATATCTCTCTCTAAAAAAA\".replaceAll(\" \", \"\"));\n//                                       --CGTATATATCGCGCGCGCGATATATATATCT-TCTCTAAAAAAA\n//                                       GGTATATATATCGCGCGCACGAT-TATATATCTCTCTCTAAAAAAA\n//  mismatches:                             ^              ^\n// The two alignments should have the same score. The bottom one is the one the aligner found.\n\n\t\tPairwiseSequenceAligner<DNASequence, NucleotideCompound> aligner = Alignments.getPairwiseAligner(a, b, Alignments.PairwiseSequenceAlignerType.GLOBAL, new SimpleGapPenalty(gop, gep), mx);\n\t\tSequencePair<DNASequence, NucleotideCompound> pair = aligner.getPair();\n\t\tSystem.out.println(pair); // prints the alignment above\n\n\t\tint nMatches = \"--CGTATATATCGCGCGCGCGATATATATATCT-TCTCTAAAAAAA\".length() - 2 - 4;\n\t\tdouble expectedScore = nMatches * match\n\t\t\t\t                       - 2 * match // there are two mismatches\n\t\t\t\t                       + 3 * gop + 4 * gep; // there are 3 gap opens and either 1 or 4 extensions, depending on the def\n\t\tassertEquals(expectedScore, aligner.getScore(), 0.00000001);\n\t}\n\n    @Test\n    public void testNeedlemanWunsch() {\n        NeedlemanWunsch<ProteinSequence, AminoAcidCompound> nw =\n                new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>();\n        nw.setQuery(query);\n        nw.setTarget(target);\n        nw.setGapPenalty(gaps);\n        nw.setSubstitutionMatrix(blosum62);\n        assertEquals(nw.getScore(), alignment.getScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetQuery() {\n        assertEquals(alignment.getQuery(), query);\n        assertEquals(self.getQuery(), query);\n    }\n\n    @Test\n    public void testGetTarget() {\n        assertEquals(alignment.getTarget(), target);\n        assertEquals(self.getTarget(), query);\n    }\n\n    @Test\n    public void testGetGapPenalty() {\n        assertEquals(alignment.getGapPenalty(), gaps);\n        assertEquals(self.getGapPenalty(), gaps);\n    }\n\n    @Test\n    public void testGetSubstitutionMatrix() {\n        assertEquals(alignment.getSubstitutionMatrix(), blosum62);\n        assertEquals(self.getSubstitutionMatrix(), blosum62);\n    }\n\n    @Test\n    public void testIsStoringScoreMatrix() {\n        assertFalse(alignment.isStoringScoreMatrix());\n        assertFalse(self.isStoringScoreMatrix());\n    }\n\n    @Test\n    public void testGetScoreMatrix() {\n        int[][][] scores = alignment.getScoreMatrix();\n        assertEquals(-6, scores[2][1][0]);\n        scores = self.getScoreMatrix();\n        assertEquals(4, scores[3][4][2]);\n    }\n\n    @Test\n    public void testGetScoreMatrixAsString() {\n    \t//System.out.println(alignment.getScoreMatrixAsString());\n    \t//System.out.println(self.getScoreMatrixAsString());\n        assertEquals(String.format(\n                \"Substitution%n\" +\n                \"        R   D   G%n\" +\n                \"    0  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -\\u221E  -1 -13 -12%n\" +\n                \"R  -\\u221E  -6  -3 -14%n\" +\n                \"N  -\\u221E -12  -5  -3%n\" +\n                \"D  -\\u221E -15  -6  -6%n\" +\n                \"%nDeletion%n\" +\n                \"        R   D   G%n\" +\n                \"  -10  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A -11  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"R -12 -12 -24 -23%n\" +\n                \"N -13 -13 -14 -24%n\" +\n                \"D -14 -14 -15 -14%n\" +\n\t\t                \"%nInsertion%n\" +\n                \"        R   D   G%n\" +\n                \"  -10 -11 -12 -13%n\" +\n                \"A  -\\u221E  -\\u221E -12 -13%n\" +\n                \"R  -\\u221E  -\\u221E -17 -14%n\" +\n                \"N  -\\u221E  -\\u221E -23 -16%n\" +\n                \"D  -\\u221E  -\\u221E -26 -17%n\"),\n                     alignment.getScoreMatrixAsString());\n        assertEquals(String.format(\n\t\t                                  \"Substitution%n\" +\n                \"        A   R   N   D%n\" +\n                \"    0  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -\\u221E   4 -12 -14 -15%n\" +\n                \"R  -\\u221E -12   9  -7 -10%n\" +\n                \"N  -\\u221E -14  -7  15  -1%n\" +\n                \"D  -\\u221E -15 -10  -1  21%n\" +\n                \"%nDeletion%n\" +\n                \"        A   R   N   D%n\" +\n                \"  -10  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A -11  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n\t\t\t\t                                  \"R -12  -7 -23 -25 -26%n\" +\n                \"N -13  -8  -2 -18 -21%n\" +\n                \"D -14  -9  -3   4 -12%n\" +\n                \"%nInsertion%n\" +\n                \"        A   R   N   D%n\" +\n                \"  -10 -11 -12 -13 -14%n\" +\n                \"A  -\\u221E  -\\u221E  -7  -8  -9%n\" +\n                \"R  -\\u221E  -\\u221E -23  -2  -3%n\" +\n                \"N  -\\u221E  -\\u221E -25 -18   4%n\" +\n                \"D  -\\u221E  -\\u221E -26 -21 -12%n\"),\n                self.getScoreMatrixAsString());\n    }\n\n    @Test\n    public void testGetComputationTime() {\n        assertTrue(alignment.getComputationTime() > 0);\n        assertTrue(self.getComputationTime() > 0);\n    }\n\n    @Test\n    public void testGetProfile() {\n        assertEquals(String.format(\"ARND%n-RDG%n\"), alignment.getProfile().toString());\n        assertEquals(String.format(\"ARND%nARND%n\"), self.getProfile().toString());\n    }\n\n    @Test\n    public void testGetMaxScore() {\n        assertEquals(21, alignment.getMaxScore(), PRECISION);\n        assertEquals(21, self.getMaxScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetMinScore() {\n        assertEquals(-27, alignment.getMinScore(), PRECISION);\n        assertEquals(-28, self.getMinScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetScore() {\n        assertEquals(-6, alignment.getScore(), PRECISION);\n        assertEquals(21, self.getScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetPair() {\n        assertEquals(String.format(\"ARND%n-RDG%n\"), alignment.getPair().toString());\n        assertEquals(String.format(\"ARND%nARND%n\"), self.getPair().toString());\n    }\n    \n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_all_anchored() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"ACG\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"CGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.setAnchors(new int[] { 0, 1, 2} );\n\t\tassertEquals(String.format(\"ACG%nCGT%n\"), aligner.getPair().toString());\n    }\n    \n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_starting_anchor() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"AAT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"AATT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.setAnchors(new int[] { 1, -1, -1} );\n\t\tassertEquals(String.format(\"-AAT%nAATT%n\"), aligner.getPair().toString());\n    }\n    \n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_ending_anchor() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"AAG\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"AATT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.addAnchor(2, 3);\n\t\tassertEquals(String.format(\"AA-G%nAATT%n\"), aligner.getPair().toString());\n    }\n    \n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_middle_anchor() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"ACTTT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"ACGTTT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.setAnchors(new int[] { -1, 2, -1} );\n\t\tassertEquals(String.format(\"A-CTTT%nACGTTT%n\"), aligner.getPair().toString());\n    }\n    \n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_multiple_anchors() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"ACGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"ATACGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.addAnchor(0, 0);\n\t\taligner.addAnchor(1, 1);\n\t\taligner.addAnchor(2, 2);\n\t\taligner.addAnchor(3, 5);\n\t\tassertEquals(String.format(\"ACG--T%nATACGT%n\"), aligner.getPair().toString());\n    }\n    \n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void anchors_should_not_change_score() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"ACGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"ACGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)5, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> anchored = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)5, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\tanchored.addAnchor(0, 0);\n\t\tanchored.addAnchor(1, 1);\n\t\tanchored.addAnchor(2, 2);\n\t\tanchored.addAnchor(3, 3);\n\t\tassertEquals(aligner.getScore(), anchored.getScore(), PRECISION);\n    }\n    \n    /**\n     * @author Daniel Cameron \n     */\n\t@Test\n\tpublic void testAnchoredDNAAlignment() throws CompoundNotFoundException {\n\t\tDNASequence query = new DNASequence(  \"ACGTACCGGTTTT\", DNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"TACGTCCGGTTACGTACGTT\", DNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)5, (short)2), SubstitutionMatrixHelper.getNuc4_4());\n\t\tassertEquals(String.format(\"-ACGTACCGGTT-------TT%nTACGT-CCGGTTACGTACGTT%n\"), aligner.getPair().toString());\n\t}\n\t\n\t/**\n\t * See issue #202 in github \n\t * @author Jose M Duarte\n\t */\n\t@Test\n\tpublic void testIntOverflowBug() throws CompoundNotFoundException {\n\n\t\tSubstitutionMatrix<NucleotideCompound> matrix = SubstitutionMatrixHelper.getNuc4_4();\n\t\tSimpleGapPenalty gap = new SimpleGapPenalty();\n\n\t\tString str1 =\n\t\t\t\t\"AGATATATCTGAAGCTTAAAGGGCAGTGACAATGGCTGGCTCGGTTAACGGGAATCATAGTGCTGTAGGACCTGGTATAAATTATGAGACGGTGTCTCAAGTGGATGAGTTCTGTAAAGCACTTAGAGGGAAAAGGCCGATCCATAGTATTTTGATAGCTAACAATGGAATGGCGGCTGTGAAGTTTATACGTAGTGTCAGAACATGGGCTTATGAAACATTTGGTACGGAAAAAGCCATATTGTTGGTGGGGATGGCAACCCCTGAAGACATGCGGATCAATGCGGAGCATATCAGAATCGCTGATCAGTTTGTTGAGGTTCCCGGAGGAACCAACAATAACAATTATGCTAACGTTCAGCTGATTGTGGAGATGGCTGAAGTAACACGCGTGGATGCAGTTTGGCCTGGTTGGGGTCATGCATCTGAAAACCCCGAATTACCTGATGCCCTAGATGCAAAAGGAATCATATTTCTTGGTCCTCCAGCATCTTCAATGGCAGCACTGGGAGATAAGATTGGTTCTTCGTTGATTGCACAAGCTGCTGATGTACCCACTCTGCCATGGAGTGGTTCCCATGTTAAAATACCTCCTAATAGCAACTTGGTAACCATCCCAGAGGAGATCTACCGGCAAGCATGTGTCTACACAACTGAAGAAGCGATTGCTAGCTGTCAAGTTGTCGGTTACCCAGCAATGATCAAAGCATCGTGGGGTGGTGGTGGTAAAGGAATCAGGAAGGTTCATAATGATGATGAGGTTAGGGCTCTATTCAAGCAAGTTCAGGGTGAGGTCCCAGGCTCACCAATATTCATAATGAAGGTTGCGTCACAGAGTCGGCATCTAGAGGTCCAGCTGCTCTGTGACAAGCATGGAAATGTTTCAGCTCTGCATAGCCGTGATTGTAGCGTCCAGAGAAGACATCAAAAGATCATAGAGGAGGGTCCAATTACTGTGGCTCCGCCAGAAACTGTCAAGAAACTTGAACAAGCAGCTAGAAGGTTGGCTAAGAGTGTTAACTATGTTGGAGCTGCTACTGTTGAGTATCTCTACAGTATGGACACTGGGGAGTACTACTTCTTAGAGCTTAACCCTCGCTTACAGGTTGAGCATCCTGTCACTGAGTGGATTGCCGAGATAAATCTTCCTGCTGCCCAAGTTGCTGTGGGGATGGGAATTCCTCTCTGGCAAATCCCTGAGATAAGACGGTTCTATGGAATAGAACATGGTGGAGGTTATGATTCTTGGCGAAAAACATCTGTTGTAGCCTTCCCTTTTGATTTTGATAAAGCTCAATCTATAAGGCCAAAAGGTCATTGTGTGGCTGTACGTGTGACAAGTGAGGATCCTGATGACGGGTTCAAACCAACCAGCGGTAGAGTTCAGGAGTTGAGTTTTAAGAGCAAGCCAAATGTGTGGGCGTACTTCTCTGTCAAGTCTGGTGGAGGCATCCACGAGTTCTCGGATTCCCAGTTTGGACATGTTTTTGCATTTGGGGAATCCAGAGCCCTGGCGATAGCGAATATGGTTCTTGGGCTAAAAGAAATTCAGATCCGTGGAGAAATTAGGACTAACGTTGACTACACGATCGACCTTTTACATGCTTCTGATTACCGTGATAACAAAATTCACACTGGTTGGTTGGATAGTAGGATTGCTATGCGGGTCAGAGCTGAGAGGCCTCCATGGTATCTCTCTGTTGTCGGCGGAGCTCTCTATAAAGCATCAGCGACCAGTGCTGCTGTGGTTTCAGATTACGTTGGTTATCTGGAGAAGGGGCAAATCCCTCCAAAGCATATATCTCTTGTACATTCTCAAGTGTCTCTGAATATTGAAGGAAGTAAATATACGATTGATGTAGTCCGGGGTGGATCAGGAACCTACAGGCTAAGAATGAACAAGTCAGAAGTGGTAGCAGAAATACACACTCTACGTGATGGAGGTCTGTTGATGCAGTTGGATGGCAAAAGCCATGTGATATATGCAGAGGAAGAAGCTGCAGGAACTCGTCTTCTCATTGATGGAAGAACTTGTTTGCTACAGAATGACCACGATCCATCAAAGTTAATGGCTGAGACACCGTGCAAGTTGATGAGGTATTTGATTTCCGACAACAGCAATATTGACGCTGATACGCCTTATGCCGAAGTTGAGGTCATGAAGATGTGCATGCCACTTCTTTCACCTGCTTCAGGAGTTATCCATTTTAAAATGTCTGAAGGACAAGCCATGCAGGCTGGTGAACTTATAGCCAATCTTGATCTTGATGATCCTTCTGCTGTAAGAAAGGCCGAACCCTTCCATGGAAGTTTCCCAAGATTAGGGCTTCCAACTGCAATATCCGGTAGAGTTCATCAGAGATGTGCCGCAACATTAAATGCTGCACGCATGATTCTTGCTGGCTATGAGCATAAAGTAGATGAGGTTGTTCAAGACTTACTTAATTGCCTTGATAGCCCTGAACTCCCATTTCTTCAGTGGCAAGAGTGCTTTGCAGTTCTGGCGACACGACTACCTAAAAATCTCAGGAACATGCTAGAATCAAAGTATAGGGAATTTGAGAGTATTTCCAGAAACTCTTTGACCACCGATTTCCCTGCCAAACTTTTAAAAGGCATTCTTGAGGCACATTTATCTTCTTGTGATGAGAAAGAGAGAGGTGCCCTTGAAAGGCTCATTGAACCATTGATGAGCCTTGCAAAATCTTATGAAGGTGGTAGAGAAAGTCATGCCCGTGTTATTGTTCATTCTCTCTTTGAAGAATATCTATCAGTAGAAGAATTATTCAATGATAACATGCTGGCTGATGTTATAGAACGCATGCGTCAGCTATACAAGAAAGATCTGTTGAAAATTGTGGATATAGTGCTCTCACACCAGGGCATAAAAAACAAAAACAAACTCGTTCTCCGGCTCATGGAGCAGCTTGTTTACCCTAATCCTGCTGCTTACAGAGATAAACTTATTCGATTCTCAACACTTAACCATACTAACTACTCTGAGTTGGCGCTCAAGGCGAGTCAATTACTTGAACAGACCAAACTAAGTGAGCTTCGTTCAAACATTGCTAGAAGCCTTTCAGAGTTAGAAATGTTTACAGAGGACGGAGAAAATATGGATACTCCCAAGAGGAAAAGTGCCATTAATGAAAGAATAGAAGATCTTGTAAGCGCATCTTTAGCTGTTGAAGACGCTCTCGTGGGACTATTTGACCATAGCGATCACACACTTCAAAGACGGGTTGTTGAGACTTATATTCGCAGATTATACCAGCCCTACGTCGTTAAAGATAGCGTGAGGATGCAGTGGCACCGTTCTGGTCTTCTTGCTTCCTGGGAGTTCCTAGAGGAGCATATGGAAAGAAAAAACATTGGCTTAGACGATCCCGACACATCTGAAAAAGGATTGGTTGAGAAGCGTAGTAAGAGAAAATGGGGGGCTATGGTTATAATCAAATCTTTGCAGTTTCTTCCAAGTATAATAAGTGCAGCATTGAGAGAAACAAAGCACAACGACTATGAAACTGCCGGAGCTCCTTTATCTGGCAATATGATGCACATTGCTATTGTGGGCATCAACAACCAGATGAGTCTGCTTCAGGACAGTGGGGATGAAGACCAAGCTCAGGAAAGAGTAAACAAGTTGGCCAAAATTCTTAAAGAGGAAGAAGTGAGTTCAAGCCTCTGTTCTGCCGGTGTTGGTGTAATCAGCTGTATAATTCAGCGAGATGAAGGACGAACACCCATGAGACATTCTTTCCATTGGTCGTTGGAGAAACAGTATTATGTAGAAGAGCCGTTGCTGCGTCATCTTGAACCTCCTCTGTCCATTTACCTTGAGTTGGATAAGCTGAAAGGATACTCAAATATACAATATACGCCTTCTCGAGATCGTCAATGGCATCTGTATACTGTTACAGACAAGCCAGTGCCAATCAAGAGGATGTTCCTGAGATCTCTTGTTCGACAGGCTACAATGAACGATGGATTTATATTGCAGCAAGGGCAGGATAAGCAGCTTAGCCAAACACTGATCTCCATGGCGTTTACGTCGAAATGTGTTCTGAGGTCTTTGATGGATGCCATGGAGGAACTGGAACTGAATGCCCATAATGCTGCAATGAAACCAGATCACGCACATATGTTTCTTTGCATATTGCGTGAGCAGCAGATAGATGATCTTGTGCCTTTCCCCAGGAGAGTTGAAGTGAATGCGGAGGATGAAGAAACTACAGTTGAAATGATCTTAGAAGAAGCAGCACGAGAGATACATAGATCTGTTGGAGTGAGAATGCATAGGTTGGGCGTGTGCGAGTGGGAAGTGCGGCTGTGGTTGGTGTCCTCTGGACTGGCATGTGGTGCTTGGAGGGTTGTGGTTGCAAACGTGACAGGCCGTACATGCACTGTCCACATATACCGAGAAGTTGAAACTCCTGGAAGAAACAGTTTAATCTACCACTCAATAACCAAGAAGGGACCTTTGCATGAAACACCAATCAGTGATCAATATAAGCCCCTGGGATATCTCGACAGGCAACGTTTAGCAGCAAGGAGGAGTAACACTACTTATTGCTATGACTTCCCGTTGGCATTTGGGACAGCCTTGGAACTGTTGTGGGCATCACAACACCCAGGAGTTAAGAAACCATATAAGGATACTCTGATCAATGTTAAAGAGCTTGTATTCTCAAAACCAGAAGGTTCTTCGGGTACATCTCTAGATCTGGTTGAAAGACCACCCGGTCTCAACGACTTTGGAATGGTTGCCTGGTGCCTAGATATGTCGACCCCAGAGTTTCCTATGGGGCGGAAACTTCTCGTGATTGCGAATGATGTCACCTTCAAAGCTGGTTCTTTTGGTCCTAGAGAGGACGCGTTTTTCCTTGCTGTTACTGAACTCGCTTGTGCCAAGAAGCTTCCCTTGATTTACTTGGCAGCAAATTCTGGTGCCCGACTTGGGGTTGCTGAAGAAGTCAAAGCCTGCTTCAAAGTTGGATGGTCGGATGAAATTTCCCCTGAGAATGGTTTTCAGTATATATACCTAAGCCCTGAAGACCACGAAAGGATTGGATCATCTGTCATTGCCCATGAAGTAAAGCTCTCTAGTGGGGAAACTAGGTGGGTGATTGATACGATCGTTGGCAAAGAAGATGGTATTGGTGTAGAGAACTTAACAGGAAGTGGGGCCATAGCGGGTGCTTACTCAAAGGCATACAATGAAACTTTTACTTTAACCTTTGTTAGTGGAAGAACGGTTGGAATTGGTGCTTATCTTGCCCGCCTAGGTATGCGGTGCATACAGAGACTTGATCAGCCGATCATCTTGACTGGCTTCTCTACACTCAACAAGTTACTTGGGCGTGAGGTCTATAGCTCTCACATGCAACTGGGTGGCCCGAAAATCATGGGCACAAATGGTGTTGTTCATCTTACAGTCTCAGATGATCTTGAAGGCGTATCAGCAATTCTCAACTGGCTCAGCTACATTCCTGCTTACGTGGGTGGTCCTCTTCCTGTTCTTGCCCCTTTAGATCCACCGGAGAGAATTGTGGAGTATGTCCCAGAGAACTCTTGCGACCCACGAGCGGCTATAGCTGGGGTCAAAGACAATACCGGTAAATGGCTTGGAGGTATCTTTGATAAAAATAGTTTCATTGAGACTCTTGAAGGCTGGGCAAGGACGGTAGTGACTGGTAGAGCCAAGCTCGGGGGAATACCCGTTGGAGTTGTTGCAGTTGAGACACAGACTGTCATGCAGATCATCCCAGCCGATCCTGGACAGCTTGACTCTCATGAAAGAGTGGTTCCGCAAGCAGGGCAAGTCTGGTTTCCTGATTCAGCGGCCAAGACTGCTCAAGCGCTTATGGATTTCAACCGGGAAGAGCTTCCATTGTTTATCCTAGCGAACTGGAGAGGGTTTTCAGGTGGGCAGAGAGATCTTTTCGAAGGAATACTTCAGGCAGGTTCAACTATAGTAGAAAATCTGAGAACCTATCGTCAGCCAGTGTTTGTGTACATCCCAATGATGGGAGAGCTGCGCGGTGGAGCGTGGGTTGTTGTTGACAGCCAGATAAATTCGGATTATGTTGAAATGTATGCTGATGAAACAGCTCGTGGAAATGTGCTTGAGCCAGAAGGGACAATAGAGATAAAATTTAGAACAAAAGAGCTATTAGAGTGCATGGGAAGGTTGGACCAGAAGCTAATCAGTCTGAAAGCAAAACTGCAAGATGCCAAGCAAAGCGAGGCCTATGCAAACATCGAGCTTCTCCAGCAACAGATTAAAGCCCGAGAGAAACAGCTTTTACCAGTTTATATCCAAATCGCCACCAAATTTGCAGAACTTCATGACACTTCCATGAGAATGGCTGCAAAGGGAGTGATCAAAAGTGTTGTGGAATGGAGCGGCTCGCGGTCCTTCTTCTACAAAAAGCTCAATAGGAGAATCGCTGAGAGCTCTCTTGTGAAAAACGTAAGAGAAGCATCTGGAGACAACTTAGCATATAAATCTTCAATGCGTCTGATTCAGGATTGGTTCTGCAACTCTGATATTGCAAAGGGGAAAGAAGAAGCTTGGACAGACGACCAAGTGTTCTTTACATGGAAGGACAATGTTAGTAACTACGAGTTGAAGCTGAGCGAGTTGAGAGCGCAGAAACTACTGAACCAACTTGCAGAGATTGGGAATTCCTCAGATTTGCAAGCTCTGCCACAAGGACTTGCTAATCTTCTAAACAAGGTGGAGCCGTCGAAAAGAGAAGAGCTGGTGGCTGCTATTCGAAAGGTCTTGGGTTGACTGA\";\n\t\tString str2 =\n\t\t\t\t\"TAAAGTCTTCGATATCAGTCAACCCAAGACCTTTCGAATAGCAGCCACCAGCTCTTCTCTTTTCGACGGCTCCACCTTGTTTAGAAGATTAGCA\";\n\t\t//System.out.println(\"Lengths: \"+str1.length()+\" \"+str2.length());\n\n\t\tDNASequence target = new DNASequence(str1,\n\t\t\t\tAmbiguityDNACompoundSet.getDNACompoundSet());\n\n\t\tDNASequence query = new DNASequence(str2,\n\t\t\t\tAmbiguityDNACompoundSet.getDNACompoundSet());\n\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = \n\t\t\t\tnew NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, gap, matrix);\n\n\t\t\n\t\t//System.out.println(\"getScore: \" + aligner.getScore());\n\t\t//System.out.println(\"getMaxScore: \" + aligner.getMaxScore());\n\t\t//System.out.println(\"getMinScore: \" + aligner.getMinScore());\n\t\t//System.out.println(\"getSimilarity: \" + aligner.getSimilarity());\n\t\t\n\t\tassertTrue(\"Similarity must be positive, this must be an integer overflow bug!\", aligner.getSimilarity()>0);\n\t} \n\t\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 17, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.core.alignment.matrices.SimpleSubstitutionMatrix;\nimport org.biojava.nbio.core.alignment.matrices.SubstitutionMatrixHelper;\nimport org.biojava.nbio.alignment.template.GapPenalty;\nimport org.biojava.nbio.alignment.template.PairwiseSequenceAligner;\nimport org.biojava.nbio.core.alignment.template.SequencePair;\nimport org.biojava.nbio.core.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.DNASequence;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AmbiguityDNACompoundSet;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.DNACompoundSet;\nimport org.biojava.nbio.core.sequence.compound.NucleotideCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\npublic class NeedlemanWunschTest {\n\n\tprivate static final double PRECISION = 0.00000001;\n\t\n    private ProteinSequence query, target;\n    private GapPenalty gaps;\n    private SubstitutionMatrix<AminoAcidCompound> blosum62;\n    private NeedlemanWunsch<ProteinSequence, AminoAcidCompound> alignment, self;\n\n    @Before\n    public void setup() throws CompoundNotFoundException { \n        query = new ProteinSequence(\"ARND\");\n        target = new ProteinSequence(\"RDG\");\n        gaps = new SimpleGapPenalty(10, 1);\n        blosum62 = SubstitutionMatrixHelper.getBlosum62();\n        alignment = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, target, gaps, blosum62);\n        self = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, query, gaps, blosum62);\n    }\n\n\t@Test\n\tpublic void testComplex() throws Exception {\n\n\t\tshort match = 2, gop = -5, gep = -3; // 2, 5, and 3 are coprime; -2 is the mismatch score\n\t\tSimpleSubstitutionMatrix<NucleotideCompound> mx = new SimpleSubstitutionMatrix<NucleotideCompound>(new DNACompoundSet(), match, (short)-match);\n\n\t\tDNASequence a = new DNASequence(\"CGTAT  ATATCGCGCGCGCGATATATATATCT TCTCTAAAAAAA\".replaceAll(\" \", \"\"));\n\t\tDNASequence b = new DNASequence(\"GGTATATATATCGCGCGCACGAT TATATATCTCTCTCTAAAAAAA\".replaceAll(\" \", \"\"));\n//                                       --CGTATATATCGCGCGCGCGATATATATATCT-TCTCTAAAAAAA\n//                                       GGTATATATATCGCGCGCACGAT-TATATATCTCTCTCTAAAAAAA\n//  mismatches:                             ^              ^\n// The two alignments should have the same score. The bottom one is the one the aligner found.\n\n\t\tPairwiseSequenceAligner<DNASequence, NucleotideCompound> aligner = Alignments.getPairwiseAligner(a, b, Alignments.PairwiseSequenceAlignerType.GLOBAL, new SimpleGapPenalty(gop, gep), mx);\n\t\tSequencePair<DNASequence, NucleotideCompound> pair = aligner.getPair();\n\t\tSystem.out.println(pair); // prints the alignment above\n\n\t\tint nMatches = \"--CGTATATATCGCGCGCGCGATATATATATCT-TCTCTAAAAAAA\".length() - 2 - 4;\n\t\tdouble expectedScore = nMatches * match\n\t\t\t\t                       - 2 * match // there are two mismatches\n\t\t\t\t                       + 3 * gop + 4 * gep; // there are 3 gap opens and either 1 or 4 extensions, depending on the def\n\t\tassertEquals(expectedScore, aligner.getScore(), 0.00000001);\n\t}\n\n    @Test\n    public void testNeedlemanWunsch() {\n        NeedlemanWunsch<ProteinSequence, AminoAcidCompound> nw =\n                new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>();\n        nw.setQuery(query);\n        nw.setTarget(target);\n        nw.setGapPenalty(gaps);\n        nw.setSubstitutionMatrix(blosum62);\n        assertEquals(nw.getScore(), alignment.getScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetQuery() {\n        assertEquals(alignment.getQuery(), query);\n        assertEquals(self.getQuery(), query);\n    }\n\n    @Test\n    public void testGetTarget() {\n        assertEquals(alignment.getTarget(), target);\n        assertEquals(self.getTarget(), query);\n    }\n\n    @Test\n    public void testGetGapPenalty() {\n        assertEquals(alignment.getGapPenalty(), gaps);\n        assertEquals(self.getGapPenalty(), gaps);\n    }\n\n    @Test\n    public void testGetSubstitutionMatrix() {\n        assertEquals(alignment.getSubstitutionMatrix(), blosum62);\n        assertEquals(self.getSubstitutionMatrix(), blosum62);\n    }\n\n    @Test\n    public void testIsStoringScoreMatrix() {\n        assertFalse(alignment.isStoringScoreMatrix());\n        assertFalse(self.isStoringScoreMatrix());\n    }\n\n    @Test\n    public void testGetScoreMatrix() {\n        int[][][] scores = alignment.getScoreMatrix();\n        assertEquals(-6, scores[2][1][0]);\n        scores = self.getScoreMatrix();\n        assertEquals(4, scores[3][4][2]);\n    }\n\n    @Test\n    public void testGetScoreMatrixAsString() {\n    \t//System.out.println(alignment.getScoreMatrixAsString());\n    \t//System.out.println(self.getScoreMatrixAsString());\n        assertEquals(String.format(\n                \"Substitution%n\" +\n                \"        R   D   G%n\" +\n                \"    0  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -\\u221E  -1 -13 -12%n\" +\n                \"R  -\\u221E  -6  -3 -14%n\" +\n                \"N  -\\u221E -12  -5  -3%n\" +\n                \"D  -\\u221E -15  -6  -6%n\" +\n                \"%nDeletion%n\" +\n                \"        R   D   G%n\" +\n                \"  -10  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A -11  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"R -12 -12 -24 -23%n\" +\n                \"N -13 -13 -14 -24%n\" +\n                \"D -14 -14 -15 -14%n\" +\n\t\t                \"%nInsertion%n\" +\n                \"        R   D   G%n\" +\n                \"  -10 -11 -12 -13%n\" +\n                \"A  -\\u221E  -\\u221E -12 -13%n\" +\n                \"R  -\\u221E  -\\u221E -17 -14%n\" +\n                \"N  -\\u221E  -\\u221E -23 -16%n\" +\n                \"D  -\\u221E  -\\u221E -26 -17%n\"),\n                     alignment.getScoreMatrixAsString());\n        assertEquals(String.format(\n\t\t                                  \"Substitution%n\" +\n                \"        A   R   N   D%n\" +\n                \"    0  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -\\u221E   4 -12 -14 -15%n\" +\n                \"R  -\\u221E -12   9  -7 -10%n\" +\n                \"N  -\\u221E -14  -7  15  -1%n\" +\n                \"D  -\\u221E -15 -10  -1  21%n\" +\n                \"%nDeletion%n\" +\n                \"        A   R   N   D%n\" +\n                \"  -10  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A -11  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n\t\t\t\t                                  \"R -12  -7 -23 -25 -26%n\" +\n                \"N -13  -8  -2 -18 -21%n\" +\n                \"D -14  -9  -3   4 -12%n\" +\n                \"%nInsertion%n\" +\n                \"        A   R   N   D%n\" +\n                \"  -10 -11 -12 -13 -14%n\" +\n                \"A  -\\u221E  -\\u221E  -7  -8  -9%n\" +\n                \"R  -\\u221E  -\\u221E -23  -2  -3%n\" +\n                \"N  -\\u221E  -\\u221E -25 -18   4%n\" +\n                \"D  -\\u221E  -\\u221E -26 -21 -12%n\"),\n                self.getScoreMatrixAsString());\n    }\n\n    @Test\n    public void testGetComputationTime() {\n        assertTrue(alignment.getComputationTime() > 0);\n        assertTrue(self.getComputationTime() > 0);\n    }\n\n    @Test\n    public void testGetProfile() {\n        assertEquals(String.format(\"ARND%n-RDG%n\"), alignment.getProfile().toString());\n        assertEquals(String.format(\"ARND%nARND%n\"), self.getProfile().toString());\n    }\n\n    @Test\n    public void testGetMaxScore() {\n        assertEquals(21, alignment.getMaxScore(), PRECISION);\n        assertEquals(21, self.getMaxScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetMinScore() {\n        assertEquals(-27, alignment.getMinScore(), PRECISION);\n        assertEquals(-28, self.getMinScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetScore() {\n        assertEquals(-6, alignment.getScore(), PRECISION);\n        assertEquals(21, self.getScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetPair() {\n        assertEquals(String.format(\"ARND%n-RDG%n\"), alignment.getPair().toString());\n        assertEquals(String.format(\"ARND%nARND%n\"), self.getPair().toString());\n    }\n    \n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_all_anchored() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"ACG\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"CGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.setAnchors(new int[] { 0, 1, 2} );\n\t\tassertEquals(String.format(\"ACG%nCGT%n\"), aligner.getPair().toString());\n    }\n    \n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_starting_anchor() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"AAT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"AATT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.setAnchors(new int[] { 1, -1, -1} );\n\t\tassertEquals(String.format(\"-AAT%nAATT%n\"), aligner.getPair().toString());\n    }\n    \n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_ending_anchor() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"AAG\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"AATT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.addAnchor(2, 3);\n\t\tassertEquals(String.format(\"AA-G%nAATT%n\"), aligner.getPair().toString());\n    }\n    \n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_middle_anchor() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"ACTTT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"ACGTTT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.setAnchors(new int[] { -1, 2, -1} );\n\t\tassertEquals(String.format(\"A-CTTT%nACGTTT%n\"), aligner.getPair().toString());\n    }\n    \n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void should_align_multiple_anchors() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"ACGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"ATACGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.addAnchor(0, 0);\n\t\taligner.addAnchor(1, 1);\n\t\taligner.addAnchor(2, 2);\n\t\taligner.addAnchor(3, 5);\n\t\tassertEquals(String.format(\"ACG--T%nATACGT%n\"), aligner.getPair().toString());\n    }\n    \n    /**\n     * @author Daniel Cameron \n     */\n    @Test\n\tpublic void anchors_should_not_change_score() throws CompoundNotFoundException {\n    \tDNASequence query = new DNASequence(\"ACGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"ACGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)5, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> anchored = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)5, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\tanchored.addAnchor(0, 0);\n\t\tanchored.addAnchor(1, 1);\n\t\tanchored.addAnchor(2, 2);\n\t\tanchored.addAnchor(3, 3);\n\t\tassertEquals(aligner.getScore(), anchored.getScore(), PRECISION);\n    }\n    \n    /**\n     * @author Daniel Cameron \n     */\n\t@Test\n\tpublic void testAnchoredDNAAlignment() throws CompoundNotFoundException {\n\t\tDNASequence query = new DNASequence(  \"ACGTACCGGTTTT\", DNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"TACGTCCGGTTACGTACGTT\", DNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)5, (short)2), SubstitutionMatrixHelper.getNuc4_4());\n\t\tassertEquals(String.format(\"-ACGTACCGGTT-------TT%nTACGT-CCGGTTACGTACGTT%n\"), aligner.getPair().toString());\n\t}\n\t\n\t/**\n\t * See issue #202 in github \n\t * @author Jose M Duarte\n\t */\n\t@Test\n\tpublic void testIntOverflowBug() throws CompoundNotFoundException {\n\n\t\tSubstitutionMatrix<NucleotideCompound> matrix = SubstitutionMatrixHelper.getNuc4_4();\n\t\tSimpleGapPenalty gap = new SimpleGapPenalty();\n\n\t\tString str1 =\n\t\t\t\t\"AGATATATCTGAAGCTTAAAGGGCAGTGACAATGGCTGGCTCGGTTAACGGGAATCATAGTGCTGTAGGACCTGGTATAAATTATGAGACGGTGTCTCAAGTGGATGAGTTCTGTAAAGCACTTAGAGGGAAAAGGCCGATCCATAGTATTTTGATAGCTAACAATGGAATGGCGGCTGTGAAGTTTATACGTAGTGTCAGAACATGGGCTTATGAAACATTTGGTACGGAAAAAGCCATATTGTTGGTGGGGATGGCAACCCCTGAAGACATGCGGATCAATGCGGAGCATATCAGAATCGCTGATCAGTTTGTTGAGGTTCCCGGAGGAACCAACAATAACAATTATGCTAACGTTCAGCTGATTGTGGAGATGGCTGAAGTAACACGCGTGGATGCAGTTTGGCCTGGTTGGGGTCATGCATCTGAAAACCCCGAATTACCTGATGCCCTAGATGCAAAAGGAATCATATTTCTTGGTCCTCCAGCATCTTCAATGGCAGCACTGGGAGATAAGATTGGTTCTTCGTTGATTGCACAAGCTGCTGATGTACCCACTCTGCCATGGAGTGGTTCCCATGTTAAAATACCTCCTAATAGCAACTTGGTAACCATCCCAGAGGAGATCTACCGGCAAGCATGTGTCTACACAACTGAAGAAGCGATTGCTAGCTGTCAAGTTGTCGGTTACCCAGCAATGATCAAAGCATCGTGGGGTGGTGGTGGTAAAGGAATCAGGAAGGTTCATAATGATGATGAGGTTAGGGCTCTATTCAAGCAAGTTCAGGGTGAGGTCCCAGGCTCACCAATATTCATAATGAAGGTTGCGTCACAGAGTCGGCATCTAGAGGTCCAGCTGCTCTGTGACAAGCATGGAAATGTTTCAGCTCTGCATAGCCGTGATTGTAGCGTCCAGAGAAGACATCAAAAGATCATAGAGGAGGGTCCAATTACTGTGGCTCCGCCAGAAACTGTCAAGAAACTTGAACAAGCAGCTAGAAGGTTGGCTAAGAGTGTTAACTATGTTGGAGCTGCTACTGTTGAGTATCTCTACAGTATGGACACTGGGGAGTACTACTTCTTAGAGCTTAACCCTCGCTTACAGGTTGAGCATCCTGTCACTGAGTGGATTGCCGAGATAAATCTTCCTGCTGCCCAAGTTGCTGTGGGGATGGGAATTCCTCTCTGGCAAATCCCTGAGATAAGACGGTTCTATGGAATAGAACATGGTGGAGGTTATGATTCTTGGCGAAAAACATCTGTTGTAGCCTTCCCTTTTGATTTTGATAAAGCTCAATCTATAAGGCCAAAAGGTCATTGTGTGGCTGTACGTGTGACAAGTGAGGATCCTGATGACGGGTTCAAACCAACCAGCGGTAGAGTTCAGGAGTTGAGTTTTAAGAGCAAGCCAAATGTGTGGGCGTACTTCTCTGTCAAGTCTGGTGGAGGCATCCACGAGTTCTCGGATTCCCAGTTTGGACATGTTTTTGCATTTGGGGAATCCAGAGCCCTGGCGATAGCGAATATGGTTCTTGGGCTAAAAGAAATTCAGATCCGTGGAGAAATTAGGACTAACGTTGACTACACGATCGACCTTTTACATGCTTCTGATTACCGTGATAACAAAATTCACACTGGTTGGTTGGATAGTAGGATTGCTATGCGGGTCAGAGCTGAGAGGCCTCCATGGTATCTCTCTGTTGTCGGCGGAGCTCTCTATAAAGCATCAGCGACCAGTGCTGCTGTGGTTTCAGATTACGTTGGTTATCTGGAGAAGGGGCAAATCCCTCCAAAGCATATATCTCTTGTACATTCTCAAGTGTCTCTGAATATTGAAGGAAGTAAATATACGATTGATGTAGTCCGGGGTGGATCAGGAACCTACAGGCTAAGAATGAACAAGTCAGAAGTGGTAGCAGAAATACACACTCTACGTGATGGAGGTCTGTTGATGCAGTTGGATGGCAAAAGCCATGTGATATATGCAGAGGAAGAAGCTGCAGGAACTCGTCTTCTCATTGATGGAAGAACTTGTTTGCTACAGAATGACCACGATCCATCAAAGTTAATGGCTGAGACACCGTGCAAGTTGATGAGGTATTTGATTTCCGACAACAGCAATATTGACGCTGATACGCCTTATGCCGAAGTTGAGGTCATGAAGATGTGCATGCCACTTCTTTCACCTGCTTCAGGAGTTATCCATTTTAAAATGTCTGAAGGACAAGCCATGCAGGCTGGTGAACTTATAGCCAATCTTGATCTTGATGATCCTTCTGCTGTAAGAAAGGCCGAACCCTTCCATGGAAGTTTCCCAAGATTAGGGCTTCCAACTGCAATATCCGGTAGAGTTCATCAGAGATGTGCCGCAACATTAAATGCTGCACGCATGATTCTTGCTGGCTATGAGCATAAAGTAGATGAGGTTGTTCAAGACTTACTTAATTGCCTTGATAGCCCTGAACTCCCATTTCTTCAGTGGCAAGAGTGCTTTGCAGTTCTGGCGACACGACTACCTAAAAATCTCAGGAACATGCTAGAATCAAAGTATAGGGAATTTGAGAGTATTTCCAGAAACTCTTTGACCACCGATTTCCCTGCCAAACTTTTAAAAGGCATTCTTGAGGCACATTTATCTTCTTGTGATGAGAAAGAGAGAGGTGCCCTTGAAAGGCTCATTGAACCATTGATGAGCCTTGCAAAATCTTATGAAGGTGGTAGAGAAAGTCATGCCCGTGTTATTGTTCATTCTCTCTTTGAAGAATATCTATCAGTAGAAGAATTATTCAATGATAACATGCTGGCTGATGTTATAGAACGCATGCGTCAGCTATACAAGAAAGATCTGTTGAAAATTGTGGATATAGTGCTCTCACACCAGGGCATAAAAAACAAAAACAAACTCGTTCTCCGGCTCATGGAGCAGCTTGTTTACCCTAATCCTGCTGCTTACAGAGATAAACTTATTCGATTCTCAACACTTAACCATACTAACTACTCTGAGTTGGCGCTCAAGGCGAGTCAATTACTTGAACAGACCAAACTAAGTGAGCTTCGTTCAAACATTGCTAGAAGCCTTTCAGAGTTAGAAATGTTTACAGAGGACGGAGAAAATATGGATACTCCCAAGAGGAAAAGTGCCATTAATGAAAGAATAGAAGATCTTGTAAGCGCATCTTTAGCTGTTGAAGACGCTCTCGTGGGACTATTTGACCATAGCGATCACACACTTCAAAGACGGGTTGTTGAGACTTATATTCGCAGATTATACCAGCCCTACGTCGTTAAAGATAGCGTGAGGATGCAGTGGCACCGTTCTGGTCTTCTTGCTTCCTGGGAGTTCCTAGAGGAGCATATGGAAAGAAAAAACATTGGCTTAGACGATCCCGACACATCTGAAAAAGGATTGGTTGAGAAGCGTAGTAAGAGAAAATGGGGGGCTATGGTTATAATCAAATCTTTGCAGTTTCTTCCAAGTATAATAAGTGCAGCATTGAGAGAAACAAAGCACAACGACTATGAAACTGCCGGAGCTCCTTTATCTGGCAATATGATGCACATTGCTATTGTGGGCATCAACAACCAGATGAGTCTGCTTCAGGACAGTGGGGATGAAGACCAAGCTCAGGAAAGAGTAAACAAGTTGGCCAAAATTCTTAAAGAGGAAGAAGTGAGTTCAAGCCTCTGTTCTGCCGGTGTTGGTGTAATCAGCTGTATAATTCAGCGAGATGAAGGACGAACACCCATGAGACATTCTTTCCATTGGTCGTTGGAGAAACAGTATTATGTAGAAGAGCCGTTGCTGCGTCATCTTGAACCTCCTCTGTCCATTTACCTTGAGTTGGATAAGCTGAAAGGATACTCAAATATACAATATACGCCTTCTCGAGATCGTCAATGGCATCTGTATACTGTTACAGACAAGCCAGTGCCAATCAAGAGGATGTTCCTGAGATCTCTTGTTCGACAGGCTACAATGAACGATGGATTTATATTGCAGCAAGGGCAGGATAAGCAGCTTAGCCAAACACTGATCTCCATGGCGTTTACGTCGAAATGTGTTCTGAGGTCTTTGATGGATGCCATGGAGGAACTGGAACTGAATGCCCATAATGCTGCAATGAAACCAGATCACGCACATATGTTTCTTTGCATATTGCGTGAGCAGCAGATAGATGATCTTGTGCCTTTCCCCAGGAGAGTTGAAGTGAATGCGGAGGATGAAGAAACTACAGTTGAAATGATCTTAGAAGAAGCAGCACGAGAGATACATAGATCTGTTGGAGTGAGAATGCATAGGTTGGGCGTGTGCGAGTGGGAAGTGCGGCTGTGGTTGGTGTCCTCTGGACTGGCATGTGGTGCTTGGAGGGTTGTGGTTGCAAACGTGACAGGCCGTACATGCACTGTCCACATATACCGAGAAGTTGAAACTCCTGGAAGAAACAGTTTAATCTACCACTCAATAACCAAGAAGGGACCTTTGCATGAAACACCAATCAGTGATCAATATAAGCCCCTGGGATATCTCGACAGGCAACGTTTAGCAGCAAGGAGGAGTAACACTACTTATTGCTATGACTTCCCGTTGGCATTTGGGACAGCCTTGGAACTGTTGTGGGCATCACAACACCCAGGAGTTAAGAAACCATATAAGGATACTCTGATCAATGTTAAAGAGCTTGTATTCTCAAAACCAGAAGGTTCTTCGGGTACATCTCTAGATCTGGTTGAAAGACCACCCGGTCTCAACGACTTTGGAATGGTTGCCTGGTGCCTAGATATGTCGACCCCAGAGTTTCCTATGGGGCGGAAACTTCTCGTGATTGCGAATGATGTCACCTTCAAAGCTGGTTCTTTTGGTCCTAGAGAGGACGCGTTTTTCCTTGCTGTTACTGAACTCGCTTGTGCCAAGAAGCTTCCCTTGATTTACTTGGCAGCAAATTCTGGTGCCCGACTTGGGGTTGCTGAAGAAGTCAAAGCCTGCTTCAAAGTTGGATGGTCGGATGAAATTTCCCCTGAGAATGGTTTTCAGTATATATACCTAAGCCCTGAAGACCACGAAAGGATTGGATCATCTGTCATTGCCCATGAAGTAAAGCTCTCTAGTGGGGAAACTAGGTGGGTGATTGATACGATCGTTGGCAAAGAAGATGGTATTGGTGTAGAGAACTTAACAGGAAGTGGGGCCATAGCGGGTGCTTACTCAAAGGCATACAATGAAACTTTTACTTTAACCTTTGTTAGTGGAAGAACGGTTGGAATTGGTGCTTATCTTGCCCGCCTAGGTATGCGGTGCATACAGAGACTTGATCAGCCGATCATCTTGACTGGCTTCTCTACACTCAACAAGTTACTTGGGCGTGAGGTCTATAGCTCTCACATGCAACTGGGTGGCCCGAAAATCATGGGCACAAATGGTGTTGTTCATCTTACAGTCTCAGATGATCTTGAAGGCGTATCAGCAATTCTCAACTGGCTCAGCTACATTCCTGCTTACGTGGGTGGTCCTCTTCCTGTTCTTGCCCCTTTAGATCCACCGGAGAGAATTGTGGAGTATGTCCCAGAGAACTCTTGCGACCCACGAGCGGCTATAGCTGGGGTCAAAGACAATACCGGTAAATGGCTTGGAGGTATCTTTGATAAAAATAGTTTCATTGAGACTCTTGAAGGCTGGGCAAGGACGGTAGTGACTGGTAGAGCCAAGCTCGGGGGAATACCCGTTGGAGTTGTTGCAGTTGAGACACAGACTGTCATGCAGATCATCCCAGCCGATCCTGGACAGCTTGACTCTCATGAAAGAGTGGTTCCGCAAGCAGGGCAAGTCTGGTTTCCTGATTCAGCGGCCAAGACTGCTCAAGCGCTTATGGATTTCAACCGGGAAGAGCTTCCATTGTTTATCCTAGCGAACTGGAGAGGGTTTTCAGGTGGGCAGAGAGATCTTTTCGAAGGAATACTTCAGGCAGGTTCAACTATAGTAGAAAATCTGAGAACCTATCGTCAGCCAGTGTTTGTGTACATCCCAATGATGGGAGAGCTGCGCGGTGGAGCGTGGGTTGTTGTTGACAGCCAGATAAATTCGGATTATGTTGAAATGTATGCTGATGAAACAGCTCGTGGAAATGTGCTTGAGCCAGAAGGGACAATAGAGATAAAATTTAGAACAAAAGAGCTATTAGAGTGCATGGGAAGGTTGGACCAGAAGCTAATCAGTCTGAAAGCAAAACTGCAAGATGCCAAGCAAAGCGAGGCCTATGCAAACATCGAGCTTCTCCAGCAACAGATTAAAGCCCGAGAGAAACAGCTTTTACCAGTTTATATCCAAATCGCCACCAAATTTGCAGAACTTCATGACACTTCCATGAGAATGGCTGCAAAGGGAGTGATCAAAAGTGTTGTGGAATGGAGCGGCTCGCGGTCCTTCTTCTACAAAAAGCTCAATAGGAGAATCGCTGAGAGCTCTCTTGTGAAAAACGTAAGAGAAGCATCTGGAGACAACTTAGCATATAAATCTTCAATGCGTCTGATTCAGGATTGGTTCTGCAACTCTGATATTGCAAAGGGGAAAGAAGAAGCTTGGACAGACGACCAAGTGTTCTTTACATGGAAGGACAATGTTAGTAACTACGAGTTGAAGCTGAGCGAGTTGAGAGCGCAGAAACTACTGAACCAACTTGCAGAGATTGGGAATTCCTCAGATTTGCAAGCTCTGCCACAAGGACTTGCTAATCTTCTAAACAAGGTGGAGCCGTCGAAAAGAGAAGAGCTGGTGGCTGCTATTCGAAAGGTCTTGGGTTGACTGA\";\n\t\tString str2 =\n\t\t\t\t\"TAAAGTCTTCGATATCAGTCAACCCAAGACCTTTCGAATAGCAGCCACCAGCTCTTCTCTTTTCGACGGCTCCACCTTGTTTAGAAGATTAGCA\";\n\t\t//System.out.println(\"Lengths: \"+str1.length()+\" \"+str2.length());\n\n\t\tDNASequence target = new DNASequence(str1,\n\t\t\t\tAmbiguityDNACompoundSet.getDNACompoundSet());\n\n\t\tDNASequence query = new DNASequence(str2,\n\t\t\t\tAmbiguityDNACompoundSet.getDNACompoundSet());\n\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = \n\t\t\t\tnew NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, gap, matrix);\n\n\t\t\n\t\t//System.out.println(\"getScore: \" + aligner.getScore());\n\t\t//System.out.println(\"getMaxScore: \" + aligner.getMaxScore());\n\t\t//System.out.println(\"getMinScore: \" + aligner.getMinScore());\n\t\t//System.out.println(\"getSimilarity: \" + aligner.getSimilarity());\n\t\t\n\t\tassertTrue(\"Similarity must be positive, this must be an integer overflow bug!\", aligner.getSimilarity()>0);\n\t} \n\t\n}\n","commitMessage":"Massive refactoring: moved alignment data structures from biojava-alignment to biojava-core.\nMantaining main biological data structures in core will help to avoid problems of unwanted dependency. Unfortunately the substitution matrices related classes are tight coupled with SimpleSequencePair class and were moved too from alignment.\n\nUpdated pom file to remove dependency of core from alignment module temporary added by first implementation of SearchIO.\n","test_commitMessage":"Massive refactoring: moved alignment data structures from biojava-alignment to biojava-core.\nMantaining main biological data structures in core will help to avoid problems of unwanted dependency. Unfortunately the substitution matrices related classes are tight coupled with SimpleSequencePair class and were moved too from alignment.\n\nUpdated pom file to remove dependency of core from alignment module temporary added by first implementation of SearchIO.\n","allZero":false}