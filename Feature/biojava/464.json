{"repository":"biojava","prod_path":"biojava-structure/src/main/java/org/biojava/nbio/structure/Site.java","test_path":"biojava-structure/src/test/java/org/biojava/nbio/structure/SiteTest.java","prod_time":"2016-01-15 05:04:53","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":2,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":2,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"1094abc73572a80298c17956d94a57ec15e064a6","test_commitID":"","isfound":"not found test change","originPro":"/*\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojava.nbio.structure;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Locale;\n\n/**\n * Holds the data of sites presented in PDB files. <br/>\n * Example from the PDB flatfile:\n * <pre>\n  SITE     1 AC1  3 GLY A  65  CYS A  67  HOH A 180\n  SITE     1 AC2 10 HIS C  37  ALA C  39  THR C 152  LEU C 153\n  SITE     2 AC2 10 HIS D  37  ALA D  39  THR D 152  LEU D 153\n  SITE     3 AC2 10 SER D 154  GOL D 172\n  </pre>\n * @author Amr AL-Hossary\n * @author Jules Jacobsen\n */\npublic class Site implements PDBRecord, Serializable, Comparable<Site> {\n\n    private static final long serialVersionUID = -4577047072916341237L;\n    private static final String lineEnd = System.getProperty(\"line.separator\");\n\n    private String siteID = \"\";\n    private List<Group> groups = new ArrayList<Group>();\n    //variables for REMARK 800\n    private String evCode = \"\";\n    private String description = \"\";\n\n    public Site() {\n    }\n\n    public Site(String siteID, List<Group> groups) {\n        this.siteID = siteID;\n        this.groups = groups;\n    }\n\n\n    @Override\n    public String toString() {\n        StringBuilder stringBuilder = new StringBuilder(\"SITE \");\n        stringBuilder.append(siteID).append(\" \").append(groups.size()).append(\" \");\n        for (Group group : groups) {\n            // 012345678910   \n            //'ARG H 221A '\n            String groupString = String.format(\"%s %s\",\n                        group.getPDBName(),\n                        group.getResidueNumber().toPDB());\n            stringBuilder.append(groupString);\n        }\n        stringBuilder.append(lineEnd);\n        return stringBuilder.toString();\n    }\n\n   \n    @Override\n\tpublic String toPDB() {\n        StringBuffer buffer = new StringBuffer();\n        toPDB(buffer);\n        return buffer.toString();\n    }\n\n\n    @Override\n\tpublic void toPDB(StringBuffer buf) {\n        if (groups == null || groups.size() < 1) {\n            return;\n        }\n\n        //SITE     1 CAT  3 HIS H  57  ASP H 102  SER H 195\n        //SITE     1 AC1  6 ARG H 221A LYS H 224  HOH H 403  HOH H 460\n        //SITE     2 AC1  6 HOH H 464  HOH H 497\n        //         ^  ^   ^\n        //     cont# id  group size\n        //max 4 groups per line\n\n        //counters for tracking where we are\n        int seqNum = 0;\n        int groupsWritten = 0;\n        int groupNum = 0;\n        //new StringBuilder for adding the groups to\n        StringBuilder stringBuilder = new StringBuilder();\n        \n        while (groupsWritten < groups.size()) {\n            StringBuilder groupsString = new StringBuilder();\n            for (int i = 0; i < 4 && groupsWritten < groups.size(); i++) {\n                Group group = groups.get(groupNum);\n                String groupString = String.format(Locale.UK, \"%s %s\",\n                        group.getPDBName(), group.getResidueNumber().toPDB());\n                groupsWritten++;\n                groupNum++;\n                //remove the trailing whitespace of the last element of a line\n                if (i == 3 || groupsWritten == groups.size()) {\n                    groupString = groupString.trim();\n                }\n                groupsString.append(groupString);\n            }\n            stringBuilder.append(String.format(Locale.UK, \"SITE   %3d %3s %2d %-62s\", seqNum + 1, siteID, groups.size(), groupsString.toString()));\n            //iterate the line counter, add the end of line character\n            seqNum++;\n            stringBuilder.append(lineEnd);\n        }\n\n        buf.append(stringBuilder);\n    }\n\n    /**\n     * Appends the REMARK 800 section pertaining to the site onto the end of the\n     * StringBuffer provided.\n     *\n     * For example in pdb 1a4w:\n     * REMARK 800 SITE_IDENTIFIER: CAT\n     * REMARK 800 EVIDENCE_CODE: UNKNOWN\n     * REMARK 800 SITE_DESCRIPTION: ACTIVE SITE\n     *\n     * @param stringBuffer\n     */\n    public void remark800toPDB(StringBuffer stringBuffer) {\n        //REMARK 800 SITE_IDENTIFIER: CAT\n        //REMARK 800 EVIDENCE_CODE: UNKNOWN\n        //REMARK 800 SITE_DESCRIPTION: ACTIVE SITE\n\n        stringBuffer.append(String.format(Locale.UK, \"REMARK 800 SITE_IDENTIFIER: %-52s%s\", siteID, lineEnd));\n        stringBuffer.append(String.format(Locale.UK, \"REMARK 800 EVIDENCE_CODE: %-54s%s\", evCode, lineEnd));\n        stringBuffer.append(String.format(Locale.UK, \"REMARK 800 SITE_DESCRIPTION: %-51s%s\", description, lineEnd));\n\n    }\n\n    /**\n     * Provides REMARK 800 section pertaining to the site as a string.\n     *\n     * For example in pdb 1a4w:\n     * REMARK 800 SITE_IDENTIFIER: CAT\n     * REMARK 800 EVIDENCE_CODE: UNKNOWN\n     * REMARK 800 SITE_DESCRIPTION: ACTIVE SITE\n     *\n     * \n     */\n    public String remark800toPDB() {\n        StringBuffer stringBuffer = new StringBuffer();\n        remark800toPDB(stringBuffer);\n        return stringBuffer.toString();\n    }\n\n    /**\n     * @param siteID the siteID to set\n     * e.g. CAT, AC1, AC2...\n     */\n    public void setSiteID(String siteID) {\n        this.siteID = siteID;\n    }\n\n    /**\n     * @return the siteID\n     * e.g. CAT, AC1, AC2...\n     */\n    public String getSiteID() {\n        return siteID;\n    }\n\n    /**\n     * @return the groups\n     */\n    public List<Group> getGroups() {\n        return groups;\n    }\n\n    /**\n     * @param residues the groups to set\n     */\n    public void setGroups(List<Group> residues) {\n        this.groups = residues;\n    }\n\n\n    /**\n     * gets the REMARK 800 description of the site\n     * @return description\n     */\n    public String getDescription() {\n        return description;\n    }\n\n    /**\n     * sets the REMARK 800 description of the site\n     */\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    /**\n     * gets the REMARK 800 EVIDENCE CODE for the site.\n     * @return evidence code\n     */\n    public String getEvCode() {\n        return evCode;\n    }\n\n    /**\n     * sets the REMARK 800 EVIDENCE CODE for the site.\n     */\n    public void setEvCode(String evCode) {\n        this.evCode = evCode;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        final Site other = (Site) obj;\n        if ((this.siteID == null) ? (other.siteID != null) : !this.siteID.equals(other.siteID)) {\n            return false;\n        }\n        if (this.groups != other.groups && (this.groups == null || !this.groups.equals(other.groups))) {\n            return false;\n        }\n        if ((this.evCode == null) ? (other.evCode != null) : !this.evCode.equals(other.evCode)) {\n            return false;\n        }\n        if ((this.description == null) ? (other.description != null) : !this.description.equals(other.description)) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int hash = 5;\n        hash = 37 * hash + (this.siteID != null ? this.siteID.hashCode() : 0);\n        hash = 37 * hash + (this.groups != null ? this.groups.hashCode() : 0);\n        hash = 37 * hash + (this.evCode != null ? this.evCode.hashCode() : 0);\n        hash = 37 * hash + (this.description != null ? this.description.hashCode() : 0);\n        return hash;\n    }\n    \n    \n\n\t@Override\n\tpublic int compareTo(Site other) {\n\t\treturn this.toString().compareTo(other.toString());\n\t}\n}\n","changedPro":"/*\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojava.nbio.structure;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Locale;\n\n/**\n * Holds the data of sites presented in PDB files. <br/>\n * Example from the PDB flatfile:\n * <pre>\n  SITE     1 AC1  3 GLY A  65  CYS A  67  HOH A 180\n  SITE     1 AC2 10 HIS C  37  ALA C  39  THR C 152  LEU C 153\n  SITE     2 AC2 10 HIS D  37  ALA D  39  THR D 152  LEU D 153\n  SITE     3 AC2 10 SER D 154  GOL D 172\n  </pre>\n * @author Amr AL-Hossary\n * @author Jules Jacobsen\n */\npublic class Site implements PDBRecord, Serializable, Comparable<Site> {\n\n    private static final long serialVersionUID = -4577047072916341237L;\n    private static final String lineEnd = System.getProperty(\"line.separator\");\n\n    private String siteID = \"\";\n    private List<Group> groups = new ArrayList<Group>();\n    //variables for REMARK 800\n    private String evCode = \"\";\n    private String description = \"\";\n\n    public Site() {\n    }\n\n    public Site(String siteID, List<Group> groups) {\n        this.siteID = siteID;\n        this.groups = groups;\n    }\n\n\n    @Override\n    public String toString() {\n        StringBuilder stringBuilder = new StringBuilder(\"SITE \");\n        stringBuilder.append(siteID).append(\" \").append(groups.size()).append(\" \");\n        for (Group group : groups) {\n            // 012345678910   \n            //'ARG H 221A '\n            String groupString = String.format(\"%s %s\",\n                        group.getPDBName(),\n                        group.getResidueNumber().toPDB());\n            stringBuilder.append(groupString);\n        }\n        stringBuilder.append(lineEnd);\n        return stringBuilder.toString();\n    }\n\n   \n    @Override\n\tpublic String toPDB() {\n        StringBuffer buffer = new StringBuffer();\n        toPDB(buffer);\n        return buffer.toString();\n    }\n\n\n    @Override\n\tpublic void toPDB(StringBuffer buf) {\n        if (groups == null || groups.size() < 1) {\n            return;\n        }\n\n        //SITE     1 CAT  3 HIS H  57  ASP H 102  SER H 195\n        //SITE     1 AC1  6 ARG H 221A LYS H 224  HOH H 403  HOH H 460\n        //SITE     2 AC1  6 HOH H 464  HOH H 497\n        //         ^  ^   ^\n        //     cont# id  group size\n        //max 4 groups per line\n\n        //counters for tracking where we are\n        int seqNum = 0;\n        int groupsWritten = 0;\n        int groupNum = 0;\n        //new StringBuilder for adding the groups to\n        StringBuilder stringBuilder = new StringBuilder();\n        \n        while (groupsWritten < groups.size()) {\n            StringBuilder groupsString = new StringBuilder();\n            for (int i = 0; i < 4 && groupsWritten < groups.size(); i++) {\n                Group group = groups.get(groupNum);\n                // Make sure the pdbName is formatted as 3 width string.\n                String groupString = String.format(Locale.UK, \"%3s %s\",\n                        group.getPDBName(), group.getResidueNumber().toPDB());\n                groupsWritten++;\n                groupNum++;\n                if (i == 3 || groupsWritten == groups.size()) {\n                    // groupString = groupString.trim();\n                \tgroupString.replaceFirst(\"\\\\s+$\", \"\"); // remove only trailing whitespace.\n                }\n                groupsString.append(groupString);\n            }\n            stringBuilder.append(String.format(Locale.UK, \"SITE   %3d %3s %2d %-62s\", seqNum + 1, siteID, groups.size(), groupsString.toString()));\n            //iterate the line counter, add the end of line character\n            seqNum++;\n            stringBuilder.append(lineEnd);\n        }\n\n        buf.append(stringBuilder);\n    }\n\n    /**\n     * Appends the REMARK 800 section pertaining to the site onto the end of the\n     * StringBuffer provided.\n     *\n     * For example in pdb 1a4w:\n     * REMARK 800 SITE_IDENTIFIER: CAT\n     * REMARK 800 EVIDENCE_CODE: UNKNOWN\n     * REMARK 800 SITE_DESCRIPTION: ACTIVE SITE\n     *\n     * @param stringBuffer\n     */\n    public void remark800toPDB(StringBuffer stringBuffer) {\n        //REMARK 800 SITE_IDENTIFIER: CAT\n        //REMARK 800 EVIDENCE_CODE: UNKNOWN\n        //REMARK 800 SITE_DESCRIPTION: ACTIVE SITE\n\n        stringBuffer.append(String.format(Locale.UK, \"REMARK 800 SITE_IDENTIFIER: %-52s%s\", siteID, lineEnd));\n        stringBuffer.append(String.format(Locale.UK, \"REMARK 800 EVIDENCE_CODE: %-54s%s\", evCode, lineEnd));\n        stringBuffer.append(String.format(Locale.UK, \"REMARK 800 SITE_DESCRIPTION: %-51s%s\", description, lineEnd));\n\n    }\n\n    /**\n     * Provides REMARK 800 section pertaining to the site as a string.\n     *\n     * For example in pdb 1a4w:\n     * REMARK 800 SITE_IDENTIFIER: CAT\n     * REMARK 800 EVIDENCE_CODE: UNKNOWN\n     * REMARK 800 SITE_DESCRIPTION: ACTIVE SITE\n     *\n     * \n     */\n    public String remark800toPDB() {\n        StringBuffer stringBuffer = new StringBuffer();\n        remark800toPDB(stringBuffer);\n        return stringBuffer.toString();\n    }\n\n    /**\n     * @param siteID the siteID to set\n     * e.g. CAT, AC1, AC2...\n     */\n    public void setSiteID(String siteID) {\n        this.siteID = siteID;\n    }\n\n    /**\n     * @return the siteID\n     * e.g. CAT, AC1, AC2...\n     */\n    public String getSiteID() {\n        return siteID;\n    }\n\n    /**\n     * @return the groups\n     */\n    public List<Group> getGroups() {\n        return groups;\n    }\n\n    /**\n     * @param residues the groups to set\n     */\n    public void setGroups(List<Group> residues) {\n        this.groups = residues;\n    }\n\n\n    /**\n     * gets the REMARK 800 description of the site\n     * @return description\n     */\n    public String getDescription() {\n        return description;\n    }\n\n    /**\n     * sets the REMARK 800 description of the site\n     */\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    /**\n     * gets the REMARK 800 EVIDENCE CODE for the site.\n     * @return evidence code\n     */\n    public String getEvCode() {\n        return evCode;\n    }\n\n    /**\n     * sets the REMARK 800 EVIDENCE CODE for the site.\n     */\n    public void setEvCode(String evCode) {\n        this.evCode = evCode;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        final Site other = (Site) obj;\n        if ((this.siteID == null) ? (other.siteID != null) : !this.siteID.equals(other.siteID)) {\n            return false;\n        }\n        if (this.groups != other.groups && (this.groups == null || !this.groups.equals(other.groups))) {\n            return false;\n        }\n        if ((this.evCode == null) ? (other.evCode != null) : !this.evCode.equals(other.evCode)) {\n            return false;\n        }\n        if ((this.description == null) ? (other.description != null) : !this.description.equals(other.description)) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int hash = 5;\n        hash = 37 * hash + (this.siteID != null ? this.siteID.hashCode() : 0);\n        hash = 37 * hash + (this.groups != null ? this.groups.hashCode() : 0);\n        hash = 37 * hash + (this.evCode != null ? this.evCode.hashCode() : 0);\n        hash = 37 * hash + (this.description != null ? this.description.hashCode() : 0);\n        return hash;\n    }\n    \n    \n\n\t@Override\n\tpublic int compareTo(Site other) {\n\t\treturn this.toString().compareTo(other.toString());\n\t}\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\npackage org.biojava.nbio.structure;\n\nimport junit.framework.TestCase;\nimport org.junit.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n/**\n * Tests functionality of Site class.\n * @author Jules Jacobsen <jacobsen@ebi.ac.uk>\n */\npublic class SiteTest extends TestCase {\n\n    public static final String newline = System.getProperty(\"line.separator\");\n\n    private static Site catSite;\n    private static Site bindingSite;\n\n    private static List<Group> bindingSiteGroups;\n\n    public SiteTest() {\n\n    \t// sites CAT and AC1 from PDB entry 1a4w\n    \t//SITE     1 CAT  3 HIS H  57  ASP H 102  SER H 195\n    \t//SITE     1 AC1  6 ARG H 221A LYS H 224  HOH H 403  HOH H 460\n    \t//SITE     2 AC1  6 HOH H 464  HOH H 497\n    \t//groups for site CAT\n    \tChain chain = new ChainImpl();\n    \tchain.setChainID(\"H\");\n    \tGroup his57 = new AminoAcidImpl();\n    \t//            his57.setPDBCode(\"57\");\n    \this57.setResidueNumber(\"H\", 57, ' ');\n    \this57.setPDBName(\"HIS\");\n    \this57.setChain(chain);\n    \tGroup asp102 = new AminoAcidImpl();\n    \tasp102.setResidueNumber(\"H\", 102, ' ');\n    \tasp102.setPDBName(\"ASP\");\n    \tasp102.setChain(chain);\n    \tGroup ser195 = new AminoAcidImpl();\n    \tser195.setResidueNumber(\"H\", 195, ' ');\n    \tser195.setPDBName(\"SER\");\n    \tser195.setChain(chain);\n    \tList<Group> catSiteGroups = new ArrayList<Group>();\n    \tcatSiteGroups.add(his57);\n    \tcatSiteGroups.add(asp102);\n    \tcatSiteGroups.add(ser195);\n    \t//make the catalytic site CAT\n    \tcatSite = new Site();\n    \tcatSite.setSiteID(\"CAT\");\n    \tcatSite.setGroups(catSiteGroups);\n    \tcatSite.setEvCode(\"UNKNOWN\");\n    \tcatSite.setDescription(\"ACTIVE SITE\");\n    \t//groups for site AC1\n    \tGroup arg221a = new AminoAcidImpl();\n    \targ221a.setResidueNumber(\"H\", 221, 'A');\n    \targ221a.setPDBName(\"ARG\");\n    \targ221a.setChain(chain);\n    \tGroup lys224 = new AminoAcidImpl();\n    \tlys224.setResidueNumber(\"H\", 224, ' ');\n    \tlys224.setPDBName(\"LYS\");\n    \tlys224.setChain(chain);\n    \tGroup hoh403 = new HetatomImpl();\n    \thoh403.setResidueNumber(\"H\", 403, ' ');\n    \thoh403.setPDBName(\"HOH\");\n    \thoh403.setChain(chain);\n    \tGroup hoh460 = new HetatomImpl();\n    \thoh460.setResidueNumber(\"H\", 460, ' ');\n    \thoh460.setPDBName(\"HOH\");\n    \thoh460.setChain(chain);\n    \tGroup hoh464 = new HetatomImpl();\n    \thoh464.setResidueNumber(\"H\", 464, ' ');\n    \thoh464.setPDBName(\"HOH\");\n    \thoh464.setChain(chain);\n    \tGroup hoh497 = new HetatomImpl();\n    \thoh497.setResidueNumber(\"H\", 497, ' ');\n    \thoh497.setPDBName(\"HOH\");\n    \thoh497.setChain(chain);\n\n    \tbindingSiteGroups = new ArrayList<Group>();\n\n    \tbindingSiteGroups.add(arg221a);\n    \tbindingSiteGroups.add(lys224);\n    \tbindingSiteGroups.add(hoh403);\n    \tbindingSiteGroups.add(hoh460);\n    \tbindingSiteGroups.add(hoh464);\n    \tbindingSiteGroups.add(hoh497);\n    \t//make the binding site AC1\n    \tbindingSite = new Site();\n    \tbindingSite.setSiteID(\"AC1\");\n    \tbindingSite.setGroups(bindingSiteGroups);\n    \tbindingSite.setEvCode(\"SOFTWARE\");\n    \tbindingSite.setDescription(\"BINDING SITE FOR RESIDUE NA H 541\");\n\n\n    }\n\n    @BeforeClass\n    public static void setUpClass() throws Exception {\n    }\n\n    @AfterClass\n    public static void tearDownClass() throws Exception {\n    }\n\n    @Override\n\t@Before\n    public void setUp() {\n    }\n\n    @Override\n\t@After\n    public void tearDown() {\n    }\n\n    /**\n     * Test of toPDB method, of class Site.\n     */\n    @Test\n    public void testToPDB_0args() {\n//        System.out.println(\"toPDB_0args\");\n        String expResult =  \"SITE     1 AC1  6 ARG H 221A LYS H 224  HOH H 403  HOH H 460                    \" + newline +\n                            \"SITE     2 AC1  6 HOH H 464  HOH H 497                                          \"+ newline;\n        String result = bindingSite.toPDB();\n//        System.out.println(\"Expected:\");\n//        System.out.println(expResult);\n//        System.out.println(\"Got:\");\n//        System.out.println(result);\n        assertEquals(expResult, result);\n    }\n\n    /**\n     * Test of toPDB method, of class Site.\n     */\n    @Test\n    public void testToPDB_StringBuffer() {\n//        System.out.println(\"toPDB\");\n        StringBuffer buf = new StringBuffer(\"\");\n        String expResult =  \"SITE     1 AC1  6 ARG H 221A LYS H 224  HOH H 403  HOH H 460                    \" + newline +\n                            \"SITE     2 AC1  6 HOH H 464  HOH H 497                                          \"+ newline;\n        bindingSite.toPDB(buf);\n        String result = buf.toString();\n//        System.out.println(\"Expected:\");\n//        System.out.println(expResult);\n//        System.out.println(\"Got:\");\n//        System.out.println(result);\n        assertEquals(expResult, result);\n    }\n\n\n        /**\n     * Test of toPDB method, of class Site.\n     */\n    @Test\n    public void testRemark800ToPDB_0args() {\n//        System.out.println(\"remark800toPDB_0args\");\n        String expResult =  \"REMARK 800 SITE_IDENTIFIER: CAT                                                 \" + newline +\n                            \"REMARK 800 EVIDENCE_CODE: UNKNOWN                                               \" + newline +\n                            \"REMARK 800 SITE_DESCRIPTION: ACTIVE SITE                                        \" + newline;\n        String result = catSite.remark800toPDB();\n//        System.out.println(result);\n        assertEquals(expResult, result);\n    }\n\n    /**\n     * Test of toPDB method, of class Site.\n     */\n    @Test\n    public void testRemark800ToPDB_StringBuffer() {\n//        System.out.println(\"remark800toPDB\");\n        StringBuffer buf = new StringBuffer(\"\");\n        String expResult =  \"REMARK 800 SITE_IDENTIFIER: CAT                                                 \" + newline +\n                            \"REMARK 800 EVIDENCE_CODE: UNKNOWN                                               \" + newline +\n                            \"REMARK 800 SITE_DESCRIPTION: ACTIVE SITE                                        \" + newline;\n        catSite.remark800toPDB(buf);\n        String result = buf.toString();\n//        System.out.println(result);\n        assertEquals(expResult, result);\n    }\n\n\n\n    /**\n     * Test of getSiteID method, of class Site.\n     */\n    @Test\n    public void testGetSiteID() {\n//        System.out.println(\"getSiteID\");\n        String expResult = \"CAT\";\n        String result = catSite.getSiteID();\n        assertEquals(expResult, result);\n    }\n\n    /**\n     * Test of getGroups method, of class Site.\n     */\n    @Test\n    public void testGetGroups() {\n//        System.out.println(\"getGroups\");\n        List<Group> expResult = bindingSiteGroups;\n        List<Group> result = bindingSite.getGroups();\n        assertEquals(expResult, result);\n    }\n\n    /**\n     * Test to see how the groups have been set in the Groups list\n     */\n    @Test\n    public void testGroup() {\n        List<Group> result = bindingSite.getGroups();\n        Group arg221 = result.get(0);\n        ResidueNumber testResNum = new ResidueNumber(\"H\", 221, 'A');\n//        testResNum.setChainId(\"H\");\n//        testResNum.setSeqNum(221);\n//        testResNum.setInsCode(\"A\");\n//        System.out.println(arg221);\n        assertEquals(testResNum, arg221.getResidueNumber());\n        //test the chainId is also set\n        assertEquals(\"H\", arg221.getChainId());\n\n\n        Group hoh403 = null;\n\n        for (Group group : result) {\n            if (group.getResidueNumber().getSeqNum() == 403) {\n                hoh403 = group;\n            }\n        }\n\n        ResidueNumber testResNum2 = new ResidueNumber(\"H\", 403, ' ');\n//        testResNum2.setChainId(\"H\");\n//        testResNum2.setSeqNum(403);\n//        testResNum2.setInsCode(\"\");\n//        System.out.println(hoh403);\n        assertEquals(testResNum2, hoh403.getResidueNumber());\n        //test the chaiId is also set\n        assertEquals(\"H\", hoh403.getChainId());\n    }\n}","changedTest":"","commitMessage":"Fix mmCIF sites parsing to reference pdbx_auth_ins_code, fix Site class to\ncorrectly format the SITE line when PDB residue names are short, such as\nfor a DNA base.\n","test_commitMessage":"","allZero":false}