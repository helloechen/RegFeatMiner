{"repository":"biojava","prod_path":"biojava-core/src/main/java/org/biojava/nbio/core/search/io/SearchIO.java","test_path":"biojava-core/src/test/java/org/biojava/nbio/core/search/io/SearchIOTest.java","prod_time":"2015-09-09 21:01:51","test_time":"2015-09-09 21:01:51","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"8026d8f5d7e4b7b69ed76d3ba0796dc4c9551775","test_commitID":"8026d8f5d7e4b7b69ed76d3ba0796dc4c9551775","isfound":"found test change","originPro":"/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n\r\npackage org.biojava.nbio.core.search.io;\r\n\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.ServiceLoader;\r\n\r\n/**\r\n *\r\n * @author pavanpa\r\n */\r\npublic class SearchIO implements Iterable<Result>{\r\n    static private HashMap<String,ResultFactory> extensionFactoryAssociation;\r\n    \r\n    private ResultFactory factory;\r\n    private File file;\r\n    \r\n    /**\r\n     * this threshold applies in retrieving hsp. Those having e-value below this\r\n     * will not be loaded.\r\n     */\r\n    private double evalueThreshold = Double.MAX_VALUE;\r\n    /**\r\n     * contains one object per query sequence describing search results.\r\n     * Sometime also referred as Iterations.\r\n     */\r\n    private List<Result> results;\r\n    \r\n    private final String NOT_SUPPORTED_FILE_EXCEPTION = \r\n            \"This extension is not associated with any parser. You can try to specify a ResultFactory object.\";\r\n    \r\n    /**\r\n     * Build a SearchIO reader and tries to select the appropriate parser inspecting\r\n     * file extension.\r\n     * \r\n     * @param f\r\n     * @throws Exception \r\n     */\r\n    public SearchIO (File f)  throws Exception{\r\n        factory = guessFactory(f);\r\n        file = f;\r\n        process();\r\n    }\r\n    \r\n    /**\r\n     * Build a SearchIO reader and specify a ResultFactory object to be used\r\n     * for parsing\r\n     * \r\n     * @param f\r\n     * @param factory\r\n     * @throws Exception \r\n     */\r\n    public SearchIO (File f, ResultFactory factory) throws Exception{\r\n        file = f;\r\n        this.factory = factory;\r\n        process();\r\n    }\r\n    /**\r\n     * Build a SearchIO reader, specify a ResultFactory object to be used for parsing\r\n     * and filter hsp retrieved by a e-value threshold. \r\n     * This usually increase parsing speed\r\n     * @param f\r\n     * @param factory\r\n     * @param maxEvalue\r\n     * @throws Exception \r\n     */\r\n    public SearchIO(File f, ResultFactory factory, double maxEvalue) throws Exception{\r\n        file = f;\r\n        this.factory = factory;\r\n        this.evalueThreshold = maxEvalue;\r\n        process();\r\n    }\r\n    \r\n    private void process() throws Exception {\r\n        factory.setFile(file);\r\n        results = factory.createObjects(evalueThreshold);\r\n    }\r\n    \r\n    private ResultFactory guessFactory(File f){\r\n        if (extensionFactoryAssociation == null){\r\n            extensionFactoryAssociation = new HashMap<String, ResultFactory>();\r\n            ServiceLoader<ResultFactory> impl = ServiceLoader.load(ResultFactory.class);\r\n            for (ResultFactory loadedImpl : impl) {\r\n                List<String> fileExtensions = loadedImpl.getFileExtensions();\r\n                for (String ext: fileExtensions) extensionFactoryAssociation.put(ext, loadedImpl);\r\n            }\r\n        }\r\n               \r\n        String filename = f.getAbsolutePath();\r\n        int extensionPos = filename.lastIndexOf(\".\");\r\n        String extension = filename.substring(extensionPos + 1);\r\n        if (extensionFactoryAssociation.get(extension) == null) \r\n            throw new UnsupportedOperationException(NOT_SUPPORTED_FILE_EXCEPTION\r\n                    + \"\\nExtension:\"+ extension);\r\n        \r\n        return extensionFactoryAssociation.get(extension);\r\n    }\r\n\r\n    public double getEvalueThreshold() {\r\n        return evalueThreshold;\r\n    }\r\n    \r\n    @Override\r\n    public Iterator<Result> iterator() {\r\n        return new Iterator<Result>() {\r\n            int currentResult = 0;\r\n            @Override\r\n            public boolean hasNext() {\r\n                return currentResult < results.size();\r\n            }\r\n\r\n            @Override\r\n            public Result next() {\r\n                return results.get(currentResult++);\r\n            }\r\n\r\n            @Override\r\n            public void remove() {\r\n                throw new UnsupportedOperationException(\"The remove operation is not supported by this iterator\");\r\n            }\r\n        };\r\n    }\r\n}\r\n","changedPro":"package org.biojava.nbio.core.search.io;\r\n\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.ServiceLoader;\r\n\r\n/**\r\n * Designed by Paolo Pavan.\r\n * You may want to find my contacts on Github and LinkedIn for code info \r\n * or discuss major changes.\r\n * https://github.com/paolopavan\r\n * \r\n * @author Paolo Pavan\r\n */\r\n\r\npublic class SearchIO implements Iterable<Result>{\r\n    static private HashMap<String,ResultFactory> extensionFactoryAssociation;\r\n    \r\n    private ResultFactory factory;\r\n    private File file;\r\n    \r\n    /**\r\n     * this threshold applies in retrieving hsp. Those having e-value below this\r\n     * will not be loaded.\r\n     */\r\n    private double evalueThreshold = Double.MAX_VALUE;\r\n    /**\r\n     * contains one object per query sequence describing search results.\r\n     * Sometime also referred as Iterations.\r\n     */\r\n    private List<Result> results;\r\n    \r\n    private final String NOT_SUPPORTED_FILE_EXCEPTION = \r\n            \"This extension is not associated with any parser. You can try to specify a ResultFactory object.\";\r\n    \r\n    /**\r\n     * Build a SearchIO reader and tries to select the appropriate parser inspecting\r\n     * file extension.\r\n     * \r\n     * @param f\r\n     * @throws Exception \r\n     */\r\n    public SearchIO (File f)  throws Exception{\r\n        factory = guessFactory(f);\r\n        file = f;\r\n        process();\r\n    }\r\n    \r\n    /**\r\n     * Build a SearchIO reader and specify a ResultFactory object to be used\r\n     * for parsing\r\n     * \r\n     * @param f\r\n     * @param factory\r\n     * @throws Exception \r\n     */\r\n    public SearchIO (File f, ResultFactory factory) throws Exception{\r\n        file = f;\r\n        this.factory = factory;\r\n        process();\r\n    }\r\n    /**\r\n     * Build a SearchIO reader, specify a ResultFactory object to be used for parsing\r\n     * and filter hsp retrieved by a e-value threshold. \r\n     * This usually increase parsing speed\r\n     * @param f\r\n     * @param factory\r\n     * @param maxEvalue\r\n     * @throws Exception \r\n     */\r\n    public SearchIO(File f, ResultFactory factory, double maxEvalue) throws Exception{\r\n        file = f;\r\n        this.factory = factory;\r\n        this.evalueThreshold = maxEvalue;\r\n        process();\r\n    }\r\n    \r\n    private void process() throws Exception {\r\n        factory.setFile(file);\r\n        results = factory.createObjects(evalueThreshold);\r\n    }\r\n    \r\n    private ResultFactory guessFactory(File f){\r\n        if (extensionFactoryAssociation == null){\r\n            extensionFactoryAssociation = new HashMap<String, ResultFactory>();\r\n            ServiceLoader<ResultFactory> impl = ServiceLoader.load(ResultFactory.class);\r\n            for (ResultFactory loadedImpl : impl) {\r\n                List<String> fileExtensions = loadedImpl.getFileExtensions();\r\n                for (String ext: fileExtensions) extensionFactoryAssociation.put(ext, loadedImpl);\r\n            }\r\n        }\r\n               \r\n        String filename = f.getAbsolutePath();\r\n        int extensionPos = filename.lastIndexOf(\".\");\r\n        String extension = filename.substring(extensionPos + 1);\r\n        if (extensionFactoryAssociation.get(extension) == null) \r\n            throw new UnsupportedOperationException(NOT_SUPPORTED_FILE_EXCEPTION\r\n                    + \"\\nExtension:\"+ extension);\r\n        \r\n        return extensionFactoryAssociation.get(extension);\r\n    }\r\n\r\n    public double getEvalueThreshold() {\r\n        return evalueThreshold;\r\n    }\r\n    \r\n    @Override\r\n    public Iterator<Result> iterator() {\r\n        return new Iterator<Result>() {\r\n            int currentResult = 0;\r\n            @Override\r\n            public boolean hasNext() {\r\n                return currentResult < results.size();\r\n            }\r\n\r\n            @Override\r\n            public Result next() {\r\n                return results.get(currentResult++);\r\n            }\r\n\r\n            @Override\r\n            public void remove() {\r\n                throw new UnsupportedOperationException(\"The remove operation is not supported by this iterator\");\r\n            }\r\n        };\r\n    }\r\n}\r\n","originTest":"/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage org.biojava.nbio.core.search.io;\n\nimport java.io.File;\nimport java.net.URL;\nimport java.util.Iterator;\nimport org.biojava.nbio.core.search.io.blast.BlastXMLQuery;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.junit.Ignore;\n\n/**\n *\n * @author pavanpa\n */\npublic class SearchIOTest {\n    \n    public SearchIOTest() {\n    }\n    \n    @BeforeClass\n    public static void setUpClass() {\n    }\n    \n    @AfterClass\n    public static void tearDownClass() {\n    }\n    \n    @Before\n    public void setUp() {\n    }\n    \n    @After\n    public void tearDown() {\n    }\n    \n    @Test\n    public void testConstructorWithFactoryGuess() {\n        System.out.println(\"Constructor test with GuessFactory\");\n        String resource = \"/org/biojava/nbio/core/search/io/blast/test.two-query.blasttxt\";\n        URL resourceURL = getClass().getResource(resource);\n        File file = new File(resourceURL.getFile());\n        \n        final SearchIO instance;\n        try {\n            instance = new SearchIO(file);\n        } catch (Exception e) {\n            fail(\"test failed:\\n\"+e.getMessage());\n        }\n    }\n    \n    @Test\n    public void testConstructorWithoutFactoryGuess() {\n        System.out.println(\"Constructor test specifying Factory\");\n        String resource = \"/org/biojava/nbio/core/search/io/blast/testBlastReport.xml\";\n        URL resourceURL = getClass().getResource(resource);\n        File file = new File(resourceURL.getFile());\n        \n        ResultFactory blastResultFactory = new BlastXMLQuery();\n        final SearchIO instance;\n        try {\n            instance = new SearchIO(file, blastResultFactory);\n        } catch (Exception e) {\n            fail(\"test failed:\\n\"+e.getMessage());\n        }\n    }\n    \n    @Test\n    public void testConstructorWithEvalueHspFilter() {\n        System.out.println(\"Constructor test specifying Factory\");\n        String resource = \"/org/biojava/nbio/core/search/io/blast/testBlastReport.xml\";\n        URL resourceURL = getClass().getResource(resource);\n        File file = new File(resourceURL.getFile());\n        \n        ResultFactory blastResultFactory = new BlastXMLQuery();\n        final SearchIO instance;\n        try {\n            instance = new SearchIO(file, blastResultFactory, 10e-10);\n        } catch (Exception e) {\n            fail(\"test failed:\\n\"+e.getMessage());\n        }\n    }\n}\n","changedTest":"package org.biojava.nbio.core.search.io;\n\nimport java.io.File;\nimport java.net.URL;\nimport org.biojava.nbio.core.search.io.blast.BlastXMLQuery;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\n/**\n * Designed by Paolo Pavan.\n * You may want to find my contacts on Github and LinkedIn for code info \n * or discuss major changes.\n * https://github.com/paolopavan\n * \n * @author Paolo Pavan\n */\n\npublic class SearchIOTest {\n    \n    public SearchIOTest() {\n    }\n    \n    @BeforeClass\n    public static void setUpClass() {\n    }\n    \n    @AfterClass\n    public static void tearDownClass() {\n    }\n    \n    @Before\n    public void setUp() {\n    }\n    \n    @After\n    public void tearDown() {\n    }\n    /**\n     * Constructor test with GuessFactory\n     */\n    @Test\n    public void testConstructorWithFactoryGuess() {\n        String resource = \"/org/biojava/nbio/core/search/io/blast/test.two-query.blasttxt\";\n        URL resourceURL = getClass().getResource(resource);\n        File file = new File(resourceURL.getFile());\n        \n        final SearchIO instance;\n        try {\n            instance = new SearchIO(file);\n        } catch (Exception e) {\n            fail(\"test failed:\\n\"+e.getMessage());\n        }\n    }\n    /**\n     * Constructor test specifying Factory\n     */\n    @Test\n    public void testConstructorWithoutFactoryGuess() {\n        String resource = \"/org/biojava/nbio/core/search/io/blast/testBlastReport.xml\";\n        URL resourceURL = getClass().getResource(resource);\n        File file = new File(resourceURL.getFile());\n        \n        ResultFactory blastResultFactory = new BlastXMLQuery();\n        final SearchIO instance;\n        try {\n            instance = new SearchIO(file, blastResultFactory);\n        } catch (Exception e) {\n            fail(\"test failed:\\n\"+e.getMessage());\n        }\n    }\n    /**\n     * Constructor test specifying Factory and using a evalue threshold filter\n     */\n    @Test\n    public void testConstructorWithEvalueHspFilter() {\n        //\n        String resource = \"/org/biojava/nbio/core/search/io/blast/testBlastReport.xml\";\n        URL resourceURL = getClass().getResource(resource);\n        File file = new File(resourceURL.getFile());\n        \n        ResultFactory blastResultFactory = new BlastXMLQuery();\n        final SearchIO instance;\n        try {\n            instance = new SearchIO(file, blastResultFactory, 10e-10);\n        } catch (Exception e) {\n            fail(\"test failed:\\n\"+e.getMessage());\n        }\n    }\n}\n","commitMessage":"Comments and credits.\n","test_commitMessage":"Comments and credits.\n","allZero":true}