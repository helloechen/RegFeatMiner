{"repository":"biojava","prod_path":"biojava-core/src/main/java/org/biojava/nbio/core/sequence/io/embl/EmblReader.java","test_path":"biojava-core/src/test/java/org/biojava/nbio/core/sequence/io/embl/EmblReaderTest.java","prod_time":"2017-12-05 18:37:18","test_time":"2017-12-05 18:37:18","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":9,"add_classname_line":0,"add_condition_line":2,"add_field_line":0,"add_import_line":1,"add_packageid_line":0,"add_parameter_line":2,"add_return_line":0,"del_annotation_line":0,"del_call_line":14,"del_classname_line":0,"del_condition_line":1,"del_field_line":1,"del_import_line":1,"del_packageid_line":0,"del_parameter_line":1,"del_return_line":0,"label":"POSITIVE","prod_commitID":"40ddf402510655f082e2311f8849fbbb83112ff5","test_commitID":"40ddf402510655f082e2311f8849fbbb83112ff5","isfound":"found test change","originPro":"package org.biojava.nbio.core.sequence.io.embl;\n\n\nimport java.io.*;\nimport java.util.LinkedList;\nimport java.util.List;\n\n/**\n * This class should process the data of embl file\n * @since 5.0.0\n * @author Noor Aldeen Al Mbaidin\n */\npublic class EmblReader {\n\n    private StringBuilder sequence = new StringBuilder(\"\");\n\n    public EmblReader() {\n\n    }\n\n    /**\n     * The parsing is done in this method.<br>\n     * This method tries to process all the Embl records\n     * in the File , closes the underlying resource,\n     * and return the results in object of EmblRecord.<br>\n     *\n     * @return EmblRecord containing all the parsed Embl records\n     * @throws IOException\n     */\n    public static EmblRecord process(File file) throws IOException {\n\n        EmblRecord emblRecord = new EmblRecord();\n        StringBuilder sequence = new StringBuilder(\"\");\n        EmblReference emblReference = new EmblReference();\n        LinkedList<String> accessionNumber = new LinkedList<>();\n        LinkedList<String> keyword = new LinkedList<>();\n\n        if (file == null)\n            throw new NullPointerException(\"file can't be null\");\n\n        if(file.isDirectory())\n            throw new IllegalArgumentException(\"the file can't be a directory\");\n\n        try (FileReader fileReader = new FileReader(file)) {\n            String line = \"\";\n            String lineIdentifier;\n            String lineInfo;\n            try (BufferedReader bufferedReader = new BufferedReader(fileReader)) {\n                while ((line = bufferedReader.readLine()) != null) {\n                    lineInfo = line.substring(0, 2);\n                    lineIdentifier = line.substring(0, 2);\n                    if (lineIdentifier.equals(\"ID\"))\n                        emblRecord.setEmblId(populateID(line));\n                    else if (lineIdentifier.equals(\"AC\"))\n                        populateAccessionNumber(line, accessionNumber);\n                    else if (lineIdentifier.equals(\"DT\") && line.contains(\"Created\"))\n                        emblRecord.setCreatedDate(lineInfo);\n                    else if (lineIdentifier.equals(\"DT\") && line.contains(\"updated\"))\n                        emblRecord.setLastUpdatedDate(lineInfo);\n                    else if (lineIdentifier.equals(\"DE\"))\n                        emblRecord.setSequenceDescription(lineInfo);\n                    else if (lineIdentifier.equals(\"KW\"))\n                        keyword.add(lineInfo);\n                    else if (lineIdentifier.equals(\"OS\"))\n                        emblRecord.setOrganismSpecies(lineInfo);\n                    else if (lineIdentifier.equals(\"OC\"))\n                        emblRecord.setOrganismClassification(lineInfo);\n                    else if (lineIdentifier.equals(\"OG\"))\n                        emblRecord.setOrGanelle(lineInfo);\n                    else if (lineIdentifier.equals(\"RN\") || lineIdentifier.equals(\"RP\")\n                            || lineIdentifier.equals(\"RX\") || lineIdentifier.equals(\"RG\")\n                            || lineIdentifier.equals(\"RA\") || lineIdentifier.equals(\"RT\")\n                            || lineIdentifier.equals(\"RL\"))\n                        populateEmblReference(lineIdentifier, lineInfo, emblReference);\n                    else if (lineIdentifier.equals(\"DR\"))\n                        emblRecord.setDatabaseCrossReference(lineInfo);\n                    else if (lineIdentifier.equals(\"AH\"))\n                        emblRecord.setAssemblyHeader(lineInfo);\n                    else if (lineIdentifier.equals(\"AS\"))\n                        emblRecord.setAssemblyInformation(lineInfo);\n                    else if (lineIdentifier.equals(\"CO\"))\n                        emblRecord.setConstructedSequence(lineInfo);\n                    else if (lineIdentifier.equals(\"FH\"))\n                        emblRecord.setFeatureHeader(lineInfo);\n                    else if (lineIdentifier.equals(\"FT\"))\n                        emblRecord.setFeatureTable(lineInfo);\n                    else if (lineIdentifier.equals(\"SQ\"))\n                        emblRecord.setSequenceHeader(lineInfo);\n                    else if (lineIdentifier.equals(\"  \") && !lineIdentifier.equals(\"//\"))\n                        populateSequence(line, sequence);\n                    else if (lineIdentifier.equals(\"//\")) {\n                          emblRecord.setKeyword(keyword);\n                          emblRecord.setEmblReference(emblReference);\n                          emblRecord.setAccessionNumber(accessionNumber);\n                          emblRecord.setSequence(sequence.toString());\n                    }\n\n                }\n            }\n        }\n\n        return emblRecord;\n    }\n\n    private static void populateSequence(String line, StringBuilder sequence) {\n        String sequenceLine = line.replace(\" \", \"\").\n                replaceAll(\"[0-9]\", \"\");\n        sequence.append(sequenceLine);\n    }\n\n    private static void populateEmblReference(String lineIdentifier, String lineInfo, EmblReference emblReference) {\n        if (lineIdentifier.equals(\"RN\"))\n            emblReference.setReferenceNumber(lineInfo);\n        else if (lineIdentifier.equals(\"RP\"))\n            emblReference.setReferencePosition(lineInfo);\n        else if (lineIdentifier.equals(\"RX\"))\n            emblReference.setReferenceCrossReference(lineInfo);\n        else if (lineIdentifier.equals(\"RG\"))\n            emblReference.setReferenceGroup(lineInfo);\n        else if (lineIdentifier.equals(\"RA\"))\n            emblReference.setReferenceAuthor(lineInfo);\n        else if (lineIdentifier.equals(\"RT\"))\n            emblReference.setReferenceTitle(lineInfo);\n        else if (lineIdentifier.equals(\"RL\"))\n            emblReference.setReferenceLocation(lineInfo);\n    }\n\n    private static void populateAccessionNumber(String line, LinkedList<String> accessionNumber) {\n        accessionNumber.add(line);\n    }\n\n    private static EmblId populateID(String line) {\n        EmblId emblId = new EmblId();\n        line.replace(\",\", \"\");\n        String[] strings = line.split(\" \");\n        emblId.setPrimaryAccession(strings[1]);\n        emblId.setSequenceVersion(strings[2]);\n        emblId.setTopology(strings[3]);\n        emblId.setMoleculeType(strings[4]);\n        emblId.setDataClass(strings[5]);\n        emblId.setTaxonomicDivision(strings[6]);\n        emblId.setSequenceLength(strings[7]);\n        return emblId;\n    }\n\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.sequence.io.embl;\n\n\nimport java.io.*;\nimport java.util.Arrays;\nimport java.util.LinkedList;\n\n\n/**\n * This class should process the data of embl file\n *\n * @author Noor Aldeen Al Mbaidin\n * @since 5.0.0\n */\npublic class EmblReader {\n\n    /**\n     * The parsing is done in this method.<br>\n     * This method tries to process all the Embl records\n     * in the File , closes the underlying resource,\n     * and return the results in object of EmblRecord.<br>\n     *\n     * @return EmblRecord containing all the parsed Embl records\n     * @throws IOException\n     */\n    public static EmblRecord process(File file) throws IOException {\n\n        EmblRecord emblRecord = new EmblRecord();\n        StringBuilder sequence = new StringBuilder(\"\");\n        LinkedList<EmblReference> emblReferences = new LinkedList<>();\n        EmblReference emblReference = new EmblReference();\n        LinkedList<String> accessionNumber = new LinkedList<>();\n        LinkedList<String> keyword = new LinkedList<>();\n\n        if (file == null)\n            throw new NullPointerException(\"file can't be null\");\n\n        if (file.isDirectory())\n            throw new IllegalArgumentException(\"the file can't be a directory\");\n\n        try (FileReader fileReader = new FileReader(file)) {\n            String line = \"\";\n            String lineIdentifier;\n            String lineInfo;\n            try (BufferedReader bufferedReader = new BufferedReader(fileReader)) {\n                while ((line = bufferedReader.readLine()) != null) {\n                    if (line.length() > 1) {\n                        lineInfo = line.substring(2, line.length()).trim();\n                        lineIdentifier = line.substring(0, 2);\n                        if (lineIdentifier.equals(\"ID\"))\n                            emblRecord.setEmblId(populateID(lineInfo));\n                        else if (lineIdentifier.equals(\"AC\"))\n                            populateAccessionNumber(line, accessionNumber);\n                        else if (lineIdentifier.equals(\"DT\") && line.contains(\"Created\"))\n                            emblRecord.setCreatedDate(lineInfo);\n                        else if (lineIdentifier.equals(\"DT\") && line.contains(\"updated\"))\n                            emblRecord.setLastUpdatedDate(lineInfo);\n                        else if (lineIdentifier.equals(\"DE\"))\n                            emblRecord.setSequenceDescription(lineInfo);\n                        else if (lineIdentifier.equals(\"KW\"))\n                            keyword.add(lineInfo);\n                        else if (lineIdentifier.equals(\"OS\"))\n                            emblRecord.setOrganismSpecies(lineInfo);\n                        else if (lineIdentifier.equals(\"OC\"))\n                            emblRecord.setOrganismClassification(lineInfo);\n                        else if (lineIdentifier.equals(\"OG\"))\n                            emblRecord.setOrGanelle(lineInfo);\n                        else if (lineIdentifier.equals(\"RN\") || lineIdentifier.equals(\"RP\")\n                                || lineIdentifier.equals(\"RX\") || lineIdentifier.equals(\"RG\")\n                                || lineIdentifier.equals(\"RA\") || lineIdentifier.equals(\"RT\")\n                                || lineIdentifier.equals(\"RL\"))\n                            populateEmblReferences(lineIdentifier, lineInfo, emblReference, emblReferences);\n                        else if (lineIdentifier.equals(\"DR\"))\n                            emblRecord.setDatabaseCrossReference(lineInfo);\n                        else if (lineIdentifier.equals(\"AH\"))\n                            emblRecord.setAssemblyHeader(lineInfo);\n                        else if (lineIdentifier.equals(\"AS\"))\n                            emblRecord.setAssemblyInformation(lineInfo);\n                        else if (lineIdentifier.equals(\"CO\"))\n                            emblRecord.setConstructedSequence(lineInfo);\n                        else if (lineIdentifier.equals(\"FH\"))\n                            emblRecord.setFeatureHeader(lineInfo);\n                        else if (lineIdentifier.equals(\"FT\"))\n                            emblRecord.setFeatureTable(lineInfo);\n                        else if (lineIdentifier.equals(\"SQ\"))\n                            emblRecord.setSequenceHeader(lineInfo);\n                        else if (lineIdentifier.equals(\"  \") && !lineIdentifier.equals(\"//\"))\n                            populateSequence(line, sequence);\n                        else if (lineIdentifier.equals(\"//\")) {\n                            emblRecord.setKeyword(keyword);\n                            emblRecord.setEmblReference(emblReferences);\n                            emblRecord.setAccessionNumber(accessionNumber);\n                            emblRecord.setSequence(sequence.toString());\n                        }\n\n                    }\n                }\n            }\n        }\n\n        return emblRecord;\n    }\n\n    private static void populateSequence(String line, StringBuilder sequence) {\n        String sequenceLine = line.replace(\" \", \"\").\n                replaceAll(\"[0-9]\", \"\");\n        sequence.append(sequenceLine);\n    }\n\n    private static void populateEmblReferences(String lineIdentifier, String lineInfo, EmblReference emblReference\n            , LinkedList<EmblReference> emblReferences) {\n        if (lineIdentifier.equals(\"RN\"))\n            emblReference.setReferenceNumber(lineInfo);\n        else if (lineIdentifier.equals(\"RP\"))\n            emblReference.setReferencePosition(lineInfo);\n        else if (lineIdentifier.equals(\"RX\"))\n            emblReference.setReferenceCrossReference(lineInfo);\n        else if (lineIdentifier.equals(\"RG\"))\n            emblReference.setReferenceGroup(lineInfo);\n        else if (lineIdentifier.equals(\"RA\"))\n            emblReference.setReferenceAuthor(lineInfo);\n        else if (lineIdentifier.equals(\"RT\"))\n            emblReference.setReferenceTitle(lineInfo);\n        else if (lineIdentifier.equals(\"RL\")) {\n            emblReference.setReferenceLocation(lineInfo);\n            emblReferences.add(emblReference.copyEmblReference(emblReference));\n        }\n    }\n\n    private static void populateAccessionNumber(String line, LinkedList<String> accessionNumber) {\n        accessionNumber.add(line);\n    }\n\n    private static EmblId populateID(String line) {\n        String[] strings = line.split(\";\");\n        Arrays.stream(strings).map(String::trim).toArray(unused -> strings);\n        EmblId emblId = new EmblId(strings[0], strings[1], strings[2]\n                , strings[3], strings[4], strings[5], strings[6]);\n        return emblId;\n    }\n\n\n}\n","originTest":"package org.biojava.nbio.core.sequence.io.embl;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * This class should test the parser of EmblReader class\n *\n * @author Noor Aldeen Al Mbaidin\n * @since 5.0.0\n */\npublic class EmblReaderTest {\n\n\n    @Test(expected = NullPointerException.class)\n    public void givenNullFileParameterWhenProcessEmblFileThenThrowException() throws IOException {\n        File file = new File(this.getClass().getResource(null).getFile());\n        EmblReader.process(file);\n\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void givenDirectoryWhenProcessEmblFileThenThrowException() throws IOException {\n        File file = new File(this.getClass().getResource(\"/\")\n                .getPath());\n        EmblReader.process(file);\n    }\n\n    @Test\n    public void givenAnEmilFileWhenProcessEmilFileThanTheSequenceShouldReturnAsExpected() throws IOException {\n\n        File file = new File(this.getClass().getResource(\"/test.embl\").getFile());\n        EmblRecord emblRecord = EmblReader.process(file);\n        Assert.assertEquals(\"acaagatgccattgtcccccggcctcctgctgctg\" +\n                \"ctgctctccggggccacggccaccgctgccctgcccctggagggtggccccaccggcc\" +\n                \"gagacagcgagcatatgcaggaagcggcaggaataaggaaaagcagcctcctgactttcc\" +\n                \"tcgcttggtggtttgagtggacctcccaggccagtgccgggcccctcataggagaggaagc\" +\n                \"tcgggaggtggccaggcggcaggaaggcgcacccccccagcaatccgcgcgccgggacagaa\" +\n                \"tgccctgcaggaacttcttctggaagaccttctcctcctgcaaataaaacctcacccatgaatgc\" +\n                \"tcacgcaagtttaattacagacctgaa\", emblRecord.getSequence());\n    }\n\n\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.sequence.io.embl;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * This class should test the parser of EmblReader class\n *\n * @author Noor Aldeen Al Mbaidin\n * @since 5.0.0\n */\npublic class EmblReaderTest {\n\n    private String sequence;\n\n    @Before\n    public void initObjects() {\n        sequence = \"aaacaaaccaaatatggattttattgtagccatatttgctctgtttgttattagctcattcacaattacttcca\" +\n                \"caaatgcagttgaagcttctactcttcttgacataggtaacctgagtcggagcagttttcctcgtggcttcatctttggtgctggatcttcagcatac\" +\n                \"caatttgaaggtgcagtaaacgaaggcggtagaggaccaagtatttgggataccttcacccataaatatccagaaaaaataagggatggaagcaatgcaga\" +\n                \"catcacggttgaccaatatcaccgctacaaggaagatgttgggattatgaaggatcaaaatatggattcgtatagattctcaatctcttggccaagaatactcc\" +\n                \"caaagggaaagttgagcggaggcataaatcacgaaggaatcaaatattacaacaaccttatcaacgaactattggctaacggtatacaaccatttgtaactcttttt\" +\n                \"cattgggatcttccccaagtcttagaagatgagtatggtggtttcttaaactccggtgtaataaatgattttcgagactatacggatctttgcttcaaggaatttgga\" +\n                \"gatagagtgaggtattggagtactctaaatgagccatgggtgtttagcaattctggatatgcactaggaacaaatgcaccaggtcgatgttcggcctccaacgtggccaa\" +\n                \"gcctggtgattctggaacaggaccttatatagttacacacaatcaaattcttgctcatgcagaagctgtacatgtgtataagactaaataccaggcatatcaaaagggaaa\" +\n                \"gataggcataacgttggtatctaactggttaatgccacttgatgataatagcataccagatataaaggctgccgagagatcacttgacttccaatttggattgtttatggaac\" +\n                \"aattaacaacaggagattattctaagagcatgcggcgtatagttaaaaaccgattacctaagttctcaaaattcgaatcaagcctagtgaatggttcatttgattttattggtat\" +\n                \"aaactattactcttctagttatattagcaatgccccttcacatggcaatgccaaacccagttactcaacaaatcctatgaccaatatttcatttgaaaaacatgggatacc\" +\n                \"cttaggtccaagggctgcttcaatttggatatatgtttatccatatatgtttatccaagaggacttcgagatcttttgttacatattaaaaataaatataacaatcctgcaatt\" +\n                \"ttcaatcactgaaaatggtatgaatgaattcaacgatgcaacacttccagtagaagaagctcttttgaatacttacagaattgattactattaccgtcacttatactacattcgt\" +\n                \"tctgcaatcagggctggctcaaatgtgaagggtttttacgcatggtcatttttggactgtaatgaatggtttgcaggctttactgttcgttttggattaaactttgtagattaga\" +\n                \"aagatggattaaaaaggtaccctaagctttctgcccaatggtacaagaactttctcaaaagaaactagctagtattattaaaagaactttgtagtagattacagtacatcgtttg\" +\n                \"aagttgagttggtgcacctaattaaataaaagaggttactcttaacatatttttaggccattcgttgtgaagttgttaggctgttatttctattatactatgttgtagtaataa\" +\n                \"gtgcattgttgtaccagaagctatgatcataactataggttgatccttcatgtatcagtttgatgttgagaatactttgaattaaaagtctttttttatttttttaaaaaaaaaa\" +\n                \"aaaaaaaaaaaaaaaaaaa\";\n    }\n\n    @Test(expected = NullPointerException.class)\n    public void givenNullFileParameterWhenProcessEmblFileThenThrowException() throws IOException {\n        File file = new File(this.getClass().getResource(null).getFile());\n        EmblReader.process(file);\n\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void givenDirectoryWhenProcessEmblFileThenThrowException() throws IOException {\n        File file = new File(this.getClass().getResource(\"/\")\n                .getPath());\n        EmblReader.process(file);\n    }\n\n    @Test\n    public void givenAnEmilFileWhenProcessEmilFileThanTheSequenceShouldReturnAsExpected() throws IOException {\n        File file = new File(this.getClass().getResource(\"/test.embl\").getFile());\n        EmblRecord emblRecord = EmblReader.process(file);\n        Assert.assertEquals(sequence, emblRecord.getSequence());\n    }\n\n\n}\n","commitMessage":"insert  license header\n\n","test_commitMessage":"insert  license header\n\n","allZero":false}