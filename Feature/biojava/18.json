{"repository":"biojava","prod_path":"biojava3-structure/src/main/java/org/biojava/bio/structure/scop/RemoteScopInstallation.java","test_path":"integrationtest/src/test/java/org/biojava/structure/test/scop/RemoteScopInstallationTest.java","prod_time":"2014-06-03 21:29:23","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":2,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"fdc768a0b6913d96b4df5ccb02969e682f3d42fd","test_commitID":"","isfound":"not found test change","originPro":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Aug 30, 2011\n * Created by Andreas Prlic\n *\n * @since 3.0.2\n */\npackage org.biojava.bio.structure.scop;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.List;\n\nimport org.biojava.bio.structure.align.client.JFatCatClient;\nimport org.biojava.bio.structure.align.util.HTTPConnectionTools;\nimport org.biojava.bio.structure.scop.server.ScopDescriptions;\nimport org.biojava.bio.structure.scop.server.ScopDomains;\nimport org.biojava.bio.structure.scop.server.ScopNodes;\nimport org.biojava.bio.structure.scop.server.XMLUtil;\n\n\n/** A class that fetches information about SCOP from a remote data-source. It requires port 80 to open for HTTP connection.\n *\n * @author Andreas Prlic\n *\n */\npublic class RemoteScopInstallation implements ScopDatabase {\n\n\tpublic static final String DEFAULT_SERVER = \"http://source.rcsb.org/jfatcatserver/domains/\";\n\n\tString server = DEFAULT_SERVER;\n\n\tprivate String version = null;\n\n\tpublic static void main(String[] args){\n\n\t\tScopDatabase scop = new RemoteScopInstallation();\n\t\tScopFactory.setScopDatabase(scop);\n\n\t\t//System.out.println(scop.getByCategory(ScopCategory.Superfamily));\n\n\t\tSystem.out.println(scop.getDomainsForPDB(\"4HHB\"));\n\t}\n\n\n\tpublic String getServer() {\n\t\treturn server;\n\t}\n\n\tpublic void setServer(String server) {\n\t\tthis.server = server;\n\t}\n\n\t@Override\n\tpublic List<ScopDescription> getByCategory(ScopCategory category) {\n\t\tList<ScopDescription> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getByCategory?category=\"+category.toString()+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopDescriptions container = ScopDescriptions.fromXML(xml);\n\t\t\t\tresults = container.getScopDescription();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getByCategory?category=\"+category.toString()+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopDescription> filterByClassificationId(String query) {\n\t\tList<ScopDescription> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"filterByClassificationId?query=\"+query+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopDescriptions container = ScopDescriptions.fromXML(xml);\n\t\t\t\tresults = container.getScopDescription();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"filterByClassificationId?query=\"+query+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopNode> getTree(ScopDomain domain) {\n\t\tList<ScopNode> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getTree?scopId=\"+domain.getScopId()+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopNodes container = ScopNodes.fromXML(xml);\n\t\t\t\tresults = container.getScopNode();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getTree?scopId=\"+domain.getScopId()+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopDomain> filterByDomainName(String query) {\n\t\tList<ScopDomain> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"filterByDomainName?query=\"+query+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopDomains container = ScopDomains.fromXML(xml);\n\t\t\t\tresults = container.getScopDomain();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"filterByDomainName?query=\"+query+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopDescription> filterByDescription(String query) {\n\t\tList<ScopDescription> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"filterByDescription?query=\"+query+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopDescriptions container = ScopDescriptions.fromXML(xml);\n\t\t\t\tresults = container.getScopDescription();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"filterByDescription?query=\"+query+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic ScopDescription getScopDescriptionBySunid(int sunid) {\n\n\t\tScopDescription desc = null;\n\n\n\t\ttry {\n\n\t\t\tURL u = new URL(server + \"getScopDescriptionBySunid?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tdesc = XMLUtil.getScopDescriptionFromXML(xml);\n\t\t\t}\n\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getScopDescriptionBySunid?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn desc;\n\t}\n\n\t@Override\n\tpublic List<ScopDomain> getDomainsForPDB(String pdbId) {\n\t\tList<ScopDomain> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getDomainsForPDB?pdbId=\"+pdbId+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif( !xml.trim().isEmpty()) {\n\t\t\t\tScopDomains container = ScopDomains.fromXML(xml);\n\t\t\t\tresults = container.getScopDomain();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getDomainsForPDB?pdbId=\"+pdbId+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n\tprivate ScopDomain requestRemoteDomainByScopID(String scopId)\n\tthrows IOException{\n\t\tURL u = new URL(server + \"getDomainByScopID?scopId=\"+scopId+\"&version=\"+getScopVersion());\n\t\t//System.out.println(u);\n\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n        if( !xml.trim().isEmpty()) {\n        \treturn XMLUtil.getScopDomainFromXML(xml);\n        }\n        return null;\n\t}\n\n\t@Override\n\tpublic ScopDomain getDomainByScopID(String scopId) {\n\t\tScopDomain desc = null;\n\t\tint i = 0;\n\t\twhile ( desc == null && i < 3){\n\t\t\ti++;\n\t\t\ttry {\n\t\t\t\tdesc = requestRemoteDomainByScopID(scopId);\n\t\t\t\ti = 100;\n\t\t\t\tbreak;\n\t\t\t} catch (Exception e){\n\t\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getDomainByScopID?scopId=\"+scopId+\"&version=\"+getScopVersion());\n\t\t\t\t// sleep 3 seconds and try again\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(3000);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\te1.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn desc;\n\t}\n\n\t@Override\n\tpublic ScopNode getScopNode(int sunid) {\n\t\tScopNode desc = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getScopNode?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif( !xml.trim().isEmpty()) {\n\t\t\t\tdesc = XMLUtil.getScopNodeFromXML(xml);\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getScopNode?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn desc;\n\t}\n\n\t@Override\n\tpublic String getScopVersion() {\n\t\t// If no version is set, request the default version from the website\n\t\tif( version == null) {\n\t\t\ttry {\n\t\t\t\tURL u = new URL(server + \"getScopVersion\");\n\t\t\t\t//System.out.println(u);\n\t\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\t\tversion = JFatCatClient.convertStreamToString(response);\n\t\t\t\tif( version != null)\n\t\t\t\t\tversion = version.trim();\n\n\t\t\t} catch (Exception e){\n\t\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getScopVersion\");\n\t\t\t}\n\t\t}\n\t\treturn version;\n\t}\n\n\tpublic void setScopVersion(String version) {\n\t\tthis.version = version;\n\t}\n\n\t@Override\n\tpublic List<ScopDomain> getScopDomainsBySunid(Integer sunid) {\n\t\tList<ScopDomain> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getScopDomainsBySunid?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif( !xml.trim().isEmpty()) {\n\t\t\t\tScopDomains container = ScopDomains.fromXML(xml);\n\t\t\t\tresults = container.getScopDomain();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getScopDomainsBySunid?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n\n\t@Override\n\tpublic List<String> getComments(int sunid) {\n\t\tList<String> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getComments?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif( !xml.trim().isEmpty()) {\n\t\t\t\tresults = XMLUtil.getCommentsFromXML(xml);\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getComments?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n}\n","changedPro":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Aug 30, 2011\n * Created by Andreas Prlic\n *\n * @since 3.0.2\n */\npackage org.biojava.bio.structure.scop;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.List;\n\nimport org.biojava.bio.structure.align.client.JFatCatClient;\nimport org.biojava.bio.structure.align.util.HTTPConnectionTools;\nimport org.biojava.bio.structure.scop.server.ScopDescriptions;\nimport org.biojava.bio.structure.scop.server.ScopDomains;\nimport org.biojava.bio.structure.scop.server.ScopNodes;\nimport org.biojava.bio.structure.scop.server.XMLUtil;\n\n\n/** A class that fetches information about SCOP from a remote data-source. It requires port 80 to open for HTTP connection.\n *\n * @author Andreas Prlic\n *\n */\npublic class RemoteScopInstallation implements ScopDatabase {\n\n\tpublic static final String DEFAULT_SERVER = \"http://source.rcsb.org/jfatcatserver/domains/\";\n\n\tString server = DEFAULT_SERVER;\n\n\tprivate String version = null;\n\n\tpublic static void main(String[] args){\n\n\t\tScopDatabase scop = new RemoteScopInstallation();\n\t\tScopFactory.setScopDatabase(scop);\n\n\t\t//System.out.println(scop.getByCategory(ScopCategory.Superfamily));\n\n\t\tSystem.out.println(scop.getDomainsForPDB(\"4HHB\"));\n\t}\n\n\n\tpublic String getServer() {\n\t\treturn server;\n\t}\n\n\tpublic void setServer(String server) {\n\t\tthis.server = server;\n\t}\n\n\t@Override\n\tpublic List<ScopDescription> getByCategory(ScopCategory category) {\n\t\tList<ScopDescription> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getByCategory?category=\"+category.toString()+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopDescriptions container = ScopDescriptions.fromXML(xml);\n\t\t\t\tresults = container.getScopDescription();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getByCategory?category=\"+category.toString()+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopDescription> filterByClassificationId(String query) {\n\t\tList<ScopDescription> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"filterByClassificationId?query=\"+query+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopDescriptions container = ScopDescriptions.fromXML(xml);\n\t\t\t\tresults = container.getScopDescription();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"filterByClassificationId?query=\"+query+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopNode> getTree(ScopDomain domain) {\n\t\tList<ScopNode> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getTree?scopId=\"+domain.getScopId()+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopNodes container = ScopNodes.fromXML(xml);\n\t\t\t\tresults = container.getScopNode();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getTree?scopId=\"+domain.getScopId()+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopDomain> filterByDomainName(String query) {\n\t\tquery = query.trim();\n\t\tList<ScopDomain> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"filterByDomainName?query=\"+query+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopDomains container = ScopDomains.fromXML(xml);\n\t\t\t\tresults = container.getScopDomain();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"filterByDomainName?query=\"+query+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic List<ScopDescription> filterByDescription(String query) {\n\t\tList<ScopDescription> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"filterByDescription?query=\"+query+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tScopDescriptions container = ScopDescriptions.fromXML(xml);\n\t\t\t\tresults = container.getScopDescription();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"filterByDescription?query=\"+query+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n\t@Override\n\tpublic ScopDescription getScopDescriptionBySunid(int sunid) {\n\n\t\tScopDescription desc = null;\n\n\n\t\ttry {\n\n\t\t\tURL u = new URL(server + \"getScopDescriptionBySunid?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif(! xml.trim().isEmpty()) {\n\t\t\t\tdesc = XMLUtil.getScopDescriptionFromXML(xml);\n\t\t\t}\n\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getScopDescriptionBySunid?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn desc;\n\t}\n\n\t@Override\n\tpublic List<ScopDomain> getDomainsForPDB(String pdbId) {\n\t\tList<ScopDomain> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getDomainsForPDB?pdbId=\"+pdbId+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif( !xml.trim().isEmpty()) {\n\t\t\t\tScopDomains container = ScopDomains.fromXML(xml);\n\t\t\t\tresults = container.getScopDomain();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getDomainsForPDB?pdbId=\"+pdbId+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n\tprivate ScopDomain requestRemoteDomainByScopID(String scopId)\n\tthrows IOException{\n\t\tscopId = scopId.trim();\n\t\tURL u = new URL(server + \"getDomainByScopID?scopId=\"+scopId+\"&version=\"+getScopVersion());\n\t\t//System.out.println(u);\n\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n        if( !xml.trim().isEmpty()) {\n        \treturn XMLUtil.getScopDomainFromXML(xml);\n        }\n        return null;\n\t}\n\n\t@Override\n\tpublic ScopDomain getDomainByScopID(String scopId) {\n\t\tScopDomain desc = null;\n\t\tint i = 0;\n\t\twhile ( desc == null && i < 3){\n\t\t\ti++;\n\t\t\ttry {\n\t\t\t\tdesc = requestRemoteDomainByScopID(scopId);\n\t\t\t\ti = 100;\n\t\t\t\tbreak;\n\t\t\t} catch (Exception e){\n\t\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getDomainByScopID?scopId=\"+scopId+\"&version=\"+getScopVersion());\n\t\t\t\t// sleep 3 seconds and try again\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(3000);\n\t\t\t\t} catch (InterruptedException e1) {\n\t\t\t\t\te1.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn desc;\n\t}\n\n\t@Override\n\tpublic ScopNode getScopNode(int sunid) {\n\t\tScopNode desc = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getScopNode?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif( !xml.trim().isEmpty()) {\n\t\t\t\tdesc = XMLUtil.getScopNodeFromXML(xml);\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getScopNode?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn desc;\n\t}\n\n\t@Override\n\tpublic String getScopVersion() {\n\t\t// If no version is set, request the default version from the website\n\t\tif( version == null) {\n\t\t\ttry {\n\t\t\t\tURL u = new URL(server + \"getScopVersion\");\n\t\t\t\t//System.out.println(u);\n\t\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\t\tversion = JFatCatClient.convertStreamToString(response);\n\t\t\t\tif( version != null)\n\t\t\t\t\tversion = version.trim();\n\n\t\t\t} catch (Exception e){\n\t\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getScopVersion\");\n\t\t\t}\n\t\t}\n\t\treturn version;\n\t}\n\n\tpublic void setScopVersion(String version) {\n\t\tthis.version = version;\n\t}\n\n\t@Override\n\tpublic List<ScopDomain> getScopDomainsBySunid(Integer sunid) {\n\t\tList<ScopDomain> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getScopDomainsBySunid?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif( !xml.trim().isEmpty()) {\n\t\t\t\tScopDomains container = ScopDomains.fromXML(xml);\n\t\t\t\tresults = container.getScopDomain();\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getScopDomainsBySunid?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n\n\t@Override\n\tpublic List<String> getComments(int sunid) {\n\t\tList<String> results = null;\n\t\ttry {\n\t\t\tURL u = new URL(server + \"getComments?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t\t//System.out.println(u);\n\t\t\tInputStream response = HTTPConnectionTools.getInputStream(u);\n\t\t\tString xml = JFatCatClient.convertStreamToString(response);\n\n\t\t\tif( !xml.trim().isEmpty()) {\n\t\t\t\tresults = XMLUtil.getCommentsFromXML(xml);\n\t\t\t}\n\t\t} catch (Exception e){\n\t\t\tSystem.err.println(\"Unable to reach \"+ server + \"getComments?sunid=\"+sunid+\"&version=\"+getScopVersion());\n\t\t}\n\t\treturn results;\n\t}\n\n}\n","originTest":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.structure.test.scop;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\nimport org.biojava.bio.structure.scop.RemoteScopInstallation;\nimport org.biojava.bio.structure.scop.ScopDatabase;\nimport org.biojava.bio.structure.scop.ScopFactory;\nimport org.biojava.bio.structure.scop.ScopInstallation;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameters;\n\n/**\n * Tests {@link ScopInstallation}.\n * @author Spencer Bliven\n * @since 3.0.6\n */\n@RunWith(Parameterized.class)\npublic class RemoteScopInstallationTest extends ScopDatabaseTest {\n\n\tpublic RemoteScopInstallationTest(String tag,ScopDatabase scop) {\n\t\tsuper(tag,scop);\n\t}\n\n\t//@Parameters\n\t@Parameters(name=\"{0}\")\n\tpublic static Collection<Object[]> availableDatabases() {\n\t\tArrayList<Object[]> databases = new ArrayList<Object[]>();\n\t\tRemoteScopInstallation scop;\n\t\tfor(String version : new String[] {\n\t\t\t\tScopFactory.LATEST_VERSION,\n\t\t\t\tScopFactory.VERSION_1_75A,\n\t\t\t\tScopFactory.VERSION_1_75B,\n\t\t\t\tScopFactory.VERSION_1_75,\n\t\t\t\tScopFactory.VERSION_1_73,\n\t\t}) {\n\t\t\tscop = new RemoteScopInstallation();\n\t\t\tscop.setScopVersion(version);\n\t\t\tdatabases.add(new Object[] {scop.getScopVersion().trim(), scop});\n\t\t}\n\t\treturn databases;\n\t}\n}\n","changedTest":"","commitMessage":"Trim spaces off structure names.\n","test_commitMessage":"","allZero":false}