{"repository":"biojava","prod_path":"core/src/main/java/org/biojavax/SimpleDocRef.java","test_path":"core/src/test/java/org/biojavax/SimpleDocRefTest.java","prod_time":"2010-09-24 13:40:16","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":1,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":1,"del_classname_line":0,"del_condition_line":1,"del_field_line":0,"del_import_line":1,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"69f0c854de75201f21b84eeeda03b8d70bdec8e2","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojavax;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.zip.Checksum;\n\nimport org.biojava.utils.AbstractChangeable;\nimport org.biojava.utils.ChangeEvent;\nimport org.biojava.utils.ChangeSupport;\nimport org.biojava.utils.ChangeVetoException;\nimport org.biojavax.ontology.ComparableTerm;\nimport org.biojavax.utils.CRC64Checksum;\n\n/**\n * A basic DocRef implementation.\n * @author Richard Holland\n * @author Mark Schreiber\n * @author George Waldon\n * @since 1.5\n */\n\npublic class SimpleDocRef extends AbstractChangeable implements DocRef {\n    \n    private CrossRef crossref;\n    private List authors;\n    private String title;\n    private String location;\n    private String remark;\n    \n    /**\n     * Creates a new document reference from the given immutable authors and\n     * location and title. Will throw exceptions if either authors or\n     * location are null, but a null title is allowable.\n     * @param authors The authors of the referenced document, as a set of DocRefAuthor instances.\n     * @param location The location of the document, eg. the journal name and page range.\n     */\n    public SimpleDocRef(List authors, String location) {\n    \tthis(authors, location, null);\n    }\n    \n    /**\n     * Creates a new document reference from the given immutable authors and\n     * location and title. Will throw exceptions if either authors or\n     * location are null, but a null title is allowable.\n     * @param authors The authors of the referenced document, as a string to be parsed\n     * with {@link DocRefAuthor.Tools#parseAuthorString(String)}.\n     * @param location The location of the document, eg. the journal name and page range.\n     */\n    public SimpleDocRef(String authors, String location) {\n    \tthis(DocRefAuthor.Tools.parseAuthorString(authors), location, null);\n    }\n    \n    /**\n     * Creates a new document reference from the given immutable authors and\n     * location and title. Will throw exceptions if either authors or\n     * location are null, but a null title is allowable.\n     * @param authors The authors of the referenced document, as a string to be parsed\n     * with {@link DocRefAuthor.Tools#parseAuthorString(String)}.\n     * @param location The location of the document, eg. the journal name and page range.\n     * @param title The title of the document.\n     */\n    public SimpleDocRef(String authors, String location, String title) {\n    \tthis(DocRefAuthor.Tools.parseAuthorString(authors), location, title);\n    }\n    \n    /**\n     * Creates a new document reference from the given immutable authors and\n     * location and title. Will throw exceptions if either authors or\n     * location are null, but a null title is allowable.\n     * @param authors The authors of the referenced document, as a set of DocRefAuthor instances.\n     * @param location The location of the document, eg. the journal name and page range.\n     * @param title The title of the document.\n     */\n    public SimpleDocRef(List authors, String location, String title) {\n        if (authors==null || authors.isEmpty()) throw new IllegalArgumentException(\"Authors cannot be null or empty\");\n        if (location==null) throw new IllegalArgumentException(\"Location cannot be null\");\n        this.crossref = null;\n        this.authors = new ArrayList();\n        this.authors.addAll(authors);\n        this.title = title;\n        this.location = location;\n        this.remark = null;\n    }\n\n    /**\n     * Construct a doc ref with populated cross ref.\n     * @param authors\n     * @param location\n     * @param title\n     * @param crossRefKey\n     * @param crossRefValue\n     * @param crossRefVersion\n     */\n    public SimpleDocRef(String authors, String location, String title, String crossRefKey, String crossRefValue, Integer crossRefVersion) {\n    \tthis(DocRefAuthor.Tools.parseAuthorString(authors), location, title, crossRefKey, crossRefValue, crossRefVersion);\n    }\n    \n    /**\n     * Construct a doc ref with populated cross ref.\n     * @param authors\n     * @param location\n     * @param title\n     * @param crossRefKey\n     * @param crossRefValue\n     * @param crossRefVersion\n     */\n    public SimpleDocRef(List authors, String location, String title, String crossRefKey, String crossRefValue, Integer crossRefVersion) {\n    \tthis(authors, location, title);\n        this.setCrossref((CrossRef) RichObjectFactory.getObject(SimpleCrossRef.class, new Object[]{crossRefKey, crossRefValue, crossRefVersion}));\n    }\n    \n    // Hibernate requirement - not for public use.\n    protected SimpleDocRef() {}\n    \n    /**\n     * {@inheritDoc}\n     */\n    public void setRemark(String remark) throws ChangeVetoException {\n        if(this.remark!=null && this.remark.equals(remark)) return;\n        else if(this.remark==null && remark==null) return;\n                \n        if(!this.hasListeners(DocRef.REMARK)) {\n            this.remark = remark;\n        } else {\n            ChangeEvent ce = new ChangeEvent(\n                    this,\n                    DocRef.REMARK,\n                    remark,\n                    this.remark\n                    );\n            ChangeSupport cs = this.getChangeSupport(DocRef.REMARK);\n            synchronized(cs) {\n                cs.firePreChangeEvent(ce);\n                this.remark = remark;\n                cs.firePostChangeEvent(ce);\n            }\n        }\n    }\n    \n    // Hibernate requirement - not for public use.\n    void setCRC(String CRC) {} // ignore as field is a calculated value\n        \n    /**\n     * {@inheritDoc}\n     */\n    public void setCrossref(CrossRef crossref) throws ChangeVetoException {\n        if(this.crossref!=null && this.crossref.equals(crossref)) return;\n        else if(this.crossref==null && crossref==null) return;\n        \n        if(!this.hasListeners(DocRef.CROSSREF)) {\n            this.crossref = crossref;\n        } else {\n            ChangeEvent ce = new ChangeEvent(\n                    this,\n                    DocRef.CROSSREF,\n                    crossref,\n                    this.crossref\n                    );\n            ChangeSupport cs = this.getChangeSupport(DocRef.CROSSREF);\n            synchronized(cs) {\n                cs.firePreChangeEvent(ce);\n                this.crossref = crossref;\n                cs.firePostChangeEvent(ce);\n            }\n        }\n    }\n    \n    // Hibernate requirement - not for public use.\n    void setAuthors(String authors) { this.authors = DocRefAuthor.Tools.parseAuthorString(authors); }\n    \n    // Hibernate requirement - not for public use.\n    void setLocation(String location) { this.location = location; }\n\n    // Hibernate requirement - not for public use.\n    void setTitle(String title) { this.title = title; }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public String getAuthors() { return DocRefAuthor.Tools.generateAuthorString(this.authors, true); }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public List getAuthorList() { return new ArrayList(this.authors); }\n    \n    /**\n     * {@inheritDoc}\n     * The string to be checksummed is constructed by concatenating the authors,\n     * title, and location in that order, with no space between. If any values are\n     * null they are substituted with the text \"&lt;undef>\".\n     * @see CRC64Checksum\n     */\n    public String getCRC() {\n        StringBuffer sb = new StringBuffer();\n        sb.append(this.getAuthors());\n        sb.append((this.title==null || this.title.equals(\"\"))?\"<undef>\":this.title);\n        sb.append((this.location==null || this.location.equals(\"\"))?\"<undef>\":this.location);\n        Checksum cs = new CRC64Checksum();\n        cs.update(sb.toString().getBytes(), 0, sb.length());\n        return cs.toString();\n    }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public String getRemark() { return this.remark; }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public CrossRef getCrossref() { return this.crossref; }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public String getLocation() { return this.location; }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public String getTitle() { return this.title; }\n    \n    /**\n     * {@inheritDoc}\n     * Document references are compared first by author, then by location, then\n     * by title. If Author and location are equal and this title is null, \n     * and theirs isn't, then this will return -1.\n     * For symmetry if our title is not null and theirs is then we return 1. If\n     * both are null then we return 0.\n     */\n    public int compareTo(Object o) {\n        if(o == this) return 0;\n        // Hibernate comparison - we haven't been populated yet\n        if (this.authors==null) return -1;\n        // Normal comparison\n        DocRef them = (DocRef)o;\n        if (!this.getAuthors().equals(them.getAuthors())) return this.getAuthors().compareTo(them.getAuthors());\n        else if (!this.getLocation().equals(them.getLocation())) return this.getLocation().compareTo(them.getLocation());\n        else if (this.getTitle()==null) {\n        \tif (them.getTitle()==null) return 0;\n            else return -1;\n        }\n        else if (this.getTitle() != null && them.getTitle() == null) return 1; //other cases are handled above.\n        else return this.getTitle().compareTo(them.getTitle());\n    }\n    \n    /**\n     * {@inheritDoc}\n     * Document references are equal if they have the same author and location and title.\n     */\n    public boolean equals(Object obj) {\n        if(this == obj) return true;\n        if (obj==null || !(obj instanceof DocRef)) return false;\n        // Hibernate comparison - we haven't been populated yet\n        if (this.authors==null) return false;\n        // Normal comparison\n        DocRef them = (DocRef)obj;\n        return (this.getAuthors().equals(them.getAuthors()) &&\n                this.getLocation().equals(them.getLocation()) &&\n                (\n                \t\t(this.getTitle()==them.getTitle()) ||\n                \t\t(this.getTitle()!=null && this.getTitle().equals(them.getTitle()))\n                )\n                );\n    }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public int hashCode() {\n        int code = 17;\n        // Hibernate comparison - we haven't been populated yet\n        if (this.authors==null) return code;\n        // Normal comparison\n        code = 37*code + this.getAuthors().hashCode();\n        code = 37*code + this.location.hashCode();\n        if (this.title!=null) code = 37*code + this.title.hashCode();\n        return code;\n    }\n    \n    /**\n     * {@inheritDoc}\n     * Form: \"authors; location\"\n     */\n    public String toString() {\n        return this.getAuthors()+\"; \"+this.getLocation();\n    }\n    \n    // Hibernate requirement - not for public use.\n    private Integer id;\n    \n    /**\n     * Gets the Hibernate ID. Should be used with caution.\n     * @return the Hibernate ID, if using Hibernate.\n     */\n    public Integer getId() { return this.id; }\n    \n    /**\n     * Sets the Hibernate ID. Should be used with caution.\n     * @param id the Hibernate ID, if using Hibernate.\n     */\n    public void setId(Integer id) { this.id = id;}\n    \n}\n\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojavax;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.zip.Checksum;\nimport org.biojava.utils.AbstractChangeable;\nimport org.biojava.utils.ChangeEvent;\nimport org.biojava.utils.ChangeSupport;\nimport org.biojava.utils.ChangeVetoException;\nimport org.biojavax.utils.CRC64Checksum;\n\n/**\n * A basic DocRef implementation.\n * @author Richard Holland\n * @author Mark Schreiber\n * @author George Waldon\n * @since 1.5\n */\n\npublic class SimpleDocRef extends AbstractChangeable implements DocRef {\n    \n    private CrossRef crossref;\n    private List authors;\n    private String title;\n    private String location;\n    private String remark;\n    \n    /**\n     * Creates a new document reference from the given immutable authors and\n     * location and title. Will throw exceptions if either authors or\n     * location are null, but a null title is allowable.\n     * @param authors The authors of the referenced document, as a set of DocRefAuthor instances.\n     * @param location The location of the document, eg. the journal name and page range.\n     */\n    public SimpleDocRef(List authors, String location) {\n    \tthis(authors, location, null);\n    }\n    \n    /**\n     * Creates a new document reference from the given immutable authors and\n     * location and title. Will throw exceptions if either authors or\n     * location are null, but a null title is allowable.\n     * @param authors The authors of the referenced document, as a string to be parsed\n     * with {@link DocRefAuthor.Tools#parseAuthorString(String)}.\n     * @param location The location of the document, eg. the journal name and page range.\n     */\n    public SimpleDocRef(String authors, String location) {\n    \tthis(DocRefAuthor.Tools.parseAuthorString(authors), location, null);\n    }\n    \n    /**\n     * Creates a new document reference from the given immutable authors and\n     * location and title. Will throw exceptions if either authors or\n     * location are null, but a null title is allowable.\n     * @param authors The authors of the referenced document, as a string to be parsed\n     * with {@link DocRefAuthor.Tools#parseAuthorString(String)}.\n     * @param location The location of the document, e.g. the journal name and page range.\n     * @param title The title of the document.\n     */\n    public SimpleDocRef(String authors, String location, String title) {\n    \tthis(DocRefAuthor.Tools.parseAuthorString(authors), location, title);\n    }\n    \n    /**\n     * Creates a new document reference from the given immutable authors and\n     * location and title. Will throw exceptions if either authors or\n     * location are null, but a null title is allowable.\n     * @param authors The authors of the referenced document, as a set of DocRefAuthor instances.\n     * @param location The location of the document, e.g. the journal name and page range.\n     * @param title The title of the document.\n     */\n    public SimpleDocRef(List authors, String location, String title) {\n        if (authors==null) throw new IllegalArgumentException(\"Authors cannot be null\");\n        if (location==null) throw new IllegalArgumentException(\"Location cannot be null\");\n        this.crossref = null;\n        this.authors = new ArrayList();\n        this.authors.addAll(authors);\n        this.title = title;\n        this.location = location;\n        this.remark = null;\n    }\n\n    /**\n     * Construct a doc ref with populated cross ref.\n     * @param authors\n     * @param location\n     * @param title\n     * @param crossRefKey\n     * @param crossRefValue\n     * @param crossRefVersion\n     */\n    public SimpleDocRef(String authors, String location, String title, String crossRefKey, String crossRefValue, Integer crossRefVersion) {\n    \tthis(DocRefAuthor.Tools.parseAuthorString(authors), location, title, crossRefKey, crossRefValue, crossRefVersion);\n    }\n    \n    /**\n     * Construct a doc ref with populated cross ref.\n     * @param authors\n     * @param location\n     * @param title\n     * @param crossRefKey\n     * @param crossRefValue\n     * @param crossRefVersion\n     */\n    public SimpleDocRef(List authors, String location, String title, String crossRefKey, String crossRefValue, Integer crossRefVersion) {\n    \tthis(authors, location, title);\n        this.setCrossref((CrossRef) RichObjectFactory.getObject(SimpleCrossRef.class, new Object[]{crossRefKey, crossRefValue, crossRefVersion}));\n    }\n    \n    // Hibernate requirement - not for public use.\n    protected SimpleDocRef() {}\n    \n    /**\n     * {@inheritDoc}\n     */\n    public void setRemark(String remark) throws ChangeVetoException {\n        if(this.remark!=null && this.remark.equals(remark)) return;\n        else if(this.remark==null && remark==null) return;\n                \n        if(!this.hasListeners(DocRef.REMARK)) {\n            this.remark = remark;\n        } else {\n            ChangeEvent ce = new ChangeEvent(\n                    this,\n                    DocRef.REMARK,\n                    remark,\n                    this.remark\n                    );\n            ChangeSupport cs = this.getChangeSupport(DocRef.REMARK);\n            synchronized(cs) {\n                cs.firePreChangeEvent(ce);\n                this.remark = remark;\n                cs.firePostChangeEvent(ce);\n            }\n        }\n    }\n    \n    // Hibernate requirement - not for public use.\n    void setCRC(String CRC) {} // ignore as field is a calculated value\n        \n    /**\n     * {@inheritDoc}\n     */\n    public void setCrossref(CrossRef crossref) throws ChangeVetoException {\n        if(this.crossref!=null && this.crossref.equals(crossref)) return;\n        else if(this.crossref==null && crossref==null) return;\n        \n        if(!this.hasListeners(DocRef.CROSSREF)) {\n            this.crossref = crossref;\n        } else {\n            ChangeEvent ce = new ChangeEvent(\n                    this,\n                    DocRef.CROSSREF,\n                    crossref,\n                    this.crossref\n                    );\n            ChangeSupport cs = this.getChangeSupport(DocRef.CROSSREF);\n            synchronized(cs) {\n                cs.firePreChangeEvent(ce);\n                this.crossref = crossref;\n                cs.firePostChangeEvent(ce);\n            }\n        }\n    }\n    \n    // Hibernate requirement - not for public use.\n    void setAuthors(String authors) { this.authors = DocRefAuthor.Tools.parseAuthorString(authors); }\n    \n    // Hibernate requirement - not for public use.\n    void setLocation(String location) { this.location = location; }\n\n    // Hibernate requirement - not for public use.\n    void setTitle(String title) { this.title = title; }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public String getAuthors() { return DocRefAuthor.Tools.generateAuthorString(this.authors, true); }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public List getAuthorList() { return new ArrayList(this.authors); }\n    \n    /**\n     * {@inheritDoc}\n     * The string to be checksummed is constructed by concatenating the authors,\n     * title, and location in that order, with no space between. If any values are\n     * null they are substituted with the text \"&lt;undef>\".\n     * @see CRC64Checksum\n     */\n    public String getCRC() {\n        StringBuffer sb = new StringBuffer();\n        sb.append(this.getAuthors());\n        sb.append((this.title==null || this.title.equals(\"\"))?\"<undef>\":this.title);\n        sb.append((this.location==null || this.location.equals(\"\"))?\"<undef>\":this.location);\n        Checksum cs = new CRC64Checksum();\n        cs.update(sb.toString().getBytes(), 0, sb.length());\n        return cs.toString();\n    }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public String getRemark() { return this.remark; }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public CrossRef getCrossref() { return this.crossref; }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public String getLocation() { return this.location; }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public String getTitle() { return this.title; }\n    \n    /**\n     * {@inheritDoc}\n     * Document references are compared first by author, then by location, then\n     * by title. If Author and location are equal and this title is null, \n     * and theirs isn't, then this will return -1.\n     * For symmetry if our title is not null and theirs is then we return 1. If\n     * both are null then we return 0.\n     */\n    public int compareTo(Object o) {\n        if(o == this) return 0;\n        // Hibernate comparison - we haven't been populated yet\n        if (this.authors==null) return -1;\n        // Normal comparison\n        DocRef them = (DocRef)o;\n        if (!this.getAuthors().equals(them.getAuthors())) return this.getAuthors().compareTo(them.getAuthors());\n        else if (!this.getLocation().equals(them.getLocation())) return this.getLocation().compareTo(them.getLocation());\n        else if (this.getTitle()==null) {\n        \tif (them.getTitle()==null) return 0;\n            else return -1;\n        }\n        else if (this.getTitle() != null && them.getTitle() == null) return 1; //other cases are handled above.\n        else return this.getTitle().compareTo(them.getTitle());\n    }\n    \n    /**\n     * {@inheritDoc}\n     * Document references are equal if they have the same author and location and title.\n     */\n    public boolean equals(Object obj) {\n        if(this == obj) return true;\n        if (obj==null || !(obj instanceof DocRef)) return false;\n        // Hibernate comparison - we haven't been populated yet\n        if (this.authors==null) return false;\n        // Normal comparison\n        DocRef them = (DocRef)obj;\n        return (this.getAuthors().equals(them.getAuthors()) &&\n                this.getLocation().equals(them.getLocation()) &&\n                (\n                \t\t(this.getTitle()==them.getTitle()) ||\n                \t\t(this.getTitle()!=null && this.getTitle().equals(them.getTitle()))\n                )\n                );\n    }\n    \n    /**\n     * {@inheritDoc}\n     */\n    public int hashCode() {\n        int code = 17;\n        // Hibernate comparison - we haven't been populated yet\n        if (this.authors==null) return code;\n        // Normal comparison\n        code = 37*code + this.getAuthors().hashCode();\n        code = 37*code + this.location.hashCode();\n        if (this.title!=null) code = 37*code + this.title.hashCode();\n        return code;\n    }\n    \n    /**\n     * {@inheritDoc}\n     * Form: \"authors; location\"\n     */\n    public String toString() {\n        return this.getAuthors()+\"; \"+this.getLocation();\n    }\n    \n    // Hibernate requirement - not for public use.\n    private Integer id;\n    \n    /**\n     * Gets the Hibernate ID. Should be used with caution.\n     * @return the Hibernate ID, if using Hibernate.\n     */\n    public Integer getId() { return this.id; }\n    \n    /**\n     * Sets the Hibernate ID. Should be used with caution.\n     * @param id the Hibernate ID, if using Hibernate.\n     */\n    public void setId(Integer id) { this.id = id;}\n    \n}\n\n","originTest":"/*\n * SimpleDocRefTest.java\n * JUnit based test\n *\n * Created on November 11, 2005, 1:37 PM\n */\n\npackage org.biojavax;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.zip.Checksum;\n\nimport junit.framework.Test;\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\n\nimport org.biojavax.utils.CRC64Checksum;\n\n\n/**\n *\n * @author Mark Schreiber\n */\npublic class SimpleDocRefTest extends TestCase {\n    SimpleDocRef ref;\n    List authors;\n    String location;\n    String title;\n    \n    public SimpleDocRefTest(String testName) {\n        super(testName);\n        authors = Collections.singletonList(\n                new SimpleDocRefAuthor(\"Hubert Hubertson\", false, false));\n        location = \"Journal of Voodo Virology (7) 222-265\";\n        title = \"ADE, myth or lie?\";\n    }\n\n    protected void setUp() throws Exception {\n        ref = new SimpleDocRef(authors, location, title);\n    }\n\n    protected void tearDown() throws Exception {\n        ref = null;\n    }\n\n    public static Test suite() {\n        TestSuite suite = new TestSuite(SimpleDocRefTest.class);\n        \n        return suite;\n    }\n\n    /**\n     * Test of setRemark method, of class org.biojavax.SimpleDocRef.\n     */\n    public void testSetRemark() {\n        System.out.println(\"testSetRemark\");\n        \n        //should be able to do this\n        try{\n            ref.setRemark(null);\n        }catch(Exception e){\n            fail(\"Should be able to set remark to null without\"+\n                    e.getClass().getName());\n        }\n        try{\n            String remark = \"Remarkable!\";\n            ref.setRemark(remark);\n            assertEquals(remark, ref.getRemark());\n        }catch(Exception e){\n            fail(\"Should be able to set remark without\"+\n                    e.getClass().getName());\n        }\n    }\n\n    /**\n     * Test of setTitle method, of class org.biojavax.SimpleDocRef.\n     */\n    \n    //this method is now private. don't need to test it\n//    public void testSetTitle() {\n//        System.out.println(\"testSetTitle\");\n//        \n//        //should be able to do this\n//        try{\n//            ref.setTitle(null);\n//        }catch(Exception e){\n//            fail(\"Should be able to set title to null without\"+\n//                    e.getClass().getName());\n//        }\n//        try{\n//            String title = \"Title\";\n//            ref.setTitle(title);\n//            assertEquals(title, ref.getTitle());\n//        }catch(Exception e){\n//            fail(\"Should be able to set title without\"+\n//                    e.getClass().getName());\n//        }\n//    }\n\n    /**\n     * Test of setCrossref method, of class org.biojavax.SimpleDocRef.\n     */\n    public void testSetCrossref() {\n        System.out.println(\"testSetCrossref\");\n        \n        try{\n            ref.setCrossref(null);\n        }catch(Exception e){\n            fail(\"Should be able to set crossref to null without\"+\n                    e.getClass().getName());\n        }\n        \n        try{\n            SimpleCrossRef xref = new SimpleCrossRef(\"another DB\",\"AC123456\", 1);\n            ref.setCrossref(xref);\n            assertEquals(xref, ref.getCrossref());\n        }catch(Exception e){\n            fail(\"Should be able to set crossref without\"+\n                    e.getClass().getName());\n        }\n    }\n\n    /**\n     * Test of getAuthors method, of class org.biojavax.SimpleDocRef.\n     */\n    public void testGetAuthors() {\n        System.out.println(\"testGetAuthors\");\n        \n        assertNotNull(ref.getAuthors());\n    }\n\n    /**\n     * Test of getAuthorList method, of class org.biojavax.SimpleDocRef.\n     */\n    public void testGetAuthorList() {\n        System.out.println(\"testGetAuthorList\");\n        \n        assertEquals(DocRefAuthor.Tools.generateAuthorString(authors,true),\n                ref.getAuthors());\n    }\n\n    /**\n     * Test of getCRC method, of class org.biojavax.SimpleDocRef.\n     */\n    public void testGetCRC() {\n        System.out.println(\"testGetCRC\");\n        \n        SimpleDocRef ref2 = new SimpleDocRef(authors, location, title);\n        assertNotNull(ref.getCRC());\n        assertEquals(ref.getCRC(), ref2.getCRC());\n        \n        StringBuffer sb = new StringBuffer();\n        sb.append(ref.getAuthors());\n        sb.append((ref.getTitle() ==null || ref.getTitle().equals(\"\"))?\"<undef>\":ref.getTitle());\n        sb.append((ref.getLocation() ==null || ref.getLocation().equals(\"\"))?\"<undef>\":ref.getLocation());\n        Checksum cs = new CRC64Checksum();\n        cs.update(sb.toString().getBytes(), 0, sb.length());\n        \n        assertEquals(cs.toString(), ref.getCRC());\n    }\n\n    /**\n     * Test of getRemark method, of class org.biojavax.SimpleDocRef.\n     */\n    public void testGetRemark() {\n        System.out.println(\"testGetRemark\");\n        //should be null until intitialized\n        assertNull(ref.getRemark());\n    }\n\n    /**\n     * Test of getCrossref method, of class org.biojavax.SimpleDocRef.\n     */\n    public void testGetCrossref() {\n        System.out.println(\"testGetCrossref\");\n        //should be null until intitialized\n        assertNull(ref.getCrossref());\n    }\n\n    /**\n     * Test of getLocation method, of class org.biojavax.SimpleDocRef.\n     */\n    public void testGetLocation() {\n        System.out.println(\"testGetLocation\");\n        \n        assertNotNull(ref.getLocation());\n        assertEquals(ref.getLocation(), location);\n    }\n\n    /**\n     * Test of getTitle method, of class org.biojavax.SimpleDocRef.\n     */\n    public void testGetTitle() {\n        System.out.println(\"testGetTitle\");\n        \n        //should be equal to the set value\n        assertEquals(this.title ,ref.getTitle());\n    }\n\n    /**\n     * Test of compareTo method, of class org.biojavax.SimpleDocRef.\n     */\n    public void testCompareTo() {\n        System.out.println(\"testCompareTo\");\n        \n        DocRef before = new SimpleDocRef(authors, \"A\", title);\n        assertTrue(before.compareTo(ref) < 0);\n        assertTrue(ref.compareTo(before) > 0);\n        before = new SimpleDocRef(Collections.singletonList(\n                new SimpleDocRefAuthor(\"A\", false, false)), location, title);\n        assertTrue(before.compareTo(ref) < 0);\n        assertTrue(ref.compareTo(before) > 0);\n        before = new SimpleDocRef(authors, location, \"AAA\");\n        assertTrue(before.compareTo(ref) < 0);\n        assertTrue(ref.compareTo(before) > 0);\n        before = new SimpleDocRef(authors, location, null);\n        assertTrue(before.compareTo(ref) < 0);\n        assertTrue(ref.compareTo(before) > 0);\n        \n        DocRef equal = new SimpleDocRef(authors, location, title);\n        assertTrue(ref.compareTo(ref) ==0);\n        assertTrue(ref.compareTo(equal) ==0);\n        assertTrue(equal.compareTo(ref) ==0);\n    }\n\n    /**\n     * Test of equals method, of class org.biojavax.SimpleDocRef.\n     */\n    public void testEquals() {\n        System.out.println(\"testEquals\");\n        \n        assertTrue(ref.equals(ref));\n        assertTrue(ref.equals(new SimpleDocRef(authors, location, title)));\n        assertTrue(new SimpleDocRef(authors, location, title).equals(ref));\n        \n        assertFalse(new SimpleDocRef(authors, \"A\", title).equals(ref));\n        assertFalse(ref.equals(new SimpleDocRef(authors, \"A\", title)));\n        assertFalse(ref.equals(new SimpleDocRef(authors, location, \"The long awaited biojava book!\")));\n    }\n\n    /**\n     * Test of hashCode method, of class org.biojavax.SimpleDocRef.\n     */\n    public void testHashCode() {\n        System.out.println(\"testHashCode\");\n        assertEquals(ref.hashCode(), new SimpleDocRef(authors, location, title).hashCode());\n    }\n\n    /**\n     * Test of toString method, of class org.biojavax.SimpleDocRef.\n     */\n    public void testToString() {\n        System.out.println(\"testToString\");\n        \n        assertEquals(\"Hubert Hubertson; \"+location, ref.toString());\n    }\n    \n}\n","changedTest":"","commitMessage":"Parsing of protein files in EMBL  format (see #3137).\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8253 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"","allZero":false}