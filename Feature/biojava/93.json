{"repository":"biojava","prod_path":"biojava3-core/src/main/java/org/biojava3/core/sequence/io/GenbankReader.java","test_path":"biojava3-core/src/test/java/org/biojava3/core/sequence/io/GenbankReaderTest.java","prod_time":"2014-10-22 02:06:27","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":1,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"24b4d4fbaaef2e9b02c5e926ccc06b95333a19e8","test_commitID":"","isfound":"not found test change","originPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n * \r\n * @author Scooter Willis ;lt;willishf at gmail dot com&gt;\r\n * @author Karl Nicholas <github:karlnicholas>\r\n * @author Paolo Pavan\r\n * \r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n * Created on 01-21-2010\r\n */\r\npackage org.biojava3.core.sequence.io;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.HashMap;\r\nimport java.util.LinkedHashMap;\r\n\r\nimport org.biojava3.core.sequence.DNASequence;\r\nimport org.biojava3.core.sequence.ProteinSequence;\r\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\r\nimport org.biojava3.core.sequence.compound.AminoAcidCompoundSet;\r\nimport org.biojava3.core.sequence.compound.DNACompoundSet;\r\nimport org.biojava3.core.sequence.compound.NucleotideCompound;\r\nimport org.biojava3.core.sequence.features.AbstractFeature;\r\nimport org.biojava3.core.sequence.io.template.SequenceCreatorInterface;\r\nimport org.biojava3.core.sequence.io.template.SequenceHeaderParserInterface;\r\nimport org.biojava3.core.sequence.template.AbstractSequence;\r\nimport org.biojava3.core.sequence.template.Compound;\r\n\r\n/**\r\n * Use GenbankReaderHelper as an example of how to use this class where GenbankReaderHelper should be the\r\n * primary class used to read Genbank files\r\n *\r\n */\r\npublic class GenbankReader<S extends AbstractSequence<C>, C extends Compound> {\r\n\r\n    private SequenceCreatorInterface<C> sequenceCreator;\r\n    private GenbankSequenceParser<S,C> genbankParser;\r\n    private InputStream inputStream;\r\n    \r\n    /**\r\n     * If you are going to use FileProxyProteinSequenceCreator then do not use this constructor because we need details about\r\n     * local file offsets for quick reads. InputStreams does not give you the name of the stream to access quickly via file seek. A seek in\r\n     * an inputstream is forced to read all the data so you don't gain anything.\r\n     * @param br\r\n     * @param headerParser\r\n     * @param sequenceCreator\r\n     */\r\n    public GenbankReader(InputStream is, SequenceHeaderParserInterface<S,C> headerParser, SequenceCreatorInterface<C> sequenceCreator) {\r\n        this.sequenceCreator = sequenceCreator;\r\n        this.inputStream = is;\r\n    \tgenbankParser = new GenbankSequenceParser<S,C>();\r\n    }\r\n\r\n    /**\r\n     * If you are going to use the FileProxyProteinSequenceCreator then you\r\n     * need to use this constructor because we need details about\r\n     * the location of the file.\r\n     * @param file\r\n     * @param headerParser\r\n     * @param sequenceCreator\r\n     * @throws FileNotFoundException if the file does not exist, is a directory \r\n     * \trather than a regular file, or for some other reason cannot be opened\r\n     * \tfor reading.\r\n     * @throws SecurityException if a security manager exists and its checkRead\r\n     * \tmethod denies read access to the file.\r\n     */\r\n    public GenbankReader(\r\n    \t\tFile file, \r\n    \t\tSequenceHeaderParserInterface<S,C> headerParser, \r\n    \t\tSequenceCreatorInterface<C> sequenceCreator\r\n    \t\t) throws FileNotFoundException {\r\n    \t\r\n        inputStream = new FileInputStream(file);\r\n        this.sequenceCreator = sequenceCreator;\r\n    \tgenbankParser = new GenbankSequenceParser<S,C>();\r\n    }\r\n\r\n    /**\r\n     * The parsing is done in this method.<br>\r\n     * This method tries to process all the available Genbank records \r\n     * in the File or InputStream, closes the underlying resource, \r\n     * and return the results in {@link LinkedHashMap}.<br>\r\n     * You don't need to call {@link #close()} after calling this method.\r\n     * @see #process(int)\r\n     * @return {@link HashMap} containing all the parsed Genbank records \r\n     * present, starting current fileIndex onwards.\r\n     * @throws Exception \r\n     */\r\n    public LinkedHashMap<String,S> process() throws Exception {\r\n    \tLinkedHashMap<String,S> sequences = process(-1);\r\n    \treturn sequences;\r\n    }\r\n\r\n    /**\r\n     * This method tries to parse maximum <code>max</code> records from\r\n     * the open File or InputStream, and leaves the underlying resource open.<br>\r\n     * Subsequent calls to the same method continue parsing the rest of the file.<br>\r\n     * This is particularly useful when dealing with very big data files,\r\n     * (e.g. NCBI nr database), which can't fit into memory and will take long\r\n     * time before the first result is available.<br>\r\n     * <b>N.B.</b>\r\n     * <ul>\r\n     * <li>This method ca't be called after calling its NO-ARGUMENT twin.</li> \r\n     * <li>remember to close the underlying resource when you are done.</li> \r\n     * </ul>\r\n     * @see #process()\r\n     * @author Amr AL-Hossary\r\n     * @since 3.0.6\r\n     * @param max maximum number of records to return, <code>-1</code> for infinity.\r\n     * @return {@link HashMap} containing maximum <code>max</code> parsed Genbank records \r\n     * present, starting current fileIndex onwards.\r\n     * @throws Exception \r\n     */\r\n    public LinkedHashMap<String,S> process(int max) throws Exception {\r\n        LinkedHashMap<String,S> sequences = new LinkedHashMap<String,S>();\r\n        @SuppressWarnings(\"unchecked\")\r\n        S sequence = (S) sequenceCreator.getSequence(genbankParser.getSequence(new BufferedReader(new InputStreamReader(inputStream)), 0), 0);\r\n        genbankParser.getSequenceHeaderParser().parseHeader(genbankParser.getHeader(), sequence);\r\n        //genbankParser.getSequenceFeatureParser().parseFeatures(sequence);\r\n        for (String k: genbankParser.getFeatures().keySet()){\r\n            for (AbstractFeature f: genbankParser.getFeatures(k)){\r\n                f.getLocations().setSequence(sequence);\r\n                sequence.addFeature(f);\r\n            }\r\n        }\r\n        \r\n    \tsequences.put(sequence.getAccession().getID(), sequence);\r\n    \tclose();\r\n        return sequences;\r\n    }\r\n\r\n\tpublic void close() throws IOException {\r\n\t\tinputStream.close();\r\n\t}\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        String proteinFile = \"src/test/resources/BondFeature.gb\";\r\n        FileInputStream is = new FileInputStream(proteinFile);\r\n\r\n        GenbankReader<ProteinSequence, AminoAcidCompound> proteinReader = new GenbankReader<ProteinSequence, AminoAcidCompound>(is, new GenericGenbankHeaderParser<ProteinSequence,AminoAcidCompound>(), new ProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet()));\r\n        LinkedHashMap<String,ProteinSequence> proteinSequences = proteinReader.process();\r\n        System.out.println(proteinSequences);\r\n\r\n        String inputFile = \"src/test/resources/NM_000266.gb\";\r\n        is = new FileInputStream(inputFile);\r\n        GenbankReader<DNASequence, NucleotideCompound> dnaReader = new GenbankReader<DNASequence, NucleotideCompound>(is, new GenericGenbankHeaderParser<DNASequence,NucleotideCompound>(), new DNASequenceCreator(DNACompoundSet.getDNACompoundSet()));\r\n        LinkedHashMap<String,DNASequence> dnaSequences = dnaReader.process();\r\n        System.out.println(dnaSequences);\r\n        \r\n        String crazyFile = \"src/test/resources/CraftedFeature.gb\";\r\n        is = new FileInputStream(crazyFile);\r\n        GenbankReader<DNASequence, NucleotideCompound> crazyReader = new GenbankReader<DNASequence, NucleotideCompound>(is, new GenericGenbankHeaderParser<DNASequence,NucleotideCompound>(), new DNASequenceCreator(DNACompoundSet.getDNACompoundSet()));\r\n        LinkedHashMap<String,DNASequence> crazyAnnotatedSequences = crazyReader.process();\r\n        \r\n        is.close();\r\n        System.out.println(crazyAnnotatedSequences);\r\n    }\r\n\r\n}\r\n\r\n","changedPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n * \r\n * @author Scooter Willis ;lt;willishf at gmail dot com&gt;\r\n * @author Karl Nicholas <github:karlnicholas>\r\n * @author Paolo Pavan\r\n * \r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n * Created on 01-21-2010\r\n */\r\npackage org.biojava3.core.sequence.io;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.HashMap;\r\nimport java.util.LinkedHashMap;\r\n\r\nimport org.biojava3.core.sequence.DNASequence;\r\nimport org.biojava3.core.sequence.ProteinSequence;\r\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\r\nimport org.biojava3.core.sequence.compound.AminoAcidCompoundSet;\r\nimport org.biojava3.core.sequence.compound.DNACompoundSet;\r\nimport org.biojava3.core.sequence.compound.NucleotideCompound;\r\nimport org.biojava3.core.sequence.features.AbstractFeature;\r\nimport org.biojava3.core.sequence.io.template.SequenceCreatorInterface;\r\nimport org.biojava3.core.sequence.io.template.SequenceHeaderParserInterface;\r\nimport org.biojava3.core.sequence.template.AbstractSequence;\r\nimport org.biojava3.core.sequence.template.Compound;\r\n\r\n/**\r\n * Use GenbankReaderHelper as an example of how to use this class where GenbankReaderHelper should be the\r\n * primary class used to read Genbank files\r\n *\r\n */\r\npublic class GenbankReader<S extends AbstractSequence<C>, C extends Compound> {\r\n\r\n    private SequenceCreatorInterface<C> sequenceCreator;\r\n    private GenbankSequenceParser<S,C> genbankParser;\r\n    private InputStream inputStream;\r\n    \r\n    /**\r\n     * If you are going to use FileProxyProteinSequenceCreator then do not use this constructor because we need details about\r\n     * local file offsets for quick reads. InputStreams does not give you the name of the stream to access quickly via file seek. A seek in\r\n     * an inputstream is forced to read all the data so you don't gain anything.\r\n     * @param br\r\n     * @param headerParser\r\n     * @param sequenceCreator\r\n     */\r\n    public GenbankReader(InputStream is, SequenceHeaderParserInterface<S,C> headerParser, SequenceCreatorInterface<C> sequenceCreator) {\r\n        this.sequenceCreator = sequenceCreator;\r\n        this.inputStream = is;\r\n    \tgenbankParser = new GenbankSequenceParser<S,C>();\r\n    }\r\n\r\n    /**\r\n     * If you are going to use the FileProxyProteinSequenceCreator then you\r\n     * need to use this constructor because we need details about\r\n     * the location of the file.\r\n     * @param file\r\n     * @param headerParser\r\n     * @param sequenceCreator\r\n     * @throws FileNotFoundException if the file does not exist, is a directory \r\n     * \trather than a regular file, or for some other reason cannot be opened\r\n     * \tfor reading.\r\n     * @throws SecurityException if a security manager exists and its checkRead\r\n     * \tmethod denies read access to the file.\r\n     */\r\n    public GenbankReader(\r\n    \t\tFile file, \r\n    \t\tSequenceHeaderParserInterface<S,C> headerParser, \r\n    \t\tSequenceCreatorInterface<C> sequenceCreator\r\n    \t\t) throws FileNotFoundException {\r\n    \t\r\n        inputStream = new FileInputStream(file);\r\n        this.sequenceCreator = sequenceCreator;\r\n    \tgenbankParser = new GenbankSequenceParser<S,C>();\r\n    }\r\n\r\n    /**\r\n     * The parsing is done in this method.<br>\r\n     * This method tries to process all the available Genbank records \r\n     * in the File or InputStream, closes the underlying resource, \r\n     * and return the results in {@link LinkedHashMap}.<br>\r\n     * You don't need to call {@link #close()} after calling this method.\r\n     * @see #process(int)\r\n     * @return {@link HashMap} containing all the parsed Genbank records \r\n     * present, starting current fileIndex onwards.\r\n     * @throws Exception \r\n     */\r\n    public LinkedHashMap<String,S> process() throws Exception {\r\n    \tLinkedHashMap<String,S> sequences = process(-1);\r\n    \treturn sequences;\r\n    }\r\n\r\n    /**\r\n     * This method tries to parse maximum <code>max</code> records from\r\n     * the open File or InputStream, and leaves the underlying resource open.<br>\r\n     * Subsequent calls to the same method continue parsing the rest of the file.<br>\r\n     * This is particularly useful when dealing with very big data files,\r\n     * (e.g. NCBI nr database), which can't fit into memory and will take long\r\n     * time before the first result is available.<br>\r\n     * <b>N.B.</b>\r\n     * <ul>\r\n     * <li>This method ca't be called after calling its NO-ARGUMENT twin.</li> \r\n     * <li>remember to close the underlying resource when you are done.</li> \r\n     * </ul>\r\n     * @see #process()\r\n     * @author Amr AL-Hossary\r\n     * @since 3.0.6\r\n     * @param max maximum number of records to return, <code>-1</code> for infinity.\r\n     * @return {@link HashMap} containing maximum <code>max</code> parsed Genbank records \r\n     * present, starting current fileIndex onwards.\r\n     * @throws Exception \r\n     */\r\n    public LinkedHashMap<String,S> process(int max) throws Exception {\r\n        LinkedHashMap<String,S> sequences = new LinkedHashMap<String,S>();\r\n        @SuppressWarnings(\"unchecked\")\r\n        S sequence = (S) sequenceCreator.getSequence(genbankParser.getSequence(new BufferedReader(new InputStreamReader(inputStream)), 0), 0);\r\n        genbankParser.getSequenceHeaderParser().parseHeader(genbankParser.getHeader(), sequence);\r\n        //genbankParser.getSequenceFeatureParser().parseFeatures(sequence);\r\n        for (String k: genbankParser.getFeatures().keySet()){\r\n            for (AbstractFeature f: genbankParser.getFeatures(k)){\r\n                //f.getLocations().setSequence(sequence);\r\n                sequence.addFeature(f);\r\n            }\r\n        }\r\n        \r\n    \tsequences.put(sequence.getAccession().getID(), sequence);\r\n    \tclose();\r\n        return sequences;\r\n    }\r\n\r\n\tpublic void close() throws IOException {\r\n\t\tinputStream.close();\r\n\t}\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        String proteinFile = \"src/test/resources/BondFeature.gb\";\r\n        FileInputStream is = new FileInputStream(proteinFile);\r\n\r\n        GenbankReader<ProteinSequence, AminoAcidCompound> proteinReader = new GenbankReader<ProteinSequence, AminoAcidCompound>(is, new GenericGenbankHeaderParser<ProteinSequence,AminoAcidCompound>(), new ProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet()));\r\n        LinkedHashMap<String,ProteinSequence> proteinSequences = proteinReader.process();\r\n        System.out.println(proteinSequences);\r\n\r\n        String inputFile = \"src/test/resources/NM_000266.gb\";\r\n        is = new FileInputStream(inputFile);\r\n        GenbankReader<DNASequence, NucleotideCompound> dnaReader = new GenbankReader<DNASequence, NucleotideCompound>(is, new GenericGenbankHeaderParser<DNASequence,NucleotideCompound>(), new DNASequenceCreator(DNACompoundSet.getDNACompoundSet()));\r\n        LinkedHashMap<String,DNASequence> dnaSequences = dnaReader.process();\r\n        System.out.println(dnaSequences);\r\n        \r\n        String crazyFile = \"src/test/resources/CraftedFeature.gb\";\r\n        is = new FileInputStream(crazyFile);\r\n        GenbankReader<DNASequence, NucleotideCompound> crazyReader = new GenbankReader<DNASequence, NucleotideCompound>(is, new GenericGenbankHeaderParser<DNASequence,NucleotideCompound>(), new DNASequenceCreator(DNACompoundSet.getDNACompoundSet()));\r\n        LinkedHashMap<String,DNASequence> crazyAnnotatedSequences = crazyReader.process();\r\n        \r\n        is.close();\r\n        System.out.println(crazyAnnotatedSequences);\r\n    }\r\n\r\n}\r\n\r\n","originTest":"/*\r\n * To change this template, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\npackage org.biojava3.core.sequence.io;\r\n\r\nimport static org.junit.Assert.assertNotNull;\r\n\r\nimport java.io.InputStream;\r\nimport java.util.LinkedHashMap;\r\n\r\nimport org.biojava3.core.sequence.DNASequence;\r\nimport org.biojava3.core.sequence.ProteinSequence;\r\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\r\nimport org.biojava3.core.sequence.compound.AminoAcidCompoundSet;\r\nimport org.biojava3.core.sequence.compound.DNACompoundSet;\r\nimport org.biojava3.core.sequence.compound.NucleotideCompound;\r\nimport org.junit.After;\r\nimport org.junit.AfterClass;\r\nimport org.junit.Before;\r\nimport org.junit.BeforeClass;\r\nimport org.junit.Test;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\n/**\r\n *\r\n * @author Scooter Willis <willishf at gmail dot com>\r\n */\r\npublic class GenbankReaderTest {\r\n\r\n\tprivate final static Logger logger = LoggerFactory.getLogger(GenbankReaderTest.class);\r\n\r\n\tpublic GenbankReaderTest() {\r\n\t}\r\n\r\n\t@BeforeClass\r\n\tpublic static void setUpClass() throws Exception {\r\n\t}\r\n\r\n\t@AfterClass\r\n\tpublic static void tearDownClass() throws Exception {\r\n\t}\r\n\r\n\t@Before\r\n\tpublic void setUp() {\r\n\t}\r\n\r\n\t@After\r\n\tpublic void tearDown() {\r\n\t}\r\n\r\n\t/**\r\n\t * Test of process method, of class GenbankReader.\r\n\t */\r\n\t@Test\r\n\tpublic void testProcess() throws Exception {\r\n\r\n\t\tlogger.info(\"process protein\");\r\n\t\tInputStream inStream = this.getClass().getResourceAsStream(\"/BondFeature.gb\");\r\n\t\tassertNotNull(inStream);\r\n\t\t\r\n\t\tGenbankReader<ProteinSequence,AminoAcidCompound> GenbankProtein = \r\n\t\t\t\tnew GenbankReader<ProteinSequence,AminoAcidCompound>(\r\n\t\t\t\t\t\tinStream, \r\n\t\t\t\t\t\tnew GenericGenbankHeaderParser<ProteinSequence,AminoAcidCompound>(), \r\n\t\t\t\t\t\tnew ProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet())\r\n\t\t\t\t\t\t);\r\n\t\t@SuppressWarnings(\"unused\")\r\n\t\tLinkedHashMap<String,ProteinSequence> proteinSequences = GenbankProtein.process();\r\n\t\tinStream.close();\r\n\r\n\t\tlogger.info(\"process DNA\");\r\n\t\tinStream = this.getClass().getResourceAsStream(\"/NM_000266.gb\");\r\n\t\tassertNotNull(inStream);\r\n\r\n\t\tGenbankReader<DNASequence,NucleotideCompound> GenbankDNA = \r\n\t\t\t\tnew GenbankReader<DNASequence,NucleotideCompound>(\r\n\t\t\t\t\t\tinStream,\r\n\t\t\t\t\t\tnew GenericGenbankHeaderParser<DNASequence,NucleotideCompound>(), \r\n\t\t\t\t\t\tnew DNASequenceCreator(DNACompoundSet.getDNACompoundSet())\r\n\t\t\t\t\t\t);\r\n\t\t@SuppressWarnings(\"unused\")\r\n\t\tLinkedHashMap<String,DNASequence> dnaSequences = GenbankDNA.process();\r\n\t\tinStream.close();\r\n\t}\r\n\t\r\n}\r\n","changedTest":"","commitMessage":"changing signature AbstractFeature.setLocation(AbstractLocation l)\n","test_commitMessage":"","allZero":false}