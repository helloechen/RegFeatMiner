{"repository":"biojava","prod_path":"biojava-phylo/src/main/java/org/biojava/nbio/phylo/ForesterWrapper.java","test_path":"biojava-phylo/src/test/java/org/biojava/nbio/phylo/TestForesterWrapper.java","prod_time":"2016-03-09 18:16:02","test_time":"2016-03-09 18:16:02","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"f4e725f97a2afd4c174e91e5c1f1b2a659084449","test_commitID":"f4e725f97a2afd4c174e91e5c1f1b2a659084449","isfound":"found test change","originPro":"package org.biojava.nbio.phylo;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport org.biojava.nbio.core.sequence.MultipleSequenceAlignment;\nimport org.biojava.nbio.core.sequence.io.FastaWriter;\nimport org.biojava.nbio.core.sequence.io.template.FastaHeaderFormatInterface;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\nimport org.forester.evoinference.matrix.distance.BasicSymmetricalDistanceMatrix;\nimport org.forester.io.parsers.FastaParser;\nimport org.forester.io.writers.PhylogenyWriter;\nimport org.forester.msa.Msa;\nimport org.forester.phylogeny.Phylogeny;\n\n/**\n * This class contains wrapper methods for communication between BioJava and\n * forester (e.g, Data Structure conversion).\n * \n * @author Aleix Lafita\n * @since 4.1.1\n *\n */\npublic class ForesterWrapper {\n\n\t/** Prevent instantiation */\n\tprivate ForesterWrapper() {\n\t}\n\n\t/**\n\t * Convert a BioJava {@link MultipleSequenceAlignment} to a forester\n\t * {@link Msa}. The easiest way to convert them is writting the msa as a\n\t * FASTA file and then parsing it with the forester {@link FastaParser}.\n\t * \n\t * @param msa\n\t *            BioJava MultipleSequenceAlignment\n\t * @return forester Msa object\n\t * @throws IOException \n\t *             if the conversion was not possible\n\t */\n\tpublic static <C extends Sequence<D>, D extends Compound> Msa convert(\n\t\t\tMultipleSequenceAlignment<C, D> msa) throws IOException {\n\t\t\n\t\t// Convert the biojava MSA to a FASTA String\n\t\tOutputStream os = new ByteArrayOutputStream();\n\t\tFastaWriter<C, D> fastaW = new FastaWriter<C, D>(os,\n\t\t\t\tmsa.getAlignedSequences(),\n\t\t\t\tnew FastaHeaderFormatInterface<C, D>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getHeader(C sequence) {\n\t\t\t\t\t\treturn sequence.getAccession().toString();\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\n\t\tfastaW.process();\n\t\tString fastaMSA = os.toString();\n\n\t\t// Parse the FASTA file in forester\n\t\treturn FastaParser.parseMsa(fastaMSA);\n\t}\n\n\t/**\n\t * Convert a Phylogenetic tree to its Newick representation, so that it can\n\t * be exported to an external application.\n\t * \n\t * @param phylo\n\t *            Phylogeny phylogenetic tree\n\t * @param writeDistances\n\t *            write the branch lengths if true\n\t * @return\n\t * @throws IOException\n\t */\n\tpublic static String getNewickString(Phylogeny phylo,\n\t\t\tboolean writeDistances) throws IOException {\n\n\t\tPhylogenyWriter w = new PhylogenyWriter();\n\t\tStringBuffer newickString = w.toNewHampshire(phylo, writeDistances);\n\t\treturn newickString.toString();\n\t}\n\n\t/**\n\t * Helper function to clone a forester symmetrical DistanceMatrix.\n\t * \n\t * @param distM\n\t *            forester symmetrical DistanceMatrix\n\t * @return identical copy of the forester symmetrical DistanceMatrix\n\t */\n\tpublic static BasicSymmetricalDistanceMatrix cloneDM(\n\t\t\tBasicSymmetricalDistanceMatrix distM) {\n\n\t\tint n = distM.getSize();\n\t\tBasicSymmetricalDistanceMatrix cloneDM = \n\t\t\t\tnew BasicSymmetricalDistanceMatrix(n);\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcloneDM.setIdentifier(i, distM.getIdentifier(i));\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tcloneDM.setValue(i, j, distM.getValue(i, j));\n\t\t\t}\n\t\t}\n\t\treturn cloneDM;\n\t}\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.phylo;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport org.biojava.nbio.core.sequence.MultipleSequenceAlignment;\nimport org.biojava.nbio.core.sequence.io.FastaWriter;\nimport org.biojava.nbio.core.sequence.io.template.FastaHeaderFormatInterface;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\nimport org.forester.evoinference.matrix.distance.BasicSymmetricalDistanceMatrix;\nimport org.forester.io.parsers.FastaParser;\nimport org.forester.io.writers.PhylogenyWriter;\nimport org.forester.msa.Msa;\nimport org.forester.phylogeny.Phylogeny;\n\n/**\n * This class contains wrapper methods for communication between BioJava and\n * forester (e.g, Data Structure conversion).\n * \n * @author Aleix Lafita\n * @since 4.1.1\n *\n */\npublic class ForesterWrapper {\n\n\t/** Prevent instantiation */\n\tprivate ForesterWrapper() {\n\t}\n\n\t/**\n\t * Convert a BioJava {@link MultipleSequenceAlignment} to a forester\n\t * {@link Msa}. The easiest way to convert them is writting the msa as a\n\t * FASTA file and then parsing it with the forester {@link FastaParser}.\n\t * \n\t * @param msa\n\t *            BioJava MultipleSequenceAlignment\n\t * @return forester Msa object\n\t * @throws IOException \n\t *             if the conversion was not possible\n\t */\n\tpublic static <C extends Sequence<D>, D extends Compound> Msa convert(\n\t\t\tMultipleSequenceAlignment<C, D> msa) throws IOException {\n\t\t\n\t\t// Convert the biojava MSA to a FASTA String\n\t\tOutputStream os = new ByteArrayOutputStream();\n\t\tFastaWriter<C, D> fastaW = new FastaWriter<C, D>(os,\n\t\t\t\tmsa.getAlignedSequences(),\n\t\t\t\tnew FastaHeaderFormatInterface<C, D>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getHeader(C sequence) {\n\t\t\t\t\t\treturn sequence.getAccession().toString();\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\n\t\tfastaW.process();\n\t\tString fastaMSA = os.toString();\n\n\t\t// Parse the FASTA file in forester\n\t\treturn FastaParser.parseMsa(fastaMSA);\n\t}\n\n\t/**\n\t * Convert a Phylogenetic tree to its Newick representation, so that it can\n\t * be exported to an external application.\n\t * \n\t * @param phylo\n\t *            Phylogeny phylogenetic tree\n\t * @param writeDistances\n\t *            write the branch lengths if true\n\t * @return\n\t * @throws IOException\n\t */\n\tpublic static String getNewickString(Phylogeny phylo,\n\t\t\tboolean writeDistances) throws IOException {\n\n\t\tPhylogenyWriter w = new PhylogenyWriter();\n\t\tStringBuffer newickString = w.toNewHampshire(phylo, writeDistances);\n\t\treturn newickString.toString();\n\t}\n\n\t/**\n\t * Helper function to clone a forester symmetrical DistanceMatrix.\n\t * \n\t * @param distM\n\t *            forester symmetrical DistanceMatrix\n\t * @return identical copy of the forester symmetrical DistanceMatrix\n\t */\n\tpublic static BasicSymmetricalDistanceMatrix cloneDM(\n\t\t\tBasicSymmetricalDistanceMatrix distM) {\n\n\t\tint n = distM.getSize();\n\t\tBasicSymmetricalDistanceMatrix cloneDM = \n\t\t\t\tnew BasicSymmetricalDistanceMatrix(n);\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcloneDM.setIdentifier(i, distM.getIdentifier(i));\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tcloneDM.setValue(i, j, distM.getValue(i, j));\n\t\t\t}\n\t\t}\n\t\treturn cloneDM;\n\t}\n\n}\n","originTest":"package org.biojava.nbio.phylo;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.LinkedHashMap;\n\nimport org.biojava.nbio.core.sequence.MultipleSequenceAlignment;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.FastaReader;\nimport org.biojava.nbio.core.sequence.io.FastaWriter;\nimport org.biojava.nbio.core.sequence.io.GenericFastaHeaderParser;\nimport org.biojava.nbio.core.sequence.io.ProteinSequenceCreator;\nimport org.biojava.nbio.core.sequence.io.template.FastaHeaderFormatInterface;\nimport org.forester.msa.Msa;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\n/**\n * Test the BioJava-forester wrapper methods.\n * \n * @author Aleix Lafita\n *\n */\npublic class TestForesterWrapper {\n\n\t@Test\n\tpublic void testMSAconversion() throws Exception {\n\n\t\t// Load the msa FASTA file into a BioJava MSA object\n\t\tInputStream inStream = TestForesterWrapper.class\n\t\t\t\t.getResourceAsStream(\"/1u6d_symm.fasta\");\n\n\t\tFastaReader<ProteinSequence, AminoAcidCompound> fastaReader = \n\t\t\t\tnew FastaReader<ProteinSequence, AminoAcidCompound>(\n\t\t\t\tinStream,\n\t\t\t\tnew GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>(),\n\t\t\t\tnew ProteinSequenceCreator(AminoAcidCompoundSet\n\t\t\t\t\t\t.getAminoAcidCompoundSet()));\n\n\t\tLinkedHashMap<String, ProteinSequence> proteinSequences = fastaReader\n\t\t\t\t.process();\n\n\t\tinStream.close();\n\n\t\tMultipleSequenceAlignment<ProteinSequence, AminoAcidCompound> msa = \n\t\t\t\tnew MultipleSequenceAlignment<ProteinSequence, AminoAcidCompound>();\n\n\t\tString expected = \"\";\n\t\tfor (ProteinSequence proteinSequence : proteinSequences.values()) {\n\t\t\tmsa.addAlignedSequence(proteinSequence);\n\t\t\texpected += \">\" + proteinSequence.getOriginalHeader() + \"\\n\"\n\t\t\t\t\t+ proteinSequence.toString() + \"\\n\";\n\t\t}\n\n\t\t// Convert the biojava MSA to a FASTA String\n\t\tOutputStream os = new ByteArrayOutputStream();\n\t\tFastaWriter<ProteinSequence, AminoAcidCompound> fastaW = \n\t\t\t\tnew FastaWriter<ProteinSequence, AminoAcidCompound>(os,\n\t\t\t\tmsa.getAlignedSequences(),\n\t\t\t\tnew FastaHeaderFormatInterface<ProteinSequence, AminoAcidCompound>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getHeader(ProteinSequence sequence) {\n\t\t\t\t\t\treturn sequence.getAccession().toString();\n\t\t\t\t\t};\n\t\t\t\t});\n\t\tfastaW.process();\n\t\tString biojava = os.toString();\n\n\t\t// Convert the biojava MSA to a forester Msa\n\t\tMsa fMsa = ForesterWrapper.convert(msa);\n\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < fMsa.getNumberOfSequences(); i++) {\n\t\t\tsb.append(\">\" + fMsa.getIdentifier(i) + \"\\n\");\n\t\t\tsb.append(fMsa.getSequenceAsString(i) + \"\\n\");\n\t\t}\n\t\tString forester = sb.toString();\n\n\t\t// Assert that all FASTA files are equal\n\t\tassertEquals(expected, biojava);\n\t\tassertEquals(expected, forester);\n\n\t}\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.phylo;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.LinkedHashMap;\n\nimport org.biojava.nbio.core.sequence.MultipleSequenceAlignment;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.FastaReader;\nimport org.biojava.nbio.core.sequence.io.FastaWriter;\nimport org.biojava.nbio.core.sequence.io.GenericFastaHeaderParser;\nimport org.biojava.nbio.core.sequence.io.ProteinSequenceCreator;\nimport org.biojava.nbio.core.sequence.io.template.FastaHeaderFormatInterface;\nimport org.forester.msa.Msa;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\n/**\n * Test the BioJava-forester wrapper methods.\n * \n * @author Aleix Lafita\n *\n */\npublic class TestForesterWrapper {\n\n\t@Test\n\tpublic void testMSAconversion() throws Exception {\n\n\t\t// Load the msa FASTA file into a BioJava MSA object\n\t\tInputStream inStream = TestForesterWrapper.class\n\t\t\t\t.getResourceAsStream(\"/1u6d_symm.fasta\");\n\n\t\tFastaReader<ProteinSequence, AminoAcidCompound> fastaReader = \n\t\t\t\tnew FastaReader<ProteinSequence, AminoAcidCompound>(\n\t\t\t\tinStream,\n\t\t\t\tnew GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>(),\n\t\t\t\tnew ProteinSequenceCreator(AminoAcidCompoundSet\n\t\t\t\t\t\t.getAminoAcidCompoundSet()));\n\n\t\tLinkedHashMap<String, ProteinSequence> proteinSequences = fastaReader\n\t\t\t\t.process();\n\n\t\tinStream.close();\n\n\t\tMultipleSequenceAlignment<ProteinSequence, AminoAcidCompound> msa = \n\t\t\t\tnew MultipleSequenceAlignment<ProteinSequence, AminoAcidCompound>();\n\n\t\tString expected = \"\";\n\t\tfor (ProteinSequence proteinSequence : proteinSequences.values()) {\n\t\t\tmsa.addAlignedSequence(proteinSequence);\n\t\t\texpected += \">\" + proteinSequence.getOriginalHeader() + \"\\n\"\n\t\t\t\t\t+ proteinSequence.toString() + \"\\n\";\n\t\t}\n\n\t\t// Convert the biojava MSA to a FASTA String\n\t\tOutputStream os = new ByteArrayOutputStream();\n\t\tFastaWriter<ProteinSequence, AminoAcidCompound> fastaW = \n\t\t\t\tnew FastaWriter<ProteinSequence, AminoAcidCompound>(os,\n\t\t\t\tmsa.getAlignedSequences(),\n\t\t\t\tnew FastaHeaderFormatInterface<ProteinSequence, AminoAcidCompound>() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getHeader(ProteinSequence sequence) {\n\t\t\t\t\t\treturn sequence.getAccession().toString();\n\t\t\t\t\t};\n\t\t\t\t});\n\t\tfastaW.process();\n\t\tString biojava = os.toString();\n\n\t\t// Convert the biojava MSA to a forester Msa\n\t\tMsa fMsa = ForesterWrapper.convert(msa);\n\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < fMsa.getNumberOfSequences(); i++) {\n\t\t\tsb.append(\">\" + fMsa.getIdentifier(i) + \"\\n\");\n\t\t\tsb.append(fMsa.getSequenceAsString(i) + \"\\n\");\n\t\t}\n\t\tString forester = sb.toString();\n\n\t\t// Assert that all FASTA files are equal\n\t\tassertEquals(expected, biojava);\n\t\tassertEquals(expected, forester);\n\n\t}\n}\n","commitMessage":"Running addlicense.sh","test_commitMessage":"Running addlicense.sh","allZero":true}