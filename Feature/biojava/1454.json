{"repository":"biojava","prod_path":"biojava3-sequencing/src/main/java/org/biojava3/sequencing/io/fastq/fastq/SangerFastqReader.java","test_path":"biojava3-sequencing/src/test/java/org/biojava3/sequencing/io/fastq/fastq/SangerFastqReaderTest.java","prod_time":"2012-03-13 13:37:32","test_time":"2012-03-13 13:37:32","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":1,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":1,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"2a55f5eb78337cdbe779257ef551265fb9a2318f","test_commitID":"2a55f5eb78337cdbe779257ef551265fb9a2318f","isfound":"found test change","originPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava.bio.program.fastq;\r\n\r\n/**\r\n * Reader for {@link FastqVariant#FASTQ_SANGER} formatted sequences.\r\n *\r\n * @since 1.7.1\r\n */\r\npublic final class SangerFastqReader\r\n    extends AbstractFastqReader\r\n{\r\n\r\n    /** {@inheritDoc} */\r\n    protected FastqVariant getVariant()\r\n    {\r\n        return FastqVariant.FASTQ_SANGER;\r\n    }\r\n}","changedPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava3.sequencing.io.fastq;\r\n\r\n/**\r\n * Reader for {@link FastqVariant#FASTQ_SANGER} formatted sequences.\r\n *\r\n * @since 3.0.3\r\n */\r\npublic final class SangerFastqReader\r\n    extends AbstractFastqReader\r\n{\r\n\r\n    /** {@inheritDoc} */\r\n    protected FastqVariant getVariant()\r\n    {\r\n        return FastqVariant.FASTQ_SANGER;\r\n    }\r\n}","originTest":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava.bio.program.fastq;\r\n\r\nimport java.io.InputStream;\r\nimport java.io.IOException;\r\nimport java.io.StringReader;\r\n\r\nimport java.net.URL;\r\n\r\nimport com.google.common.io.InputSupplier;\r\n\r\n/**\r\n * Unit test for SangerFastqReader.\r\n */\r\npublic final class SangerFastqReaderTest\r\n    extends AbstractFastqReaderTest\r\n{\r\n\r\n    /** {@inheritDoc} */\r\n    public Fastq createFastq()\r\n    {\r\n        return new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withSequence(\"sequence\")\r\n            .withQuality(\"quality_\")\r\n            .withVariant(FastqVariant.FASTQ_SANGER)\r\n            .build();\r\n    }\r\n\r\n    /** {@inheritDoc} */\r\n    public FastqReader createFastqReader()\r\n    {\r\n        return new SangerFastqReader();\r\n    }\r\n\r\n    /** {@inheritDoc} */\r\n    public FastqWriter createFastqWriter()\r\n    {\r\n        return new SangerFastqWriter();\r\n    }\r\n\r\n    public void testValidateDescription() throws Exception\r\n    {\r\n        SangerFastqReader reader = new SangerFastqReader();\r\n        URL invalidDescription = getClass().getResource(\"sanger-invalid-description.fastq\");\r\n        try\r\n        {\r\n            reader.read(invalidDescription);\r\n            fail(\"read(invalidDescription) expected IOException\");\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            assertTrue(e.getMessage().contains(\"description must begin with a '@' character\"));\r\n        }\r\n    }\r\n\r\n    public void testValidateRepeatDescription() throws Exception\r\n    {\r\n        SangerFastqReader reader = new SangerFastqReader();\r\n        URL invalidRepeatDescription = getClass().getResource(\"sanger-invalid-repeat-description.fastq\");\r\n        try\r\n        {\r\n            reader.read(invalidRepeatDescription);\r\n            fail(\"read(invalidRepeatDescription) expected IOException\");\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            assertTrue(e.getMessage().contains(\"repeat description must match description\"));\r\n        }\r\n    }\r\n\r\n    public void testWrappingOriginal() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"wrapping_original_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(3, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testWrappingAsSanger() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"wrapping_as_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(3, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testFullRangeOriginal() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"sanger_full_range_original_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(2, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testFullRangeAsSanger() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"sanger_full_range_as_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(2, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testMiscDnaOriginal() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"misc_dna_original_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(4, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testMiscDnaAsSanger() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"misc_dna_as_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(4, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testMiscRnaOriginal() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"misc_rna_original_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(4, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testMiscRnaAsSanger() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"misc_rna_as_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(4, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testLongReadsOriginal() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"longreads_original_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(10, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testLongReadsAsSanger() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"longreads_as_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(10, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testParse() throws Exception\r\n    {\r\n        SangerFastqReader sangerFastqReader = (SangerFastqReader) createFastqReader();\r\n        final String input = \"\";\r\n        sangerFastqReader.parse(new InputSupplier<StringReader>()\r\n                                {\r\n                                    /** {@inheritDoc} */\r\n                                    public StringReader getInput() throws IOException {\r\n                                        return new StringReader(input);\r\n                                    }\r\n                                },\r\n                                new ParseListener() {\r\n                                    /** {@inheritDoc} */\r\n                                    public void description(final String description) throws IOException {\r\n                                        // empty\r\n                                    }\r\n \r\n                                    /** {@inheritDoc} */\r\n                                    public void sequence(final String sequence) throws IOException {\r\n                                        // empty\r\n                                    }\r\n \r\n                                    /** {@inheritDoc} */\r\n                                    public void appendSequence(final String sequence) throws IOException {\r\n                                        // empty\r\n                                    }\r\n \r\n                                    /** {@inheritDoc} */\r\n                                    public void repeatDescription(final String repeatDescription) throws IOException {\r\n                                        // empty\r\n                                    }\r\n \r\n                                    /** {@inheritDoc} */\r\n                                    public void quality(final String quality) throws IOException {\r\n                                        // empty\r\n                                    }\r\n \r\n                                    /** {@inheritDoc} */\r\n                                    public void appendQuality(final String quality) throws IOException {\r\n                                        // empty\r\n                                    }\r\n \r\n                                    /** {@inheritDoc} */\r\n                                    public void complete() throws IOException {\r\n                                        // empty\r\n                                    }\r\n                                });\r\n    }\r\n \r\n    public void testParseNullInputSupplier() throws Exception\r\n    {\r\n        SangerFastqReader sangerFastqReader = (SangerFastqReader) createFastqReader();\r\n        try\r\n        {\r\n            sangerFastqReader.parse((InputSupplier<StringReader>) null,\r\n                                    new ParseListener() {\r\n                                        /** {@inheritDoc} */\r\n                                        public void description(final String description) throws IOException {\r\n                                            // empty\r\n                                        }\r\n \r\n                                        /** {@inheritDoc} */\r\n                                        public void sequence(final String sequence) throws IOException {\r\n                                            // empty\r\n                                        }\r\n \r\n                                        /** {@inheritDoc} */\r\n                                        public void appendSequence(final String sequence) throws IOException {\r\n                                            // empty\r\n                                        }\r\n \r\n                                        /** {@inheritDoc} */\r\n                                        public void repeatDescription(final String repeatDescription) throws IOException {\r\n                                            // empty\r\n                                        }\r\n \r\n                                        /** {@inheritDoc} */\r\n                                        public void quality(final String quality) throws IOException {\r\n                                            // empty\r\n                                        }\r\n \r\n                                        /** {@inheritDoc} */\r\n                                        public void appendQuality(final String quality) throws IOException {\r\n                                            // empty\r\n                                        }\r\n\r\n                                        /** {@inheritDoc} */\r\n                                        public void complete() throws IOException {\r\n                                            // empty\r\n                                        }\r\n                                    });\r\n            fail(\"parse(null, ) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n \r\n    public void testParseNullParseListener() throws Exception\r\n    {\r\n        SangerFastqReader sangerFastqReader = (SangerFastqReader) createFastqReader();\r\n        final String input = \"\";\r\n        try\r\n        {\r\n            sangerFastqReader.parse(new InputSupplier<StringReader>()\r\n                                    {\r\n                                        /** {@inheritDoc} */\r\n                                        public StringReader getInput() throws IOException {\r\n                                            return new StringReader(input);\r\n                                        }\r\n                                    }, null);\r\n            fail(\"parse(, null) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n}","changedTest":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava3.sequencing.io.fastq;\r\n\r\nimport java.io.InputStream;\r\nimport java.io.IOException;\r\nimport java.io.StringReader;\r\n\r\nimport java.net.URL;\r\n\r\nimport com.google.common.io.InputSupplier;\r\n\r\n/**\r\n * Unit test for SangerFastqReader.\r\n */\r\npublic final class SangerFastqReaderTest\r\n    extends AbstractFastqReaderTest\r\n{\r\n\r\n    /** {@inheritDoc} */\r\n    public Fastq createFastq()\r\n    {\r\n        return new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withSequence(\"sequence\")\r\n            .withQuality(\"quality_\")\r\n            .withVariant(FastqVariant.FASTQ_SANGER)\r\n            .build();\r\n    }\r\n\r\n    /** {@inheritDoc} */\r\n    public FastqReader createFastqReader()\r\n    {\r\n        return new SangerFastqReader();\r\n    }\r\n\r\n    /** {@inheritDoc} */\r\n    public FastqWriter createFastqWriter()\r\n    {\r\n        return new SangerFastqWriter();\r\n    }\r\n\r\n    public void testValidateDescription() throws Exception\r\n    {\r\n        SangerFastqReader reader = new SangerFastqReader();\r\n        URL invalidDescription = getClass().getResource(\"sanger-invalid-description.fastq\");\r\n        try\r\n        {\r\n            reader.read(invalidDescription);\r\n            fail(\"read(invalidDescription) expected IOException\");\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            assertTrue(e.getMessage().contains(\"description must begin with a '@' character\"));\r\n        }\r\n    }\r\n\r\n    public void testValidateRepeatDescription() throws Exception\r\n    {\r\n        SangerFastqReader reader = new SangerFastqReader();\r\n        URL invalidRepeatDescription = getClass().getResource(\"sanger-invalid-repeat-description.fastq\");\r\n        try\r\n        {\r\n            reader.read(invalidRepeatDescription);\r\n            fail(\"read(invalidRepeatDescription) expected IOException\");\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            assertTrue(e.getMessage().contains(\"repeat description must match description\"));\r\n        }\r\n    }\r\n\r\n    public void testWrappingOriginal() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"wrapping_original_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(3, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testWrappingAsSanger() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"wrapping_as_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(3, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testFullRangeOriginal() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"sanger_full_range_original_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(2, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testFullRangeAsSanger() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"sanger_full_range_as_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(2, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testMiscDnaOriginal() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"misc_dna_original_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(4, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testMiscDnaAsSanger() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"misc_dna_as_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(4, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testMiscRnaOriginal() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"misc_rna_original_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(4, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testMiscRnaAsSanger() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"misc_rna_as_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(4, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testLongReadsOriginal() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"longreads_original_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(10, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testLongReadsAsSanger() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"longreads_as_sanger.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(10, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testParse() throws Exception\r\n    {\r\n        SangerFastqReader sangerFastqReader = (SangerFastqReader) createFastqReader();\r\n        final String input = \"\";\r\n        sangerFastqReader.parse(new InputSupplier<StringReader>()\r\n                                {\r\n                                    /** {@inheritDoc} */\r\n                                    public StringReader getInput() throws IOException {\r\n                                        return new StringReader(input);\r\n                                    }\r\n                                },\r\n                                new ParseListener() {\r\n                                    /** {@inheritDoc} */\r\n                                    public void description(final String description) throws IOException {\r\n                                        // empty\r\n                                    }\r\n \r\n                                    /** {@inheritDoc} */\r\n                                    public void sequence(final String sequence) throws IOException {\r\n                                        // empty\r\n                                    }\r\n \r\n                                    /** {@inheritDoc} */\r\n                                    public void appendSequence(final String sequence) throws IOException {\r\n                                        // empty\r\n                                    }\r\n \r\n                                    /** {@inheritDoc} */\r\n                                    public void repeatDescription(final String repeatDescription) throws IOException {\r\n                                        // empty\r\n                                    }\r\n \r\n                                    /** {@inheritDoc} */\r\n                                    public void quality(final String quality) throws IOException {\r\n                                        // empty\r\n                                    }\r\n \r\n                                    /** {@inheritDoc} */\r\n                                    public void appendQuality(final String quality) throws IOException {\r\n                                        // empty\r\n                                    }\r\n \r\n                                    /** {@inheritDoc} */\r\n                                    public void complete() throws IOException {\r\n                                        // empty\r\n                                    }\r\n                                });\r\n    }\r\n \r\n    public void testParseNullInputSupplier() throws Exception\r\n    {\r\n        SangerFastqReader sangerFastqReader = (SangerFastqReader) createFastqReader();\r\n        try\r\n        {\r\n            sangerFastqReader.parse((InputSupplier<StringReader>) null,\r\n                                    new ParseListener() {\r\n                                        /** {@inheritDoc} */\r\n                                        public void description(final String description) throws IOException {\r\n                                            // empty\r\n                                        }\r\n \r\n                                        /** {@inheritDoc} */\r\n                                        public void sequence(final String sequence) throws IOException {\r\n                                            // empty\r\n                                        }\r\n \r\n                                        /** {@inheritDoc} */\r\n                                        public void appendSequence(final String sequence) throws IOException {\r\n                                            // empty\r\n                                        }\r\n \r\n                                        /** {@inheritDoc} */\r\n                                        public void repeatDescription(final String repeatDescription) throws IOException {\r\n                                            // empty\r\n                                        }\r\n \r\n                                        /** {@inheritDoc} */\r\n                                        public void quality(final String quality) throws IOException {\r\n                                            // empty\r\n                                        }\r\n \r\n                                        /** {@inheritDoc} */\r\n                                        public void appendQuality(final String quality) throws IOException {\r\n                                            // empty\r\n                                        }\r\n\r\n                                        /** {@inheritDoc} */\r\n                                        public void complete() throws IOException {\r\n                                            // empty\r\n                                        }\r\n                                    });\r\n            fail(\"parse(null, ) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n \r\n    public void testParseNullParseListener() throws Exception\r\n    {\r\n        SangerFastqReader sangerFastqReader = (SangerFastqReader) createFastqReader();\r\n        final String input = \"\";\r\n        try\r\n        {\r\n            sangerFastqReader.parse(new InputSupplier<StringReader>()\r\n                                    {\r\n                                        /** {@inheritDoc} */\r\n                                        public StringReader getInput() throws IOException {\r\n                                            return new StringReader(input);\r\n                                        }\r\n                                    }, null);\r\n            fail(\"parse(, null) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n}","commitMessage":"refactoring package names, updating @since tags; will have to svn move files next, svn copied them to wrong place\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@9577 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"refactoring package names, updating @since tags; will have to svn move files next, svn copied them to wrong place\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@9577 7c6358e6-4a41-0410-a743-a5b2a554c398\n","allZero":false}