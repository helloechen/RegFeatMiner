{"repository":"biojava","prod_path":"biojava-core/src/main/java/org/biojava/nbio/core/alignment/matrices/SubstitutionMatrixHelper.java","test_path":"biojava-core/src/test/java/org/biojava/nbio/core/alignment/matrices/SubstitutionMatrixHelperTest.java","prod_time":"2024-04-18 15:26:14","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":2,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":2,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"b18212163e0fd9ff56da13ef258005b7d0decced","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on July 26, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.core.alignment.matrices;\n\nimport org.biojava.nbio.core.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.sequence.compound.AmbiguityDNACompoundSet;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.compound.NucleotideCompound;\n\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Static utility to access substitution matrices that come bundled with BioJava.  All matrices were downloaded from\n * ftp://ftp.ncbi.nih.gov/blast/matrices/\n *\n * @author Mark Chapman\n * @author Paolo Pavan\n */\npublic class SubstitutionMatrixHelper implements Serializable {\n\n\t/**\n\t *\n\t */\n\tprivate static final long serialVersionUID = 148491724604653225L;\n\n\tprivate static Map<String, SubstitutionMatrix<AminoAcidCompound>> aminoAcidMatrices =\n\t\t\tnew HashMap<String, SubstitutionMatrix<AminoAcidCompound>>();\n\tprivate static Map<String, SubstitutionMatrix<NucleotideCompound>> nucleotideMatrices =\n\t\t\tnew HashMap<String, SubstitutionMatrix<NucleotideCompound>>();\n\n\t// prevents instantiation\n\tprivate SubstitutionMatrixHelper() { }\n\n\n\t/** Returns any matrix from the AAINDEX database file\n\t *\n\t * @param matrixName\n\t * @return a {@link SubstitutionMatrix}\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getMatrixFromAAINDEX(String matrixName){\n\n\t\treturn AAindexFactory.getAAIndexProvider().getMatrix(matrixName);\n\n\t}\n\n\t/**\n\t * Gets identity matrix where matches score 1 and mismatches score -10000\n\t * @return\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getIdentity() {\n\t\treturn getAminoAcidMatrix(\"identity\");\n\t}\n\n\t/**\n\t * Returns Blosum 100 matrix by Henikoff & Henikoff\n\t * @return Blosum 100 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum100() {\n\t\treturn getAminoAcidMatrix(\"blosum100\");\n\t}\n\n\t/**\n\t * Returns Blosum 30 matrix by Henikoff & Henikoff\n\t * @return Blosum 30 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum30() {\n\t\treturn getAminoAcidMatrix(\"blosum30\");\n\t}\n\n\t/**\n\t * Returns Blosum 35 matrix by Henikoff & Henikoff\n\t * @return Blosum 35 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum35() {\n\t\treturn getAminoAcidMatrix(\"blosum35\");\n\t}\n\n\t/**\n\t * Returns Blosum 40 matrix by Henikoff & Henikoff\n\t * @return Blosum 40 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum40() {\n\t\treturn getAminoAcidMatrix(\"blosum40\");\n\t}\n\n\t/**\n\t * Returns Blosum 45 matrix by Henikoff & Henikoff\n\t * @return Blosum 45 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum45() {\n\t\treturn getAminoAcidMatrix(\"blosum45\");\n\t}\n\n\t/**\n\t * Returns Blosum 50 matrix by Henikoff & Henikoff\n\t * @return Blosum 50 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum50() {\n\t\treturn getAminoAcidMatrix(\"blosum50\");\n\t}\n\n\t/**\n\t * Returns Blosum 55 matrix by Henikoff & Henikoff\n\t * @return Blosum 55 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum55() {\n\t\treturn getAminoAcidMatrix(\"blosum55\");\n\t}\n\n\t/**\n\t * Returns Blosum 60 matrix by Henikoff & Henikoff\n\t * @return Blosum 60 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum60() {\n\t\treturn getAminoAcidMatrix(\"blosum60\");\n\t}\n\n\t/**\n\t * Returns Blosum 62 matrix by Henikoff & Henikoff\n\t * @return Blosum 62 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum62() {\n\t\treturn getAminoAcidMatrix(\"blosum62\");\n\t}\n\n\t/**\n\t * Returns Blosum 65 matrix by Henikoff & Henikoff\n\t * @return Blosum 65 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum65() {\n\t\treturn getAminoAcidMatrix(\"blosum65\");\n\t}\n\n\t/**\n\t * Returns Blosum 70 matrix by Henikoff & Henikoff\n\t * @return Blosum 70 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum70() {\n\t\treturn getAminoAcidMatrix(\"blosum70\");\n\t}\n\n\t/**\n\t * Returns Blosum 75 matrix by Henikoff & Henikoff\n\t * @return Blosum 75 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum75() {\n\t\treturn getAminoAcidMatrix(\"blosum75\");\n\t}\n\n\t/**\n\t * Returns Blosum 80 matrix by Henikoff & Henikoff\n\t * @return Blosum 80 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum80() {\n\t\treturn getAminoAcidMatrix(\"blosum80\");\n\t}\n\n\t/**\n\t * Returns Blosum 85 matrix by Henikoff & Henikoff\n\t * @return Blosum 85 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum85() {\n\t\treturn getAminoAcidMatrix(\"blosum85\");\n\t}\n\n\t/**\n\t * Returns Blosum 90 matrix by Henikoff & Henikoff\n\t * @return Blosum 90 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum90() {\n\t\treturn getAminoAcidMatrix(\"blosum90\");\n\t}\n\n\t/**\n\t * Returns PAM 250 matrix by Gonnet, Cohen & Benner\n\t * @return Gonnet 250 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getGonnet250() {\n\t\treturn getAminoAcidMatrix(\"gonnet250\");\n\t}\n\n\t/**\n\t * Returns Nuc 4.2 matrix by Lowe\n\t * Only the first nucleotide sequence to align can contain ambiguous nucleotides\n\t * @return Nuc 4.2 matrix\n\t */\n\tpublic static SubstitutionMatrix<NucleotideCompound> getNuc4_2() {\n\t\treturn getNucleotideMatrix(\"nuc-4_2\");\n\t}\n\n\t/**\n\t * Returns Nuc 4.4 matrix by Lowe\n\t * Both of the nucleotide sequences to align can contain ambiguous nucleotides\n\t * @return Nuc 4.4 matrix\n\t */\n\tpublic static SubstitutionMatrix<NucleotideCompound> getNuc4_4() {\n\t\treturn getNucleotideMatrix(\"nuc-4_4\");\n\t}\n\n\t/**\n\t * Returns PAM 250 matrix by Dayhoff\n\t * @return PAM 250 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getPAM250() {\n\t\treturn getAminoAcidMatrix(\"pam250\");\n\t}\n\n\t// helper methods\n\n\t/**\n\t * Returns a substitution matrix for {@link AminoAcidCompound amino acids} given by the name {@code name}.\n\t * Searches first in the default AAINDEX file (see @link {@link #getMatrixFromAAINDEX(String)}), then in the classpath\n\t * in src/main/resources/matrices.\n\t * Example names:\n\t * <ul>\n\t * <li>blosum62</li>\n\t * <li>JOND920103</li>\n\t * <li>pam250</li>\n\t * <li>gonnet250</li>\n\t * </ul>\n\t * @param name Either a common name or an AAINDEX name\n\t * @return a {@code} SubstitutionMatrix {@code} or {@code}null{@code} if no matrix is found\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getAminoAcidSubstitutionMatrix(String name) {\n\t\tSubstitutionMatrix<AminoAcidCompound> matrix = getMatrixFromAAINDEX(name);\n\t\tif (matrix != null) return matrix;\n\t\treturn getAminoAcidMatrix(name);\n\t}\n\n\t// reads in an amino acid substitution matrix, if necessary\n\tprivate static SubstitutionMatrix<AminoAcidCompound> getAminoAcidMatrix(String file) {\n\t\tif (!aminoAcidMatrices.containsKey(file)) {\n\t\t\tInputStreamReader reader = getReader(file);\n\t\t\tif (reader == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\taminoAcidMatrices.put(file, new SimpleSubstitutionMatrix<AminoAcidCompound>(\n\t\t\t\t\tAminoAcidCompoundSet.getAminoAcidCompoundSet(), reader , file));\n\t\t}\n\t\treturn aminoAcidMatrices.get(file);\n\t}\n\n\t// reads in a nucleotide substitution matrix, if necessary\n\tprivate static SubstitutionMatrix<NucleotideCompound> getNucleotideMatrix(String file) {\n\t\tif (!nucleotideMatrices.containsKey(file)) {\n\t\t\tnucleotideMatrices.put(file, new SimpleSubstitutionMatrix<NucleotideCompound>(\n\t\t\t\t\tAmbiguityDNACompoundSet.getDNACompoundSet(), getReader(file), file));\n\t\t}\n\t\treturn nucleotideMatrices.get(file);\n\t}\n\n\t// reads in a substitution matrix from a resource file\n\tprivate static InputStreamReader getReader(String file) {\n\t\tString resourcePathPrefix = \"matrices/\";\n\t\tInputStream is = SubstitutionMatrixHelper.class.getResourceAsStream(String.format(\"/%s.txt\",\n\t\tresourcePathPrefix+file));\n\t\tif (is == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new InputStreamReader(is);\n\t}\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on July 26, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.core.alignment.matrices;\n\nimport org.biojava.nbio.core.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.sequence.compound.AmbiguityDNACompoundSet;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.compound.NucleotideCompound;\n\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Static utility to access substitution matrices that come bundled with BioJava.  All matrices were downloaded from\n * ftp://ftp.ncbi.nih.gov/blast/matrices/\n *\n * @author Mark Chapman\n * @author Paolo Pavan\n */\npublic class SubstitutionMatrixHelper implements Serializable {\n\n\t/**\n\t *\n\t */\n\tprivate static final long serialVersionUID = 148491724604653225L;\n\n\tprivate static Map<String, SubstitutionMatrix<AminoAcidCompound>> aminoAcidMatrices =\n\t\t\tnew HashMap<>();\n\tprivate static Map<String, SubstitutionMatrix<NucleotideCompound>> nucleotideMatrices =\n\t\t\tnew HashMap<>();\n\n\t// prevents instantiation\n\tprivate SubstitutionMatrixHelper() { }\n\n\n\t/** Returns any matrix from the AAINDEX database file\n\t *\n\t * @param matrixName\n\t * @return a {@link SubstitutionMatrix}\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getMatrixFromAAINDEX(String matrixName){\n\n\t\treturn AAindexFactory.getAAIndexProvider().getMatrix(matrixName);\n\n\t}\n\n\t/**\n\t * Gets identity matrix where matches score 1 and mismatches score -10000\n\t * @return\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getIdentity() {\n\t\treturn getAminoAcidMatrix(\"identity\");\n\t}\n\n\t/**\n\t * Returns Blosum 100 matrix by Henikoff & Henikoff\n\t * @return Blosum 100 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum100() {\n\t\treturn getAminoAcidMatrix(\"blosum100\");\n\t}\n\n\t/**\n\t * Returns Blosum 30 matrix by Henikoff & Henikoff\n\t * @return Blosum 30 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum30() {\n\t\treturn getAminoAcidMatrix(\"blosum30\");\n\t}\n\n\t/**\n\t * Returns Blosum 35 matrix by Henikoff & Henikoff\n\t * @return Blosum 35 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum35() {\n\t\treturn getAminoAcidMatrix(\"blosum35\");\n\t}\n\n\t/**\n\t * Returns Blosum 40 matrix by Henikoff & Henikoff\n\t * @return Blosum 40 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum40() {\n\t\treturn getAminoAcidMatrix(\"blosum40\");\n\t}\n\n\t/**\n\t * Returns Blosum 45 matrix by Henikoff & Henikoff\n\t * @return Blosum 45 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum45() {\n\t\treturn getAminoAcidMatrix(\"blosum45\");\n\t}\n\n\t/**\n\t * Returns Blosum 50 matrix by Henikoff & Henikoff\n\t * @return Blosum 50 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum50() {\n\t\treturn getAminoAcidMatrix(\"blosum50\");\n\t}\n\n\t/**\n\t * Returns Blosum 55 matrix by Henikoff & Henikoff\n\t * @return Blosum 55 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum55() {\n\t\treturn getAminoAcidMatrix(\"blosum55\");\n\t}\n\n\t/**\n\t * Returns Blosum 60 matrix by Henikoff & Henikoff\n\t * @return Blosum 60 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum60() {\n\t\treturn getAminoAcidMatrix(\"blosum60\");\n\t}\n\n\t/**\n\t * Returns Blosum 62 matrix by Henikoff & Henikoff\n\t * @return Blosum 62 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum62() {\n\t\treturn getAminoAcidMatrix(\"blosum62\");\n\t}\n\n\t/**\n\t * Returns Blosum 65 matrix by Henikoff & Henikoff\n\t * @return Blosum 65 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum65() {\n\t\treturn getAminoAcidMatrix(\"blosum65\");\n\t}\n\n\t/**\n\t * Returns Blosum 70 matrix by Henikoff & Henikoff\n\t * @return Blosum 70 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum70() {\n\t\treturn getAminoAcidMatrix(\"blosum70\");\n\t}\n\n\t/**\n\t * Returns Blosum 75 matrix by Henikoff & Henikoff\n\t * @return Blosum 75 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum75() {\n\t\treturn getAminoAcidMatrix(\"blosum75\");\n\t}\n\n\t/**\n\t * Returns Blosum 80 matrix by Henikoff & Henikoff\n\t * @return Blosum 80 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum80() {\n\t\treturn getAminoAcidMatrix(\"blosum80\");\n\t}\n\n\t/**\n\t * Returns Blosum 85 matrix by Henikoff & Henikoff\n\t * @return Blosum 85 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum85() {\n\t\treturn getAminoAcidMatrix(\"blosum85\");\n\t}\n\n\t/**\n\t * Returns Blosum 90 matrix by Henikoff & Henikoff\n\t * @return Blosum 90 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getBlosum90() {\n\t\treturn getAminoAcidMatrix(\"blosum90\");\n\t}\n\n\t/**\n\t * Returns PAM 250 matrix by Gonnet, Cohen & Benner\n\t * @return Gonnet 250 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getGonnet250() {\n\t\treturn getAminoAcidMatrix(\"gonnet250\");\n\t}\n\n\t/**\n\t * Returns Nuc 4.2 matrix by Lowe\n\t * Only the first nucleotide sequence to align can contain ambiguous nucleotides\n\t * @return Nuc 4.2 matrix\n\t */\n\tpublic static SubstitutionMatrix<NucleotideCompound> getNuc4_2() {\n\t\treturn getNucleotideMatrix(\"nuc-4_2\");\n\t}\n\n\t/**\n\t * Returns Nuc 4.4 matrix by Lowe\n\t * Both of the nucleotide sequences to align can contain ambiguous nucleotides\n\t * @return Nuc 4.4 matrix\n\t */\n\tpublic static SubstitutionMatrix<NucleotideCompound> getNuc4_4() {\n\t\treturn getNucleotideMatrix(\"nuc-4_4\");\n\t}\n\n\t/**\n\t * Returns PAM 250 matrix by Dayhoff\n\t * @return PAM 250 matrix\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getPAM250() {\n\t\treturn getAminoAcidMatrix(\"pam250\");\n\t}\n\n\t// helper methods\n\n\t/**\n\t * Returns a substitution matrix for {@link AminoAcidCompound amino acids} given by the name {@code name}.\n\t * Searches first in the default AAINDEX file (see @link {@link #getMatrixFromAAINDEX(String)}), then in the classpath\n\t * in src/main/resources/matrices.\n\t * Example names:\n\t * <ul>\n\t * <li>blosum62</li>\n\t * <li>JOND920103</li>\n\t * <li>pam250</li>\n\t * <li>gonnet250</li>\n\t * </ul>\n\t * @param name Either a common name or an AAINDEX name\n\t * @return a {@code} SubstitutionMatrix {@code} or {@code}null{@code} if no matrix is found\n\t */\n\tpublic static SubstitutionMatrix<AminoAcidCompound> getAminoAcidSubstitutionMatrix(String name) {\n\t\tSubstitutionMatrix<AminoAcidCompound> matrix = getMatrixFromAAINDEX(name);\n\t\tif (matrix != null) return matrix;\n\t\treturn getAminoAcidMatrix(name);\n\t}\n\n\t// reads in an amino acid substitution matrix, if necessary\n\tprivate static SubstitutionMatrix<AminoAcidCompound> getAminoAcidMatrix(String file) {\n\t\tif (!aminoAcidMatrices.containsKey(file)) {\n\t\t\tInputStreamReader reader = getReader(file);\n\t\t\tif (reader == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\taminoAcidMatrices.put(file, new SimpleSubstitutionMatrix<AminoAcidCompound>(\n\t\t\t\t\tAminoAcidCompoundSet.getAminoAcidCompoundSet(), reader , file));\n\t\t}\n\t\treturn aminoAcidMatrices.get(file);\n\t}\n\n\t// reads in a nucleotide substitution matrix, if necessary\n\tprivate static SubstitutionMatrix<NucleotideCompound> getNucleotideMatrix(String file) {\n\t\tif (!nucleotideMatrices.containsKey(file)) {\n\t\t\tnucleotideMatrices.put(file, new SimpleSubstitutionMatrix<NucleotideCompound>(\n\t\t\t\t\tAmbiguityDNACompoundSet.getDNACompoundSet(), getReader(file), file));\n\t\t}\n\t\treturn nucleotideMatrices.get(file);\n\t}\n\n\t// reads in a substitution matrix from a resource file\n\tprivate static InputStreamReader getReader(String file) {\n\t\tString resourcePathPrefix = \"matrices/\";\n\t\tInputStream is = SubstitutionMatrixHelper.class.getResourceAsStream(String.format(\"/%s.txt\",\n\t\tresourcePathPrefix+file));\n\t\tif (is == null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new InputStreamReader(is);\n\t}\n\n}\n","originTest":"package org.biojava.nbio.core.alignment.matrices;\n\nimport org.biojava.nbio.core.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass SubstitutionMatrixHelperTest {\n    AminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\n\n    @Test\n    void getMatrixFromAAINDEX() {\n        SubstitutionMatrix<AminoAcidCompound> aaIndex = SubstitutionMatrixHelper.getMatrixFromAAINDEX(\"ALTS910101\");\n        assertNotNull(aaIndex);\n        assertEquals(-30, aaIndex.getValue(aaSet.getCompoundForString(\"R\"),\n                aaSet.getCompoundForString(\"A\")));\n    }\n\n    @Test\n    void getIdentity() {\n        SubstitutionMatrix<AminoAcidCompound> identityMatrix = SubstitutionMatrixHelper.getIdentity();\n        final String standard20 = \"ARNDCQEGHILKMFPSTWYV\";\n        for (AminoAcidCompound from : aaSet.getAllCompounds()) {\n            if (!standard20.contains(from.getShortName())) {\n                continue;\n            }\n            for (AminoAcidCompound to : aaSet.getAllCompounds()) {\n                if (!standard20.contains(to.getShortName())) {\n                    continue;\n                }\n                if (from.equals(to)) {\n                    assertEquals(1, identityMatrix.getValue(from, to));\n                } else {\n                    assertEquals(-10000, identityMatrix.getValue(from, to));\n                }\n            }\n        }\n    }\n\n    @Test\n    void getBlosum100() {\n        assertNotNull(SubstitutionMatrixHelper.getBlosum100());\n    }\n\n    @Test\n    void getBlosum30() {\n        assertNotNull(SubstitutionMatrixHelper.getBlosum30());\n    }\n\n    @Test\n    void getBlosum35() {\n        assertNotNull(SubstitutionMatrixHelper.getBlosum35());\n    }\n\n    @Test\n    void getBlosum40() {\n        assertNotNull(SubstitutionMatrixHelper.getBlosum40());\n    }\n\n    @Test\n    void getBlosum45() {\n        assertNotNull(SubstitutionMatrixHelper.getBlosum45());\n    }\n\n    @Test\n    void getBlosum50() {\n        assertNotNull(SubstitutionMatrixHelper.getBlosum50());\n    }\n\n    @Test\n    void getBlosum55() {\n        assertNotNull(SubstitutionMatrixHelper.getBlosum55());\n    }\n\n    @Test\n    void getBlosum60() {\n        assertNotNull(SubstitutionMatrixHelper.getBlosum60());\n    }\n\n    @Test\n    void getBlosum62() {\n        SubstitutionMatrix<AminoAcidCompound> blosum62 = SubstitutionMatrixHelper.getBlosum62();\n        assertNotNull(blosum62);\n        AminoAcidCompound trypt = aaSet.getCompoundForString(\"W\");\n        assertEquals(11, blosum62.getValue(trypt, trypt));\n    }\n\n    @Test\n    void getBlosum65() {\n        assertNotNull(SubstitutionMatrixHelper.getBlosum65());\n    }\n\n    @Test\n    void getBlosum70() {\n        assertNotNull(SubstitutionMatrixHelper.getBlosum70());\n    }\n\n    @Test\n    void getBlosum75() {\n        assertNotNull(SubstitutionMatrixHelper.getBlosum75());\n    }\n\n    @Test\n    void getBlosum80() {\n        assertNotNull(SubstitutionMatrixHelper.getBlosum80());\n    }\n\n    @Test\n    void getBlosum85() {\n        assertNotNull(SubstitutionMatrixHelper.getBlosum85());\n    }\n\n    @Test\n    void getBlosum90() {\n        assertNotNull(SubstitutionMatrixHelper.getBlosum90());\n    }\n\n    @Test\n    void getGonnet250() {\n        assertNotNull(SubstitutionMatrixHelper.getGonnet250());\n    }\n\n    @Test\n    void getNuc4_2() {\n        assertNotNull(SubstitutionMatrixHelper.getNuc4_2());\n    }\n\n    @Test\n    void getNuc4_4() {\n        assertNotNull(SubstitutionMatrixHelper.getNuc4_4());\n    }\n\n    @Test\n    void getPAM250() {\n        assertNotNull(SubstitutionMatrixHelper.getPAM250());\n    }\n\n    @Test\n    void getAminoAcidSubstitutionMatrix() {\n        assertNotNull(SubstitutionMatrixHelper.getAminoAcidSubstitutionMatrix(\"blosum62\"));\n        assertNotNull(SubstitutionMatrixHelper.getAminoAcidSubstitutionMatrix(\"DAYM780301\"));\n    }\n\n    @Test\n    void unknownMatrixReturnsNull() {\n        assertNull( SubstitutionMatrixHelper.getAminoAcidSubstitutionMatrix(\"?????\"));\n    }\n}","changedTest":"","commitMessage":"Fix sonar issue S2293 Replace the type specification in this constructor call with the diamond operator ('<>')\n","test_commitMessage":"","allZero":false}