{"repository":"biojava","prod_path":"biojava3-sequencing/src/main/java/org/biojava3/sequencing/io/fastq/fastq/FastqTools.java","test_path":"biojava3-sequencing/src/test/java/org/biojava3/sequencing/io/fastq/fastq/FastqToolsTest.java","prod_time":"2012-03-13 13:37:32","test_time":"2012-03-13 13:37:32","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":1,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":18,"del_classname_line":0,"del_condition_line":7,"del_field_line":0,"del_import_line":12,"del_packageid_line":1,"del_parameter_line":5,"del_return_line":5,"label":"POSITIVE","prod_commitID":"2a55f5eb78337cdbe779257ef551265fb9a2318f","test_commitID":"2a55f5eb78337cdbe779257ef551265fb9a2318f","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.bio.program.fastq;\n\nimport java.util.List;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.ImmutableList;\n\nimport org.biojava.bio.Annotation;\n\nimport org.biojava.bio.dist.Distribution;\n\nimport org.biojava.bio.program.phred.PhredSequence;\nimport org.biojava.bio.program.phred.PhredTools;\n\nimport org.biojava.bio.seq.DNATools;\nimport org.biojava.bio.seq.Sequence;\n\nimport org.biojava.bio.symbol.IllegalAlphabetException;\nimport org.biojava.bio.symbol.IllegalSymbolException;\nimport org.biojava.bio.symbol.IntegerAlphabet;\nimport org.biojava.bio.symbol.IntegerAlphabet.SubIntegerAlphabet;\nimport org.biojava.bio.symbol.SymbolList;\nimport org.biojava.bio.symbol.SimpleSymbolList;\n\n/**\n * Utility methods for FASTQ formatted sequences.\n *\n * @since 1.8.2\n */\npublic final class FastqTools\n{\n\n    /**\n     * Private no-arg constructor.\n     */\n    private FastqTools()\n    {\n        // empty\n    }\n\n\n    /**\n     * Create and return a new DNA {@link SymbolList} from the specified FASTQ formatted sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return a new DNA {@link SymbolList} from the specified FASTQ formatted sequence\n     * @throws IllegalSymbolException if an illegal symbol is found\n     */\n    public static SymbolList createDNA(final Fastq fastq) throws IllegalSymbolException\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        return DNATools.createDNA(fastq.getSequence());\n    }\n\n    /**\n     * Create and return a new {@link SymbolList} of quality scores from the specified FASTQ formatted sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return a new {@link SymbolList} of quality scores from the specified FASTQ formatted sequence\n     * @throws IllegalSymbolException if an illegal symbol is found\n     */\n    public static SymbolList createQuality(final Fastq fastq) throws IllegalSymbolException\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        FastqVariant variant = fastq.getVariant();\n        SubIntegerAlphabet alphabet = IntegerAlphabet.getSubAlphabet(variant.minimumQualityScore(), variant.maximumQualityScore());\n        SimpleSymbolList qualitySymbols = new SimpleSymbolList(alphabet);\n        for (int i = 0, size = fastq.getQuality().length(); i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            qualitySymbols.addSymbol(alphabet.getSymbol(variant.qualityScore(c)));\n        }\n        return qualitySymbols;\n    }\n\n    /**\n     * Create and return a new DNA {@link Sequence} from the specified FASTQ formatted sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return a new {@link Sequence} from the specified FASTQ formatted sequence\n     * @throws IllegalSymbolException if an illegal symbol is found\n     */\n    public static Sequence createDNASequence(final Fastq fastq) throws IllegalSymbolException\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        return DNATools.createDNASequence(fastq.getSequence(), fastq.getDescription());\n    }\n\n    /**\n     * Create and return a new {@link PhredSequence} from the specified FASTQ formatted sequence.\n     * Only Sanger variant FASTQ formatted sequences are supported.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null and must be Sanger variant\n     * @return a new {@link PhredSequence} from the specified FASTQ formatted sequence\n     * @throws IllegalAlphabetException if an illegal alphabet is used\n     * @throws IllegalSymbolException if an illegal symbol is found\n     */\n    public static PhredSequence createPhredSequence(final Fastq fastq) throws IllegalAlphabetException, IllegalSymbolException\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        if (!fastq.getVariant().isSanger())\n        {\n            throw new IllegalArgumentException(\"fastq must be sanger variant, was \" + fastq.getVariant());\n        }\n        SymbolList dnaSymbols = createDNA(fastq);\n\n        // 0-99 subinteger alphabet required by PhredSequence, thus only Sanger variant is supported\n        SubIntegerAlphabet alphabet = IntegerAlphabet.getSubAlphabet(0, 99);\n        SimpleSymbolList qualitySymbols = new SimpleSymbolList(alphabet);\n        for (int i = 0, size = fastq.getQuality().length(); i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            qualitySymbols.addSymbol(alphabet.getSymbol(FastqVariant.FASTQ_SANGER.qualityScore(c)));\n        }\n\n        SymbolList phredSymbols = PhredTools.createPhred(dnaSymbols, qualitySymbols);\n        return new PhredSequence(phredSymbols, fastq.getDescription(), null, Annotation.EMPTY_ANNOTATION);\n    }\n\n    /**\n     * Create and return a new array of symbol {@link Distribution}s from the specified FASTQ formatted sequence.\n     * Only Sanger variant FASTQ formatted sequences are supported.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null and must be Sanger variant\n     * @return a new array of symbol {@link Distribution}s from the specified FASTQ formatted sequence\n     * @throws IllegalAlphabetException if an illegal alphabet is used\n     * @throws IllegalSymbolException if an illegal symbol is found\n     */\n    public static Distribution[] createSymbolDistribution(final Fastq fastq) throws IllegalAlphabetException, IllegalSymbolException\n    {\n        PhredSequence phredSequence = createPhredSequence(fastq);\n        return PhredTools.phredToDistArray(phredSequence);\n    }\n\n    /**\n     * Return the quality scores from the specified FASTQ formatted sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return the quality scores from the specified FASTQ formatted sequence\n     */\n    public static Iterable<Integer> qualityScores(final Fastq fastq)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        List<Integer> qualityScores = Lists.newArrayListWithExpectedSize(size);\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            qualityScores.add(variant.qualityScore(c));\n        }\n        return ImmutableList.copyOf(qualityScores);\n    }\n\n    /**\n     * Copy the quality scores from the specified FASTQ formatted sequence into the specified int array.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @param qualityScores int array of quality scores, must not be null and must be the same\n     *    length as the FASTQ formatted sequence quality\n     * @return the specified int array of quality scores\n     */\n    public static int[] qualityScores(final Fastq fastq, final int[] qualityScores)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        if (qualityScores == null)\n        {\n            throw new IllegalArgumentException(\"qualityScores must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        if (qualityScores.length != size)\n        {\n            throw new IllegalArgumentException(\"qualityScores must be the same length as the FASTQ formatted sequence quality\");\n        }\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            qualityScores[i] = variant.qualityScore(c);\n        }\n        return qualityScores;\n    }\n\n    /**\n     * Return the error probabilities from the specified FASTQ formatted sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return the error probabilities from the specified FASTQ formatted sequence\n     */\n    public static Iterable<Double> errorProbabilities(final Fastq fastq)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        List<Double> errorProbabilities = Lists.newArrayListWithExpectedSize(size);\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            errorProbabilities.add(variant.errorProbability(c));\n        }\n        return ImmutableList.copyOf(errorProbabilities);\n    }\n\n    /**\n     * Copy the error probabilities from the specified FASTQ formatted sequence into the specified double array.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @param errorProbabilities double array of error probabilities, must not be null and must be the same\n     *    length as the FASTQ formatted sequence quality\n     * @return the specified double array of error probabilities\n     */\n    public static double[] errorProbabilities(final Fastq fastq, final double[] errorProbabilities)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        if (errorProbabilities == null)\n        {\n            throw new IllegalArgumentException(\"errorProbabilities must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        if (errorProbabilities.length != size)\n        {\n            throw new IllegalArgumentException(\"errorProbabilities must be the same length as the FASTQ formatted sequence quality\");\n        }\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            errorProbabilities[i] = variant.errorProbability(c);\n        }\n        return errorProbabilities;\n    }\n}","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\nimport java.util.List;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.ImmutableList;\n\n/**\n * Utility methods for FASTQ formatted sequences.\n *\n * @since 3.0.3\n */\npublic final class FastqTools\n{\n\n    /**\n     * Private no-arg constructor.\n     */\n    private FastqTools()\n    {\n        // empty\n    }\n\n\n    /**\n     * Return the quality scores from the specified FASTQ formatted sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return the quality scores from the specified FASTQ formatted sequence\n     */\n    public static Iterable<Integer> qualityScores(final Fastq fastq)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        List<Integer> qualityScores = Lists.newArrayListWithExpectedSize(size);\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            qualityScores.add(variant.qualityScore(c));\n        }\n        return ImmutableList.copyOf(qualityScores);\n    }\n\n    /**\n     * Copy the quality scores from the specified FASTQ formatted sequence into the specified int array.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @param qualityScores int array of quality scores, must not be null and must be the same\n     *    length as the FASTQ formatted sequence quality\n     * @return the specified int array of quality scores\n     */\n    public static int[] qualityScores(final Fastq fastq, final int[] qualityScores)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        if (qualityScores == null)\n        {\n            throw new IllegalArgumentException(\"qualityScores must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        if (qualityScores.length != size)\n        {\n            throw new IllegalArgumentException(\"qualityScores must be the same length as the FASTQ formatted sequence quality\");\n        }\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            qualityScores[i] = variant.qualityScore(c);\n        }\n        return qualityScores;\n    }\n\n    /**\n     * Return the error probabilities from the specified FASTQ formatted sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return the error probabilities from the specified FASTQ formatted sequence\n     */\n    public static Iterable<Double> errorProbabilities(final Fastq fastq)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        List<Double> errorProbabilities = Lists.newArrayListWithExpectedSize(size);\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            errorProbabilities.add(variant.errorProbability(c));\n        }\n        return ImmutableList.copyOf(errorProbabilities);\n    }\n\n    /**\n     * Copy the error probabilities from the specified FASTQ formatted sequence into the specified double array.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @param errorProbabilities double array of error probabilities, must not be null and must be the same\n     *    length as the FASTQ formatted sequence quality\n     * @return the specified double array of error probabilities\n     */\n    public static double[] errorProbabilities(final Fastq fastq, final double[] errorProbabilities)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        if (errorProbabilities == null)\n        {\n            throw new IllegalArgumentException(\"errorProbabilities must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        if (errorProbabilities.length != size)\n        {\n            throw new IllegalArgumentException(\"errorProbabilities must be the same length as the FASTQ formatted sequence quality\");\n        }\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            errorProbabilities[i] = variant.errorProbability(c);\n        }\n        return errorProbabilities;\n    }\n}","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.bio.program.fastq;\n\nimport junit.framework.TestCase;\n\nimport org.biojava.bio.dist.Distribution;\n\nimport org.biojava.bio.program.phred.PhredSequence;\nimport org.biojava.bio.seq.Sequence;\n\nimport org.biojava.bio.symbol.SymbolList;\n\n/**\n * Unit test for FastqTools.\n */\npublic final class FastqToolsTest extends TestCase\n{\n    private final FastqBuilder builder = new FastqBuilder().withDescription(\"foo\").withSequence(\"ACTG\").withQuality(\"ZZZZ\");\n\n    public void testCreateDNA() throws Exception\n    {\n        SymbolList dna = FastqTools.createDNA(builder.build());\n        assertNotNull(dna);\n        assertEquals(4, dna.length());\n    }\n\n    public void testCreateDNANullFastq() throws Exception\n    {\n        try\n        {\n            FastqTools.createDNA(null);\n            fail(\"createDNA(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testCreateQuality() throws Exception\n    {\n        SymbolList quality = FastqTools.createQuality(builder.build());\n        assertNotNull(quality);\n        assertEquals(4, quality.length());\n    }\n\n    public void testCreateQualityNullFastq() throws Exception\n    {\n        try\n        {\n            FastqTools.createQuality(null);\n            fail(\"createQuality(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testCreateDNASequence() throws Exception\n    {\n        Sequence sequence = FastqTools.createDNASequence(builder.build());\n        assertNotNull(sequence);\n        assertEquals(4, sequence.length());\n    }\n\n    public void testCreateDNASequenceNullFastq() throws Exception\n    {\n        try\n        {\n            FastqTools.createDNASequence(null);\n            fail(\"createDNASequence(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testPhredSequence() throws Exception\n    {\n        PhredSequence sequence = FastqTools.createPhredSequence(builder.build());\n        assertNotNull(sequence);\n        assertEquals(4, sequence.length());\n    }\n\n    public void testCreatePhredSequenceNullFastq() throws Exception\n    {\n        try\n        {\n            FastqTools.createPhredSequence(null);\n            fail(\"createPhredSequence(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testPhredSequenceNotSangerVariant() throws Exception\n    {\n        try\n        {\n            FastqTools.createPhredSequence(builder.withVariant(FastqVariant.FASTQ_ILLUMINA).build());\n            fail(\"createPhredSequence(not sanger variant) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testCreateSymbolDistribution() throws Exception\n    {\n        Distribution[] symbolDistribution = FastqTools.createSymbolDistribution(builder.build());\n        assertNotNull(symbolDistribution);\n        assertEquals(4, symbolDistribution.length);\n    }\n\n    public void testCreateSymbolDistributionNullFastq() throws Exception\n    {\n        try\n        {\n            FastqTools.createSymbolDistribution(null);\n            fail(\"createSymbolDistribution(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testCreateSymbolDistributionNotSangerVariant() throws Exception\n    {\n        try\n        {\n            FastqTools.createSymbolDistribution(builder.withVariant(FastqVariant.FASTQ_ILLUMINA).build());\n            fail(\"createSymbolDistribution(not sanger variant) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScores()\n    {\n        Iterable<Integer> qualityScores = FastqTools.qualityScores(builder.build());\n        assertNotNull(qualityScores);\n        int count = 0;\n        for (Integer qualityScore : qualityScores)\n        {\n            assertNotNull(qualityScore);\n            count++;\n        }\n        assertEquals(4, count);\n    }\n\n    public void testQualityScoresNullFastq()\n    {\n        try\n        {\n            FastqTools.qualityScores(null);\n            fail(\"qualityScores(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresIntArray()\n    {\n        int[] qualityScores = new int[4];\n        FastqTools.qualityScores(builder.build(), qualityScores);\n        for (int i = 0; i < 4; i++)\n        {\n            assertTrue(qualityScores[i] != 0);\n        }\n    }\n\n    public void testQualityScoresIntArrayNullFastq()\n    {\n        try\n        {\n            FastqTools.qualityScores(null, new int[0]);\n            fail(\"qualityScores(null, int[]) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresNullIntArray()\n    {\n        try\n        {\n            FastqTools.qualityScores(builder.build(), null);\n            fail(\"qualityScores(fastq, null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresQualityScoresTooSmall()\n    {\n        try\n        {\n            FastqTools.qualityScores(builder.build(), new int[3]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresQualityScoresTooLarge()\n    {\n        try\n        {\n            FastqTools.qualityScores(builder.build(), new int[5]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilities()\n    {\n        Iterable<Double> errorProbabilities = FastqTools.errorProbabilities(builder.build());\n        assertNotNull(errorProbabilities);\n        int count = 0;\n        for (Double errorProbability : errorProbabilities)\n        {\n            assertNotNull(errorProbability);\n            count++;\n        }\n        assertEquals(4, count);\n    }\n\n    public void testErrorProbabilitiesNullFastq()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(null);\n            fail(\"errorProbabilities(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesDoubleArray()\n    {\n        double[] errorProbabilities = new double[4];\n        FastqTools.errorProbabilities(builder.build(), errorProbabilities);\n        for (int i = 0; i < 0; i++)\n        {\n            assertTrue(errorProbabilities[i] > 0.0d);\n        }\n    }\n\n    public void testErrorProbabilitiesDoubleArrayNullFastq()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(null, new double[0]);\n            fail(\"errorProbabilities(null, double[]) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesNullErrorProbabilities()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(builder.build(), null);\n            fail(\"errorProbabilities(fastq, null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesErrorProbabilitiesTooSmall()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(builder.build(), new double[3]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesErrorProbabilitiesTooLarge()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(builder.build(), new double[5]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\nimport junit.framework.TestCase;\n\n/**\n * Unit test for FastqTools.\n */\npublic final class FastqToolsTest extends TestCase\n{\n    private final FastqBuilder builder = new FastqBuilder().withDescription(\"foo\").withSequence(\"ACTG\").withQuality(\"ZZZZ\");\n\n    public void testQualityScores()\n    {\n        Iterable<Integer> qualityScores = FastqTools.qualityScores(builder.build());\n        assertNotNull(qualityScores);\n        int count = 0;\n        for (Integer qualityScore : qualityScores)\n        {\n            assertNotNull(qualityScore);\n            count++;\n        }\n        assertEquals(4, count);\n    }\n\n    public void testQualityScoresNullFastq()\n    {\n        try\n        {\n            FastqTools.qualityScores(null);\n            fail(\"qualityScores(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresIntArray()\n    {\n        int[] qualityScores = new int[4];\n        FastqTools.qualityScores(builder.build(), qualityScores);\n        for (int i = 0; i < 4; i++)\n        {\n            assertTrue(qualityScores[i] != 0);\n        }\n    }\n\n    public void testQualityScoresIntArrayNullFastq()\n    {\n        try\n        {\n            FastqTools.qualityScores(null, new int[0]);\n            fail(\"qualityScores(null, int[]) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresNullIntArray()\n    {\n        try\n        {\n            FastqTools.qualityScores(builder.build(), null);\n            fail(\"qualityScores(fastq, null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresQualityScoresTooSmall()\n    {\n        try\n        {\n            FastqTools.qualityScores(builder.build(), new int[3]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresQualityScoresTooLarge()\n    {\n        try\n        {\n            FastqTools.qualityScores(builder.build(), new int[5]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilities()\n    {\n        Iterable<Double> errorProbabilities = FastqTools.errorProbabilities(builder.build());\n        assertNotNull(errorProbabilities);\n        int count = 0;\n        for (Double errorProbability : errorProbabilities)\n        {\n            assertNotNull(errorProbability);\n            count++;\n        }\n        assertEquals(4, count);\n    }\n\n    public void testErrorProbabilitiesNullFastq()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(null);\n            fail(\"errorProbabilities(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesDoubleArray()\n    {\n        double[] errorProbabilities = new double[4];\n        FastqTools.errorProbabilities(builder.build(), errorProbabilities);\n        for (int i = 0; i < 0; i++)\n        {\n            assertTrue(errorProbabilities[i] > 0.0d);\n        }\n    }\n\n    public void testErrorProbabilitiesDoubleArrayNullFastq()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(null, new double[0]);\n            fail(\"errorProbabilities(null, double[]) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesNullErrorProbabilities()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(builder.build(), null);\n            fail(\"errorProbabilities(fastq, null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesErrorProbabilitiesTooSmall()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(builder.build(), new double[3]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesErrorProbabilitiesTooLarge()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(builder.build(), new double[5]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n}\n","commitMessage":"refactoring package names, updating @since tags; will have to svn move files next, svn copied them to wrong place\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@9577 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"refactoring package names, updating @since tags; will have to svn move files next, svn copied them to wrong place\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@9577 7c6358e6-4a41-0410-a743-a5b2a554c398\n","allZero":false}