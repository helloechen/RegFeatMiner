{"repository":"biojava","prod_path":"core/src/main/java/org/biojava/bio/seq/db/HashSequenceDB.java","test_path":"core/src/test/java/org/biojava/bio/seq/db/HashSequenceDBTest.java","prod_time":"2009-11-17 02:13:15","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":1,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":1,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"99c101783b2a4a3abe5182ea1410dae49da092a9","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojava.bio.seq.db;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.biojava.bio.BioException;\nimport org.biojava.bio.seq.Sequence;\nimport org.biojava.bio.seq.SequenceIterator;\nimport org.biojava.utils.ChangeEvent;\nimport org.biojava.utils.ChangeSupport;\nimport org.biojava.utils.ChangeVetoException;\n\n/**\n * An implementation of SequenceDB that uses an underlying HashMap to store the\n * sequence objects.\n *\n * @author Matthew Pocock\n * @author <A href=\"mailto:Gerald.Loeffler@vienna.at\">Gerald Loeffler</A>\n */\npublic class HashSequenceDB\n  extends\n    AbstractSequenceDB\n  implements\n    SequenceDB,\n    Serializable {\n  /**\n   * The sequence-by-id map.\n   */\n  final private Map sequenceByID;\n  \n  /**\n   * An object to extract an ID for a sequence.\n   */\n  final private org.biojava.bio.seq.db.IDMaker idMaker;\n\n  /** \n   * The name of this sequence database.\n   */\n  private String name;\n  \n  public String getName() {\n    return name;\n  }\n\n  public Sequence getSequence(String id) \n      throws IllegalIDException\n  {\n      Sequence seq = (Sequence) sequenceByID.get(id);\n      if (seq == null) {\n          throw new IllegalIDException(\"Sequence with ID \" + id + \" could not be found\");\n      }\n      return seq;\n  }\n\n  public Set ids() {\n    return sequenceByID.keySet();\n  }\n\n  public SequenceIterator sequenceIterator() {\n    return new SequenceIterator() {\n      Iterator seqI = sequenceByID.values().iterator();\n      public boolean hasNext() { return seqI.hasNext(); }\n      public Sequence nextSequence() { return (Sequence) seqI.next(); }\n    };\n  }\n\n  /**\n   * Add a sequence under a particular id.\n   *\n   * @param id  the id to use\n   * @param seq the Sequence to add\n   * @throws ChangeVetoException if this addition was vetoed\n   */\n  public void addSequence(String id, Sequence seq)\n  throws ChangeVetoException {\n    if(!hasListeners()) {\n      sequenceByID.put(id, seq);\n    } else {\n      ChangeSupport changeSupport = getChangeSupport(SequenceDB.SEQUENCES);\n      synchronized(changeSupport) {\n        ChangeEvent ce = new ChangeEvent(\n          this,\n          SequenceDB.SEQUENCES,\n          new Object[] { id, seq },\n          null\n        );\n        changeSupport.firePreChangeEvent(ce);\n        sequenceByID.put(id, seq);\n        changeSupport.firePostChangeEvent(ce);\n      }\n    }\n  }\n\n  /**\n   * Retrieve the IDMaker associated with this database.\n   *\n   * @return the current IDMaker object\n   */\n  public org.biojava.bio.seq.db.IDMaker getIDMaker() {\n    return idMaker;\n  }\n  \n  public void addSequence(Sequence seq)\n  throws ChangeVetoException {\n    String id = idMaker.calcID(seq);\n    if(!hasListeners()) {\n      addSequence(id, seq);\n    } else {\n      ChangeSupport changeSupport = getChangeSupport(SequenceDB.SEQUENCES);\n      synchronized(changeSupport) {\n        ChangeEvent ce = new ChangeEvent(\n          this,\n          SequenceDB.SEQUENCES,\n          id,\n          null\n        );\n        changeSupport.firePreChangeEvent(ce);\n        sequenceByID.remove(id);\n        changeSupport.firePostChangeEvent(ce);\n      }\n    }\n  }\n  \n  public void removeSequence(String id)\n  throws BioException, ChangeVetoException {\n    if(!hasListeners()) {\n      sequenceByID.remove(id);\n    } else {\n      ChangeSupport changeSupport = getChangeSupport(SequenceDB.SEQUENCES);\n      synchronized(changeSupport) {\n        ChangeEvent ce = new ChangeEvent(\n          this,\n          SequenceDB.SEQUENCES,\n          null,\n          id\n        );\n        changeSupport.firePreChangeEvent(ce);\n        sequenceByID.remove(id);\n        changeSupport.firePostChangeEvent(ce);\n      }\n    }\n  }\n\n  /**\n   * Generate a HashSequenceDB object that will use byName to generate ids for\n   * sequences and have a null name.\n   */\n  public HashSequenceDB() {\n    this(IDMaker.byName, null);\n  }\n  \n  /**\n   * Generate a HashSequenceDB object that will use idMaker to generate ids for\n   * sequences and have a null name.\n   *\n   * @param idMaker the object that will work out the default id for a sequence\n   */\n  public HashSequenceDB(org.biojava.bio.seq.db.IDMaker idMaker) {\n    this(idMaker, null);\n  }\n  \n  /**\n   * Generate a HashSequenceDB object that will use byName to generate ids and\n   * will have the requested name.\n   *\n   * @param name the name for this database\n   */\n  public HashSequenceDB(String name) {\n    this(IDMaker.byName, name);\n  }\n  \n  /**\n   * Generate a HashSequenceDB object that will use idMaker to generate ids for\n   * sequences and have the requested name.\n   *\n   * @param idMaker the object that will work out the default id for a sequence\n   * @param name the name for this database\n   */\n  public HashSequenceDB(org.biojava.bio.seq.db.IDMaker idMaker, String name) {\n    this.idMaker = idMaker;\n    this.name = name;\n    this.sequenceByID = new HashMap();\n  }\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojava.bio.seq.db;\n\nimport java.io.Serializable;\nimport java.util.LinkedHashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.biojava.bio.BioException;\nimport org.biojava.bio.seq.Sequence;\nimport org.biojava.bio.seq.SequenceIterator;\nimport org.biojava.utils.ChangeEvent;\nimport org.biojava.utils.ChangeSupport;\nimport org.biojava.utils.ChangeVetoException;\n\n/**\n * An implementation of SequenceDB that uses an underlying HashMap to store the\n * sequence objects.\n *\n * @author Matthew Pocock\n * @author <A href=\"mailto:Gerald.Loeffler@vienna.at\">Gerald Loeffler</A>\n * @author Matias Pilpari (LinkedHashMap)\n */\npublic class HashSequenceDB\n  extends\n    AbstractSequenceDB\n  implements\n    SequenceDB,\n    Serializable {\n  /**\n   * The sequence-by-id map.\n   */\n  final private Map sequenceByID;\n  \n  /**\n   * An object to extract an ID for a sequence.\n   */\n  final private org.biojava.bio.seq.db.IDMaker idMaker;\n\n  /** \n   * The name of this sequence database.\n   */\n  private String name;\n  \n  public String getName() {\n    return name;\n  }\n\n  public Sequence getSequence(String id) \n      throws IllegalIDException\n  {\n      Sequence seq = (Sequence) sequenceByID.get(id);\n      if (seq == null) {\n          throw new IllegalIDException(\"Sequence with ID \" + id + \" could not be found\");\n      }\n      return seq;\n  }\n\n  public Set ids() {\n    return sequenceByID.keySet();\n  }\n\n  public SequenceIterator sequenceIterator() {\n    return new SequenceIterator() {\n      Iterator seqI = sequenceByID.values().iterator();\n      public boolean hasNext() { return seqI.hasNext(); }\n      public Sequence nextSequence() { return (Sequence) seqI.next(); }\n    };\n  }\n\n  /**\n   * Add a sequence under a particular id.\n   *\n   * @param id  the id to use\n   * @param seq the Sequence to add\n   * @throws ChangeVetoException if this addition was vetoed\n   */\n  public void addSequence(String id, Sequence seq)\n  throws ChangeVetoException {\n    if(!hasListeners()) {\n      sequenceByID.put(id, seq);\n    } else {\n      ChangeSupport changeSupport = getChangeSupport(SequenceDB.SEQUENCES);\n      synchronized(changeSupport) {\n        ChangeEvent ce = new ChangeEvent(\n          this,\n          SequenceDB.SEQUENCES,\n          new Object[] { id, seq },\n          null\n        );\n        changeSupport.firePreChangeEvent(ce);\n        sequenceByID.put(id, seq);\n        changeSupport.firePostChangeEvent(ce);\n      }\n    }\n  }\n\n  /**\n   * Retrieve the IDMaker associated with this database.\n   *\n   * @return the current IDMaker object\n   */\n  public org.biojava.bio.seq.db.IDMaker getIDMaker() {\n    return idMaker;\n  }\n  \n  public void addSequence(Sequence seq)\n  throws ChangeVetoException {\n    String id = idMaker.calcID(seq);\n    if(!hasListeners()) {\n      addSequence(id, seq);\n    } else {\n      ChangeSupport changeSupport = getChangeSupport(SequenceDB.SEQUENCES);\n      synchronized(changeSupport) {\n        ChangeEvent ce = new ChangeEvent(\n          this,\n          SequenceDB.SEQUENCES,\n          id,\n          null\n        );\n        changeSupport.firePreChangeEvent(ce);\n        sequenceByID.remove(id);\n        changeSupport.firePostChangeEvent(ce);\n      }\n    }\n  }\n  \n  public void removeSequence(String id)\n  throws BioException, ChangeVetoException {\n    if(!hasListeners()) {\n      sequenceByID.remove(id);\n    } else {\n      ChangeSupport changeSupport = getChangeSupport(SequenceDB.SEQUENCES);\n      synchronized(changeSupport) {\n        ChangeEvent ce = new ChangeEvent(\n          this,\n          SequenceDB.SEQUENCES,\n          null,\n          id\n        );\n        changeSupport.firePreChangeEvent(ce);\n        sequenceByID.remove(id);\n        changeSupport.firePostChangeEvent(ce);\n      }\n    }\n  }\n\n  /**\n   * Generate a HashSequenceDB object that will use byName to generate ids for\n   * sequences and have a null name.\n   */\n  public HashSequenceDB() {\n    this(IDMaker.byName, null);\n  }\n  \n  /**\n   * Generate a HashSequenceDB object that will use idMaker to generate ids for\n   * sequences and have a null name.\n   *\n   * @param idMaker the object that will work out the default id for a sequence\n   */\n  public HashSequenceDB(org.biojava.bio.seq.db.IDMaker idMaker) {\n    this(idMaker, null);\n  }\n  \n  /**\n   * Generate a HashSequenceDB object that will use byName to generate ids and\n   * will have the requested name.\n   *\n   * @param name the name for this database\n   */\n  public HashSequenceDB(String name) {\n    this(IDMaker.byName, name);\n  }\n  \n  /**\n   * Generate a HashSequenceDB object that will use idMaker to generate ids for\n   * sequences and have the requested name.\n   *\n   * @param idMaker the object that will work out the default id for a sequence\n   * @param name the name for this database\n   */\n  public HashSequenceDB(org.biojava.bio.seq.db.IDMaker idMaker, String name) {\n    this.idMaker = idMaker;\n    this.name = name;\n    this.sequenceByID = new LinkedHashMap();\n  }\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojava.bio.seq.db;\n\nimport junit.framework.Test;\nimport junit.framework.TestSuite;\n\n/**\n * Runs SequenceDB tests using HashSequenceDB.\n * \n * @author Len Trigg\n */\npublic class HashSequenceDBTest extends AbstractSequenceDBTest {\n    \n\n    public HashSequenceDBTest(String name) {\n        super(name);\n    }\n\n    protected SequenceDB getSequenceDB() throws Exception {\n        return new HashSequenceDB();\n    }\n    \n    public static Test suite() {\n        return new TestSuite(HashSequenceDBTest.class);\n    }\n    \n    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }    \n}\n","changedTest":"","commitMessage":"Matias Pilpari's LinkedHashMap addition.\n\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@7271 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"","allZero":false}