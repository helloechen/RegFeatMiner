{"repository":"biojava","prod_path":"biojava3-alignment/src/main/java/org/biojava3/alignment/SmithWaterman.java","test_path":"biojava3-alignment/src/test/java/org/biojava3/alignment/SmithWatermanTest.java","prod_time":"2010-07-07 17:15:37","test_time":"2010-07-27 13:26:45","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":7,"add_classname_line":0,"add_condition_line":1,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":10,"del_classname_line":0,"del_condition_line":2,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"138b67585baa82a285f47bc4d8d51685f14e781a","test_commitID":"0118cdbd110bbd3b2355c465bb633dbc150cb032","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 24, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport java.util.List;\n\nimport org.biojava3.alignment.template.AbstractPairwiseSequenceAligner;\nimport org.biojava3.alignment.template.AlignedSequence;\nimport org.biojava3.alignment.template.AlignedSequence.Step;\nimport org.biojava3.alignment.template.GapPenalty;\nimport org.biojava3.alignment.template.SubstitutionMatrix;\nimport org.biojava3.core.sequence.template.Compound;\nimport org.biojava3.core.sequence.template.Sequence;\n\n/**\n * Smith and Waterman defined an algorithm for pairwise local sequence alignments (best match of sections from each\n * {@link Sequence}).  This class performs such local sequence comparisons efficiently by dynamic programming.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} of the alignment pair is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class SmithWaterman<S extends Sequence<C>, C extends Compound> extends AbstractPairwiseSequenceAligner<S, C> {\n\n    private int xMax, yMax, xStart, yStart;\n\n    /**\n     * Before running a pairwise local sequence alignment, data must be sent in via calls to\n     * {@link #setQuery(Sequence)}, {@link #setTarget(Sequence)}, {@link #setGapPenalty(GapPenalty)}, and\n     * {@link #setSubstitutionMatrix(SubstitutionMatrix)}.\n     */\n    public SmithWaterman() {\n    }\n\n    /**\n     * Prepares for a pairwise local sequence alignment.\n     *\n     * @param query the first {@link Sequence} of the pair to align\n     * @param target the second {@link Sequence} of the pair to align\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public SmithWaterman(S query, S target, GapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n    }\n\n    // helper methods\n\n    // scores with linear gap penalty; saves memory by skipping allocation of separate matching and gap arrays\n    @Override\n    protected void alignScoreLinear() {\n        for (int x = 1; x < scores.length; x++) {\n            scores[x][0] = 0;\n        }\n        for (int y = 1; y < scores[0].length; y++) {\n            scores[0][y] = 0;\n        }\n        for (int x = 1; x < scores.length; x++) {\n            for (int y = 1; y < scores[0].length; y++) {\n                scores[x][y] = (short) Math.max(Math.max(scores[x - 1][y] + getGapPenalty().getExtensionPenalty(),\n                        scores[x][y - 1] + getGapPenalty().getExtensionPenalty()), Math.max(scores[x - 1][y - 1] +\n                        getSubstitutionMatrix().getValue(getQuery().getCompoundAt(x), getTarget().getCompoundAt(y)),\n                        0));\n                if (scores[x][y] > scores[xMax][yMax]) {\n                    xMax = x;\n                    yMax = y;\n                }\n            }\n        }\n    }\n\n    // traces back through score matrix; chooses highroad alignment\n    @Override\n    protected void alignTracebackLinear(List<Step> sx, List<Step> sy) {\n        int x = xMax, y = yMax;\n        while (scores[x][y] > 0) {\n            if (scores[x][y] == scores[x - 1][y] + getGapPenalty().getExtensionPenalty()) {\n                sx.add(0, Step.COMPOUND);\n                sy.add(0, Step.GAP);\n                x--;\n            } else if (scores[x][y] == scores[x - 1][y - 1] + getSubstitutionMatrix().getValue(\n                    getQuery().getCompoundAt(x), getTarget().getCompoundAt(y))) {\n                sx.add(0, Step.COMPOUND);\n                sy.add(0, Step.COMPOUND);\n                x--;\n                y--;\n            } else {\n                sx.add(0, Step.GAP);\n                sy.add(0, Step.COMPOUND);\n                y--;\n            }\n        }\n        xStart = x;\n        yStart = y;\n    }\n\n    // scores with affine gap penalty\n    @Override\n    protected void alignScoreAffine(short[][] ix, short[][] iy) {\n        GapPenalty gapPenalty = getGapPenalty();\n        short min = (short) (Short.MIN_VALUE - gapPenalty.getOpenPenalty() - gapPenalty.getExtensionPenalty());\n        ix[0][0] = iy[0][0] = gapPenalty.getOpenPenalty();\n        for (int x = 1; x < scores.length; x++) {\n            scores[x][0] = 0;\n            ix[x][0] = iy[x][0] = min;\n        }\n        for (int y = 1; y < scores[0].length; y++) {\n            scores[0][y] = 0;\n            iy[0][y] = ix[0][y] = min;\n        }\n        for (int x = 1; x < scores.length; x++) {\n            for (int y = 1; y < scores[0].length; y++) {\n                scores[x][y] = (short) Math.max(Math.max(Math.max(scores[x - 1][y - 1], ix[x - 1][y - 1]),\n                        iy[x - 1][y - 1]) + getSubstitutionMatrix().getValue(getQuery().getCompoundAt(x),\n                        getTarget().getCompoundAt(y)), 0);\n                ix[x][y] = (short) (Math.max(scores[x - 1][y] + gapPenalty.getOpenPenalty(), ix[x - 1][y])\n                        + gapPenalty.getExtensionPenalty());\n                iy[x][y] = (short) (Math.max(scores[x][y - 1] + gapPenalty.getOpenPenalty(), iy[x][y - 1])\n                        + gapPenalty.getExtensionPenalty());\n                if (scores[x][y] > scores[xMax][yMax]) {\n                    xMax = x;\n                    yMax = y;\n                }\n            }\n        }\n    }\n\n    // traces back through score matrices; chooses highroad alignment\n    @Override\n    protected void alignTracebackAffine(List<Step> sx, List<Step> sy, short[][] ix, short[][] iy) {\n        int x = xMax, y = yMax;\n        Last last = Last.M;\n        while (scores[x][y] > 0) {\n            switch (last) {\n            case IX:\n                sx.add(0, Step.COMPOUND);\n                sy.add(0, Step.GAP);\n                x--;\n                last = (scores[x][y] + getGapPenalty().getOpenPenalty() > ix[x][y]) ? Last.M : Last.IX;\n                break;\n            case M:\n                sx.add(0, Step.COMPOUND);\n                sy.add(0, Step.COMPOUND);\n                x--;\n                y--;\n                int max = Math.max(Math.max(scores[x][y], ix[x][y]), iy[x][y]);\n                last = (max == ix[x][y]) ? Last.IX : ((max == scores[x][y]) ? Last.M : Last.IY);\n                break;\n            case IY:\n                sx.add(0, Step.GAP);\n                sy.add(0, Step.COMPOUND);\n                y--;\n                last = (scores[x][y] + getGapPenalty().getOpenPenalty() >= iy[x][y]) ? Last.M : Last.IY;\n            }\n        }\n        xStart = x;\n        yStart = y;\n    }\n\n    // sets output fields\n    @Override\n    protected void alignSetOutputs(List<Step> sx, List<Step> sy) {\n        score = scores[xMax][yMax];\n        profile = pair = new SimpleSequencePair<S, C>(getQuery(), getTarget(), sx, xStart, scores.length - 1 - xMax,\n                sy, yStart, scores[0].length - 1 - yMax);\n    }\n\n    // resets output fields\n    @Override\n    protected void reset() {\n        super.reset();\n        xMax = yMax = xStart = yStart = score = min = 0;\n    }\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 24, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport java.util.List;\n\nimport org.biojava3.alignment.template.AbstractPairwiseSequenceAligner;\nimport org.biojava3.alignment.template.AlignedSequence;\nimport org.biojava3.alignment.template.AlignedSequence.Step;\nimport org.biojava3.alignment.template.GapPenalty;\nimport org.biojava3.alignment.template.SubstitutionMatrix;\nimport org.biojava3.core.sequence.template.Compound;\nimport org.biojava3.core.sequence.template.Sequence;\n\n/**\n * Smith and Waterman defined an algorithm for pairwise local sequence alignments (best match of sections from each\n * {@link Sequence}).  This class performs such local sequence comparisons efficiently by dynamic programming.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} of the alignment pair is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class SmithWaterman<S extends Sequence<C>, C extends Compound> extends AbstractPairwiseSequenceAligner<S, C> {\n\n    private int xMax, yMax, xStart, yStart;\n\n    /**\n     * Before running a pairwise local sequence alignment, data must be sent in via calls to\n     * {@link #setQuery(Sequence)}, {@link #setTarget(Sequence)}, {@link #setGapPenalty(GapPenalty)}, and\n     * {@link #setSubstitutionMatrix(SubstitutionMatrix)}.\n     */\n    public SmithWaterman() {\n    }\n\n    /**\n     * Prepares for a pairwise local sequence alignment.\n     *\n     * @param query the first {@link Sequence} of the pair to align\n     * @param target the second {@link Sequence} of the pair to align\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public SmithWaterman(S query, S target, GapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n    }\n\n    // helper methods\n\n    // scores with linear gap penalty; saves memory by skipping allocation of separate matching and gap arrays\n    @Override\n    protected void alignScoreLinear() {\n        for (int x = 1; x < scores.length; x++) {\n            scores[x][0] = 0;\n        }\n        for (int y = 1; y < scores[0].length; y++) {\n            scores[0][y] = 0;\n        }\n        for (int x = 1; x < scores.length; x++) {\n            for (int y = 1; y < scores[0].length; y++) {\n                scores[x][y] = (short) Math.max(Math.max(scores[x - 1][y] + getGapPenalty().getExtensionPenalty(),\n                        scores[x][y - 1] + getGapPenalty().getExtensionPenalty()), Math.max(scores[x - 1][y - 1] +\n                        alignScoreColumns(x, y), 0));\n                if (scores[x][y] > scores[xMax][yMax]) {\n                    xMax = x;\n                    yMax = y;\n                }\n            }\n        }\n    }\n\n    // traces back through score matrix; chooses highroad alignment\n    @Override\n    protected void alignTracebackLinear(List<Step> sx, List<Step> sy) {\n        int x = xMax, y = yMax;\n        while (scores[x][y] > 0) {\n            if (scores[x][y] == scores[x - 1][y] + getGapPenalty().getExtensionPenalty()) {\n                sx.add(0, Step.COMPOUND);\n                sy.add(0, Step.GAP);\n                x--;\n            } else if (scores[x][y] == scores[x - 1][y - 1] + alignScoreColumns(x, y)) {\n                sx.add(0, Step.COMPOUND);\n                sy.add(0, Step.COMPOUND);\n                x--;\n                y--;\n            } else {\n                sx.add(0, Step.GAP);\n                sy.add(0, Step.COMPOUND);\n                y--;\n            }\n        }\n        xStart = x;\n        yStart = y;\n    }\n\n    // scores with affine gap penalty\n    @Override\n    protected void alignScoreAffine(short[][] ix, short[][] iy) {\n        GapPenalty gapPenalty = getGapPenalty();\n        short min = (short) (Short.MIN_VALUE - gapPenalty.getOpenPenalty() - gapPenalty.getExtensionPenalty());\n        ix[0][0] = iy[0][0] = gapPenalty.getOpenPenalty();\n        for (int x = 1; x < scores.length; x++) {\n            scores[x][0] = 0;\n            ix[x][0] = iy[x][0] = min;\n        }\n        for (int y = 1; y < scores[0].length; y++) {\n            scores[0][y] = 0;\n            iy[0][y] = ix[0][y] = min;\n        }\n        for (int x = 1; x < scores.length; x++) {\n            for (int y = 1; y < scores[0].length; y++) {\n                scores[x][y] = (short) Math.max(Math.max(Math.max(scores[x - 1][y - 1], ix[x - 1][y - 1]),\n                        iy[x - 1][y - 1]) + alignScoreColumns(x, y), 0);\n                ix[x][y] = (short) (Math.max(scores[x - 1][y] + gapPenalty.getOpenPenalty(), ix[x - 1][y]) +\n                        gapPenalty.getExtensionPenalty());\n                iy[x][y] = (short) (Math.max(scores[x][y - 1] + gapPenalty.getOpenPenalty(), iy[x][y - 1]) +\n                        gapPenalty.getExtensionPenalty());\n                if (scores[x][y] > scores[xMax][yMax]) {\n                    xMax = x;\n                    yMax = y;\n                }\n            }\n        }\n    }\n\n    // traces back through score matrices; chooses highroad alignment\n    @Override\n    protected void alignTracebackAffine(List<Step> sx, List<Step> sy, short[][] ix, short[][] iy) {\n        int x = xMax, y = yMax;\n        Last last = Last.M;\n        while (scores[x][y] > 0) {\n            switch (last) {\n            case IX:\n                sx.add(0, Step.COMPOUND);\n                sy.add(0, Step.GAP);\n                x--;\n                last = (scores[x][y] + getGapPenalty().getOpenPenalty() > ix[x][y]) ? Last.M : Last.IX;\n                break;\n            case M:\n                sx.add(0, Step.COMPOUND);\n                sy.add(0, Step.COMPOUND);\n                x--;\n                y--;\n                int max = Math.max(Math.max(scores[x][y], ix[x][y]), iy[x][y]);\n                last = (max == ix[x][y]) ? Last.IX : ((max == scores[x][y]) ? Last.M : Last.IY);\n                break;\n            case IY:\n                sx.add(0, Step.GAP);\n                sy.add(0, Step.COMPOUND);\n                y--;\n                last = (scores[x][y] + getGapPenalty().getOpenPenalty() >= iy[x][y]) ? Last.M : Last.IY;\n            }\n        }\n        xStart = x;\n        yStart = y;\n    }\n\n    // sets output fields\n    @Override\n    protected void alignSetOutputs(List<Step> sx, List<Step> sy) {\n        score = scores[xMax][yMax];\n        profile = pair = new SimpleSequencePair<S, C>(getQuery(), getTarget(), sx, xStart, scores.length - 1 - xMax,\n                sy, yStart, scores[0].length - 1 - yMax);\n    }\n\n    // resets output fields\n    @Override\n    protected void reset() {\n        super.reset();\n        xMax = yMax = xStart = yStart = score = min = 0;\n    }\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 29, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport static org.junit.Assert.*;\n\nimport org.biojava3.alignment.template.GapPenalty;\nimport org.biojava3.alignment.template.SubstitutionMatrix;\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class SmithWatermanTest {\n\n    private ProteinSequence query, target;\n    private GapPenalty gaps;\n    private SubstitutionMatrix<AminoAcidCompound> blosum62;\n    private SmithWaterman<ProteinSequence, AminoAcidCompound> alignment, self;\n\n    @Before\n    public void setup() {\n        query = new ProteinSequence(\"AERNDKK\");\n        target = new ProteinSequence(\"ERDNKGFPS\");\n        gaps = new SimpleGapPenalty((short) 2, (short) 1);\n        blosum62 = new SimpleSubstitutionMatrix<AminoAcidCompound>();\n        alignment = new SmithWaterman<ProteinSequence, AminoAcidCompound>(query, target, gaps, blosum62);\n        self = new SmithWaterman<ProteinSequence, AminoAcidCompound>(query, query, gaps, blosum62);\n    }\n\n    @Test\n    public void testSmithWaterman() {\n        SmithWaterman<ProteinSequence, AminoAcidCompound> alig =\n                new SmithWaterman<ProteinSequence, AminoAcidCompound>();\n        alig.setQuery(query);\n        alig.setTarget(target);\n        alig.setGapPenalty(gaps);\n        alig.setSubstitutionMatrix(blosum62);\n        assertEquals(alig.getPair().toString(), String.format(\"ERNDKK%nER-DNK%n\"));\n    }\n\n    @Test\n    public void testGetQuery() {\n        assertEquals(alignment.getQuery(), query);\n        assertEquals(self.getQuery(), query);\n    }\n\n    @Test\n    public void testGetTarget() {\n        assertEquals(alignment.getTarget(), target);\n        assertEquals(self.getTarget(), query);\n    }\n\n    @Test\n    public void testGetGapPenalty() {\n        assertEquals(alignment.getGapPenalty(), gaps);\n        assertEquals(self.getGapPenalty(), gaps);\n    }\n\n    @Test\n    public void testGetSubstitutionMatrix() {\n        assertEquals(alignment.getSubstitutionMatrix(), blosum62);\n        assertEquals(self.getSubstitutionMatrix(), blosum62);\n    }\n\n    @Test\n    public void testIsStoringScoreMatrix() {\n        assertFalse(alignment.isStoringScoreMatrix());\n        assertFalse(self.isStoringScoreMatrix());\n    }\n\n    @Test\n    public void testSetStoringScoreMatrix() {\n        assertFalse(alignment.isStoringScoreMatrix());\n        alignment.setStoringScoreMatrix(true);\n        assertTrue(alignment.isStoringScoreMatrix());\n    }\n\n    @Test\n    public void testGetScoreMatrix() {\n        short[][] scores = alignment.getScoreMatrix();\n        assertEquals(scores[2][2], 2);\n        assertEquals(scores[4][3], 11);\n        scores = self.getScoreMatrix();\n        assertEquals(scores[2][2], 9);\n        assertEquals(scores[4][3], 11);\n    }\n\n    @Test\n    public void testGetScoreMatrixAsString() {\n        assertEquals(alignment.getScoreMatrixAsString(), String.format(\n                \"      E  R  D  N  K  G  F  P  S%n\" +\n                \"   0  0  0  0  0  0  0  0  0  0%n\" +\n                \"A  0  0  0  0  0  0  0  0  0  1%n\" +\n                \"E  0  5  2  2  0  1  0  0  0  0%n\" +\n                \"R  0  2 10  7  6  5  4  3  2  1%n\" +\n                \"N  0  1  7 11 13 10  9  8  7  6%n\" +\n                \"D  0  2  6 13 12 12  9  8  7  7%n\" +\n                \"K  0  1  5 10 13 17 14 13 12 11%n\" +\n                \"K  0  1  4  9 10 18 15 14 13 12%n\"));\n        assertEquals(self.getScoreMatrixAsString(), String.format(\n                \"      A  E  R  N  D  K  K%n\" +\n                \"   0  0  0  0  0  0  0  0%n\" +\n                \"A  0  4  1  0  0  0  0  0%n\" +\n                \"E  0  1  9  6  5  4  3  2%n\" +\n                \"R  0  0  6 14 11 10  9  8%n\" +\n                \"N  0  0  5 11 20 17 16 15%n\" +\n                \"D  0  0  4 10 17 26 23 22%n\" +\n                \"K  0  0  3  9 16 23 31 28%n\" +\n                \"K  0  0  2  8 15 22 28 36%n\"));\n    }\n\n    @Test\n    public void testGetScoreMatrixAt() {\n        assertEquals(alignment.getScoreMatrixAt(5,3), 13);\n        assertEquals(self.getScoreMatrixAt(5,4), 17);\n    }\n\n    @Test\n    public void testGetComputationTime() {\n        assertTrue(alignment.getComputationTime() > 0);\n        assertTrue(self.getComputationTime() > 0);\n    }\n\n    @Test\n    public void testGetProfile() {\n        assertEquals(alignment.getProfile().toString(), String.format(\"ERNDKK%nER-DNK%n\"));\n        assertEquals(self.getProfile().toString(), String.format(\"AERNDKK%nAERNDKK%n\"));\n    }\n\n    @Test\n    public void testGetMaxScore() {\n        assertEquals(alignment.getMaxScore(), 50);\n        assertEquals(self.getMaxScore(), 36);\n    }\n\n    @Test\n    public void testGetMinScore() {\n        assertEquals(alignment.getMinScore(), 0);\n        assertEquals(self.getMinScore(), 0);\n    }\n\n    @Test\n    public void testGetScore() {\n        assertEquals(alignment.getScore(), 18);\n        assertEquals(self.getScore(), 36);\n    }\n\n    @Test\n    public void testGetPair() {\n        assertEquals(alignment.getPair().toString(), String.format(\"ERNDKK%nER-DNK%n\"));\n        assertEquals(self.getPair().toString(), String.format(\"AERNDKK%nAERNDKK%n\"));\n    }\n\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 29, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport static org.junit.Assert.*;\n\nimport org.biojava3.alignment.template.GapPenalty;\nimport org.biojava3.alignment.template.SubstitutionMatrix;\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class SmithWatermanTest {\n\n    private ProteinSequence query, target;\n    private GapPenalty gaps;\n    private SubstitutionMatrix<AminoAcidCompound> blosum62;\n    private SmithWaterman<ProteinSequence, AminoAcidCompound> alignment, self;\n\n    @Before\n    public void setup() {\n        query = new ProteinSequence(\"AERNDKK\");\n        target = new ProteinSequence(\"ERDNKGFPS\");\n        gaps = new SimpleGapPenalty((short) 2, (short) 1);\n        blosum62 = SubstitutionMatrixHelper.getBlosum62();\n        alignment = new SmithWaterman<ProteinSequence, AminoAcidCompound>(query, target, gaps, blosum62);\n        self = new SmithWaterman<ProteinSequence, AminoAcidCompound>(query, query, gaps, blosum62);\n    }\n\n    @Test\n    public void testSmithWaterman() {\n        SmithWaterman<ProteinSequence, AminoAcidCompound> alig =\n                new SmithWaterman<ProteinSequence, AminoAcidCompound>();\n        alig.setQuery(query);\n        alig.setTarget(target);\n        alig.setGapPenalty(gaps);\n        alig.setSubstitutionMatrix(blosum62);\n        assertEquals(alig.getPair().toString(), String.format(\"ERNDKK%nER-DNK%n\"));\n    }\n\n    @Test\n    public void testGetQuery() {\n        assertEquals(alignment.getQuery(), query);\n        assertEquals(self.getQuery(), query);\n    }\n\n    @Test\n    public void testGetTarget() {\n        assertEquals(alignment.getTarget(), target);\n        assertEquals(self.getTarget(), query);\n    }\n\n    @Test\n    public void testGetGapPenalty() {\n        assertEquals(alignment.getGapPenalty(), gaps);\n        assertEquals(self.getGapPenalty(), gaps);\n    }\n\n    @Test\n    public void testGetSubstitutionMatrix() {\n        assertEquals(alignment.getSubstitutionMatrix(), blosum62);\n        assertEquals(self.getSubstitutionMatrix(), blosum62);\n    }\n\n    @Test\n    public void testIsStoringScoreMatrix() {\n        assertFalse(alignment.isStoringScoreMatrix());\n        assertFalse(self.isStoringScoreMatrix());\n    }\n\n    @Test\n    public void testSetStoringScoreMatrix() {\n        assertFalse(alignment.isStoringScoreMatrix());\n        alignment.setStoringScoreMatrix(true);\n        assertTrue(alignment.isStoringScoreMatrix());\n    }\n\n    @Test\n    public void testGetScoreMatrix() {\n        short[][] scores = alignment.getScoreMatrix();\n        assertEquals(scores[2][2], 2);\n        assertEquals(scores[4][3], 11);\n        scores = self.getScoreMatrix();\n        assertEquals(scores[2][2], 9);\n        assertEquals(scores[4][3], 11);\n    }\n\n    @Test\n    public void testGetScoreMatrixAsString() {\n        assertEquals(alignment.getScoreMatrixAsString(), String.format(\n                \"      E  R  D  N  K  G  F  P  S%n\" +\n                \"   0  0  0  0  0  0  0  0  0  0%n\" +\n                \"A  0  0  0  0  0  0  0  0  0  1%n\" +\n                \"E  0  5  2  2  0  1  0  0  0  0%n\" +\n                \"R  0  2 10  7  6  5  4  3  2  1%n\" +\n                \"N  0  1  7 11 13 10  9  8  7  6%n\" +\n                \"D  0  2  6 13 12 12  9  8  7  7%n\" +\n                \"K  0  1  5 10 13 17 14 13 12 11%n\" +\n                \"K  0  1  4  9 10 18 15 14 13 12%n\"));\n        assertEquals(self.getScoreMatrixAsString(), String.format(\n                \"      A  E  R  N  D  K  K%n\" +\n                \"   0  0  0  0  0  0  0  0%n\" +\n                \"A  0  4  1  0  0  0  0  0%n\" +\n                \"E  0  1  9  6  5  4  3  2%n\" +\n                \"R  0  0  6 14 11 10  9  8%n\" +\n                \"N  0  0  5 11 20 17 16 15%n\" +\n                \"D  0  0  4 10 17 26 23 22%n\" +\n                \"K  0  0  3  9 16 23 31 28%n\" +\n                \"K  0  0  2  8 15 22 28 36%n\"));\n    }\n\n    @Test\n    public void testGetScoreMatrixAt() {\n        assertEquals(alignment.getScoreMatrixAt(5,3), 13);\n        assertEquals(self.getScoreMatrixAt(5,4), 17);\n    }\n\n    @Test\n    public void testGetComputationTime() {\n        assertTrue(alignment.getComputationTime() > 0);\n        assertTrue(self.getComputationTime() > 0);\n    }\n\n    @Test\n    public void testGetProfile() {\n        assertEquals(alignment.getProfile().toString(), String.format(\"ERNDKK%nER-DNK%n\"));\n        assertEquals(self.getProfile().toString(), String.format(\"AERNDKK%nAERNDKK%n\"));\n    }\n\n    @Test\n    public void testGetMaxScore() {\n        assertEquals(alignment.getMaxScore(), 50);\n        assertEquals(self.getMaxScore(), 36);\n    }\n\n    @Test\n    public void testGetMinScore() {\n        assertEquals(alignment.getMinScore(), 0);\n        assertEquals(self.getMinScore(), 0);\n    }\n\n    @Test\n    public void testGetScore() {\n        assertEquals(alignment.getScore(), 18);\n        assertEquals(self.getScore(), 36);\n    }\n\n    @Test\n    public void testGetPair() {\n        assertEquals(alignment.getPair().toString(), String.format(\"ERNDKK%nER-DNK%n\"));\n        assertEquals(self.getPair().toString(), String.format(\"AERNDKK%nAERNDKK%n\"));\n    }\n\n}\n","commitMessage":"refactored aligners\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8071 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"updated tests to use SubstitutionMatrixHelper\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8144 7c6358e6-4a41-0410-a743-a5b2a554c398\n","allZero":false}