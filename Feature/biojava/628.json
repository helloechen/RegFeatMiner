{"repository":"biojava","prod_path":"biojava-structure/src/main/java/org/biojava/nbio/structure/BioAssemblyIdentifier.java","test_path":"biojava-structure/src/test/java/org/biojava/nbio/structure/TestBioAssemblyIdentifier.java","prod_time":"2016-05-20 02:48:21","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":1,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":1,"del_annotation_line":0,"del_call_line":1,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":1,"label":"NEGATIVE","prod_commitID":"337ca4556ed6952b32e50c594ad232d2409af732","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.structure;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.biojava.nbio.structure.align.util.AtomCache;\n\npublic class BioAssemblyIdentifier implements StructureIdentifier {\n\tprivate String pdbCode;\n\tprivate int biolNr;\n\n\tpublic static final Pattern BIO_NAME_PATTERN = Pattern.compile(\"^(?:BIO:)([0-9][a-z0-9]{3})(?::([0-9]+))?$\", Pattern.CASE_INSENSITIVE);\n\n\tpublic BioAssemblyIdentifier(String name) {\n\t\tMatcher match = BIO_NAME_PATTERN.matcher(name);\n\t\tif(! match.matches() ) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid BIO identifier\");\n\t\t}\n\t\tpdbCode = match.group(1);\n\t\tif(match.group(2) != null) {\n\t\t\tbiolNr = Integer.parseInt(match.group(2));\n\t\t} else {\n\t\t\tbiolNr = 1;\n\t\t}\n\t}\n\n\tpublic BioAssemblyIdentifier(String pdbCode, int biolNr) {\n\t\tthis.pdbCode = pdbCode;\n\t\tthis.biolNr = biolNr;\n\t}\n\n\t@Override\n\tpublic String getIdentifier() {\n\t\tif( biolNr < 0) {\n\t\t\treturn \"BIO:\"+pdbCode;\n\t\t} else {\n\t\t\treturn String.format(\"BIO:%s:%d\",pdbCode,biolNr);\n\t\t}\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn getIdentifier();\n\t}\n\n\t@Override\n\tpublic Structure loadStructure(AtomCache cache) throws StructureException,\n\t\t\tIOException {\n\t\treturn cache.getBiologicalAssembly(pdbCode, biolNr);\n\t}\n\n\t@Override\n\tpublic SubstructureIdentifier toCanonical() throws StructureException {\n\t\t// null pdbCode indicates that the structure can't be loaded by AtomCache\n\t\treturn new SubstructureIdentifier(null, new ArrayList<ResidueRange>());\n\t}\n\n\t@Override\n\tpublic Structure reduce(Structure input) throws StructureException {\n\t\t// Should be the full structure\n\t\treturn input;\n\t}\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.structure;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.biojava.nbio.structure.align.util.AtomCache;\n\npublic class BioAssemblyIdentifier implements StructureIdentifier {\n\tprivate String pdbCode;\n\tprivate int biolNr;\n\n\tpublic static final Pattern BIO_NAME_PATTERN = Pattern.compile(\"^(?:BIO:)([0-9][a-z0-9]{3})(?::([0-9]+))?$\", Pattern.CASE_INSENSITIVE);\n\n\tpublic BioAssemblyIdentifier(String name) {\n\t\tMatcher match = BIO_NAME_PATTERN.matcher(name);\n\t\tif(! match.matches() ) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid BIO identifier\");\n\t\t}\n\t\tpdbCode = match.group(1);\n\t\tif(match.group(2) != null) {\n\t\t\tbiolNr = Integer.parseInt(match.group(2));\n\t\t} else {\n\t\t\tbiolNr = 1;\n\t\t}\n\t}\n\n\tpublic BioAssemblyIdentifier(String pdbCode, int biolNr) {\n\t\tthis.pdbCode = pdbCode;\n\t\tthis.biolNr = biolNr;\n\t}\n\n\t@Override\n\tpublic String getIdentifier() {\n\t\tif( biolNr < 0) {\n\t\t\treturn \"BIO:\"+pdbCode;\n\t\t} else {\n\t\t\treturn String.format(\"BIO:%s:%d\",pdbCode,biolNr);\n\t\t}\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn getIdentifier();\n\t}\n\n\t@Override\n\tpublic Structure loadStructure(AtomCache cache) throws StructureException,\n\t\t\tIOException {\n\t\treturn cache.getBiologicalAssembly(pdbCode, biolNr, AtomCache.DEFAULT_BIOASSEMBLY_STYLE);\n\t}\n\n\t@Override\n\tpublic SubstructureIdentifier toCanonical() throws StructureException {\n\t\t// null pdbCode indicates that the structure can't be loaded by AtomCache\n\t\treturn new SubstructureIdentifier(null, new ArrayList<ResidueRange>());\n\t}\n\n\t@Override\n\tpublic Structure reduce(Structure input) throws StructureException {\n\t\t// Should be the full structure\n\t\treturn input;\n\t}\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.structure;\n\nimport static org.junit.Assert.*;\n\nimport java.io.IOException;\n\nimport org.biojava.nbio.structure.align.util.AtomCache;\nimport org.junit.Test;\n\npublic class TestBioAssemblyIdentifier {\n\n\n\t@Test\n\tpublic void test() throws IOException, StructureException {\n\n\t\tAtomCache cache = new AtomCache();\n\t\tBioAssemblyIdentifier id;\n\t\tStructure s;\n\n\t\t// first assembly\n\t\tid = new BioAssemblyIdentifier(\"BIO:2ehz:1\");\n\t\ts = cache.getStructure(id);\n\t\tassertEquals(\"Number of models\",8, s.nrModels());\n\t\tassertEquals(\"Number of chains per model\",11, s.getChains(0).size());\n\t\t// equivalent\n\t\tid = new BioAssemblyIdentifier(\"BIO:2ehz\");\n\t\ts = cache.getStructure(id);\n\t\tassertEquals(\"Number of models\",8, s.nrModels());\n\t\tassertEquals(\"Number of chains per model\",1,s.getPolyChains(0).size());\n\t\t// No second\n\t\tid = new BioAssemblyIdentifier(\"BIO:2ehz:2\");\n\t\ttry {\n\t\t\ts = cache.getStructure(id);\n\t\t\tfail(\"Expected exception for invalid assembly number\");\n\t\t} catch( StructureException e) {}\n\t\t// AU\n\t\tid = new BioAssemblyIdentifier(\"BIO:2ehz:0\");\n\t\ts = cache.getStructure(id);\n\t\tassertEquals(\"Number of models\",1, s.nrModels());\n\t\tassertEquals(\"Number of chains per model\",1,s.getPolyChains(0).size());\n\n\t}\n\n}\n","changedTest":"","commitMessage":"Implemented output of \"flattened\" bioassemblies (single model, chains\nadded)","test_commitMessage":"","allZero":false}