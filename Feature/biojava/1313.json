{"repository":"biojava","prod_path":"biojava3-genome/src/main/java/org/biojava3/genome/GeneFeatureHelper.java","test_path":"biojava3-genome/src/test/java/org/biojava3/genome/GeneFeatureHelperTest.java","prod_time":"2010-12-21 05:03:25","test_time":"2010-12-21 05:03:25","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":37,"add_classname_line":0,"add_condition_line":5,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":14,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"af17288ee3298d7ca151192121a1ee4327d592e7","test_commitID":"af17288ee3298d7ca151192121a1ee4327d592e7","isfound":"found test change","originPro":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage org.biojava3.genome;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.logging.Logger;\nimport org.biojava3.core.sequence.AccessionID;\nimport org.biojava3.core.sequence.CDSSequence;\nimport org.biojava3.core.sequence.ChromosomeSequence;\nimport org.biojava3.core.sequence.DNASequence;\nimport org.biojava3.core.sequence.ExonSequence;\nimport org.biojava3.core.sequence.io.FastaReaderHelper;\nimport org.biojava3.core.sequence.io.FastaWriterHelper;\nimport org.biojava3.core.sequence.GeneSequence;\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.Strand;\nimport org.biojava3.core.sequence.TranscriptSequence;\nimport org.biojava3.genome.parsers.gff.Feature;\nimport org.biojava3.genome.parsers.gff.FeatureI;\nimport org.biojava3.genome.parsers.gff.FeatureList;\nimport org.biojava3.genome.parsers.gff.GFF3Reader;\nimport org.biojava3.genome.parsers.gff.GeneIDGFF2Reader;\nimport org.biojava3.genome.parsers.gff.GeneMarkGTFReader;\n\n/**\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class GeneFeatureHelper {\n\n    private static final Logger log = Logger.getLogger(GeneFeatureHelper.class.getName());\n\n    \n    static public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile(File fastaSequenceFile,File uppercaseFastaFile, boolean throwExceptionGeneNotFound) throws Exception{\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = new LinkedHashMap<String, ChromosomeSequence>();\n        LinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n        for(String accession : dnaSequenceList.keySet()){\n            DNASequence contigSequence = dnaSequenceList.get(accession);\n            ChromosomeSequence chromsomeSequence = new ChromosomeSequence(contigSequence.getSequenceAsString()); \n            chromsomeSequence.setAccession(contigSequence.getAccession());\n            chromosomeSequenceList.put(accession, chromsomeSequence);\n        }\n        \n        \n        LinkedHashMap<String, DNASequence> geneSequenceList = FastaReaderHelper.readFastaDNASequence(uppercaseFastaFile);\n        for(DNASequence dnaSequence : geneSequenceList.values()){\n            String geneSequence = dnaSequence.getSequenceAsString();\n            String lcGeneSequence = geneSequence.toLowerCase();\n            String reverseGeneSequence = dnaSequence.getReverse().getSequenceAsString();\n            String lcReverseGeneSequence = reverseGeneSequence.toLowerCase();\n            Integer bioStart = null;\n            Integer bioEnd = null;\n            Strand strand = Strand.POSITIVE;\n            boolean geneFound = false;\n            String accession = \"\";\n            DNASequence contigDNASequence = null;\n            for(String id : dnaSequenceList.keySet()){\n                accession = id;\n                contigDNASequence = dnaSequenceList.get(id);\n                String contigSequence = contigDNASequence.getSequenceAsString().toLowerCase();\n                bioStart = contigSequence.indexOf(lcGeneSequence);\n                if(bioStart != -1){\n                    bioStart = bioStart + 1;\n                    bioEnd = bioStart + geneSequence.length() - 1;\n                    geneFound = true;\n                    break;\n                }else{\n                    bioStart = contigSequence.indexOf(lcReverseGeneSequence);\n                    if(bioStart != -1){\n                        bioStart = bioStart + 1;\n                        bioEnd = bioStart - geneSequence.length() - 1;\n                        strand = Strand.NEGATIVE;\n                        geneFound = true;\n                        break;\n                    }\n                } \n            }\n            \n            if(geneFound){\n                System.out.println(\"Gene \" + dnaSequence.getAccession().toString() + \" found at \" + contigDNASequence.getAccession().toString() + \" \" + bioStart + \" \" + bioEnd + \" \" + strand);\n                ChromosomeSequence chromosomeSequence = chromosomeSequenceList.get(accession);\n                \n                ArrayList<Integer> exonBoundries = new ArrayList<Integer>();\n\n                //look for transitions from lowercase to upper case\n                for(int i = 0; i < geneSequence.length(); i++){\n                        if(i == 0 && Character.isUpperCase(geneSequence.charAt(i))){\n                            exonBoundries.add(i);\n                        }else if(i == geneSequence.length() - 1) {\n                            exonBoundries.add(i);\n                        }else if(Character.isUpperCase(geneSequence.charAt(i)) && Character.isLowerCase(geneSequence.charAt(i - 1))){\n                            exonBoundries.add(i);\n                        }else if(Character.isUpperCase(geneSequence.charAt(i)) && Character.isLowerCase(geneSequence.charAt(i + 1))){\n                            exonBoundries.add(i);\n                        }\n                    }\n                if(strand == Strand.NEGATIVE){\n                     Collections.reverse(exonBoundries);\n                }\n\n\n\n                GeneSequence geneSeq = chromosomeSequence.addGene(dnaSequence.getAccession(), bioStart, bioEnd, strand);\n                geneSeq.setSource(uppercaseFastaFile.getName());\n                String transcriptName = dnaSequence.getAccession().getID() + \"-transcript\";\n                TranscriptSequence transcriptSequence = geneSeq.addTranscript(new AccessionID(transcriptName), bioStart, bioEnd);\n\n                int runningFrameLength = 0;\n                for(int i = 0; i < exonBoundries.size() - 1; i = i + 2){\n                    int cdsBioStart = exonBoundries.get(i) + bioStart;\n                    int cdsBioEnd = exonBoundries.get(i + 1) + bioStart;\n                    runningFrameLength = runningFrameLength + Math.abs(cdsBioEnd - cdsBioStart) + 1;\n                    String  cdsName = transcriptName + \"-cds-\" + cdsBioStart + \"-\" + cdsBioEnd;\n                    \n                    AccessionID cdsAccessionID = new AccessionID(cdsName);\n                    ExonSequence exonSequence = geneSeq.addExon(cdsAccessionID, cdsBioStart, cdsBioEnd);\n                    int remainder = runningFrameLength % 3;\n                    int frame = 0;\n                    if(remainder == 1){\n                        frame = 2; // borrow 2 from next CDS region\n                    }else if(remainder == 2){\n                        frame = 1;\n                    }\n                    CDSSequence cdsSequence = transcriptSequence.addCDS(cdsAccessionID, cdsBioStart, cdsBioEnd, frame);\n                }\n                \n                \n            }else{\n                if(throwExceptionGeneNotFound){\n                    throw new Exception(dnaSequence.getAccession().toString() + \" not found\");\n                }\n                System.out.println(\"Gene not found \" + dnaSequence.getAccession().toString());\n            }\n            \n        }\n        return chromosomeSequenceList;\n    }\n    \n    /**\n     * Output a gff3 feature file that will give the length of each scaffold/chromosome in the fasta file.\n     * Used for gbrowse so it knows length.\n     * @param fastaSequenceFile\n     * @param gffFile\n     * @throws Exception\n     */\n    static public void outputFastaSequenceLengthGFF3(File fastaSequenceFile, File gffFile) throws Exception {\n        LinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n        String fileName = fastaSequenceFile.getName();\n        FileWriter fw = new FileWriter(gffFile);\n        fw.write(\"##gff-version 3\\n\");\n        for (DNASequence dnaSequence : dnaSequenceList.values()) {\n\n            String gff3line = dnaSequence.getAccession().getID() + \"\\t\" + fileName + \"\\t\" + \"contig\" + \"\\t\" + \"1\" + \"\\t\" + dnaSequence.getBioEnd() + \"\\t.\\t.\\t.\\tName=\" + dnaSequence.getAccession().getID() + \"\\n\";\n            fw.write(gff3line);\n        }\n        fw.close();\n    }\n\n    /**\n     * Loads Fasta file and GFF2 feature file generated from the geneid prediction algorithm\n     *\n     * @param fastaSequenceFile\n     * @param gffFile\n     * @return\n     * @throws Exception\n     */\n    static public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGeneIDGFF2(File fastaSequenceFile, File gffFile) throws Exception {\n        LinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n        FeatureList listGenes = GeneIDGFF2Reader.read(gffFile.getAbsolutePath());\n        addGeneIDGFF2GeneFeatures(chromosomeSequenceList, listGenes);\n        return chromosomeSequenceList;\n    }\n\n    /**\n     * Load GFF2 feature file generated from the geneid prediction algorithm and map features onto the chromosome sequences\n     *\n     * @param chromosomeSequenceList\n     * @param listGenes\n     * @throws Exception\n     */\n    static public void addGeneIDGFF2GeneFeatures(LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n        Collection<String> geneIds = listGenes.attributeValues(\"gene_id\");\n        for (String geneid : geneIds) {\n            FeatureList gene = listGenes.selectByAttribute(\"gene_id\", geneid);\n            FeatureI geneFeature = gene.get(0);\n            ChromosomeSequence seq = chromosomeSequenceList.get(geneFeature.seqname());\n            geneid = geneid.replaceAll(\"_\", \".G\");\n            AccessionID geneAccessionID = new AccessionID(geneid);\n            GeneSequence geneSequence = null;\n            Collection<String> transcriptids = gene.attributeValues(\"gene_id\");\n            for (String transcriptid : transcriptids) {\n                // get all the individual features (exons, CDS regions, etc.) of this gene\n                FeatureList transcriptFeature = listGenes.selectByAttribute(\"gene_id\", transcriptid);\n                transcriptid = transcriptid.replaceAll(\"_\", \".G\");\n\n\n\n\n                //      String seqName = feature.seqname();\n                FeatureI startCodon = null;\n                FeatureI stopCodon = null;\n                Integer startCodonBegin = null;\n                Integer stopCodonEnd = null;\n                String startCodonName = \"\";\n                String stopCodonName = \"\";\n\n\n                // now select only the coding regions of this gene\n                FeatureList firstFeatures = transcriptFeature.selectByType(\"First\");\n                FeatureList terminalFeatures = transcriptFeature.selectByType(\"Terminal\");\n                FeatureList internalFeatures = transcriptFeature.selectByType(\"Internal\");\n                FeatureList singleFeatures = transcriptFeature.selectByType(\"Single\");\n                FeatureList cdsFeatures = new FeatureList();\n                cdsFeatures.add(firstFeatures);\n                cdsFeatures.add(terminalFeatures);\n                cdsFeatures.add(internalFeatures);\n                cdsFeatures.add(singleFeatures);\n                // sort them\n                cdsFeatures = cdsFeatures.sortByStart();\n                Strand strand = Strand.POSITIVE;\n                FeatureI feature = cdsFeatures.get(0);\n                if (feature.location().isNegative()) {\n                    strand = strand.NEGATIVE;\n                }\n                if (startCodonBegin == null) {\n                    FeatureI firstFeature = cdsFeatures.get(0);\n                    if (strand == strand.NEGATIVE) {\n                        startCodonBegin = firstFeature.location().bioEnd();\n                    } else {\n                        startCodonBegin = firstFeature.location().bioStart();\n                    }\n                }\n\n                if (stopCodonEnd == null) {\n\n                    FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                    if (strand == strand.NEGATIVE) {\n                        stopCodonEnd = lastFeature.location().bioStart();\n                    } else {\n                        stopCodonEnd = lastFeature.location().bioEnd();\n                    }\n                }\n                //for gtf ordering can be strand based so first is last and last is first\n                if (startCodonBegin > stopCodonEnd) {\n                    int temp = startCodonBegin;\n                    startCodonBegin = stopCodonEnd;\n                    stopCodonEnd = temp;\n                }\n\n                AccessionID transcriptAccessionID = new AccessionID(transcriptid);\n                if (geneSequence == null) {\n                    geneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n                    geneSequence.setSource(((Feature) feature).source());\n                } else {\n                    //if multiple transcripts for one gene make sure the gene is defined as the min and max start/end\n\n                    if (startCodonBegin < geneSequence.getBioBegin()) {\n                        geneSequence.setBioBegin(startCodonBegin);\n                    }\n                    if (stopCodonEnd > geneSequence.getBioBegin()) {\n                        geneSequence.setBioEnd(stopCodonEnd);\n                    }\n\n                }\n                TranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n                if (startCodon != null) {\n                    if (startCodonName == null || startCodonName.length() == 0) {\n                        startCodonName = transcriptid + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n                    }\n                    transcriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n                }\n                if (stopCodon != null) {\n                    if (stopCodonName == null || stopCodonName.length() == 0) {\n                        stopCodonName = transcriptid + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n                    }\n                    transcriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n                }\n\n                for (FeatureI cdsFeature : cdsFeatures) {\n                    Feature cds = (Feature) cdsFeature;\n                    String cdsName = cds.getAttribute(\"transcript_name\");\n                    if (cdsName == null || cdsName.length() == 0) {\n                        cdsName = transcriptid + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n                    }\n                    AccessionID cdsAccessionID = new AccessionID(cdsName);\n                    ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n                    CDSSequence cdsSequence = transcriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), cds.frame());\n                    cdsSequence.setSequenceScore(cds.score());\n                }\n            }\n        }\n\n    }\n\n    static public LinkedHashMap<String, ChromosomeSequence> getChromosomeSequenceFromDNASequence(LinkedHashMap<String, DNASequence> dnaSequenceList) {\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = new LinkedHashMap<String, ChromosomeSequence>();\n        for (String key : dnaSequenceList.keySet()) {\n            DNASequence dnaSequence = dnaSequenceList.get(key);\n            ChromosomeSequence chromosomeSequence = new ChromosomeSequence(dnaSequence.getSequenceAsString());\n            chromosomeSequence.setAccession(dnaSequence.getAccession());\n            chromosomeSequenceList.put(key, chromosomeSequence);\n        }\n        return chromosomeSequenceList;\n    }\n\n    /**\n     * Lots of variations in the ontology or descriptors that can be used in GFF3 which requires writing a custom parser to handle a GFF3 generated or used\n     * by a specific application. Probably could be abstracted out but for now easier to handle with custom code to deal with gff3 elements that are not\n     * included but can be extracted from other data elements.\n     * @param fastaSequenceFile\n     * @param gffFile\n     * @return\n     * @throws Exception\n     */\n    static public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGmodGFF3(File fastaSequenceFile, File gffFile) throws Exception {\n        LinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n        FeatureList listGenes = GFF3Reader.read(gffFile.getAbsolutePath());\n        addGmodGFF3GeneFeatures(chromosomeSequenceList, listGenes);\n        return chromosomeSequenceList;\n    }\n\n    static public void addGmodGFF3GeneFeatures(LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n        FeatureList mRNAFeatures = listGenes.selectByType(\"mRNA\");\n        for (FeatureI f : mRNAFeatures) {\n            Feature mRNAFeature = (Feature) f;\n            String geneid = mRNAFeature.getAttribute(\"ID\");\n            String source = mRNAFeature.source();\n\n            FeatureList gene = listGenes.selectByAttribute(\"Parent\", geneid);\n            FeatureI geneFeature = gene.get(0);\n            ChromosomeSequence seq = chromosomeSequenceList.get(geneFeature.seqname());\n            AccessionID geneAccessionID = new AccessionID(geneid);\n            GeneSequence geneSequence = null;\n\n            FeatureList cdsFeatures = gene.selectByType(\"CDS\");\n            FeatureI feature = cdsFeatures.get(0);\n            Strand strand = Strand.POSITIVE;\n\n            if (feature.location().isNegative()) {\n                strand = strand.NEGATIVE;\n            }\n            cdsFeatures = cdsFeatures.sortByStart();\n\n\n\n\n\n\n\n            String seqName = feature.seqname();\n            FeatureI startCodon = null;\n            FeatureI stopCodon = null;\n            Integer startCodonBegin = null;\n            Integer stopCodonEnd = null;\n            String startCodonName = \"\";\n            String stopCodonName = \"\";\n            FeatureList startCodonList = gene.selectByType(\"five_prime_UTR\");\n            if (startCodonList != null && startCodonList.size() > 0) {\n                startCodon = startCodonList.get(0);\n                if (strand == Strand.NEGATIVE) {\n                    startCodonBegin = startCodon.location().bioEnd();\n                } else {\n                    startCodonBegin = startCodon.location().bioStart();\n                }\n                startCodonName = startCodon.getAttribute(\"ID\");\n            }\n\n            FeatureList stopCodonList = gene.selectByType(\"three_prime_UTR\");\n\n            if (stopCodonList != null && stopCodonList.size() > 0) {\n                stopCodon = stopCodonList.get(0);\n                if (strand == Strand.NEGATIVE) {\n                    stopCodonEnd = stopCodon.location().bioStart();\n                } else {\n                    stopCodonEnd = stopCodon.location().bioEnd();\n                }\n                stopCodonName = stopCodon.getAttribute(\"ID\");\n\n            }\n\n\n\n\n            if (startCodonBegin == null) {\n                if (strand == Strand.NEGATIVE) {\n                    FeatureI firstFeature = cdsFeatures.get(0);\n\n                    startCodonBegin = firstFeature.location().bioEnd();\n                } else {\n                    FeatureI firstFeature = cdsFeatures.get(0);\n\n                    startCodonBegin = firstFeature.location().bioStart();\n                }\n            }\n\n            if (stopCodonEnd == null) {\n                if (strand == Strand.NEGATIVE) {\n                    FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                    stopCodonEnd = lastFeature.location().bioStart();\n                } else {\n                    FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                    stopCodonEnd = lastFeature.location().bioEnd();\n                }\n            }\n            //for gtf ordering can be strand based so first is last and last is first\n            if (startCodonBegin > stopCodonEnd) {\n                int temp = startCodonBegin;\n                startCodonBegin = stopCodonEnd;\n                stopCodonEnd = temp;\n            }\n\n\n\n            AccessionID transcriptAccessionID = new AccessionID(geneid);\n            if (geneSequence == null) {\n                geneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n                geneSequence.setSource(source);\n            } else {\n\n                if (startCodonBegin < geneSequence.getBioBegin()) {\n                    geneSequence.setBioBegin(startCodonBegin);\n                }\n                if (stopCodonEnd > geneSequence.getBioBegin()) {\n                    geneSequence.setBioEnd(stopCodonEnd);\n                }\n\n            }\n            TranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n            if (startCodon != null) {\n                if (startCodonName == null || startCodonName.length() == 0) {\n                    startCodonName = geneid + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n                }\n                transcriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n            }\n            if (stopCodon != null) {\n                if (stopCodonName == null || stopCodonName.length() == 0) {\n                    stopCodonName = geneid + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n                }\n                transcriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n            }\n\n            for (FeatureI cdsFeature : cdsFeatures) {\n                Feature cds = (Feature) cdsFeature;\n                String cdsName = cds.getAttribute(\"ID\");\n                if (cdsName == null || cdsName.length() == 0) {\n                    cdsName = geneid + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n                }\n                AccessionID cdsAccessionID = new AccessionID(cdsName);\n                ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n                transcriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), cds.frame());\n            }\n\n        }\n\n    }\n\n    static public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGlimmerGFF3(File fastaSequenceFile, File gffFile) throws Exception {\n        LinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n        FeatureList listGenes = GFF3Reader.read(gffFile.getAbsolutePath());\n        addGlimmerGFF3GeneFeatures(chromosomeSequenceList, listGenes);\n        return chromosomeSequenceList;\n    }\n\n    static public void addGlimmerGFF3GeneFeatures(LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n        FeatureList mRNAFeatures = listGenes.selectByType(\"mRNA\");\n        for (FeatureI f : mRNAFeatures) {\n            Feature mRNAFeature = (Feature) f;\n            String geneid = mRNAFeature.getAttribute(\"ID\");\n            String source = mRNAFeature.source();\n\n            FeatureList gene = listGenes.selectByAttribute(\"Parent\", geneid);\n            FeatureI geneFeature = gene.get(0);\n            ChromosomeSequence seq = chromosomeSequenceList.get(geneFeature.seqname());\n            AccessionID geneAccessionID = new AccessionID(geneid);\n            GeneSequence geneSequence = null;\n\n            FeatureList cdsFeatures = gene.selectByType(\"CDS\");\n            FeatureI feature = cdsFeatures.get(0);\n            Strand strand = Strand.POSITIVE;\n\n            if (feature.location().isNegative()) {\n                strand = strand.NEGATIVE;\n            }\n            cdsFeatures = cdsFeatures.sortByStart();\n\n\n\n\n\n\n\n            String seqName = feature.seqname();\n            FeatureI startCodon = null;\n            FeatureI stopCodon = null;\n            Integer startCodonBegin = null;\n            Integer stopCodonEnd = null;\n            String startCodonName = \"\";\n            String stopCodonName = \"\";\n            FeatureList startCodonList = gene.selectByAttribute(\"Note\", \"initial-exon\");\n            if (startCodonList != null && startCodonList.size() > 0) {\n                startCodon = startCodonList.get(0);\n                if (strand == Strand.NEGATIVE) {\n                    startCodonBegin = startCodon.location().bioEnd();\n                } else {\n                    startCodonBegin = startCodon.location().bioStart();\n                }\n                startCodonName = startCodon.getAttribute(\"ID\");\n            }\n\n            FeatureList stopCodonList = gene.selectByAttribute(\"Note\", \"final-exon\");\n\n            if (stopCodonList != null && stopCodonList.size() > 0) {\n                stopCodon = stopCodonList.get(0);\n                if (strand == Strand.NEGATIVE) {\n                    stopCodonEnd = stopCodon.location().bioStart();\n                } else {\n                    stopCodonEnd = stopCodon.location().bioEnd();\n                }\n                stopCodonName = stopCodon.getAttribute(\"ID\");\n\n            }\n\n\n\n\n            if (startCodonBegin == null) {\n                if (strand == Strand.NEGATIVE) {\n                    FeatureI firstFeature = cdsFeatures.get(0);\n\n                    startCodonBegin = firstFeature.location().bioEnd();\n                } else {\n                    FeatureI firstFeature = cdsFeatures.get(0);\n\n                    startCodonBegin = firstFeature.location().bioStart();\n                }\n            }\n\n            if (stopCodonEnd == null) {\n                if (strand == Strand.NEGATIVE) {\n                    FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                    stopCodonEnd = lastFeature.location().bioStart();\n                } else {\n                    FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                    stopCodonEnd = lastFeature.location().bioEnd();\n                }\n            }\n            //for gtf ordering can be strand based so first is last and last is first\n            if (startCodonBegin > stopCodonEnd) {\n                int temp = startCodonBegin;\n                startCodonBegin = stopCodonEnd;\n                stopCodonEnd = temp;\n            }\n\n\n\n            AccessionID transcriptAccessionID = new AccessionID(geneid);\n            if (geneSequence == null) {\n                geneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n                geneSequence.setSource(source);\n            } else {\n\n                if (startCodonBegin < geneSequence.getBioBegin()) {\n                    geneSequence.setBioBegin(startCodonBegin);\n                }\n                if (stopCodonEnd > geneSequence.getBioBegin()) {\n                    geneSequence.setBioEnd(stopCodonEnd);\n                }\n\n            }\n            TranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n            if (startCodon != null) {\n                if (startCodonName == null || startCodonName.length() == 0) {\n                    startCodonName = geneid + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n                }\n                transcriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n            }\n            if (stopCodon != null) {\n                if (stopCodonName == null || stopCodonName.length() == 0) {\n                    stopCodonName = geneid + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n                }\n                transcriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n            }\n\n            for (FeatureI cdsFeature : cdsFeatures) {\n                Feature cds = (Feature) cdsFeature;\n                String cdsName = cds.getAttribute(\"ID\");\n                if (cdsName == null || cdsName.length() == 0) {\n                    cdsName = geneid + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n                }\n                AccessionID cdsAccessionID = new AccessionID(cdsName);\n                ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n                transcriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), cds.frame());\n            }\n\n        }\n\n    }\n\n    static public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGeneMarkGTF(File fastaSequenceFile, File gffFile) throws Exception {\n        LinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n        FeatureList listGenes = GeneMarkGTFReader.read(gffFile.getAbsolutePath());\n        addGeneMarkGTFGeneFeatures(chromosomeSequenceList, listGenes);\n        return chromosomeSequenceList;\n    }\n\n    static public void addGeneMarkGTFGeneFeatures(LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n        Collection<String> geneIds = listGenes.attributeValues(\"gene_id\");\n        for (String geneid : geneIds) {\n            //       if(geneid.equals(\"45_g\")){\n            //           int dummy =1;\n            //       }\n            FeatureList gene = listGenes.selectByAttribute(\"gene_id\", geneid);\n            FeatureI geneFeature = gene.get(0);\n            ChromosomeSequence seq = chromosomeSequenceList.get(geneFeature.seqname());\n            AccessionID geneAccessionID = new AccessionID(geneid);\n            GeneSequence geneSequence = null;\n            Collection<String> transcriptids = gene.attributeValues(\"transcript_id\");\n            for (String transcriptid : transcriptids) {\n                // get all the individual features (exons, CDS regions, etc.) of this gene\n\n\n                FeatureList transcriptFeature = listGenes.selectByAttribute(\"transcript_id\", transcriptid);\n                // now select only the coding regions of this gene\n                FeatureList cdsFeatures = transcriptFeature.selectByType(\"CDS\");\n                // sort them\n                cdsFeatures = cdsFeatures.sortByStart();\n\n                FeatureI feature = cdsFeatures.get(0);\n                Strand strand = Strand.POSITIVE;\n\n                if (feature.location().isNegative()) {\n                    strand = strand.NEGATIVE;\n                }\n\n                String seqName = feature.seqname();\n                FeatureI startCodon = null;\n                FeatureI stopCodon = null;\n                Integer startCodonBegin = null;\n                Integer stopCodonEnd = null;\n                String startCodonName = \"\";\n                String stopCodonName = \"\";\n                FeatureList startCodonList = transcriptFeature.selectByType(\"start_codon\");\n                if (startCodonList != null && startCodonList.size() > 0) {\n                    startCodon = startCodonList.get(0);\n                    if (strand == Strand.POSITIVE) {\n                        startCodonBegin = startCodon.location().bioStart();\n                    } else {\n                        startCodonBegin = startCodon.location().bioEnd();\n                    }\n                    startCodonName = startCodon.getAttribute(\"transcript_name\");\n                }\n\n                FeatureList stopCodonList = transcriptFeature.selectByType(\"stop_codon\");\n\n                if (stopCodonList != null && stopCodonList.size() > 0) {\n                    stopCodon = stopCodonList.get(0);\n                    if (strand == Strand.POSITIVE) {\n                        stopCodonEnd = stopCodon.location().bioEnd();\n                    } else {\n                        stopCodonEnd = stopCodon.location().bioStart();\n                    }\n\n                    stopCodonName = stopCodon.getAttribute(\"transcript_name\");\n\n                }\n\n\n\n\n                if (startCodonBegin == null) {\n                    if (strand == Strand.NEGATIVE) {\n                        FeatureI firstFeature = cdsFeatures.get(0);\n\n                        startCodonBegin = firstFeature.location().bioEnd();\n                    } else {\n                        FeatureI firstFeature = cdsFeatures.get(0);\n\n                        startCodonBegin = firstFeature.location().bioStart();\n                    }\n                }\n\n                if (stopCodonEnd == null) {\n                    if (strand == Strand.NEGATIVE) {\n                        FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                        stopCodonEnd = lastFeature.location().bioStart();\n                    } else {\n                        FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                        stopCodonEnd = lastFeature.location().bioEnd();\n                    }\n                }\n                //for gtf ordering can be strand based so first is last and last is first\n                if (startCodonBegin > stopCodonEnd) {\n                    int temp = startCodonBegin;\n                    startCodonBegin = stopCodonEnd;\n                    stopCodonEnd = temp;\n                }\n\n                AccessionID transcriptAccessionID = new AccessionID(transcriptid);\n                if (geneSequence == null) {\n                    geneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n                    geneSequence.setSource(((Feature) feature).source());\n                } else {\n                    //if multiple transcripts for one gene make sure the gene is defined as the min and max start/end\n\n                    if (startCodonBegin < geneSequence.getBioBegin()) {\n                        geneSequence.setBioBegin(startCodonBegin);\n                    }\n                    if (stopCodonEnd > geneSequence.getBioBegin()) {\n                        geneSequence.setBioEnd(stopCodonEnd);\n                    }\n\n                }\n                TranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n                if (startCodon != null) {\n                    if (startCodonName == null || startCodonName.length() == 0) {\n                        startCodonName = transcriptid + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n                    }\n                    transcriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n                }\n                if (stopCodon != null) {\n                    if (stopCodonName == null || stopCodonName.length() == 0) {\n                        stopCodonName = transcriptid + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n                    }\n                    transcriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n                }\n\n                for (FeatureI cdsFeature : cdsFeatures) {\n                    Feature cds = (Feature) cdsFeature;\n                    // for genemark it appears frame of 2 =1 and frame of 1 = 2\n                    // doesn't matter when you string cds regions together as one block\n                    // but does make a difference when you try to make a protein sequence for each CDS region where\n                    // you give up or borrow based on the frame value\n                    // compared with gff like files and docs for geneid and glimmer where geneid and glimmer both do it the same\n                    // way that appears to match the gff3 docs.\n                    int frame = cds.frame();\n                    if (frame == 1) {\n                        frame = 2;\n                    } else if (frame == 2) {\n                        frame = 1;\n                    } else {\n                        frame = 0;\n                    }\n                    String cdsName = cds.getAttribute(\"transcript_name\");\n                    if (cdsName == null || cdsName.length() == 0) {\n                        cdsName = transcriptid + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n                    }\n                    AccessionID cdsAccessionID = new AccessionID(cdsName);\n                    ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n                    transcriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), frame);\n                }\n            }\n        }\n\n    }\n\n    static public LinkedHashMap<String, ProteinSequence> getProteinSequences(Collection<ChromosomeSequence> chromosomeSequences) throws Exception {\n        LinkedHashMap<String, ProteinSequence> proteinSequenceHashMap = new LinkedHashMap<String, ProteinSequence>();\n        for (ChromosomeSequence dnaSequence : chromosomeSequences) {\n            for (GeneSequence geneSequence : dnaSequence.getGeneSequences().values()) {\n                for (TranscriptSequence transcriptSequence : geneSequence.getTranscripts().values()) {\n                    //TODO remove?\n//                    DNASequence dnaCodingSequence = transcriptSequence.getDNACodingSequence();\n//                    System.out.println(\"CDS=\" + dnaCodingSequence.getSequenceAsString());\n\n                    try {\n                        ProteinSequence proteinSequence = transcriptSequence.getProteinSequence();\n//                        System.out.println(proteinSequence.getAccession().getID() + \" \" + proteinSequence);\n                        if (proteinSequenceHashMap.containsKey(proteinSequence.getAccession().getID())) {\n                            throw new Exception(\"Duplicate protein sequence id=\" + proteinSequence.getAccession().getID() + \" found at Gene id=\" + geneSequence.getAccession().getID());\n                        } else {\n                            proteinSequenceHashMap.put(proteinSequence.getAccession().getID(), proteinSequence);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n\n                }\n\n            }\n        }\n        return proteinSequenceHashMap;\n    }\n\n    static public LinkedHashMap<String, GeneSequence> getGeneSequences(Collection<ChromosomeSequence> chromosomeSequences) throws Exception {\n        LinkedHashMap<String, GeneSequence> geneSequenceHashMap = new LinkedHashMap<String, GeneSequence>();\n        for (ChromosomeSequence chromosomeSequence : chromosomeSequences) {\n            for (GeneSequence geneSequence : chromosomeSequence.getGeneSequences().values()) {\n                geneSequenceHashMap.put(geneSequence.getAccession().getID(), geneSequence);\n            }\n        }\n\n        return geneSequenceHashMap;\n    }\n\n    public static void main(String args[]) throws Exception {\n        if (false) {\n            LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGeneMarkGTF(new File(\"/Users/Scooter/scripps/dyadic/analysis/454Scaffolds/454Scaffolds.fna\"), new File(\"/Users/Scooter/scripps/dyadic/analysis/454Scaffolds/genemark_hmm.gtf\"));\n            LinkedHashMap<String, ProteinSequence> proteinSequenceList = GeneFeatureHelper.getProteinSequences(chromosomeSequenceList.values());\n        }\n\n        if (false) {\n            LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGlimmerGFF3(new File(\"/Users/Scooter/scripps/dyadic/analysis/454Scaffolds/454Scaffolds.fna\"), new File(\"/Users/Scooter/scripps/dyadic/GlimmerHMM/c1_glimmerhmm.gff\"));\n            LinkedHashMap<String, ProteinSequence> proteinSequenceList = GeneFeatureHelper.getProteinSequences(chromosomeSequenceList.values());\n            //  for (ProteinSequence proteinSequence : proteinSequenceList.values()) {\n            //      System.out.println(proteinSequence.getAccession().getID() + \" \" + proteinSequence);\n            //  }\n            FastaWriterHelper.writeProteinSequence(new File(\"/Users/Scooter/scripps/dyadic/GlimmerHMM/c1_predicted_glimmer.faa\"), proteinSequenceList.values());\n\n        }\n        if (false) {\n            GeneFeatureHelper.outputFastaSequenceLengthGFF3(new File(\"/Users/Scooter/scripps/dyadic/analysis/454Scaffolds/454Scaffolds.fna\"), new File(\"/Users/Scooter/scripps/dyadic/analysis/454Scaffolds/c1scaffolds.gff3\"));\n        }\n\n\n\n        try {\n            if (true) {\n                LinkedHashMap<String, ChromosomeSequence> dnaSequenceHashMap = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGlimmerGFF3(new File(\"/Users/Scooter/scripps/dyadic/analysis/454Scaffolds/454Scaffolds-16.fna\"), new File(\"/Users/Scooter/scripps/dyadic/GlimmerHMM/c1_glimmerhmm-16.gff\"));\n\n                LinkedHashMap<String, GeneSequence> geneSequenceHashMap = GeneFeatureHelper.getGeneSequences(dnaSequenceHashMap.values());\n                Collection<GeneSequence> geneSequences = geneSequenceHashMap.values();\n                FastaWriterHelper.writeGeneSequence(new File(\"/Users/Scooter/scripps/dyadic/outputGlimmer6/c1_glimmer_genes.fna\"), geneSequences, true);\n\n\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n","changedPro":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage org.biojava3.genome;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.logging.Logger;\nimport org.biojava3.core.sequence.AccessionID;\nimport org.biojava3.core.sequence.CDSSequence;\nimport org.biojava3.core.sequence.ChromosomeSequence;\nimport org.biojava3.core.sequence.DNASequence;\nimport org.biojava3.core.sequence.ExonSequence;\nimport org.biojava3.core.sequence.io.FastaReaderHelper;\nimport org.biojava3.core.sequence.io.FastaWriterHelper;\nimport org.biojava3.core.sequence.GeneSequence;\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.Strand;\nimport org.biojava3.core.sequence.TranscriptSequence;\nimport org.biojava3.genome.parsers.gff.Feature;\nimport org.biojava3.genome.parsers.gff.FeatureI;\nimport org.biojava3.genome.parsers.gff.FeatureList;\nimport org.biojava3.genome.parsers.gff.GFF3Reader;\nimport org.biojava3.genome.parsers.gff.GeneIDGFF2Reader;\nimport org.biojava3.genome.parsers.gff.GeneMarkGTFReader;\n\n/**\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class GeneFeatureHelper {\n\n    private static final Logger log = Logger.getLogger(GeneFeatureHelper.class.getName());\n\n    static public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile(File fastaSequenceFile, File uppercaseFastaFile, boolean throwExceptionGeneNotFound) throws Exception {\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = new LinkedHashMap<String, ChromosomeSequence>();\n        LinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n        for (String accession : dnaSequenceList.keySet()) {\n            DNASequence contigSequence = dnaSequenceList.get(accession);\n            ChromosomeSequence chromsomeSequence = new ChromosomeSequence(contigSequence.getSequenceAsString());\n            chromsomeSequence.setAccession(contigSequence.getAccession());\n            chromosomeSequenceList.put(accession, chromsomeSequence);\n        }\n\n\n        LinkedHashMap<String, DNASequence> geneSequenceList = FastaReaderHelper.readFastaDNASequence(uppercaseFastaFile);\n        for (DNASequence dnaSequence : geneSequenceList.values()) {\n            String geneSequence = dnaSequence.getSequenceAsString();\n            String lcGeneSequence = geneSequence.toLowerCase();\n            String reverseGeneSequence = dnaSequence.getReverse().getSequenceAsString();\n            String lcReverseGeneSequence = reverseGeneSequence.toLowerCase();\n            Integer bioStart = null;\n            Integer bioEnd = null;\n            Strand strand = Strand.POSITIVE;\n            boolean geneFound = false;\n            String accession = \"\";\n            DNASequence contigDNASequence = null;\n            for (String id : dnaSequenceList.keySet()) {\n                accession = id;\n                contigDNASequence = dnaSequenceList.get(id);\n                String contigSequence = contigDNASequence.getSequenceAsString().toLowerCase();\n                bioStart = contigSequence.indexOf(lcGeneSequence);\n                if (bioStart != -1) {\n                    bioStart = bioStart + 1;\n                    bioEnd = bioStart + geneSequence.length() - 1;\n                    geneFound = true;\n                    break;\n                } else {\n                    bioStart = contigSequence.indexOf(lcReverseGeneSequence);\n                    if (bioStart != -1) {\n                        bioStart = bioStart + 1;\n                        bioEnd = bioStart - geneSequence.length() - 1;\n                        strand = Strand.NEGATIVE;\n                        geneFound = true;\n                        break;\n                    }\n                }\n            }\n\n            if (geneFound) {\n                System.out.println(\"Gene \" + dnaSequence.getAccession().toString() + \" found at \" + contigDNASequence.getAccession().toString() + \" \" + bioStart + \" \" + bioEnd + \" \" + strand);\n                ChromosomeSequence chromosomeSequence = chromosomeSequenceList.get(accession);\n\n                ArrayList<Integer> exonBoundries = new ArrayList<Integer>();\n\n                //look for transitions from lowercase to upper case\n                for (int i = 0; i < geneSequence.length(); i++) {\n                    if (i == 0 && Character.isUpperCase(geneSequence.charAt(i))) {\n                        exonBoundries.add(i);\n                    } else if (i == geneSequence.length() - 1) {\n                        exonBoundries.add(i);\n                    } else if (Character.isUpperCase(geneSequence.charAt(i)) && Character.isLowerCase(geneSequence.charAt(i - 1))) {\n                        exonBoundries.add(i);\n                    } else if (Character.isUpperCase(geneSequence.charAt(i)) && Character.isLowerCase(geneSequence.charAt(i + 1))) {\n                        exonBoundries.add(i);\n                    }\n                }\n                if (strand == Strand.NEGATIVE) {\n                    Collections.reverse(exonBoundries);\n                }\n\n\n                String geneaccession = dnaSequence.getAccession().getID();\n                String note = geneaccession;\n                String[] values = geneaccession.split(\" \");\n                geneaccession = values[0];\n\n\n\n                GeneSequence geneSeq = chromosomeSequence.addGene(new AccessionID(geneaccession), bioStart, bioEnd, strand);\n                geneSeq.addNote(note);\n                geneSeq.setSource(uppercaseFastaFile.getName());\n                String transcriptName = geneaccession + \"-transcript\";\n                TranscriptSequence transcriptSequence = geneSeq.addTranscript(new AccessionID(transcriptName), bioStart, bioEnd);\n\n                int runningFrameLength = 0;\n                for (int i = 0; i < exonBoundries.size() - 1; i = i + 2) {\n                    int cdsBioStart = exonBoundries.get(i) + bioStart;\n                    int cdsBioEnd = exonBoundries.get(i + 1) + bioStart;\n                    runningFrameLength = runningFrameLength + Math.abs(cdsBioEnd - cdsBioStart) + 1;\n                    String cdsName = transcriptName + \"-cds-\" + cdsBioStart + \"-\" + cdsBioEnd;\n\n                    AccessionID cdsAccessionID = new AccessionID(cdsName);\n                    ExonSequence exonSequence = geneSeq.addExon(cdsAccessionID, cdsBioStart, cdsBioEnd);\n                    int remainder = runningFrameLength % 3;\n                    int frame = 0;\n                    if (remainder == 1) {\n                        frame = 2; // borrow 2 from next CDS region\n                    } else if (remainder == 2) {\n                        frame = 1;\n                    }\n                    CDSSequence cdsSequence = transcriptSequence.addCDS(cdsAccessionID, cdsBioStart, cdsBioEnd, frame);\n                }\n\n\n            } else {\n                if (throwExceptionGeneNotFound) {\n                    throw new Exception(dnaSequence.getAccession().toString() + \" not found\");\n                }\n                System.out.println(\"Gene not found \" + dnaSequence.getAccession().toString());\n            }\n\n        }\n        return chromosomeSequenceList;\n    }\n\n    /**\n     * Output a gff3 feature file that will give the length of each scaffold/chromosome in the fasta file.\n     * Used for gbrowse so it knows length.\n     * @param fastaSequenceFile\n     * @param gffFile\n     * @throws Exception\n     */\n    static public void outputFastaSequenceLengthGFF3(File fastaSequenceFile, File gffFile) throws Exception {\n        LinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n        String fileName = fastaSequenceFile.getName();\n        FileWriter fw = new FileWriter(gffFile);\n        fw.write(\"##gff-version 3\\n\");\n        for (DNASequence dnaSequence : dnaSequenceList.values()) {\n\n            String gff3line = dnaSequence.getAccession().getID() + \"\\t\" + fileName + \"\\t\" + \"contig\" + \"\\t\" + \"1\" + \"\\t\" + dnaSequence.getBioEnd() + \"\\t.\\t.\\t.\\tName=\" + dnaSequence.getAccession().getID() + \"\\n\";\n            fw.write(gff3line);\n        }\n        fw.close();\n    }\n\n    /**\n     * Loads Fasta file and GFF2 feature file generated from the geneid prediction algorithm\n     *\n     * @param fastaSequenceFile\n     * @param gffFile\n     * @return\n     * @throws Exception\n     */\n    static public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGeneIDGFF2(File fastaSequenceFile, File gffFile) throws Exception {\n        LinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n        FeatureList listGenes = GeneIDGFF2Reader.read(gffFile.getAbsolutePath());\n        addGeneIDGFF2GeneFeatures(chromosomeSequenceList, listGenes);\n        return chromosomeSequenceList;\n    }\n\n    /**\n     * Load GFF2 feature file generated from the geneid prediction algorithm and map features onto the chromosome sequences\n     *\n     * @param chromosomeSequenceList\n     * @param listGenes\n     * @throws Exception\n     */\n    static public void addGeneIDGFF2GeneFeatures(LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n        Collection<String> geneIds = listGenes.attributeValues(\"gene_id\");\n        for (String geneid : geneIds) {\n            FeatureList gene = listGenes.selectByAttribute(\"gene_id\", geneid);\n            FeatureI geneFeature = gene.get(0);\n            ChromosomeSequence seq = chromosomeSequenceList.get(geneFeature.seqname());\n            geneid = geneid.replaceAll(\"_\", \".G\");\n            AccessionID geneAccessionID = new AccessionID(geneid);\n            GeneSequence geneSequence = null;\n            Collection<String> transcriptids = gene.attributeValues(\"gene_id\");\n            for (String transcriptid : transcriptids) {\n                // get all the individual features (exons, CDS regions, etc.) of this gene\n                FeatureList transcriptFeature = listGenes.selectByAttribute(\"gene_id\", transcriptid);\n                transcriptid = transcriptid.replaceAll(\"_\", \".G\");\n\n\n\n\n                //      String seqName = feature.seqname();\n                FeatureI startCodon = null;\n                FeatureI stopCodon = null;\n                Integer startCodonBegin = null;\n                Integer stopCodonEnd = null;\n                String startCodonName = \"\";\n                String stopCodonName = \"\";\n\n\n                // now select only the coding regions of this gene\n                FeatureList firstFeatures = transcriptFeature.selectByType(\"First\");\n                FeatureList terminalFeatures = transcriptFeature.selectByType(\"Terminal\");\n                FeatureList internalFeatures = transcriptFeature.selectByType(\"Internal\");\n                FeatureList singleFeatures = transcriptFeature.selectByType(\"Single\");\n                FeatureList cdsFeatures = new FeatureList();\n                cdsFeatures.add(firstFeatures);\n                cdsFeatures.add(terminalFeatures);\n                cdsFeatures.add(internalFeatures);\n                cdsFeatures.add(singleFeatures);\n                // sort them\n                cdsFeatures = cdsFeatures.sortByStart();\n                Strand strand = Strand.POSITIVE;\n                FeatureI feature = cdsFeatures.get(0);\n                if (feature.location().isNegative()) {\n                    strand = strand.NEGATIVE;\n                }\n                if (startCodonBegin == null) {\n                    FeatureI firstFeature = cdsFeatures.get(0);\n                    if (strand == strand.NEGATIVE) {\n                        startCodonBegin = firstFeature.location().bioEnd();\n                    } else {\n                        startCodonBegin = firstFeature.location().bioStart();\n                    }\n                }\n\n                if (stopCodonEnd == null) {\n\n                    FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                    if (strand == strand.NEGATIVE) {\n                        stopCodonEnd = lastFeature.location().bioStart();\n                    } else {\n                        stopCodonEnd = lastFeature.location().bioEnd();\n                    }\n                }\n                //for gtf ordering can be strand based so first is last and last is first\n                if (startCodonBegin > stopCodonEnd) {\n                    int temp = startCodonBegin;\n                    startCodonBegin = stopCodonEnd;\n                    stopCodonEnd = temp;\n                }\n\n                AccessionID transcriptAccessionID = new AccessionID(transcriptid);\n                if (geneSequence == null) {\n                    geneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n                    geneSequence.setSource(((Feature) feature).source());\n                } else {\n                    //if multiple transcripts for one gene make sure the gene is defined as the min and max start/end\n\n                    if (startCodonBegin < geneSequence.getBioBegin()) {\n                        geneSequence.setBioBegin(startCodonBegin);\n                    }\n                    if (stopCodonEnd > geneSequence.getBioBegin()) {\n                        geneSequence.setBioEnd(stopCodonEnd);\n                    }\n\n                }\n                TranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n                if (startCodon != null) {\n                    if (startCodonName == null || startCodonName.length() == 0) {\n                        startCodonName = transcriptid + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n                    }\n                    transcriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n                }\n                if (stopCodon != null) {\n                    if (stopCodonName == null || stopCodonName.length() == 0) {\n                        stopCodonName = transcriptid + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n                    }\n                    transcriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n                }\n\n                for (FeatureI cdsFeature : cdsFeatures) {\n                    Feature cds = (Feature) cdsFeature;\n                    String cdsName = cds.getAttribute(\"transcript_name\");\n                    if (cdsName == null || cdsName.length() == 0) {\n                        cdsName = transcriptid + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n                    }\n                    AccessionID cdsAccessionID = new AccessionID(cdsName);\n                    ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n                    CDSSequence cdsSequence = transcriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), cds.frame());\n                    cdsSequence.setSequenceScore(cds.score());\n                }\n            }\n        }\n\n    }\n\n    static public LinkedHashMap<String, ChromosomeSequence> getChromosomeSequenceFromDNASequence(LinkedHashMap<String, DNASequence> dnaSequenceList) {\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = new LinkedHashMap<String, ChromosomeSequence>();\n        for (String key : dnaSequenceList.keySet()) {\n            DNASequence dnaSequence = dnaSequenceList.get(key);\n            ChromosomeSequence chromosomeSequence = new ChromosomeSequence(dnaSequence.getSequenceAsString());\n            chromosomeSequence.setAccession(dnaSequence.getAccession());\n            chromosomeSequenceList.put(key, chromosomeSequence);\n        }\n        return chromosomeSequenceList;\n    }\n\n    /**\n     * Lots of variations in the ontology or descriptors that can be used in GFF3 which requires writing a custom parser to handle a GFF3 generated or used\n     * by a specific application. Probably could be abstracted out but for now easier to handle with custom code to deal with gff3 elements that are not\n     * included but can be extracted from other data elements.\n     * @param fastaSequenceFile\n     * @param gffFile\n     * @return\n     * @throws Exception\n     */\n    static public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGmodGFF3(File fastaSequenceFile, File gffFile) throws Exception {\n        LinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n        FeatureList listGenes = GFF3Reader.read(gffFile.getAbsolutePath());\n        addGmodGFF3GeneFeatures(chromosomeSequenceList, listGenes);\n        return chromosomeSequenceList;\n    }\n\n    /**\n     * Load GFF3 file using mRNA as the gene feature as not all GFF3 files are complete\n     * @param chromosomeSequenceList\n     * @param listGenes\n     * @throws Exception\n     */\n    static public void addGmodGFF3GeneFeatures(LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n\n\n        // key off mRNA as being a known feature that may or may not have a parent gene\n\n        FeatureList mRNAFeatures = listGenes.selectByType(\"mRNA\");\n\n        for (FeatureI f : mRNAFeatures) {\n            String geneID;\n            String geneNote = null;\n            String geneSource = null;\n            String sequenceName = null;\n            ChromosomeSequence seq = null;\n            GeneSequence geneSequence = null;\n\n            Feature mRNAFeature = (Feature) f;\n            String mRNAID = mRNAFeature.getAttribute(\"ID\");\n            String mRNAsource = mRNAFeature.source();\n            String mRNANote = mRNAFeature.getAttribute(\"Note\");\n            String mRNAParent = mRNAFeature.getAttribute(\"Parent\");\n            if (mRNAParent != null && mRNAParent.length() > 0) {\n                FeatureList geneFeatureList = listGenes.selectByAttribute(\"ID\", mRNAParent);\n                Feature geneFeature = (Feature) geneFeatureList.get(0);\n                geneID = geneFeature.getAttribute(\"ID\");\n                geneNote = geneFeature.getAttribute(\"Note\");\n                geneSource = ((Feature) geneFeature).source();\n                sequenceName = geneFeature.seqname();\n\n                //\n            } else {\n                //deal with cases where no parent gene is given\n                geneID = mRNAID;\n                geneSource = mRNAsource;\n                sequenceName = mRNAFeature.seqname();\n            }\n\n            seq = chromosomeSequenceList.get(sequenceName);\n\n            AccessionID geneAccessionID = new AccessionID(geneID);\n\n            FeatureList mRNAChildren = listGenes.selectByAttribute(\"Parent\", mRNAID);\n\n            FeatureList cdsFeatures = mRNAChildren.selectByType(\"CDS\");\n            FeatureI feature = cdsFeatures.get(0);\n            Strand strand = Strand.POSITIVE;\n\n            if (feature.location().isNegative()) {\n                strand = strand.NEGATIVE;\n            }\n            cdsFeatures = cdsFeatures.sortByStart();\n\n\n\n\n\n\n\n            String seqName = feature.seqname();\n            FeatureI startCodon = null;\n            FeatureI stopCodon = null;\n            Integer startCodonBegin = null;\n            Integer stopCodonEnd = null;\n            String startCodonName = \"\";\n            String stopCodonName = \"\";\n            FeatureList startCodonList = mRNAChildren.selectByType(\"five_prime_UTR\");\n            if (startCodonList != null && startCodonList.size() > 0) {\n                startCodon = startCodonList.get(0);\n                if (strand == Strand.NEGATIVE) {\n                    startCodonBegin = startCodon.location().bioEnd();\n                } else {\n                    startCodonBegin = startCodon.location().bioStart();\n                }\n                startCodonName = startCodon.getAttribute(\"ID\");\n            }\n\n            FeatureList stopCodonList = mRNAChildren.selectByType(\"three_prime_UTR\");\n\n            if (stopCodonList != null && stopCodonList.size() > 0) {\n                stopCodon = stopCodonList.get(0);\n                if (strand == Strand.NEGATIVE) {\n                    stopCodonEnd = stopCodon.location().bioStart();\n                } else {\n                    stopCodonEnd = stopCodon.location().bioEnd();\n                }\n                stopCodonName = stopCodon.getAttribute(\"ID\");\n\n            }\n\n\n\n\n            if (startCodonBegin == null) {\n                if (strand == Strand.NEGATIVE) {\n                    FeatureI firstFeature = cdsFeatures.get(0);\n\n                    startCodonBegin = firstFeature.location().bioEnd();\n                } else {\n                    FeatureI firstFeature = cdsFeatures.get(0);\n\n                    startCodonBegin = firstFeature.location().bioStart();\n                }\n            }\n\n            if (stopCodonEnd == null) {\n                if (strand == Strand.NEGATIVE) {\n                    FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                    stopCodonEnd = lastFeature.location().bioStart();\n                } else {\n                    FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                    stopCodonEnd = lastFeature.location().bioEnd();\n                }\n            }\n            //for gtf ordering can be strand based so first is last and last is first\n            if (startCodonBegin > stopCodonEnd) {\n                int temp = startCodonBegin;\n                startCodonBegin = stopCodonEnd;\n                stopCodonEnd = temp;\n            }\n\n\n\n            AccessionID transcriptAccessionID = new AccessionID(mRNAID);\n            geneSequence = seq.getGene(geneID);\n            if (geneSequence == null) {\n                geneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n                geneSequence.setSource(geneSource);\n                if (geneNote != null && geneNote.length() > 0) {\n                    geneSequence.addNote(geneNote);\n                }\n            } else {\n\n                if (startCodonBegin < geneSequence.getBioBegin()) {\n                    geneSequence.setBioBegin(startCodonBegin);\n                }\n                if (stopCodonEnd > geneSequence.getBioBegin()) {\n                    geneSequence.setBioEnd(stopCodonEnd);\n                }\n\n            }\n            TranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n            transcriptSequence.setSource(mRNAsource);\n            if (mRNANote != null && mRNANote.length() > 0) {\n                transcriptSequence.addNote(mRNANote);\n\n            }\n            if (startCodon != null) {\n                if (startCodonName == null || startCodonName.length() == 0) {\n                    startCodonName = mRNAID + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n                }\n                transcriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n            }\n            if (stopCodon != null) {\n                if (stopCodonName == null || stopCodonName.length() == 0) {\n                    stopCodonName = mRNAID + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n                }\n                transcriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n            }\n\n            for (FeatureI cdsFeature : cdsFeatures) {\n                Feature cds = (Feature) cdsFeature;\n                String cdsNote = cdsFeature.getAttribute(\"Note\");\n                String cdsSource = cds.source();\n                String cdsName = cds.getAttribute(\"ID\");\n                if (cdsName == null || cdsName.length() == 0) {\n                    cdsName = mRNAID + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n                }\n                AccessionID cdsAccessionID = new AccessionID(cdsName);\n                ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n                exonSequence.setSource(cdsSource);\n                if (cdsNote != null && cdsNote.length() > 0) {\n                    exonSequence.addNote(cdsNote);\n                }\n                transcriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), cds.frame());\n            }\n\n\n        }\n\n    }\n\n    static public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGlimmerGFF3(File fastaSequenceFile, File gffFile) throws Exception {\n        LinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n        FeatureList listGenes = GFF3Reader.read(gffFile.getAbsolutePath());\n        addGlimmerGFF3GeneFeatures(chromosomeSequenceList, listGenes);\n        return chromosomeSequenceList;\n    }\n\n    static public void addGlimmerGFF3GeneFeatures(LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n        FeatureList mRNAFeatures = listGenes.selectByType(\"mRNA\");\n        for (FeatureI f : mRNAFeatures) {\n            Feature mRNAFeature = (Feature) f;\n            String geneid = mRNAFeature.getAttribute(\"ID\");\n            String source = mRNAFeature.source();\n\n            FeatureList gene = listGenes.selectByAttribute(\"Parent\", geneid);\n            FeatureI geneFeature = gene.get(0);\n            ChromosomeSequence seq = chromosomeSequenceList.get(geneFeature.seqname());\n            AccessionID geneAccessionID = new AccessionID(geneid);\n            GeneSequence geneSequence = null;\n\n            FeatureList cdsFeatures = gene.selectByType(\"CDS\");\n            FeatureI feature = cdsFeatures.get(0);\n            Strand strand = Strand.POSITIVE;\n\n            if (feature.location().isNegative()) {\n                strand = strand.NEGATIVE;\n            }\n            cdsFeatures = cdsFeatures.sortByStart();\n\n\n\n\n\n\n\n            String seqName = feature.seqname();\n            FeatureI startCodon = null;\n            FeatureI stopCodon = null;\n            Integer startCodonBegin = null;\n            Integer stopCodonEnd = null;\n            String startCodonName = \"\";\n            String stopCodonName = \"\";\n            FeatureList startCodonList = gene.selectByAttribute(\"Note\", \"initial-exon\");\n            if (startCodonList != null && startCodonList.size() > 0) {\n                startCodon = startCodonList.get(0);\n                if (strand == Strand.NEGATIVE) {\n                    startCodonBegin = startCodon.location().bioEnd();\n                } else {\n                    startCodonBegin = startCodon.location().bioStart();\n                }\n                startCodonName = startCodon.getAttribute(\"ID\");\n            }\n\n            FeatureList stopCodonList = gene.selectByAttribute(\"Note\", \"final-exon\");\n\n            if (stopCodonList != null && stopCodonList.size() > 0) {\n                stopCodon = stopCodonList.get(0);\n                if (strand == Strand.NEGATIVE) {\n                    stopCodonEnd = stopCodon.location().bioStart();\n                } else {\n                    stopCodonEnd = stopCodon.location().bioEnd();\n                }\n                stopCodonName = stopCodon.getAttribute(\"ID\");\n\n            }\n\n\n\n\n            if (startCodonBegin == null) {\n                if (strand == Strand.NEGATIVE) {\n                    FeatureI firstFeature = cdsFeatures.get(0);\n\n                    startCodonBegin = firstFeature.location().bioEnd();\n                } else {\n                    FeatureI firstFeature = cdsFeatures.get(0);\n\n                    startCodonBegin = firstFeature.location().bioStart();\n                }\n            }\n\n            if (stopCodonEnd == null) {\n                if (strand == Strand.NEGATIVE) {\n                    FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                    stopCodonEnd = lastFeature.location().bioStart();\n                } else {\n                    FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                    stopCodonEnd = lastFeature.location().bioEnd();\n                }\n            }\n            //for gtf ordering can be strand based so first is last and last is first\n            if (startCodonBegin > stopCodonEnd) {\n                int temp = startCodonBegin;\n                startCodonBegin = stopCodonEnd;\n                stopCodonEnd = temp;\n            }\n\n\n\n            AccessionID transcriptAccessionID = new AccessionID(geneid);\n            if (geneSequence == null) {\n                geneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n                geneSequence.setSource(source);\n            } else {\n\n                if (startCodonBegin < geneSequence.getBioBegin()) {\n                    geneSequence.setBioBegin(startCodonBegin);\n                }\n                if (stopCodonEnd > geneSequence.getBioBegin()) {\n                    geneSequence.setBioEnd(stopCodonEnd);\n                }\n\n            }\n            TranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n            if (startCodon != null) {\n                if (startCodonName == null || startCodonName.length() == 0) {\n                    startCodonName = geneid + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n                }\n                transcriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n            }\n            if (stopCodon != null) {\n                if (stopCodonName == null || stopCodonName.length() == 0) {\n                    stopCodonName = geneid + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n                }\n                transcriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n            }\n\n            for (FeatureI cdsFeature : cdsFeatures) {\n                Feature cds = (Feature) cdsFeature;\n                String cdsName = cds.getAttribute(\"ID\");\n                if (cdsName == null || cdsName.length() == 0) {\n                    cdsName = geneid + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n                }\n                AccessionID cdsAccessionID = new AccessionID(cdsName);\n                ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n                transcriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), cds.frame());\n            }\n\n        }\n\n    }\n\n    static public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGeneMarkGTF(File fastaSequenceFile, File gffFile) throws Exception {\n        LinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n        FeatureList listGenes = GeneMarkGTFReader.read(gffFile.getAbsolutePath());\n        addGeneMarkGTFGeneFeatures(chromosomeSequenceList, listGenes);\n        return chromosomeSequenceList;\n    }\n\n    static public void addGeneMarkGTFGeneFeatures(LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n        Collection<String> geneIds = listGenes.attributeValues(\"gene_id\");\n        for (String geneid : geneIds) {\n            //       if(geneid.equals(\"45_g\")){\n            //           int dummy =1;\n            //       }\n            FeatureList gene = listGenes.selectByAttribute(\"gene_id\", geneid);\n            FeatureI geneFeature = gene.get(0);\n            ChromosomeSequence seq = chromosomeSequenceList.get(geneFeature.seqname());\n            AccessionID geneAccessionID = new AccessionID(geneid);\n            GeneSequence geneSequence = null;\n            Collection<String> transcriptids = gene.attributeValues(\"transcript_id\");\n            for (String transcriptid : transcriptids) {\n                // get all the individual features (exons, CDS regions, etc.) of this gene\n\n\n                FeatureList transcriptFeature = listGenes.selectByAttribute(\"transcript_id\", transcriptid);\n                // now select only the coding regions of this gene\n                FeatureList cdsFeatures = transcriptFeature.selectByType(\"CDS\");\n                // sort them\n                cdsFeatures = cdsFeatures.sortByStart();\n\n                FeatureI feature = cdsFeatures.get(0);\n                Strand strand = Strand.POSITIVE;\n\n                if (feature.location().isNegative()) {\n                    strand = strand.NEGATIVE;\n                }\n\n                String seqName = feature.seqname();\n                FeatureI startCodon = null;\n                FeatureI stopCodon = null;\n                Integer startCodonBegin = null;\n                Integer stopCodonEnd = null;\n                String startCodonName = \"\";\n                String stopCodonName = \"\";\n                FeatureList startCodonList = transcriptFeature.selectByType(\"start_codon\");\n                if (startCodonList != null && startCodonList.size() > 0) {\n                    startCodon = startCodonList.get(0);\n                    if (strand == Strand.POSITIVE) {\n                        startCodonBegin = startCodon.location().bioStart();\n                    } else {\n                        startCodonBegin = startCodon.location().bioEnd();\n                    }\n                    startCodonName = startCodon.getAttribute(\"transcript_name\");\n                }\n\n                FeatureList stopCodonList = transcriptFeature.selectByType(\"stop_codon\");\n\n                if (stopCodonList != null && stopCodonList.size() > 0) {\n                    stopCodon = stopCodonList.get(0);\n                    if (strand == Strand.POSITIVE) {\n                        stopCodonEnd = stopCodon.location().bioEnd();\n                    } else {\n                        stopCodonEnd = stopCodon.location().bioStart();\n                    }\n\n                    stopCodonName = stopCodon.getAttribute(\"transcript_name\");\n\n                }\n\n\n\n\n                if (startCodonBegin == null) {\n                    if (strand == Strand.NEGATIVE) {\n                        FeatureI firstFeature = cdsFeatures.get(0);\n\n                        startCodonBegin = firstFeature.location().bioEnd();\n                    } else {\n                        FeatureI firstFeature = cdsFeatures.get(0);\n\n                        startCodonBegin = firstFeature.location().bioStart();\n                    }\n                }\n\n                if (stopCodonEnd == null) {\n                    if (strand == Strand.NEGATIVE) {\n                        FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                        stopCodonEnd = lastFeature.location().bioStart();\n                    } else {\n                        FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                        stopCodonEnd = lastFeature.location().bioEnd();\n                    }\n                }\n                //for gtf ordering can be strand based so first is last and last is first\n                if (startCodonBegin > stopCodonEnd) {\n                    int temp = startCodonBegin;\n                    startCodonBegin = stopCodonEnd;\n                    stopCodonEnd = temp;\n                }\n\n                AccessionID transcriptAccessionID = new AccessionID(transcriptid);\n                if (geneSequence == null) {\n                    geneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n                    geneSequence.setSource(((Feature) feature).source());\n                } else {\n                    //if multiple transcripts for one gene make sure the gene is defined as the min and max start/end\n\n                    if (startCodonBegin < geneSequence.getBioBegin()) {\n                        geneSequence.setBioBegin(startCodonBegin);\n                    }\n                    if (stopCodonEnd > geneSequence.getBioBegin()) {\n                        geneSequence.setBioEnd(stopCodonEnd);\n                    }\n\n                }\n                TranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n                if (startCodon != null) {\n                    if (startCodonName == null || startCodonName.length() == 0) {\n                        startCodonName = transcriptid + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n                    }\n                    transcriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n                }\n                if (stopCodon != null) {\n                    if (stopCodonName == null || stopCodonName.length() == 0) {\n                        stopCodonName = transcriptid + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n                    }\n                    transcriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n                }\n\n                for (FeatureI cdsFeature : cdsFeatures) {\n                    Feature cds = (Feature) cdsFeature;\n                    // for genemark it appears frame of 2 =1 and frame of 1 = 2\n                    // doesn't matter when you string cds regions together as one block\n                    // but does make a difference when you try to make a protein sequence for each CDS region where\n                    // you give up or borrow based on the frame value\n                    // compared with gff like files and docs for geneid and glimmer where geneid and glimmer both do it the same\n                    // way that appears to match the gff3 docs.\n                    int frame = cds.frame();\n                    if (frame == 1) {\n                        frame = 2;\n                    } else if (frame == 2) {\n                        frame = 1;\n                    } else {\n                        frame = 0;\n                    }\n                    String cdsName = cds.getAttribute(\"transcript_name\");\n                    if (cdsName == null || cdsName.length() == 0) {\n                        cdsName = transcriptid + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n                    }\n                    AccessionID cdsAccessionID = new AccessionID(cdsName);\n                    ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n                    transcriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), frame);\n                }\n            }\n        }\n\n    }\n\n    static public LinkedHashMap<String, ProteinSequence> getProteinSequences(Collection<ChromosomeSequence> chromosomeSequences) throws Exception {\n        LinkedHashMap<String, ProteinSequence> proteinSequenceHashMap = new LinkedHashMap<String, ProteinSequence>();\n        for (ChromosomeSequence dnaSequence : chromosomeSequences) {\n            for (GeneSequence geneSequence : dnaSequence.getGeneSequences().values()) {\n                for (TranscriptSequence transcriptSequence : geneSequence.getTranscripts().values()) {\n                    //TODO remove?\n//                    DNASequence dnaCodingSequence = transcriptSequence.getDNACodingSequence();\n//                    System.out.println(\"CDS=\" + dnaCodingSequence.getSequenceAsString());\n\n                    try {\n                        ProteinSequence proteinSequence = transcriptSequence.getProteinSequence();\n//                        System.out.println(proteinSequence.getAccession().getID() + \" \" + proteinSequence);\n                        if (proteinSequenceHashMap.containsKey(proteinSequence.getAccession().getID())) {\n                            throw new Exception(\"Duplicate protein sequence id=\" + proteinSequence.getAccession().getID() + \" found at Gene id=\" + geneSequence.getAccession().getID());\n                        } else {\n                            proteinSequenceHashMap.put(proteinSequence.getAccession().getID(), proteinSequence);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n\n                }\n\n            }\n        }\n        return proteinSequenceHashMap;\n    }\n\n    static public LinkedHashMap<String, GeneSequence> getGeneSequences(Collection<ChromosomeSequence> chromosomeSequences) throws Exception {\n        LinkedHashMap<String, GeneSequence> geneSequenceHashMap = new LinkedHashMap<String, GeneSequence>();\n        for (ChromosomeSequence chromosomeSequence : chromosomeSequences) {\n            for (GeneSequence geneSequence : chromosomeSequence.getGeneSequences().values()) {\n                geneSequenceHashMap.put(geneSequence.getAccession().getID(), geneSequence);\n            }\n        }\n\n        return geneSequenceHashMap;\n    }\n\n    public static void main(String args[]) throws Exception {\n        if (false) {\n            LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGeneMarkGTF(new File(\"/Users/Scooter/scripps/dyadic/analysis/454Scaffolds/454Scaffolds.fna\"), new File(\"/Users/Scooter/scripps/dyadic/analysis/454Scaffolds/genemark_hmm.gtf\"));\n            LinkedHashMap<String, ProteinSequence> proteinSequenceList = GeneFeatureHelper.getProteinSequences(chromosomeSequenceList.values());\n        }\n\n        if (false) {\n            LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGlimmerGFF3(new File(\"/Users/Scooter/scripps/dyadic/analysis/454Scaffolds/454Scaffolds.fna\"), new File(\"/Users/Scooter/scripps/dyadic/GlimmerHMM/c1_glimmerhmm.gff\"));\n            LinkedHashMap<String, ProteinSequence> proteinSequenceList = GeneFeatureHelper.getProteinSequences(chromosomeSequenceList.values());\n            //  for (ProteinSequence proteinSequence : proteinSequenceList.values()) {\n            //      System.out.println(proteinSequence.getAccession().getID() + \" \" + proteinSequence);\n            //  }\n            FastaWriterHelper.writeProteinSequence(new File(\"/Users/Scooter/scripps/dyadic/GlimmerHMM/c1_predicted_glimmer.faa\"), proteinSequenceList.values());\n\n        }\n        if (false) {\n            GeneFeatureHelper.outputFastaSequenceLengthGFF3(new File(\"/Users/Scooter/scripps/dyadic/analysis/454Scaffolds/454Scaffolds.fna\"), new File(\"/Users/Scooter/scripps/dyadic/analysis/454Scaffolds/c1scaffolds.gff3\"));\n        }\n\n\n\n        try {\n\n            if (true) {\n                File fastaSequenceFile = new File(\"/Users/Scooter/scripps/dyadic/analysis/454Scaffolds/454Scaffolds.fna\");\n                File gff3File = new File(\"/Users/Scooter/scripps/dyadic/delivered/gmod/gbrowse2/databases/c1scaffold/c1_geneid-v6.gff3\");\n                LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceHashMap = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGmodGFF3(fastaSequenceFile, gff3File);\n\n\n            }\n\n            if (false) {\n                LinkedHashMap<String, ChromosomeSequence> dnaSequenceHashMap = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGlimmerGFF3(new File(\"/Users/Scooter/scripps/dyadic/analysis/454Scaffolds/454Scaffolds-16.fna\"), new File(\"/Users/Scooter/scripps/dyadic/GlimmerHMM/c1_glimmerhmm-16.gff\"));\n\n                LinkedHashMap<String, GeneSequence> geneSequenceHashMap = GeneFeatureHelper.getGeneSequences(dnaSequenceHashMap.values());\n                Collection<GeneSequence> geneSequences = geneSequenceHashMap.values();\n                FastaWriterHelper.writeGeneSequence(new File(\"/Users/Scooter/scripps/dyadic/outputGlimmer6/c1_glimmer_genes.fna\"), geneSequences, true);\n\n\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n","originTest":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage org.biojava3.genome;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\nimport junit.framework.TestCase;\nimport junitx.framework.FileAssert;\nimport org.biojava3.core.sequence.ChromosomeSequence;\nimport org.biojava3.core.sequence.GeneSequence;\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.io.FastaWriterHelper;\nimport org.biojava3.genome.parsers.gff.GFF3Writer;\n\n/**\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class GeneFeatureHelperTest extends TestCase {\n\n    public GeneFeatureHelperTest(String testName) {\n        super(testName);\n    }\n\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n    }\n\n    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n    }\n\n    /**\n     * Test of loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile method, of class GeneFeatureHelper.\n     * @throws Exception\n     */\n\n    public void testLoadFastaAddGeneFeaturesFromUpperCaseExonFastaFile() throws Exception{\n//        System.out.println(\"loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile\");\n        File fastaSequenceFile = new File(\"src/test/resources/volvox_all.fna\");\n        File uppercaseFastaFile = new File(\"src/test/resources/volvox_all_genes_exon_uppercase.fna\");\n        boolean throwExceptionGeneNotFound = false;\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceHashMap = GeneFeatureHelper.loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile( fastaSequenceFile, uppercaseFastaFile,  throwExceptionGeneNotFound);\n\n        FileOutputStream fo = new FileOutputStream(\"src/test/resources/testoutput/volvox_all_genes_exon_uppercase.gff3\");\n        GFF3Writer gff3Writer = new GFF3Writer();\n        gff3Writer.write(fo, chromosomeSequenceHashMap);\n        fo.close();\n\n    }\n\n    /**\n     * Test of outputFastaSequenceLengthGFF3 method, of class GeneFeatureHelper.\n     */\n    public void testOutputFastaSequenceLengthGFF3() throws Exception {\n//        System.out.println(\"outputFastaSequenceLengthGFF3\");\n\n        File fastaSequenceFile = new File(\"src/test/resources/volvox_all.fna\");\n        File gffFile = new File(\"src/test/resources/testoutput/volvox_length.gff3\");\n        GeneFeatureHelper.outputFastaSequenceLengthGFF3(fastaSequenceFile, gffFile);\n        FileAssert.assertBinaryEquals(\"volvox_length.gff3 and volvox_length_output.gff3 are not equal\", gffFile, new File(\"src/test/resources/volvox_length_reference.gff3\"));\n\n    }\n\n    /**\n     * Test of getProteinSequences method, of class GeneFeatureHelper. Used gff3 file that was modified from the volvox gff version. Do not\n     * have the reference protein that is generated from each CDS record so subject to being incorrect without a validated test case.\n     * Could not find anyone providing a gff3 test case with expected protein output.\n     */\n    public void testGetProteinSequences() throws Exception {\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGmodGFF3(new File(\"src/test/resources/volvox_all.fna\"), new File(\"src/test/resources/volvox.gff3\"));\n        LinkedHashMap<String, ProteinSequence> proteinSequenceList = GeneFeatureHelper.getProteinSequences(chromosomeSequenceList.values());\n//        for(ProteinSequence proteinSequence : proteinSequenceList.values()){\n//            System.out.println(\"Output=\" + proteinSequence.getSequenceAsString());\n//        }\n        FastaWriterHelper.writeProteinSequence(new File(\"src/test/resources/testoutput/volvox_all.faa\"), proteinSequenceList.values());\n\n        FileAssert.assertEquals(\"volvox_all_reference.faa and volvox_all.faa are not equal\", new File(\"src/test/resources/volvox_all_reference.faa\"), new File(\"src/test/resources/testoutput/volvox_all.faa\"));\n\n\n    }\n   \n    /**\n     * Test of getGeneSequences method, of class GeneFeatureHelper.\n     */\n    public void testGetGeneSequences() throws Exception {\n//        System.out.println(\"getGeneSequences\");\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGmodGFF3(new File(\"src/test/resources/volvox_all.fna\"), new File(\"src/test/resources/volvox.gff3\"));\n        LinkedHashMap<String, GeneSequence> geneSequenceHashMap = GeneFeatureHelper.getGeneSequences(chromosomeSequenceList.values());\n        Collection<GeneSequence> geneSequences = geneSequenceHashMap.values();\n        FastaWriterHelper.writeGeneSequence(new File(\"src/test/resources/volvox_all_genes_exon_uppercase.fna\"), geneSequences, true);\n    }\n\n\n}\n","changedTest":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage org.biojava3.genome;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\nimport junit.framework.TestCase;\nimport junitx.framework.FileAssert;\nimport org.biojava3.core.sequence.ChromosomeSequence;\nimport org.biojava3.core.sequence.GeneSequence;\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.io.FastaWriterHelper;\nimport org.biojava3.genome.parsers.gff.GFF3Writer;\n\n/**\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class GeneFeatureHelperTest extends TestCase {\n\n    public GeneFeatureHelperTest(String testName) {\n        super(testName);\n    }\n\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n    }\n\n    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n    }\n\n    /**\n     * Test of loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile method, of class GeneFeatureHelper.\n     * @throws Exception\n     */\n\n    public void testLoadFastaAddGeneFeaturesFromUpperCaseExonFastaFile() throws Exception{\n//        System.out.println(\"loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile\");\n        File fastaSequenceFile = new File(\"src/test/resources/volvox_all.fna\");\n        File uppercaseFastaFile = new File(\"src/test/resources/volvox_all_genes_exon_uppercase.fna\");\n        boolean throwExceptionGeneNotFound = false;\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceHashMap = GeneFeatureHelper.loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile( fastaSequenceFile, uppercaseFastaFile,  throwExceptionGeneNotFound);\n\n        FileOutputStream fo = new FileOutputStream(\"src/test/resources/testoutput/volvox_all_genes_exon_uppercase.gff3\");\n        GFF3Writer gff3Writer = new GFF3Writer();\n        gff3Writer.write(fo, chromosomeSequenceHashMap);\n        fo.close();\n\n    }\n\n    /**\n     * Test of outputFastaSequenceLengthGFF3 method, of class GeneFeatureHelper.\n     */\n    public void testOutputFastaSequenceLengthGFF3() throws Exception {\n//        System.out.println(\"outputFastaSequenceLengthGFF3\");\n\n        File fastaSequenceFile = new File(\"src/test/resources/volvox_all.fna\");\n        File gffFile = new File(\"src/test/resources/testoutput/volvox_length.gff3\");\n        GeneFeatureHelper.outputFastaSequenceLengthGFF3(fastaSequenceFile, gffFile);\n        FileAssert.assertBinaryEquals(\"volvox_length.gff3 and volvox_length_output.gff3 are not equal\", gffFile, new File(\"src/test/resources/volvox_length_reference.gff3\"));\n\n    }\n\n    /**\n     * Test if the note from a gff3 file is added to the gene sequence\n     * @throws Exception\n     */\n\n    public void testAddGFF3Note() throws Exception {\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGmodGFF3(new File(\"src/test/resources/volvox_all.fna\"), new File(\"src/test/resources/volvox.gff3\"));\n        ChromosomeSequence ctgASequence = chromosomeSequenceList.get(\"ctgA\");\n        GeneSequence edenGeneSequence = ctgASequence.getGene(\"EDEN\");\n        System.out.println(\"Note \" + edenGeneSequence.getNotesList());\n\n    }\n\n    /**\n     * Test of getProteinSequences method, of class GeneFeatureHelper. Used gff3 file that was modified from the volvox gff version. Do not\n     * have the reference protein that is generated from each CDS record so subject to being incorrect without a validated test case.\n     * Could not find anyone providing a gff3 test case with expected protein output.\n     */\n    public void testGetProteinSequences() throws Exception {\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGmodGFF3(new File(\"src/test/resources/volvox_all.fna\"), new File(\"src/test/resources/volvox.gff3\"));\n        LinkedHashMap<String, ProteinSequence> proteinSequenceList = GeneFeatureHelper.getProteinSequences(chromosomeSequenceList.values());\n//        for(ProteinSequence proteinSequence : proteinSequenceList.values()){\n//            System.out.println(\"Output=\" + proteinSequence.getSequenceAsString());\n//        }\n        FastaWriterHelper.writeProteinSequence(new File(\"src/test/resources/testoutput/volvox_all.faa\"), proteinSequenceList.values());\n\n        FileAssert.assertEquals(\"volvox_all_reference.faa and volvox_all.faa are not equal\", new File(\"src/test/resources/volvox_all_reference.faa\"), new File(\"src/test/resources/testoutput/volvox_all.faa\"));\n\n\n    }\n   \n    /**\n     * Test of getGeneSequences method, of class GeneFeatureHelper.\n     */\n    public void testGetGeneSequences() throws Exception {\n//        System.out.println(\"getGeneSequences\");\n        LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGmodGFF3(new File(\"src/test/resources/volvox_all.fna\"), new File(\"src/test/resources/volvox.gff3\"));\n        LinkedHashMap<String, GeneSequence> geneSequenceHashMap = GeneFeatureHelper.getGeneSequences(chromosomeSequenceList.values());\n        Collection<GeneSequence> geneSequences = geneSequenceHashMap.values();\n        FastaWriterHelper.writeGeneSequence(new File(\"src/test/resources/volvox_all_genes_exon_uppercase.fna\"), geneSequences, true);\n    }\n\n\n}\n","commitMessage":"Minor updates\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8629 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"Minor updates\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8629 7c6358e6-4a41-0410-a743-a5b2a554c398\n","allZero":false}