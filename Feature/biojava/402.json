{"repository":"biojava","prod_path":"biojava-core/src/main/java/org/biojava/nbio/core/alignment/SimpleSequencePair.java","test_path":"biojava-core/src/test/java/org/biojava/nbio/core/alignment/SimpleSequencePairTest.java","prod_time":"2015-09-16 22:43:32","test_time":"2015-09-16 22:43:32","type":"RENAME","proType":"RENAME","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":4,"add_packageid_line":1,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":4,"del_packageid_line":1,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"5ad3cc9e93ee928561a4423a0ac9a3835370b1b7","test_commitID":"5ad3cc9e93ee928561a4423a0ac9a3835370b1b7","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 14, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.alignment.template.AlignedSequence;\nimport org.biojava.nbio.alignment.template.AlignedSequence.Step;\nimport org.biojava.nbio.alignment.template.Profile;\nimport org.biojava.nbio.alignment.template.SequencePair;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\nimport java.util.List;\n\n/**\n * Implements a data structure for the results of pairwise sequence alignment.\n *\n * @author Mark Chapman\n * @param <S> each element of the alignment {@link Profile} is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class SimpleSequencePair<S extends Sequence<C>, C extends Compound> extends SimpleProfile<S, C>\nimplements SequencePair<S, C> {\n\n\tprivate int identicals = -1, similars = -1;\n\n\t/**\n\t * Creates a pair profile for the given already aligned sequences.\n\t *\n\t * @param query the first sequence of the pair\n\t * @param target the second sequence of the pair\n\t * @throws IllegalArgumentException if sequences differ in size\n\t */\n\tpublic SimpleSequencePair(AlignedSequence<S, C> query, AlignedSequence<S, C> target) {\n\t\tsuper(query, target);\n\t}\n\n\t/**\n\t * Creates a pair profile for the given sequences with a global alignment.\n\t *\n\t * @param query the first sequence of the pair\n\t * @param target the second sequence of the pair\n\t * @param sx lists whether the query sequence aligns a {@link Compound} or gap at each index of the alignment\n\t * @param sy lists whether the target sequence aligns a {@link Compound} or gap at each index of the alignment\n\t * @throws IllegalArgumentException if alignments differ in size or given sequences do not fit in alignments\n\t */\n\tpublic SimpleSequencePair(S query, S target, List<Step> sx, List<Step> sy) {\n\t\tthis(query, target, sx, 0, 0, sy, 0, 0);\n\t}\n\n\t/**\n\t * Creates a pair profile for the given sequences with a local alignment.\n\t *\n\t * @param query the first sequence of the pair\n\t * @param target the second sequence of the pair\n\t * @param sx lists whether the query sequence aligns a {@link Compound} or gap at each index of the alignment\n\t * @param xb number of {@link Compound}s skipped in the query sequence before the aligned region\n\t * @param xa number of {@link Compound}s skipped in the query sequence after the aligned region\n\t * @param sy lists whether the target sequence aligns a {@link Compound} or gap at each index of the alignment\n\t * @param yb number of {@link Compound}s skipped in the target sequence before the aligned region\n\t * @param ya number of {@link Compound}s skipped in the target sequence after the aligned region\n\t * @throws IllegalArgumentException if alignments differ in size or given sequences do not fit in alignments\n\t */\n\tpublic SimpleSequencePair(S query, S target, List<Step> sx, int xb, int xa, List<Step> sy, int yb, int ya) {\n\t\tsuper(query, target, sx, xb, xa, sy, yb, ya);\n\t}\n\n\t@Override\n\tpublic C getCompoundInQueryAt(int alignmentIndex) {\n\t\treturn getAlignedSequence(1).getCompoundAt(alignmentIndex);\n\t}\n\n\t@Override\n\tpublic C getCompoundInTargetAt(int alignmentIndex) {\n\t\treturn getAlignedSequence(2).getCompoundAt(alignmentIndex);\n\t}\n\n\t@Override\n\tpublic int getIndexInQueryAt(int alignmentIndex) {\n\t\treturn getAlignedSequence(1).getSequenceIndexAt(alignmentIndex);\n\t}\n\n\t@Override\n\tpublic int getIndexInQueryForTargetAt(int targetIndex) {\n\t\treturn getAlignedSequence(1).getSequenceIndexAt(getAlignedSequence(2).getAlignmentIndexAt(targetIndex));\n\t}\n\n\t@Override\n\tpublic int getIndexInTargetAt(int alignmentIndex) {\n\t\treturn getAlignedSequence(2).getSequenceIndexAt(alignmentIndex);\n\t}\n\n\t@Override\n\tpublic int getIndexInTargetForQueryAt(int queryIndex) {\n\t\treturn getAlignedSequence(2).getSequenceIndexAt(getAlignedSequence(1).getAlignmentIndexAt(queryIndex));\n\t}\n\n\t@Override\n\tpublic int getNumIdenticals() {\n\t\tif (identicals == -1) {\n\t\t\tidenticals = 0;\n\t\t\tfor (int i = 1; i <= getLength(); i++) {\n\t\t\t\tif (getCompoundInQueryAt(i).equalsIgnoreCase(getCompoundInTargetAt(i))) {\n\t\t\t\t\tidenticals++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tgetQuery().clearCache();\n\t\t\tgetTarget().clearCache();\n\t\t}\n\t\treturn identicals;\n\t}\n\n\t@Override\n\tpublic int getNumSimilars() {\n\t\tif (similars == -1) {\n\t\t\tsimilars = 0;\n\t\t\tfor (int i = 1; i <= getLength(); i++) {\n\n\t\t\t\tC c1 = getCompoundInQueryAt(i);\n\t\t\t\tC c2 = getCompoundInTargetAt(i);\n\n\t\t\t\tif ( c1 instanceof AminoAcidCompound && c2 instanceof AminoAcidCompound) {\n\t\t\t\t\tshort value = matrix.getValue((AminoAcidCompound)c1, (AminoAcidCompound)c2);\n\t\t\t\t\tif ( value > 0)\n\t\t\t\t\t\tsimilars++;\n\t\t\t\t} else {\n\n\t\t\t\t\tif (getCompoundSet().compoundsEquivalent(c1,c2)) {\n\t\t\t\t\t\tsimilars++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tgetQuery().clearCache();\n\t\t\tgetTarget().clearCache();\n\t\t}\n\t\treturn similars;\n\t}\n\n\t@Override\n\tpublic AlignedSequence<S, C> getQuery() {\n\t\treturn getAlignedSequence(1);\n\t}\n\n\t@Override\n\tpublic AlignedSequence<S, C> getTarget() {\n\t\treturn getAlignedSequence(2);\n\t}\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 14, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.core.alignment;\n\nimport org.biojava.nbio.core.alignment.template.AlignedSequence;\nimport org.biojava.nbio.core.alignment.template.AlignedSequence.Step;\nimport org.biojava.nbio.core.alignment.template.Profile;\nimport org.biojava.nbio.core.alignment.template.SequencePair;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\nimport java.util.List;\n\n/**\n * Implements a data structure for the results of pairwise sequence alignment.\n *\n * @author Mark Chapman\n * @author Paolo Pavan\n * @param <S> each element of the alignment {@link Profile} is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class SimpleSequencePair<S extends Sequence<C>, C extends Compound> extends SimpleProfile<S, C>\nimplements SequencePair<S, C> {\n\n\tprivate int identicals = -1, similars = -1;\n\n\t/**\n\t * Creates a pair profile for the given already aligned sequences.\n\t *\n\t * @param query the first sequence of the pair\n\t * @param target the second sequence of the pair\n\t * @throws IllegalArgumentException if sequences differ in size\n\t */\n\tpublic SimpleSequencePair(AlignedSequence<S, C> query, AlignedSequence<S, C> target) {\n\t\tsuper(query, target);\n\t}\n\n\t/**\n\t * Creates a pair profile for the given sequences with a global alignment.\n\t *\n\t * @param query the first sequence of the pair\n\t * @param target the second sequence of the pair\n\t * @param sx lists whether the query sequence aligns a {@link Compound} or gap at each index of the alignment\n\t * @param sy lists whether the target sequence aligns a {@link Compound} or gap at each index of the alignment\n\t * @throws IllegalArgumentException if alignments differ in size or given sequences do not fit in alignments\n\t */\n\tpublic SimpleSequencePair(S query, S target, List<Step> sx, List<Step> sy) {\n\t\tthis(query, target, sx, 0, 0, sy, 0, 0);\n\t}\n\n\t/**\n\t * Creates a pair profile for the given sequences with a local alignment.\n\t *\n\t * @param query the first sequence of the pair\n\t * @param target the second sequence of the pair\n\t * @param sx lists whether the query sequence aligns a {@link Compound} or gap at each index of the alignment\n\t * @param xb number of {@link Compound}s skipped in the query sequence before the aligned region\n\t * @param xa number of {@link Compound}s skipped in the query sequence after the aligned region\n\t * @param sy lists whether the target sequence aligns a {@link Compound} or gap at each index of the alignment\n\t * @param yb number of {@link Compound}s skipped in the target sequence before the aligned region\n\t * @param ya number of {@link Compound}s skipped in the target sequence after the aligned region\n\t * @throws IllegalArgumentException if alignments differ in size or given sequences do not fit in alignments\n\t */\n\tpublic SimpleSequencePair(S query, S target, List<Step> sx, int xb, int xa, List<Step> sy, int yb, int ya) {\n\t\tsuper(query, target, sx, xb, xa, sy, yb, ya);\n\t}\n\n\t@Override\n\tpublic C getCompoundInQueryAt(int alignmentIndex) {\n\t\treturn getAlignedSequence(1).getCompoundAt(alignmentIndex);\n\t}\n\n\t@Override\n\tpublic C getCompoundInTargetAt(int alignmentIndex) {\n\t\treturn getAlignedSequence(2).getCompoundAt(alignmentIndex);\n\t}\n\n\t@Override\n\tpublic int getIndexInQueryAt(int alignmentIndex) {\n\t\treturn getAlignedSequence(1).getSequenceIndexAt(alignmentIndex);\n\t}\n\n\t@Override\n\tpublic int getIndexInQueryForTargetAt(int targetIndex) {\n\t\treturn getAlignedSequence(1).getSequenceIndexAt(getAlignedSequence(2).getAlignmentIndexAt(targetIndex));\n\t}\n\n\t@Override\n\tpublic int getIndexInTargetAt(int alignmentIndex) {\n\t\treturn getAlignedSequence(2).getSequenceIndexAt(alignmentIndex);\n\t}\n\n\t@Override\n\tpublic int getIndexInTargetForQueryAt(int queryIndex) {\n\t\treturn getAlignedSequence(2).getSequenceIndexAt(getAlignedSequence(1).getAlignmentIndexAt(queryIndex));\n\t}\n\n\t@Override\n\tpublic int getNumIdenticals() {\n\t\tif (identicals == -1) {\n\t\t\tidenticals = 0;\n\t\t\tfor (int i = 1; i <= getLength(); i++) {\n\t\t\t\tif (getCompoundInQueryAt(i).equalsIgnoreCase(getCompoundInTargetAt(i))) {\n\t\t\t\t\tidenticals++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tgetQuery().clearCache();\n\t\t\tgetTarget().clearCache();\n\t\t}\n\t\treturn identicals;\n\t}\n\n\t@Override\n\tpublic int getNumSimilars() {\n\t\tif (similars == -1) {\n\t\t\tsimilars = 0;\n\t\t\tfor (int i = 1; i <= getLength(); i++) {\n\n\t\t\t\tC c1 = getCompoundInQueryAt(i);\n\t\t\t\tC c2 = getCompoundInTargetAt(i);\n\n\t\t\t\tif ( c1 instanceof AminoAcidCompound && c2 instanceof AminoAcidCompound) {\n\t\t\t\t\tshort value = matrix.getValue((AminoAcidCompound)c1, (AminoAcidCompound)c2);\n\t\t\t\t\tif ( value > 0)\n\t\t\t\t\t\tsimilars++;\n\t\t\t\t} else {\n\n\t\t\t\t\tif (getCompoundSet().compoundsEquivalent(c1,c2)) {\n\t\t\t\t\t\tsimilars++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tgetQuery().clearCache();\n\t\t\tgetTarget().clearCache();\n\t\t}\n\t\treturn similars;\n\t}\n\n\t@Override\n\tpublic AlignedSequence<S, C> getQuery() {\n\t\treturn getAlignedSequence(1);\n\t}\n\n\t@Override\n\tpublic AlignedSequence<S, C> getTarget() {\n\t\treturn getAlignedSequence(2);\n\t}\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 15, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.alignment.template.AlignedSequence.Step;\nimport org.biojava.nbio.alignment.template.SequencePair;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.util.Arrays;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class SimpleSequencePairTest {\n\n    private ProteinSequence query, target;\n    private SequencePair<ProteinSequence, AminoAcidCompound> global, local;\n\n    @Before\n    public void setup() throws CompoundNotFoundException { \n        query = new ProteinSequence(\"ARND\");\n        target = new ProteinSequence(\"RDG\");\n        global = new SimpleSequencePair<ProteinSequence, AminoAcidCompound>(query, target, Arrays.asList(new Step[] {\n                Step.COMPOUND, Step.COMPOUND, Step.COMPOUND, Step.COMPOUND, Step.GAP}), Arrays.asList(new Step[] {\n                Step.GAP, Step.COMPOUND, Step.GAP, Step.COMPOUND, Step.COMPOUND}));\n        local = new SimpleSequencePair<ProteinSequence, AminoAcidCompound>(query, target, Arrays.asList(new Step[] {\n                Step.COMPOUND, Step.COMPOUND, Step.COMPOUND}), 1, 0, Arrays.asList(new Step[] { Step.COMPOUND,\n                Step.GAP, Step.COMPOUND}), 0, 1);\n    }\n\n    @Test\n    public void testGetCompoundInQueryAt() {\n        assertEquals(global.getCompoundInQueryAt(1).getShortName(), \"A\");\n        assertEquals(global.getCompoundInQueryAt(2).getShortName(), \"R\");\n        assertEquals(global.getCompoundInQueryAt(3).getShortName(), \"N\");\n        assertEquals(global.getCompoundInQueryAt(4).getShortName(), \"D\");\n        assertEquals(global.getCompoundInQueryAt(5).getShortName(), \"-\");\n        assertEquals(local.getCompoundInQueryAt(1).getShortName(), \"R\");\n        assertEquals(local.getCompoundInQueryAt(2).getShortName(), \"N\");\n        assertEquals(local.getCompoundInQueryAt(3).getShortName(), \"D\");\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInQueryAtOutOfBounds() {\n        global.getCompoundInQueryAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInQueryAtOutOfBounds2() {\n        global.getCompoundInQueryAt(6);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInQueryAtOutOfBounds3() {\n        local.getCompoundInQueryAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInQueryAtOutOfBounds4() {\n        local.getCompoundInQueryAt(4);\n    }\n\n    @Test\n    public void testGetCompoundInTargetAt() {\n        assertEquals(global.getCompoundInTargetAt(1).getShortName(), \"-\");\n        assertEquals(global.getCompoundInTargetAt(2).getShortName(), \"R\");\n        assertEquals(global.getCompoundInTargetAt(3).getShortName(), \"-\");\n        assertEquals(global.getCompoundInTargetAt(4).getShortName(), \"D\");\n        assertEquals(global.getCompoundInTargetAt(5).getShortName(), \"G\");\n        assertEquals(local.getCompoundInTargetAt(1).getShortName(), \"R\");\n        assertEquals(local.getCompoundInTargetAt(2).getShortName(), \"-\");\n        assertEquals(local.getCompoundInTargetAt(3).getShortName(), \"D\");\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInTargetAtOutOfBounds() {\n        global.getCompoundInTargetAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInTargetAtOutOfBounds2() {\n        global.getCompoundInTargetAt(6);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInTargetAtOutOfBounds3() {\n        local.getCompoundInTargetAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInTargetAtOutOfBounds4() {\n        local.getCompoundInTargetAt(4);\n    }\n\n    @Test\n    public void testGetIndexInQueryAt() {\n        assertEquals(global.getIndexInQueryAt(1), 1);\n        assertEquals(global.getIndexInQueryAt(2), 2);\n        assertEquals(global.getIndexInQueryAt(3), 3);\n        assertEquals(global.getIndexInQueryAt(4), 4);\n        assertEquals(global.getIndexInQueryAt(5), 4);\n        assertEquals(local.getIndexInQueryAt(1), 2);\n        assertEquals(local.getIndexInQueryAt(2), 3);\n        assertEquals(local.getIndexInQueryAt(3), 4);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryAtOutOfBounds() {\n        global.getIndexInQueryAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryAtOutOfBounds2() {\n        global.getIndexInQueryAt(6);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryAtOutOfBounds3() {\n        local.getIndexInQueryAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryAtOutOfBounds4() {\n        local.getIndexInQueryAt(4);\n    }\n\n    @Test\n    public void testGetIndexInQueryForTargetAt() {\n        assertEquals(global.getIndexInQueryForTargetAt(1), 2);\n        assertEquals(global.getIndexInQueryForTargetAt(2), 4);\n        assertEquals(global.getIndexInQueryForTargetAt(3), 4);\n        assertEquals(local.getIndexInQueryForTargetAt(1), 2);\n        assertEquals(local.getIndexInQueryForTargetAt(2), 4);\n        assertEquals(local.getIndexInQueryForTargetAt(3), 4);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryForTargetAtOutOfBounds() {\n        global.getIndexInQueryForTargetAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryForTargetAtOutOfBounds2() {\n        global.getIndexInQueryForTargetAt(4);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryForTargetAtOutOfBounds3() {\n        local.getIndexInQueryForTargetAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryForTargetAtOutOfBounds4() {\n        local.getIndexInQueryForTargetAt(4);\n    }\n\n    @Test\n    public void testGetIndexInTargetAt() {\n        assertEquals(global.getIndexInTargetAt(1), 1);\n        assertEquals(global.getIndexInTargetAt(2), 1);\n        assertEquals(global.getIndexInTargetAt(3), 1);\n        assertEquals(global.getIndexInTargetAt(4), 2);\n        assertEquals(global.getIndexInTargetAt(5), 3);\n        assertEquals(local.getIndexInTargetAt(1), 1);\n        assertEquals(local.getIndexInTargetAt(2), 1);\n        assertEquals(local.getIndexInTargetAt(3), 2);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetAtOutOfBounds() {\n        global.getIndexInTargetAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetAtOutOfBounds2() {\n        global.getIndexInTargetAt(6);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetAtOutOfBounds3() {\n        local.getIndexInTargetAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetAtOutOfBounds4() {\n        local.getIndexInTargetAt(4);\n    }\n\n    @Test\n    public void testGetIndexInTargetForQueryAt() {\n        assertEquals(global.getIndexInTargetForQueryAt(1), 1);\n        assertEquals(global.getIndexInTargetForQueryAt(2), 1);\n        assertEquals(global.getIndexInTargetForQueryAt(3), 1);\n        assertEquals(global.getIndexInTargetForQueryAt(4), 2);\n        assertEquals(local.getIndexInTargetForQueryAt(1), 1);\n        assertEquals(local.getIndexInTargetForQueryAt(2), 1);\n        assertEquals(local.getIndexInTargetForQueryAt(3), 1);\n        assertEquals(local.getIndexInTargetForQueryAt(4), 2);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetForQueryAtOutOfBounds() {\n        global.getIndexInTargetForQueryAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetForQueryAtOutOfBounds2() {\n        global.getIndexInTargetForQueryAt(5);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetForQueryAtOutOfBounds3() {\n        local.getIndexInTargetForQueryAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetForQueryAtOutOfBounds4() {\n        local.getIndexInTargetForQueryAt(5);\n    }\n\n    @Test\n    public void testGetNumIdenticals() {\n        assertEquals(global.getNumIdenticals(), 2);\n        assertEquals(local.getNumIdenticals(), 2);\n    }\n\n    @Test\n    public void testGetNumSimilars() {\n        assertEquals(global.getNumSimilars(), 2);\n        assertEquals(local.getNumSimilars(), 2);\n    }\n\n    @Test\n    public void testGetQuery() {\n        assertEquals(global.getQuery().getOriginalSequence(), query);\n        assertEquals(local.getQuery().getOriginalSequence(), query);\n    }\n\n    @Test\n    public void testGetTarget() {\n        assertEquals(global.getTarget().getOriginalSequence(), target);\n        assertEquals(local.getTarget().getOriginalSequence(), target);\n    }\n\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 15, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.core.alignment;\n\nimport org.biojava.nbio.core.alignment.template.AlignedSequence.Step;\nimport org.biojava.nbio.core.alignment.template.SequencePair;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.util.Arrays;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class SimpleSequencePairTest {\n\n    private ProteinSequence query, target;\n    private SequencePair<ProteinSequence, AminoAcidCompound> global, local;\n\n    @Before\n    public void setup() throws CompoundNotFoundException { \n        query = new ProteinSequence(\"ARND\");\n        target = new ProteinSequence(\"RDG\");\n        global = new SimpleSequencePair<ProteinSequence, AminoAcidCompound>(query, target, Arrays.asList(new Step[] {\n                Step.COMPOUND, Step.COMPOUND, Step.COMPOUND, Step.COMPOUND, Step.GAP}), Arrays.asList(new Step[] {\n                Step.GAP, Step.COMPOUND, Step.GAP, Step.COMPOUND, Step.COMPOUND}));\n        local = new SimpleSequencePair<ProteinSequence, AminoAcidCompound>(query, target, Arrays.asList(new Step[] {\n                Step.COMPOUND, Step.COMPOUND, Step.COMPOUND}), 1, 0, Arrays.asList(new Step[] { Step.COMPOUND,\n                Step.GAP, Step.COMPOUND}), 0, 1);\n    }\n\n    @Test\n    public void testGetCompoundInQueryAt() {\n        assertEquals(global.getCompoundInQueryAt(1).getShortName(), \"A\");\n        assertEquals(global.getCompoundInQueryAt(2).getShortName(), \"R\");\n        assertEquals(global.getCompoundInQueryAt(3).getShortName(), \"N\");\n        assertEquals(global.getCompoundInQueryAt(4).getShortName(), \"D\");\n        assertEquals(global.getCompoundInQueryAt(5).getShortName(), \"-\");\n        assertEquals(local.getCompoundInQueryAt(1).getShortName(), \"R\");\n        assertEquals(local.getCompoundInQueryAt(2).getShortName(), \"N\");\n        assertEquals(local.getCompoundInQueryAt(3).getShortName(), \"D\");\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInQueryAtOutOfBounds() {\n        global.getCompoundInQueryAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInQueryAtOutOfBounds2() {\n        global.getCompoundInQueryAt(6);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInQueryAtOutOfBounds3() {\n        local.getCompoundInQueryAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInQueryAtOutOfBounds4() {\n        local.getCompoundInQueryAt(4);\n    }\n\n    @Test\n    public void testGetCompoundInTargetAt() {\n        assertEquals(global.getCompoundInTargetAt(1).getShortName(), \"-\");\n        assertEquals(global.getCompoundInTargetAt(2).getShortName(), \"R\");\n        assertEquals(global.getCompoundInTargetAt(3).getShortName(), \"-\");\n        assertEquals(global.getCompoundInTargetAt(4).getShortName(), \"D\");\n        assertEquals(global.getCompoundInTargetAt(5).getShortName(), \"G\");\n        assertEquals(local.getCompoundInTargetAt(1).getShortName(), \"R\");\n        assertEquals(local.getCompoundInTargetAt(2).getShortName(), \"-\");\n        assertEquals(local.getCompoundInTargetAt(3).getShortName(), \"D\");\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInTargetAtOutOfBounds() {\n        global.getCompoundInTargetAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInTargetAtOutOfBounds2() {\n        global.getCompoundInTargetAt(6);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInTargetAtOutOfBounds3() {\n        local.getCompoundInTargetAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetCompoundInTargetAtOutOfBounds4() {\n        local.getCompoundInTargetAt(4);\n    }\n\n    @Test\n    public void testGetIndexInQueryAt() {\n        assertEquals(global.getIndexInQueryAt(1), 1);\n        assertEquals(global.getIndexInQueryAt(2), 2);\n        assertEquals(global.getIndexInQueryAt(3), 3);\n        assertEquals(global.getIndexInQueryAt(4), 4);\n        assertEquals(global.getIndexInQueryAt(5), 4);\n        assertEquals(local.getIndexInQueryAt(1), 2);\n        assertEquals(local.getIndexInQueryAt(2), 3);\n        assertEquals(local.getIndexInQueryAt(3), 4);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryAtOutOfBounds() {\n        global.getIndexInQueryAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryAtOutOfBounds2() {\n        global.getIndexInQueryAt(6);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryAtOutOfBounds3() {\n        local.getIndexInQueryAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryAtOutOfBounds4() {\n        local.getIndexInQueryAt(4);\n    }\n\n    @Test\n    public void testGetIndexInQueryForTargetAt() {\n        assertEquals(global.getIndexInQueryForTargetAt(1), 2);\n        assertEquals(global.getIndexInQueryForTargetAt(2), 4);\n        assertEquals(global.getIndexInQueryForTargetAt(3), 4);\n        assertEquals(local.getIndexInQueryForTargetAt(1), 2);\n        assertEquals(local.getIndexInQueryForTargetAt(2), 4);\n        assertEquals(local.getIndexInQueryForTargetAt(3), 4);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryForTargetAtOutOfBounds() {\n        global.getIndexInQueryForTargetAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryForTargetAtOutOfBounds2() {\n        global.getIndexInQueryForTargetAt(4);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryForTargetAtOutOfBounds3() {\n        local.getIndexInQueryForTargetAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInQueryForTargetAtOutOfBounds4() {\n        local.getIndexInQueryForTargetAt(4);\n    }\n\n    @Test\n    public void testGetIndexInTargetAt() {\n        assertEquals(global.getIndexInTargetAt(1), 1);\n        assertEquals(global.getIndexInTargetAt(2), 1);\n        assertEquals(global.getIndexInTargetAt(3), 1);\n        assertEquals(global.getIndexInTargetAt(4), 2);\n        assertEquals(global.getIndexInTargetAt(5), 3);\n        assertEquals(local.getIndexInTargetAt(1), 1);\n        assertEquals(local.getIndexInTargetAt(2), 1);\n        assertEquals(local.getIndexInTargetAt(3), 2);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetAtOutOfBounds() {\n        global.getIndexInTargetAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetAtOutOfBounds2() {\n        global.getIndexInTargetAt(6);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetAtOutOfBounds3() {\n        local.getIndexInTargetAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetAtOutOfBounds4() {\n        local.getIndexInTargetAt(4);\n    }\n\n    @Test\n    public void testGetIndexInTargetForQueryAt() {\n        assertEquals(global.getIndexInTargetForQueryAt(1), 1);\n        assertEquals(global.getIndexInTargetForQueryAt(2), 1);\n        assertEquals(global.getIndexInTargetForQueryAt(3), 1);\n        assertEquals(global.getIndexInTargetForQueryAt(4), 2);\n        assertEquals(local.getIndexInTargetForQueryAt(1), 1);\n        assertEquals(local.getIndexInTargetForQueryAt(2), 1);\n        assertEquals(local.getIndexInTargetForQueryAt(3), 1);\n        assertEquals(local.getIndexInTargetForQueryAt(4), 2);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetForQueryAtOutOfBounds() {\n        global.getIndexInTargetForQueryAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetForQueryAtOutOfBounds2() {\n        global.getIndexInTargetForQueryAt(5);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetForQueryAtOutOfBounds3() {\n        local.getIndexInTargetForQueryAt(0);\n    }\n\n    @Test(expected=IndexOutOfBoundsException.class)\n    public void testGetIndexInTargetForQueryAtOutOfBounds4() {\n        local.getIndexInTargetForQueryAt(5);\n    }\n\n    @Test\n    public void testGetNumIdenticals() {\n        assertEquals(global.getNumIdenticals(), 2);\n        assertEquals(local.getNumIdenticals(), 2);\n    }\n\n    @Test\n    public void testGetNumSimilars() {\n        assertEquals(global.getNumSimilars(), 2);\n        assertEquals(local.getNumSimilars(), 2);\n    }\n\n    @Test\n    public void testGetQuery() {\n        assertEquals(global.getQuery().getOriginalSequence(), query);\n        assertEquals(local.getQuery().getOriginalSequence(), query);\n    }\n\n    @Test\n    public void testGetTarget() {\n        assertEquals(global.getTarget().getOriginalSequence(), target);\n        assertEquals(local.getTarget().getOriginalSequence(), target);\n    }\n\n}\n","commitMessage":"Massive refactoring: moved alignment data structures from biojava-alignment to biojava-core.\nMantaining main biological data structures in core will help to avoid problems of unwanted dependency. Unfortunately the substitution matrices related classes are tight coupled with SimpleSequencePair class and were moved too from alignment.\n\nUpdated pom file to remove dependency of core from alignment module temporary added by first implementation of SearchIO.\n","test_commitMessage":"Massive refactoring: moved alignment data structures from biojava-alignment to biojava-core.\nMantaining main biological data structures in core will help to avoid problems of unwanted dependency. Unfortunately the substitution matrices related classes are tight coupled with SimpleSequencePair class and were moved too from alignment.\n\nUpdated pom file to remove dependency of core from alignment module temporary added by first implementation of SearchIO.\n","allZero":false}