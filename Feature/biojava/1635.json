{"repository":"biojava","prod_path":"biojava3-alignment/src/main/java/org/biojava3/alignment/NeedlemanWunsch.java","test_path":"biojava3-alignment/src/test/java/org/biojava3/alignment/NeedlemanWunschTest.java","prod_time":"2013-12-16 16:37:01","test_time":"2013-12-16 16:37:01","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":1,"add_condition_line":0,"add_field_line":0,"add_import_line":1,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":1,"del_call_line":1,"del_classname_line":1,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":1,"del_return_line":0,"label":"POSITIVE","prod_commitID":"f0b698167f4be90d34499a73eb70ef827186855e","test_commitID":"f0b698167f4be90d34499a73eb70ef827186855e","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 11, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport java.util.List;\n\nimport org.biojava3.alignment.template.AbstractPairwiseSequenceAligner;\nimport org.biojava3.alignment.template.AlignedSequence;\nimport org.biojava3.alignment.template.AlignedSequence.Step;\nimport org.biojava3.alignment.template.GapPenalty;\nimport org.biojava3.alignment.template.SubstitutionMatrix;\nimport org.biojava3.core.sequence.template.Compound;\nimport org.biojava3.core.sequence.template.Sequence;\n\n/**\n * Needleman and Wunsch defined an algorithm for pairwise global sequence alignments (from the first until the last\n * {@link Compound} of each {@link Sequence}).  This class performs such global sequence comparisons efficiently by\n * dynamic programming.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} of the alignment pair is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class NeedlemanWunsch<S extends Sequence<C>, C extends Compound> extends AbstractPairwiseSequenceAligner<S, C> {\n\n    /**\n     * Before running a pairwise global sequence alignment, data must be sent in via calls to\n     * {@link #setQuery(Sequence)}, {@link #setTarget(Sequence)}, {@link #setGapPenalty(GapPenalty)}, and\n     * {@link #setSubstitutionMatrix(SubstitutionMatrix)}.\n     */\n    public NeedlemanWunsch() {\n    }\n\n    /**\n     * Prepares for a pairwise global sequence alignment.\n     *\n     * @param query the first {@link Sequence} of the pair to align\n     * @param target the second {@link Sequence} of the pair to align\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public NeedlemanWunsch(S query, S target, GapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n    }\n\n    // method for AbstractMatrixAligner\n\n    @Override\n    protected void setProfile(List<Step> sx, List<Step> sy) {\n        profile = pair = new SimpleSequencePair<S, C>(getQuery(), getTarget(), sx, sy);\n    }\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 11, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport java.util.List;\n\nimport org.biojava3.alignment.routines.AnchoredPairwiseSequenceAligner;\nimport org.biojava3.alignment.template.AbstractPairwiseSequenceAligner;\nimport org.biojava3.alignment.template.AlignedSequence;\nimport org.biojava3.alignment.template.AlignedSequence.Step;\nimport org.biojava3.alignment.template.GapPenalty;\nimport org.biojava3.alignment.template.SubstitutionMatrix;\nimport org.biojava3.core.sequence.template.Compound;\nimport org.biojava3.core.sequence.template.Sequence;\n\n/**\n * Needleman and Wunsch defined an algorithm for pairwise global sequence alignments (from the first until the last\n * {@link Compound} of each {@link Sequence}).  This class performs such global sequence comparisons efficiently by\n * dynamic programming.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} of the alignment pair is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class NeedlemanWunsch<S extends Sequence<C>, C extends Compound> extends AnchoredPairwiseSequenceAligner<S, C> {\n\n    /**\n     * Before running a pairwise global sequence alignment, data must be sent in via calls to\n     * {@link #setQuery(Sequence)}, {@link #setTarget(Sequence)}, {@link #setGapPenalty(GapPenalty)}, and\n     * {@link #setSubstitutionMatrix(SubstitutionMatrix)}.\n     */\n    public NeedlemanWunsch() {\n    }\n\n    /**\n     * Prepares for a pairwise global sequence alignment.\n     *\n     * @param query the first {@link Sequence} of the pair to align\n     * @param target the second {@link Sequence} of the pair to align\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public NeedlemanWunsch(S query, S target, GapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n    }\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 17, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport static org.junit.Assert.*;\n\nimport org.biojava3.alignment.template.GapPenalty;\nimport org.biojava3.alignment.template.SubstitutionMatrix;\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class NeedlemanWunschTest {\n\n    private ProteinSequence query, target;\n    private GapPenalty gaps;\n    private SubstitutionMatrix<AminoAcidCompound> blosum62;\n    private NeedlemanWunsch<ProteinSequence, AminoAcidCompound> alignment, self;\n\n    @Before\n    public void setup() {\n        query = new ProteinSequence(\"ARND\");\n        target = new ProteinSequence(\"RDG\");\n        gaps = new SimpleGapPenalty((short) 10, (short) 1);\n        blosum62 = SubstitutionMatrixHelper.getBlosum62();\n        alignment = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, target, gaps, blosum62);\n        self = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, query, gaps, blosum62);\n    }\n\n    @Test\n    public void testNeedlemanWunsch() {\n        NeedlemanWunsch<ProteinSequence, AminoAcidCompound> nw =\n                new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>();\n        nw.setQuery(query);\n        nw.setTarget(target);\n        nw.setGapPenalty(gaps);\n        nw.setSubstitutionMatrix(blosum62);\n        assertEquals(nw.getScore(), alignment.getScore());\n    }\n\n    @Test\n    public void testGetQuery() {\n        assertEquals(alignment.getQuery(), query);\n        assertEquals(self.getQuery(), query);\n    }\n\n    @Test\n    public void testGetTarget() {\n        assertEquals(alignment.getTarget(), target);\n        assertEquals(self.getTarget(), query);\n    }\n\n    @Test\n    public void testGetGapPenalty() {\n        assertEquals(alignment.getGapPenalty(), gaps);\n        assertEquals(self.getGapPenalty(), gaps);\n    }\n\n    @Test\n    public void testGetSubstitutionMatrix() {\n        assertEquals(alignment.getSubstitutionMatrix(), blosum62);\n        assertEquals(self.getSubstitutionMatrix(), blosum62);\n    }\n\n    @Test\n    public void testIsStoringScoreMatrix() {\n        assertFalse(alignment.isStoringScoreMatrix());\n        assertFalse(self.isStoringScoreMatrix());\n    }\n\n    @Test\n    public void testGetScoreMatrix() {\n        short[][][] scores = alignment.getScoreMatrix();\n        assertEquals(scores[2][1][0], -6);\n        scores = self.getScoreMatrix();\n        assertEquals(scores[3][4][2], 4);\n    }\n\n    @Test\n    public void testGetScoreMatrixAsString() {\n        assertEquals(alignment.getScoreMatrixAsString(), String.format(\n                \"Substitution%n\" +\n                \"        R   D   G%n\" +\n                \"    0  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -\\u221E  -1 -13 -12%n\" +\n                \"R  -\\u221E  -6  -3 -14%n\" +\n                \"N  -\\u221E -12  -5  -3%n\" +\n                \"D  -\\u221E -15  -6  -6%n\" +\n                \"%nDeletion%n\" +\n                \"        R   D   G%n\" +\n                \"  -10  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A -11  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"R -12 -12 -24 -23%n\" +\n                \"N -13 -13 -14 -24%n\" +\n                \"D -14 -14 -15 -14%n\" +\n                \"%nInsertion%n\" +\n                \"        R   D   G%n\" +\n                \"  -10 -11 -12 -13%n\" +\n                \"A  -\\u221E  -\\u221E -12 -13%n\" +\n                \"R  -\\u221E  -\\u221E -17 -14%n\" +\n                \"N  -\\u221E  -\\u221E -23 -16%n\" +\n                \"D  -\\u221E  -\\u221E -26 -17%n\"));\n        assertEquals(self.getScoreMatrixAsString(), String.format(\n                \"Substitution%n\" +\n                \"        A   R   N   D%n\" +\n                \"    0  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -\\u221E   4 -12 -14 -15%n\" +\n                \"R  -\\u221E -12   9  -7 -10%n\" +\n                \"N  -\\u221E -14  -7  15  -1%n\" +\n                \"D  -\\u221E -15 -10  -1  21%n\" +\n                \"%nDeletion%n\" +\n                \"        A   R   N   D%n\" +\n                \"  -10  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A -11  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"R -12  -7 -23 -25 -26%n\" +\n                \"N -13  -8  -2 -18 -21%n\" +\n                \"D -14  -9  -3   4 -12%n\" +\n                \"%nInsertion%n\" +\n                \"        A   R   N   D%n\" +\n                \"  -10 -11 -12 -13 -14%n\" +\n                \"A  -\\u221E  -\\u221E  -7  -8  -9%n\" +\n                \"R  -\\u221E  -\\u221E -23  -2  -3%n\" +\n                \"N  -\\u221E  -\\u221E -25 -18   4%n\" +\n                \"D  -\\u221E  -\\u221E -26 -21 -12%n\"));\n    }\n\n    @Test\n    public void testGetComputationTime() {\n        assertTrue(alignment.getComputationTime() > 0);\n        assertTrue(self.getComputationTime() > 0);\n    }\n\n    @Test\n    public void testGetProfile() {\n        assertEquals(alignment.getProfile().toString(), String.format(\"ARND%n-RDG%n\"));\n        assertEquals(self.getProfile().toString(), String.format(\"ARND%nARND%n\"));\n    }\n\n    @Test\n    public void testGetMaxScore() {\n        assertEquals(alignment.getMaxScore(), 21);\n        assertEquals(self.getMaxScore(), 21);\n    }\n\n    @Test\n    public void testGetMinScore() {\n        assertEquals(alignment.getMinScore(), -27);\n        assertEquals(self.getMinScore(), -28);\n    }\n\n    @Test\n    public void testGetScore() {\n        assertEquals(alignment.getScore(), -6);\n        assertEquals(self.getScore(), 21);\n    }\n\n    @Test\n    public void testGetPair() {\n        assertEquals(alignment.getPair().toString(), String.format(\"ARND%n-RDG%n\"));\n        assertEquals(self.getPair().toString(), String.format(\"ARND%nARND%n\"));\n    }\n\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 17, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport static org.junit.Assert.*;\n\nimport org.biojava3.alignment.routines.GuanUberbacher;\nimport org.biojava3.alignment.template.GapPenalty;\nimport org.biojava3.alignment.template.SubstitutionMatrix;\nimport org.biojava3.core.sequence.DNASequence;\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.compound.AmbiguityDNACompoundSet;\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\nimport org.biojava3.core.sequence.compound.DNACompoundSet;\nimport org.biojava3.core.sequence.compound.NucleotideCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class NeedlemanWunschTest {\n\n    private ProteinSequence query, target;\n    private GapPenalty gaps;\n    private SubstitutionMatrix<AminoAcidCompound> blosum62;\n    private NeedlemanWunsch<ProteinSequence, AminoAcidCompound> alignment, self;\n\n    @Before\n    public void setup() {\n        query = new ProteinSequence(\"ARND\");\n        target = new ProteinSequence(\"RDG\");\n        gaps = new SimpleGapPenalty((short) 10, (short) 1);\n        blosum62 = SubstitutionMatrixHelper.getBlosum62();\n        alignment = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, target, gaps, blosum62);\n        self = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, query, gaps, blosum62);\n    }\n\n    @Test\n    public void testNeedlemanWunsch() {\n        NeedlemanWunsch<ProteinSequence, AminoAcidCompound> nw =\n                new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>();\n        nw.setQuery(query);\n        nw.setTarget(target);\n        nw.setGapPenalty(gaps);\n        nw.setSubstitutionMatrix(blosum62);\n        assertEquals(nw.getScore(), alignment.getScore());\n    }\n\n    @Test\n    public void testGetQuery() {\n        assertEquals(alignment.getQuery(), query);\n        assertEquals(self.getQuery(), query);\n    }\n\n    @Test\n    public void testGetTarget() {\n        assertEquals(alignment.getTarget(), target);\n        assertEquals(self.getTarget(), query);\n    }\n\n    @Test\n    public void testGetGapPenalty() {\n        assertEquals(alignment.getGapPenalty(), gaps);\n        assertEquals(self.getGapPenalty(), gaps);\n    }\n\n    @Test\n    public void testGetSubstitutionMatrix() {\n        assertEquals(alignment.getSubstitutionMatrix(), blosum62);\n        assertEquals(self.getSubstitutionMatrix(), blosum62);\n    }\n\n    @Test\n    public void testIsStoringScoreMatrix() {\n        assertFalse(alignment.isStoringScoreMatrix());\n        assertFalse(self.isStoringScoreMatrix());\n    }\n\n    @Test\n    public void testGetScoreMatrix() {\n        short[][][] scores = alignment.getScoreMatrix();\n        assertEquals(scores[2][1][0], -6);\n        scores = self.getScoreMatrix();\n        assertEquals(scores[3][4][2], 4);\n    }\n\n    @Test\n    public void testGetScoreMatrixAsString() {\n        assertEquals(alignment.getScoreMatrixAsString(), String.format(\n                \"Substitution%n\" +\n                \"        R   D   G%n\" +\n                \"    0  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -\\u221E  -1 -13 -12%n\" +\n                \"R  -\\u221E  -6  -3 -14%n\" +\n                \"N  -\\u221E -12  -5  -3%n\" +\n                \"D  -\\u221E -15  -6  -6%n\" +\n                \"%nDeletion%n\" +\n                \"        R   D   G%n\" +\n                \"  -10  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A -11  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"R -12 -12 -24 -23%n\" +\n                \"N -13 -13 -14 -24%n\" +\n                \"D -14 -14 -15 -14%n\" +\n                \"%nInsertion%n\" +\n                \"        R   D   G%n\" +\n                \"  -10 -11 -12 -13%n\" +\n                \"A  -\\u221E  -\\u221E -12 -13%n\" +\n                \"R  -\\u221E  -\\u221E -17 -14%n\" +\n                \"N  -\\u221E  -\\u221E -23 -16%n\" +\n                \"D  -\\u221E  -\\u221E -26 -17%n\"));\n        assertEquals(self.getScoreMatrixAsString(), String.format(\n                \"Substitution%n\" +\n                \"        A   R   N   D%n\" +\n                \"    0  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -\\u221E   4 -12 -14 -15%n\" +\n                \"R  -\\u221E -12   9  -7 -10%n\" +\n                \"N  -\\u221E -14  -7  15  -1%n\" +\n                \"D  -\\u221E -15 -10  -1  21%n\" +\n                \"%nDeletion%n\" +\n                \"        A   R   N   D%n\" +\n                \"  -10  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A -11  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"R -12  -7 -23 -25 -26%n\" +\n                \"N -13  -8  -2 -18 -21%n\" +\n                \"D -14  -9  -3   4 -12%n\" +\n                \"%nInsertion%n\" +\n                \"        A   R   N   D%n\" +\n                \"  -10 -11 -12 -13 -14%n\" +\n                \"A  -\\u221E  -\\u221E  -7  -8  -9%n\" +\n                \"R  -\\u221E  -\\u221E -23  -2  -3%n\" +\n                \"N  -\\u221E  -\\u221E -25 -18   4%n\" +\n                \"D  -\\u221E  -\\u221E -26 -21 -12%n\"));\n    }\n\n    @Test\n    public void testGetComputationTime() {\n        assertTrue(alignment.getComputationTime() > 0);\n        assertTrue(self.getComputationTime() > 0);\n    }\n\n    @Test\n    public void testGetProfile() {\n        assertEquals(alignment.getProfile().toString(), String.format(\"ARND%n-RDG%n\"));\n        assertEquals(self.getProfile().toString(), String.format(\"ARND%nARND%n\"));\n    }\n\n    @Test\n    public void testGetMaxScore() {\n        assertEquals(alignment.getMaxScore(), 21);\n        assertEquals(self.getMaxScore(), 21);\n    }\n\n    @Test\n    public void testGetMinScore() {\n        assertEquals(alignment.getMinScore(), -27);\n        assertEquals(self.getMinScore(), -28);\n    }\n\n    @Test\n    public void testGetScore() {\n        assertEquals(alignment.getScore(), -6);\n        assertEquals(self.getScore(), 21);\n    }\n\n    @Test\n    public void testGetPair() {\n        assertEquals(alignment.getPair().toString(), String.format(\"ARND%n-RDG%n\"));\n        assertEquals(self.getPair().toString(), String.format(\"ARND%nARND%n\"));\n    }\n    /**\n     * @author Daniel Cameron\n     */\n    @Test\n\tpublic void should_align_all_anchored() {\n    \tDNASequence query = new DNASequence(\"ACG\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"CGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.setAnchors(new int[] { 0, 1, 2} );\n\t\tassertEquals(String.format(\"ACG%nCGT%n\"), aligner.getPair().toString());\n    }\n    /**\n     * @author Daniel Cameron\n     */\n    @Test\n\tpublic void should_align_starting_anchor() {\n    \tDNASequence query = new DNASequence(\"AAT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"AATT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.setAnchors(new int[] { 1, -1, -1} );\n\t\tassertEquals(String.format(\"-AAT%nAATT%n\"), aligner.getPair().toString());\n    }\n    /**\n     * @author Daniel Cameron\n     */\n    @Test\n\tpublic void should_align_ending_anchor() {\n    \tDNASequence query = new DNASequence(\"AAG\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"AATT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.addAnchor(2, 3);\n\t\tassertEquals(String.format(\"AA-G%nAATT%n\"), aligner.getPair().toString());\n    }\n    /**\n     * @author Daniel Cameron\n     */\n    @Test\n\tpublic void should_align_middle_anchor() {\n    \tDNASequence query = new DNASequence(\"ACTTT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"ACGTTT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.setAnchors(new int[] { -1, 2, -1} );\n\t\tassertEquals(String.format(\"A-CTTT%nACGTTT%n\"), aligner.getPair().toString());\n    }\n    /**\n     * @author Daniel Cameron\n     */\n    @Test\n\tpublic void should_align_multiple_anchors() {\n    \tDNASequence query = new DNASequence(\"ACGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"ATACGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)0, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\taligner.addAnchor(0, 0);\n\t\taligner.addAnchor(1, 1);\n\t\taligner.addAnchor(2, 2);\n\t\taligner.addAnchor(3, 5);\n\t\tassertEquals(String.format(\"ACG--T%nATACGT%n\"), aligner.getPair().toString());\n    }\n    /**\n     * @author Daniel Cameron\n     */\n    @Test\n\tpublic void anchors_should_not_change_score() {\n    \tDNASequence query = new DNASequence(\"ACGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"ACGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)5, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> anchored = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)5, (short)10), SubstitutionMatrixHelper.getNuc4_4());\n\t\tanchored.addAnchor(0, 0);\n\t\tanchored.addAnchor(1, 1);\n\t\tanchored.addAnchor(2, 2);\n\t\tanchored.addAnchor(3, 3);\n\t\tassertEquals(aligner.getScore(), anchored.getScore());\n    }\n    /**\n     * @author Daniel Cameron\n     */\n\t@Test\n\tpublic void testAnchoredDNAAlignment() {\n\t\tDNASequence query = new DNASequence(  \"ACGTACCGGTTTT\", DNACompoundSet.getDNACompoundSet());\n\t\tDNASequence target = new DNASequence(\"TACGTCCGGTTACGTACGTT\", DNACompoundSet.getDNACompoundSet());\n\t\tNeedlemanWunsch<DNASequence, NucleotideCompound> aligner = new NeedlemanWunsch<DNASequence, NucleotideCompound>(query, target, new SimpleGapPenalty((short)5, (short)2), SubstitutionMatrixHelper.getNuc4_4());\n\t\tassertEquals(String.format(\"-ACGTACCGGTT-------TT%nTACGT-CCGGTTACGTACGTT%n\"), aligner.getPair().toString());\n\t}\n}\n","commitMessage":"Refactored alignment to allow anchored compounds for all global alignments\nReplaced setSteps(int[] anchor) algorithm due to design flaw (information lost in anchor conversion: not possible to get steps from anchors {(1,1), (3,3)} as alignment could 1-23 or 12-3)\nAdded aligner.addAnchor() for addition of single anchors\nRefactored some alignment internal method signatures to improve code readability\nImproved test coverage\nBug fix: #78\n","test_commitMessage":"Refactored alignment to allow anchored compounds for all global alignments\nReplaced setSteps(int[] anchor) algorithm due to design flaw (information lost in anchor conversion: not possible to get steps from anchors {(1,1), (3,3)} as alignment could 1-23 or 12-3)\nAdded aligner.addAnchor() for addition of single anchors\nRefactored some alignment internal method signatures to improve code readability\nImproved test coverage\nBug fix: #78\n","allZero":false}