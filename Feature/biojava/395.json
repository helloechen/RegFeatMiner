{"repository":"biojava","prod_path":"biojava-alignment/src/main/java/org/biojava/nbio/alignment/SimpleProfileProfileAligner.java","test_path":"biojava-alignment/src/test/java/org/biojava/nbio/alignment/SimpleProfileProfileAlignerTest.java","prod_time":"2015-09-16 22:43:32","test_time":"2015-09-16 22:43:32","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":5,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":1,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"5ad3cc9e93ee928561a4423a0ac9a3835370b1b7","test_commitID":"5ad3cc9e93ee928561a4423a0ac9a3835370b1b7","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 30, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.alignment.template.*;\nimport org.biojava.nbio.alignment.template.AlignedSequence.Step;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\nimport java.util.List;\nimport java.util.concurrent.Future;\n\n/**\n * Implements a simple (naive) {@link Aligner} for a pair of {@link Profile}s.  This is basically an extension of the\n * {@link NeedlemanWunsch} pairwise sequence aligner to pairwise profile alignment using a sum-of-pairs score.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} in the pair of alignment {@link Profile}s is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class SimpleProfileProfileAligner<S extends Sequence<C>, C extends Compound>\n        extends AbstractProfileProfileAligner<S, C> {\n\n    /**\n     * Before running a profile-profile alignment, data must be sent in via calls to\n     * {@link #setQuery(Profile)}, {@link #setTarget(Profile)}, {@link #setGapPenalty(GapPenalty)}, and\n     * {@link #setSubstitutionMatrix(SubstitutionMatrix)}.\n     */\n    public SimpleProfileProfileAligner() {\n    }\n\n    /**\n     * Prepares for a profile-profile alignment.\n     *\n     * @param query the first {@link Profile} of the pair to align\n     * @param target the second {@link Profile} of the pair to align\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public SimpleProfileProfileAligner(Profile<S, C> query, Profile<S, C> target, GapPenalty gapPenalty,\n            SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n    }\n\n    /**\n     * Prepares for a profile-profile alignment run concurrently.\n     *\n     * @param query the first {@link Profile} of the pair to align, still to be calculated\n     * @param target the second {@link Profile} of the pair to align, still to be calculated\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public SimpleProfileProfileAligner(Future<ProfilePair<S, C>> query, Future<ProfilePair<S, C>> target,\n            GapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n    }\n\n    /**\n     * Prepares for a profile-profile alignment run concurrently.\n     *\n     * @param query the first {@link Profile} of the pair to align\n     * @param target the second {@link Profile} of the pair to align, still to be calculated\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public SimpleProfileProfileAligner(Profile<S, C> query, Future<ProfilePair<S, C>> target, GapPenalty gapPenalty,\n            SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n    }\n\n    /**\n     * Prepares for a profile-profile alignment run concurrently.\n     *\n     * @param query the first {@link Profile} of the pair to align, still to be calculated\n     * @param target the second {@link Profile} of the pair to align\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public SimpleProfileProfileAligner(Future<ProfilePair<S, C>> query, Profile<S, C> target, GapPenalty gapPenalty,\n            SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n    }\n\n    // method for AbstractMatrixAligner\n\n    @Override\n    protected void setProfile(List<Step> sx, List<Step> sy) {\n        profile = pair = new SimpleProfilePair<S, C>(getQuery(), getTarget(), sx, sy);\n    }\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 30, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.core.alignment.template.ProfilePair;\nimport org.biojava.nbio.core.alignment.template.Profile;\nimport org.biojava.nbio.core.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.alignment.SimpleProfilePair;\nimport org.biojava.nbio.alignment.template.*;\nimport org.biojava.nbio.core.alignment.template.AlignedSequence.Step;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\nimport java.util.List;\nimport java.util.concurrent.Future;\n\n/**\n * Implements a simple (naive) {@link Aligner} for a pair of {@link Profile}s.  This is basically an extension of the\n * {@link NeedlemanWunsch} pairwise sequence aligner to pairwise profile alignment using a sum-of-pairs score.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} in the pair of alignment {@link Profile}s is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class SimpleProfileProfileAligner<S extends Sequence<C>, C extends Compound>\n        extends AbstractProfileProfileAligner<S, C> {\n\n    /**\n     * Before running a profile-profile alignment, data must be sent in via calls to\n     * {@link #setQuery(Profile)}, {@link #setTarget(Profile)}, {@link #setGapPenalty(GapPenalty)}, and\n     * {@link #setSubstitutionMatrix(SubstitutionMatrix)}.\n     */\n    public SimpleProfileProfileAligner() {\n    }\n\n    /**\n     * Prepares for a profile-profile alignment.\n     *\n     * @param query the first {@link Profile} of the pair to align\n     * @param target the second {@link Profile} of the pair to align\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public SimpleProfileProfileAligner(Profile<S, C> query, Profile<S, C> target, GapPenalty gapPenalty,\n            SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n    }\n\n    /**\n     * Prepares for a profile-profile alignment run concurrently.\n     *\n     * @param query the first {@link Profile} of the pair to align, still to be calculated\n     * @param target the second {@link Profile} of the pair to align, still to be calculated\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public SimpleProfileProfileAligner(Future<ProfilePair<S, C>> query, Future<ProfilePair<S, C>> target,\n            GapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n    }\n\n    /**\n     * Prepares for a profile-profile alignment run concurrently.\n     *\n     * @param query the first {@link Profile} of the pair to align\n     * @param target the second {@link Profile} of the pair to align, still to be calculated\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public SimpleProfileProfileAligner(Profile<S, C> query, Future<ProfilePair<S, C>> target, GapPenalty gapPenalty,\n            SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n    }\n\n    /**\n     * Prepares for a profile-profile alignment run concurrently.\n     *\n     * @param query the first {@link Profile} of the pair to align, still to be calculated\n     * @param target the second {@link Profile} of the pair to align\n     * @param gapPenalty the gap penalties used during alignment\n     * @param subMatrix the set of substitution scores used during alignment\n     */\n    public SimpleProfileProfileAligner(Future<ProfilePair<S, C>> query, Profile<S, C> target, GapPenalty gapPenalty,\n            SubstitutionMatrix<C> subMatrix) {\n        super(query, target, gapPenalty, subMatrix);\n    }\n\n    // method for AbstractMatrixAligner\n\n    @Override\n    protected void setProfile(List<Step> sx, List<Step> sy) {\n        profile = pair = new SimpleProfilePair<S, C>(getQuery(), getTarget(), sx, sy);\n    }\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on July 7, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.alignment.template.GapPenalty;\nimport org.biojava.nbio.alignment.template.Profile;\nimport org.biojava.nbio.alignment.template.ProfilePair;\nimport org.biojava.nbio.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class SimpleProfileProfileAlignerTest {\n\n\tprivate static final double PRECISION = 0.00000001;\n\t\n    private ProteinSequence protein1, protein2, protein3, protein4;\n    private GapPenalty gaps;\n    private SubstitutionMatrix<AminoAcidCompound> blosum62;\n    private Profile<ProteinSequence, AminoAcidCompound> prof1, prof2, prof3, prof4;\n    private SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound> sppa1, sppa2, sppa3;\n    private ProfilePair<ProteinSequence, AminoAcidCompound> pp1, pp2, all;\n\n    @Before\n    public void setup() throws CompoundNotFoundException { \n        protein1 = new ProteinSequence(\"ARND\");\n        protein2 = new ProteinSequence(\"ARND\");\n        protein3 = new ProteinSequence(\"HILK\");\n        protein4 = new ProteinSequence(\"ANDR\");\n        gaps = new SimpleGapPenalty(2, 1);\n        blosum62 = SubstitutionMatrixHelper.getBlosum62();\n        prof1 = new SimpleProfile<ProteinSequence, AminoAcidCompound>(protein1);\n        prof2 = new SimpleProfile<ProteinSequence, AminoAcidCompound>(protein2);\n        prof3 = new SimpleProfile<ProteinSequence, AminoAcidCompound>(protein3);\n        prof4 = new SimpleProfile<ProteinSequence, AminoAcidCompound>(protein4);\n        sppa1 = new SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound>(prof1, prof2, gaps, blosum62);\n        pp1 = sppa1.getPair();\n        sppa2 = new SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound>(prof3, prof4, gaps, blosum62);\n        pp2 = sppa2.getPair();\n        sppa3 = new SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound>(pp1, pp2, gaps, blosum62);\n        all = sppa3.getPair();\n    }\n\n    @Test\n    public void testSimpleProfileProfileAligner() {\n        SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound> alig =\n                new SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound>();\n        alig.setQuery(prof1);\n        alig.setTarget(prof2);\n        alig.setGapPenalty(gaps);\n        alig.setSubstitutionMatrix(blosum62);\n        assertEquals(alig.getScore(), sppa1.getScore(), PRECISION);\n    }\n\n    @Test\n    public void testSimpleProfileProfileAlignerProfileOfSCProfileOfSCGapPenaltySubstitutionMatrixOfC() {\n        assertNotNull(sppa1);\n        assertNotNull(sppa2);\n        assertNotNull(sppa3);\n    }\n\n    @Test\n    public void testGetQuery() {\n        assertEquals(prof1, sppa1.getQuery());\n        assertEquals(prof3, sppa2.getQuery());\n        assertEquals(pp1, sppa3.getQuery());\n    }\n\n    @Test\n    public void testGetTarget() {\n        assertEquals(prof2, sppa1.getTarget());\n        assertEquals(prof4, sppa2.getTarget());\n        assertEquals(pp2, sppa3.getTarget());\n    }\n\n    @Test\n    public void testGetGapPenalty() {\n        assertEquals(gaps, sppa1.getGapPenalty());\n        assertEquals(gaps, sppa2.getGapPenalty());\n        assertEquals(gaps, sppa3.getGapPenalty());\n    }\n\n    @Test\n    public void testGetSubstitutionMatrix() {\n        assertEquals(blosum62, sppa1.getSubstitutionMatrix());\n        assertEquals(blosum62, sppa2.getSubstitutionMatrix());\n        assertEquals(blosum62, sppa3.getSubstitutionMatrix());\n    }\n\n    @Test\n    public void testIsStoringScoreMatrix() {\n        assertFalse(sppa1.isStoringScoreMatrix());\n        assertFalse(sppa2.isStoringScoreMatrix());\n        assertFalse(sppa3.isStoringScoreMatrix());\n    }\n\n    @Test\n    public void testGetScoreMatrix() {\n        int[][][] scores = sppa1.getScoreMatrix();\n        assertEquals(1, scores[2][1][1]);\n        scores = sppa2.getScoreMatrix();\n        assertEquals(-7, scores[3][4][0]);\n        scores = sppa3.getScoreMatrix();\n        assertEquals(1, scores[1][2][2]);\n    }\n\n    @Test\n    public void testGetScoreMatrixAsString() {\n        assertEquals(String.format(\n                \"Substitution%n\" +\n                \"        A   R   N   D%n\" +\n                \"    0  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -\\u221E   4  -4  -6  -7%n\" +\n                \"R  -\\u221E  -4   9   1  -2%n\" +\n                \"N  -\\u221E  -6   1  15   7%n\" +\n                \"D  -\\u221E  -7  -2   7  21%n\" +\n                \"%nDeletion%n\" +\n                \"        A   R   N   D%n\" +\n                \"   -2  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -3  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"R  -4   1  -7  -9 -10%n\" +\n                \"N  -5   0   6  -2  -5%n\" +\n                \"D  -6  -1   5  12   4%n\" +\n                \"%nInsertion%n\" +\n                \"        A   R   N   D%n\" +\n                \"   -2  -3  -4  -5  -6%n\" +\n                \"A  -\\u221E  -\\u221E   1   0  -1%n\" +\n                \"R  -\\u221E  -\\u221E  -7   6   5%n\" +\n                \"N  -\\u221E  -\\u221E  -9  -2  12%n\" +\n                \"D  -\\u221E  -\\u221E -10  -5   4%n\"),\n                sppa1.getScoreMatrixAsString());\n        assertEquals(String.format(\n                \"Substitution%n\" +\n                \"        A   N   D   R%n\" +\n                \"    0  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"H  -\\u221E  -2  -2  -5  -5%n\" +\n                \"I  -\\u221E  -4  -5  -5  -8%n\" +\n                \"L  -\\u221E  -5  -7  -9  -7%n\" +\n                \"K  -\\u221E  -6  -5  -7  -6%n\" +\n                \"%nDeletion%n\" +\n                \"        A   N   D   R%n\" +\n                \"   -2  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"H  -3  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"I  -4  -5  -5  -8  -8%n\" +\n                \"L  -5  -6  -6  -8  -9%n\" +\n                \"K  -6  -7  -7  -9 -10%n\" +\n                \"%nInsertion%n\" +\n                \"        A   N   D   R%n\" +\n                \"   -2  -3  -4  -5  -6%n\" +\n                \"H  -\\u221E  -\\u221E  -5  -5  -6%n\" +\n                \"I  -\\u221E  -\\u221E  -7  -8  -8%n\" +\n                \"L  -\\u221E  -\\u221E  -8  -9 -10%n\" +\n                \"K  -\\u221E  -\\u221E  -9  -8  -9%n\"),\n                sppa2.getScoreMatrixAsString());\n        assertEquals(String.format(\n                \"Substitution%n\" +\n                \"        -   H   I   L   K%n\" +\n                \"    0  -\\u221E  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -\\u221E   4  -5  -5  -6  -7%n\" +\n                \"R  -\\u221E  -4   4  -1  -2   3%n\" +\n                \"N  -\\u221E  -6   5   3  -2   0%n\" +\n                \"D  -\\u221E  -7   0   7  -1   0%n\" +\n                \"%nDeletion%n\" +\n                \"        -   H   I   L   K%n\" +\n                \"   -2  -\\u221E  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -3  -\\u221E  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"R  -4   1  -8  -8  -9 -10%n\" +\n                \"N  -5   0   1  -4  -5   0%n\" +\n                \"D  -6  -1   2   0  -5  -1%n\" +\n                \"%nInsertion%n\" +\n                \"        -   H   I   L   K%n\" +\n                \"   -2  -3  -4  -5  -6  -7%n\" +\n                \"A  -\\u221E  -\\u221E   1   0  -1  -2%n\" +\n                \"R  -\\u221E  -\\u221E  -7   1   0  -1%n\" +\n                \"N  -\\u221E  -\\u221E  -9   2   1   0%n\" +\n                \"D  -\\u221E  -\\u221E -10  -3   4   3%n\"),\n                sppa3.getScoreMatrixAsString());\n    }\n\n    @Test\n    public void testGetComputationTime() {\n        assertTrue(sppa1.getComputationTime() > 0);\n        assertTrue(sppa2.getComputationTime() > 0);\n        assertTrue(sppa3.getComputationTime() > 0);\n    }\n\n    @Test\n    public void testGetProfile() {\n        assertEquals(sppa1.getProfile().toString(), String.format(\"ARND%nARND%n\"));\n        assertEquals(sppa2.getProfile().toString(), String.format(\"-HILK%nAND-R%n\"));\n        assertEquals(sppa3.getProfile().toString(), String.format(\"ARND--%nARND--%n--HILK%nA-ND-R%n\"));\n    }\n\n    @Test\n    public void testGetMaxScore() {\n        assertEquals(21, sppa1.getMaxScore(), PRECISION);\n        assertEquals(21, sppa2.getMaxScore(), PRECISION);\n        assertEquals(21, sppa3.getMaxScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetMinScore() {\n        assertEquals(-12, sppa1.getMinScore(), PRECISION);\n        assertEquals(-12, sppa2.getMinScore(), PRECISION);\n        assertEquals(-13, sppa3.getMinScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetScore() {\n        assertEquals(21, sppa1.getScore(), PRECISION);\n        assertEquals(-6, sppa2.getScore(), PRECISION);\n        assertEquals(3, sppa3.getScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetPair() {\n        assertEquals(String.format(\"ARND%nARND%n\"), pp1.toString());\n        assertEquals(String.format(\"-HILK%nAND-R%n\"), pp2.toString());\n        assertEquals(String.format(\"ARND--%nARND--%n--HILK%nA-ND-R%n\"), all.toString());\n    }\n\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on July 7, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.alignment.template.GapPenalty;\nimport org.biojava.nbio.core.alignment.SimpleProfile;\nimport org.biojava.nbio.core.alignment.matrices.SubstitutionMatrixHelper;\nimport org.biojava.nbio.core.alignment.template.Profile;\nimport org.biojava.nbio.core.alignment.template.ProfilePair;\nimport org.biojava.nbio.core.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class SimpleProfileProfileAlignerTest {\n\n\tprivate static final double PRECISION = 0.00000001;\n\t\n    private ProteinSequence protein1, protein2, protein3, protein4;\n    private GapPenalty gaps;\n    private SubstitutionMatrix<AminoAcidCompound> blosum62;\n    private Profile<ProteinSequence, AminoAcidCompound> prof1, prof2, prof3, prof4;\n    private SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound> sppa1, sppa2, sppa3;\n    private ProfilePair<ProteinSequence, AminoAcidCompound> pp1, pp2, all;\n\n    @Before\n    public void setup() throws CompoundNotFoundException { \n        protein1 = new ProteinSequence(\"ARND\");\n        protein2 = new ProteinSequence(\"ARND\");\n        protein3 = new ProteinSequence(\"HILK\");\n        protein4 = new ProteinSequence(\"ANDR\");\n        gaps = new SimpleGapPenalty(2, 1);\n        blosum62 = SubstitutionMatrixHelper.getBlosum62();\n        prof1 = new SimpleProfile<ProteinSequence, AminoAcidCompound>(protein1);\n        prof2 = new SimpleProfile<ProteinSequence, AminoAcidCompound>(protein2);\n        prof3 = new SimpleProfile<ProteinSequence, AminoAcidCompound>(protein3);\n        prof4 = new SimpleProfile<ProteinSequence, AminoAcidCompound>(protein4);\n        sppa1 = new SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound>(prof1, prof2, gaps, blosum62);\n        pp1 = sppa1.getPair();\n        sppa2 = new SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound>(prof3, prof4, gaps, blosum62);\n        pp2 = sppa2.getPair();\n        sppa3 = new SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound>(pp1, pp2, gaps, blosum62);\n        all = sppa3.getPair();\n    }\n\n    @Test\n    public void testSimpleProfileProfileAligner() {\n        SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound> alig =\n                new SimpleProfileProfileAligner<ProteinSequence, AminoAcidCompound>();\n        alig.setQuery(prof1);\n        alig.setTarget(prof2);\n        alig.setGapPenalty(gaps);\n        alig.setSubstitutionMatrix(blosum62);\n        assertEquals(alig.getScore(), sppa1.getScore(), PRECISION);\n    }\n\n    @Test\n    public void testSimpleProfileProfileAlignerProfileOfSCProfileOfSCGapPenaltySubstitutionMatrixOfC() {\n        assertNotNull(sppa1);\n        assertNotNull(sppa2);\n        assertNotNull(sppa3);\n    }\n\n    @Test\n    public void testGetQuery() {\n        assertEquals(prof1, sppa1.getQuery());\n        assertEquals(prof3, sppa2.getQuery());\n        assertEquals(pp1, sppa3.getQuery());\n    }\n\n    @Test\n    public void testGetTarget() {\n        assertEquals(prof2, sppa1.getTarget());\n        assertEquals(prof4, sppa2.getTarget());\n        assertEquals(pp2, sppa3.getTarget());\n    }\n\n    @Test\n    public void testGetGapPenalty() {\n        assertEquals(gaps, sppa1.getGapPenalty());\n        assertEquals(gaps, sppa2.getGapPenalty());\n        assertEquals(gaps, sppa3.getGapPenalty());\n    }\n\n    @Test\n    public void testGetSubstitutionMatrix() {\n        assertEquals(blosum62, sppa1.getSubstitutionMatrix());\n        assertEquals(blosum62, sppa2.getSubstitutionMatrix());\n        assertEquals(blosum62, sppa3.getSubstitutionMatrix());\n    }\n\n    @Test\n    public void testIsStoringScoreMatrix() {\n        assertFalse(sppa1.isStoringScoreMatrix());\n        assertFalse(sppa2.isStoringScoreMatrix());\n        assertFalse(sppa3.isStoringScoreMatrix());\n    }\n\n    @Test\n    public void testGetScoreMatrix() {\n        int[][][] scores = sppa1.getScoreMatrix();\n        assertEquals(1, scores[2][1][1]);\n        scores = sppa2.getScoreMatrix();\n        assertEquals(-7, scores[3][4][0]);\n        scores = sppa3.getScoreMatrix();\n        assertEquals(1, scores[1][2][2]);\n    }\n\n    @Test\n    public void testGetScoreMatrixAsString() {\n        assertEquals(String.format(\n                \"Substitution%n\" +\n                \"        A   R   N   D%n\" +\n                \"    0  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -\\u221E   4  -4  -6  -7%n\" +\n                \"R  -\\u221E  -4   9   1  -2%n\" +\n                \"N  -\\u221E  -6   1  15   7%n\" +\n                \"D  -\\u221E  -7  -2   7  21%n\" +\n                \"%nDeletion%n\" +\n                \"        A   R   N   D%n\" +\n                \"   -2  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -3  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"R  -4   1  -7  -9 -10%n\" +\n                \"N  -5   0   6  -2  -5%n\" +\n                \"D  -6  -1   5  12   4%n\" +\n                \"%nInsertion%n\" +\n                \"        A   R   N   D%n\" +\n                \"   -2  -3  -4  -5  -6%n\" +\n                \"A  -\\u221E  -\\u221E   1   0  -1%n\" +\n                \"R  -\\u221E  -\\u221E  -7   6   5%n\" +\n                \"N  -\\u221E  -\\u221E  -9  -2  12%n\" +\n                \"D  -\\u221E  -\\u221E -10  -5   4%n\"),\n                sppa1.getScoreMatrixAsString());\n        assertEquals(String.format(\n                \"Substitution%n\" +\n                \"        A   N   D   R%n\" +\n                \"    0  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"H  -\\u221E  -2  -2  -5  -5%n\" +\n                \"I  -\\u221E  -4  -5  -5  -8%n\" +\n                \"L  -\\u221E  -5  -7  -9  -7%n\" +\n                \"K  -\\u221E  -6  -5  -7  -6%n\" +\n                \"%nDeletion%n\" +\n                \"        A   N   D   R%n\" +\n                \"   -2  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"H  -3  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"I  -4  -5  -5  -8  -8%n\" +\n                \"L  -5  -6  -6  -8  -9%n\" +\n                \"K  -6  -7  -7  -9 -10%n\" +\n                \"%nInsertion%n\" +\n                \"        A   N   D   R%n\" +\n                \"   -2  -3  -4  -5  -6%n\" +\n                \"H  -\\u221E  -\\u221E  -5  -5  -6%n\" +\n                \"I  -\\u221E  -\\u221E  -7  -8  -8%n\" +\n                \"L  -\\u221E  -\\u221E  -8  -9 -10%n\" +\n                \"K  -\\u221E  -\\u221E  -9  -8  -9%n\"),\n                sppa2.getScoreMatrixAsString());\n        assertEquals(String.format(\n                \"Substitution%n\" +\n                \"        -   H   I   L   K%n\" +\n                \"    0  -\\u221E  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -\\u221E   4  -5  -5  -6  -7%n\" +\n                \"R  -\\u221E  -4   4  -1  -2   3%n\" +\n                \"N  -\\u221E  -6   5   3  -2   0%n\" +\n                \"D  -\\u221E  -7   0   7  -1   0%n\" +\n                \"%nDeletion%n\" +\n                \"        -   H   I   L   K%n\" +\n                \"   -2  -\\u221E  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"A  -3  -\\u221E  -\\u221E  -\\u221E  -\\u221E  -\\u221E%n\" +\n                \"R  -4   1  -8  -8  -9 -10%n\" +\n                \"N  -5   0   1  -4  -5   0%n\" +\n                \"D  -6  -1   2   0  -5  -1%n\" +\n                \"%nInsertion%n\" +\n                \"        -   H   I   L   K%n\" +\n                \"   -2  -3  -4  -5  -6  -7%n\" +\n                \"A  -\\u221E  -\\u221E   1   0  -1  -2%n\" +\n                \"R  -\\u221E  -\\u221E  -7   1   0  -1%n\" +\n                \"N  -\\u221E  -\\u221E  -9   2   1   0%n\" +\n                \"D  -\\u221E  -\\u221E -10  -3   4   3%n\"),\n                sppa3.getScoreMatrixAsString());\n    }\n\n    @Test\n    public void testGetComputationTime() {\n        assertTrue(sppa1.getComputationTime() > 0);\n        assertTrue(sppa2.getComputationTime() > 0);\n        assertTrue(sppa3.getComputationTime() > 0);\n    }\n\n    @Test\n    public void testGetProfile() {\n        assertEquals(sppa1.getProfile().toString(), String.format(\"ARND%nARND%n\"));\n        assertEquals(sppa2.getProfile().toString(), String.format(\"-HILK%nAND-R%n\"));\n        assertEquals(sppa3.getProfile().toString(), String.format(\"ARND--%nARND--%n--HILK%nA-ND-R%n\"));\n    }\n\n    @Test\n    public void testGetMaxScore() {\n        assertEquals(21, sppa1.getMaxScore(), PRECISION);\n        assertEquals(21, sppa2.getMaxScore(), PRECISION);\n        assertEquals(21, sppa3.getMaxScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetMinScore() {\n        assertEquals(-12, sppa1.getMinScore(), PRECISION);\n        assertEquals(-12, sppa2.getMinScore(), PRECISION);\n        assertEquals(-13, sppa3.getMinScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetScore() {\n        assertEquals(21, sppa1.getScore(), PRECISION);\n        assertEquals(-6, sppa2.getScore(), PRECISION);\n        assertEquals(3, sppa3.getScore(), PRECISION);\n    }\n\n    @Test\n    public void testGetPair() {\n        assertEquals(String.format(\"ARND%nARND%n\"), pp1.toString());\n        assertEquals(String.format(\"-HILK%nAND-R%n\"), pp2.toString());\n        assertEquals(String.format(\"ARND--%nARND--%n--HILK%nA-ND-R%n\"), all.toString());\n    }\n\n}\n","commitMessage":"Massive refactoring: moved alignment data structures from biojava-alignment to biojava-core.\nMantaining main biological data structures in core will help to avoid problems of unwanted dependency. Unfortunately the substitution matrices related classes are tight coupled with SimpleSequencePair class and were moved too from alignment.\n\nUpdated pom file to remove dependency of core from alignment module temporary added by first implementation of SearchIO.\n","test_commitMessage":"Massive refactoring: moved alignment data structures from biojava-alignment to biojava-core.\nMantaining main biological data structures in core will help to avoid problems of unwanted dependency. Unfortunately the substitution matrices related classes are tight coupled with SimpleSequencePair class and were moved too from alignment.\n\nUpdated pom file to remove dependency of core from alignment module temporary added by first implementation of SearchIO.\n","allZero":false}