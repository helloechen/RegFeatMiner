{"repository":"biojava","prod_path":"biojava3-core/src/main/java/org/biojava3/core/sequence/io/FastaReader.java","test_path":"biojava3-core/src/test/java/org/biojava3/core/sequence/io/FastaReaderTest.java","prod_time":"2010-03-18 23:10:37","test_time":"2010-04-08 11:09:43","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":4,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":2,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":1,"del_call_line":4,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":1,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"6c99b76b38e506c12ef71c726b9d82b7b36025dc","test_commitID":"1bd309ab007d59c239340f898015486bb810a1dd","isfound":"found test change","originPro":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage org.biojava3.core.sequence.io;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\nimport org.biojava3.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava3.core.sequence.io.template.FastaHeaderParserInterface;\nimport org.biojava3.core.sequence.io.template.SequenceCreatorInterface;\nimport org.biojava3.core.sequence.template.Compound;\nimport org.biojava3.core.sequence.template.Sequence;\n\n/**\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class FastaReader<S extends Sequence<C>, C extends Compound> {\n\n    SequenceCreatorInterface<C> sequenceCreator;\n    FastaHeaderParserInterface<S,C> headerParser;\n    BufferedReaderBytesRead br;\n    InputStreamReader isr;\n    FileInputStream fi = null;\n\n    /**\n     *\n     * @param br\n     * @param headerParser\n     * @param sequenceCreator\n     */\n    public FastaReader(InputStream is, FastaHeaderParserInterface<S,C> headerParser, SequenceCreatorInterface<C> sequenceCreator) {\n        this.headerParser = headerParser;\n        isr = new InputStreamReader(is);\n        this.br = new BufferedReaderBytesRead(isr);\n        this.sequenceCreator = sequenceCreator;\n    }\n\n    public FastaReader(File file, FastaHeaderParserInterface<S,C> headerParser, SequenceCreatorInterface<C> sequenceCreator) throws Exception {\n        fi = new FileInputStream(file);\n        isr = new InputStreamReader(fi);\n        this.br = new BufferedReaderBytesRead(isr);\n        this.sequenceCreator = sequenceCreator;\n    }\n\n    /**\n     * The parsing is done in this method\n     * @return\n     * @throws Exception\n     */\n    @SuppressWarnings(\"unchecked\")\n    public List<S> process() throws Exception {\n        ArrayList<S> sequences = new ArrayList<S>();\n\n\n        String line = \"\";\n        String header = \"\";\n        StringBuffer sb = new StringBuffer();\n        int maxSequenceLength = -1;\n        long fileIndex = 0;\n        long sequenceIndex = 0;\n        boolean keepGoing = true;\n        do {\n            line = line.trim(); // nice to have but probably not needed\n            if (line.length() != 0) {\n                if (line.startsWith(\">\")) {\n                    if (sb.length() > 0) {\n                        S sequence = (S)sequenceCreator.getSequence(sb.toString(), sequenceIndex);\n                        headerParser.parseHeader(header, sequence);\n                        sequences.add(sequence);\n                        if (maxSequenceLength < sb.length()) {\n                            maxSequenceLength = sb.length();\n                        }\n                        sb = new StringBuffer(maxSequenceLength);\n                    }\n                    header = line.substring(1);\n                } else if (line.startsWith(\";\")) {\n                } else {\n                    //mark the start of the sequence with the fileIndex before the line was read\n                    if(sb.length() == 0){\n                        sequenceIndex = fileIndex;\n                    }\n                    sb.append(line);\n                }\n            }\n            fileIndex = br.getBytesRead();\n            line = br.readLine();\n            if (line == null) {\n                S sequence = (S)sequenceCreator.getSequence(sb.toString(), fileIndex);\n                headerParser.parseHeader(header, sequence);\n                sequences.add(sequence);\n                keepGoing = false;\n            }\n        } while (keepGoing);\n        br.close();\n        isr.close();\n        //If stream was created from File object then we need to close it\n        if (fi != null) {\n            fi.close();\n        }\n        return sequences;\n    }\n\n    public static void main(String[] args) {\n        try {\n            String inputFile = \"src/test/resources/PF00104_small.fasta\";\n            FileInputStream is = new FileInputStream(inputFile);\n\n            FastaReader<ProteinSequence, AminoAcidCompound> fastaReader = new FastaReader<ProteinSequence, AminoAcidCompound>(is, new GenericFastaHeaderParser<ProteinSequence,AminoAcidCompound>(), new ProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet()));\n            Collection<ProteinSequence> proteinSequences = fastaReader.process();\n            is.close();\n\n\n            System.out.println(proteinSequences);\n\n            File file = new File(inputFile);\n            FastaReader<ProteinSequence,AminoAcidCompound> fastaProxyReader = new FastaReader<ProteinSequence,AminoAcidCompound>(file, new GenericFastaHeaderParser<ProteinSequence,AminoAcidCompound>(), new FileProxyProteinSequenceCreator(file, AminoAcidCompoundSet.getAminoAcidCompoundSet()));\n            Collection<ProteinSequence> proteinProxySequences = fastaProxyReader.process();\n\n            System.out.println(proteinProxySequences);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n","changedPro":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage org.biojava3.core.sequence.io;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\nimport org.biojava3.core.sequence.AccessionID;\n\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\nimport org.biojava3.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava3.core.sequence.io.template.FastaHeaderParserInterface;\nimport org.biojava3.core.sequence.io.template.SequenceCreatorInterface;\nimport org.biojava3.core.sequence.template.Compound;\nimport org.biojava3.core.sequence.template.Sequence;\n\n/**\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class FastaReader<S extends Sequence<C>, C extends Compound> {\n\n    SequenceCreatorInterface<C> sequenceCreator;\n    FastaHeaderParserInterface<S,C> headerParser;\n    BufferedReaderBytesRead br;\n    InputStreamReader isr;\n    FileInputStream fi = null;\n\n    /**\n     *\n     * @param br\n     * @param headerParser\n     * @param sequenceCreator\n     */\n    public FastaReader(InputStream is, FastaHeaderParserInterface<S,C> headerParser, SequenceCreatorInterface<C> sequenceCreator) {\n        this.headerParser = headerParser;\n        isr = new InputStreamReader(is);\n        this.br = new BufferedReaderBytesRead(isr);\n        this.sequenceCreator = sequenceCreator;\n    }\n\n    public FastaReader(File file, FastaHeaderParserInterface<S,C> headerParser, SequenceCreatorInterface<C> sequenceCreator) throws Exception {\n        fi = new FileInputStream(file);\n        isr = new InputStreamReader(fi);\n        this.br = new BufferedReaderBytesRead(isr);\n        this.sequenceCreator = sequenceCreator;\n    }\n\n    /**\n     * The parsing is done in this method\n     * @return\n     * @throws Exception\n     */\n    public LinkedHashMap<String,S> process() throws Exception {\n        LinkedHashMap<String,S> sequences = new LinkedHashMap<String,S>();\n\n\n        String line = \"\";\n        String header = \"\";\n        StringBuffer sb = new StringBuffer();\n        int maxSequenceLength = -1;\n        long fileIndex = 0;\n        long sequenceIndex = 0;\n        boolean keepGoing = true;\n        do {\n            line = line.trim(); // nice to have but probably not needed\n            if (line.length() != 0) {\n                if (line.startsWith(\">\")) {\n                    if (sb.length() > 0) {\n                        S sequence = (S)sequenceCreator.getSequence(sb.toString(), sequenceIndex);\n                        headerParser.parseHeader(header, sequence);\n                        sequences.put(sequence.getAccession().getID(),sequence);\n                        if (maxSequenceLength < sb.length()) {\n                            maxSequenceLength = sb.length();\n                        }\n                        sb = new StringBuffer(maxSequenceLength);\n                    }\n                    header = line.substring(1);\n                } else if (line.startsWith(\";\")) {\n                } else {\n                    //mark the start of the sequence with the fileIndex before the line was read\n                    if(sb.length() == 0){\n                        sequenceIndex = fileIndex;\n                    }\n                    sb.append(line);\n                }\n            }\n            fileIndex = br.getBytesRead();\n            line = br.readLine();\n            if (line == null) {\n                S sequence = (S)sequenceCreator.getSequence(sb.toString(), fileIndex);\n                headerParser.parseHeader(header, sequence);\n                sequences.put(sequence.getAccession().getID(),sequence);\n                keepGoing = false;\n            }\n        } while (keepGoing);\n        br.close();\n        isr.close();\n        //If stream was created from File object then we need to close it\n        if (fi != null) {\n            fi.close();\n        }\n        return sequences;\n    }\n\n    public static void main(String[] args) {\n        try {\n            String inputFile = \"src/test/resources/PF00104_small.fasta\";\n            FileInputStream is = new FileInputStream(inputFile);\n\n            FastaReader<ProteinSequence, AminoAcidCompound> fastaReader = new FastaReader<ProteinSequence, AminoAcidCompound>(is, new GenericFastaHeaderParser<ProteinSequence,AminoAcidCompound>(), new ProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet()));\n            LinkedHashMap<String,ProteinSequence> proteinSequences = fastaReader.process();\n            is.close();\n\n\n            System.out.println(proteinSequences);\n\n            File file = new File(inputFile);\n            FastaReader<ProteinSequence,AminoAcidCompound> fastaProxyReader = new FastaReader<ProteinSequence,AminoAcidCompound>(file, new GenericFastaHeaderParser<ProteinSequence,AminoAcidCompound>(), new FileProxyProteinSequenceCreator(file, AminoAcidCompoundSet.getAminoAcidCompoundSet()));\n            LinkedHashMap<String,ProteinSequence> proteinProxySequences = fastaProxyReader.process();\n\n            System.out.println(proteinProxySequences);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n","originTest":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage org.biojava3.core.sequence.io;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\nimport java.io.InputStream;\nimport java.util.List;\n\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\nimport org.biojava3.core.sequence.compound.AminoAcidCompoundSet;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\n/**\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class FastaReaderTest {\n\n    public FastaReaderTest() {\n    }\n\n    @BeforeClass\n    public static void setUpClass() throws Exception {\n    }\n\n    @AfterClass\n    public static void tearDownClass() throws Exception {\n    }\n\n    @Before\n    public void setUp() {\n    }\n\n    @After\n    public void tearDown() {\n    }\n\n    /**\n     * Test of process method, of class FastaReader.\n     */\n    @Test\n    public void testProcess() throws Exception {\n        System.out.println(\"process\");\n        InputStream inStream = this.getClass().getResourceAsStream(\"/PF00104_small.fasta\");\n        assertNotNull(inStream);\n\n\n        FastaReader<ProteinSequence,AminoAcidCompound> fastaReader = new FastaReader<ProteinSequence,AminoAcidCompound>(inStream, new GenericFastaHeaderParser<ProteinSequence,AminoAcidCompound>(), new ProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet()));\n        List<ProteinSequence> proteinSequences = fastaReader.process();\n        inStream.close();\n\n\n        //Should have 282 sequences\n        System.out.println(\"Expecting 283 got \" + proteinSequences.size());\n        assertEquals(proteinSequences.size() ,  283 );\n\n        ProteinSequence proteinSequence = proteinSequences.get(0);\n        assertEquals(proteinSequence.getAccession().getID(),\"A2D504_ATEGE/1-46\");\n        assertEquals(proteinSequence.getSequenceAsStringn\n        proteinSequence = proteinSequences.get(281);\n        System.out.println(proteinSequence.getAccession());\n        System.out.println(proteinSequence.getSequenceAsString());\n        assertEquals(proteinSequence.getAccession().getID(),\"Q9PU76_CRONI/141-323\");\n        assertEquals(proteinSequence.getSequenceAsString(),\"VETVTELTEFAKSI-PGFS-N----LD-LND----------------Q----VTL--LKY-----------GVY----------------------EA-IFAM------LASVMNK---DGMPVAYGNGFITRE------------------------------------------------------------------------------------------------------------------------------------------------------------FLKSLRKPFCDIMEPKFDFA-MKF-NSL-E-LDDSDI--------------------SLFVA-AIIC-CGDRPG-------------------------------------------LVNV--GHIEKMQESIVHVLKL-H-----LQN---------NH---PD----------------------------DI------F--------LFP-KLLQKMAD-LRQLV-----------------TEH-AQLV--QIIKK---TESDAHLHPLL-------QEI---\");\n\n        proteinSequence = proteinSequences.get(282);\n        assertEquals(proteinSequence.getAccession().getID(),\"Q98SJ1_CHICK/15-61\");\n        assertEquals(proteinSequence.getSequenceAsStringn\n        // TODO review the generated test code and remove the default call to fail.\n        //fail(\"The test case is a prototype.\");\n    }\n}\n","changedTest":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage org.biojava3.core.sequence.io;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\nimport java.io.InputStream;\nimport java.util.LinkedHashMap;\n\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\nimport org.biojava3.core.sequence.compound.AminoAcidCompoundSet;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\n/**\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class FastaReaderTest {\n\n\tpublic FastaReaderTest() {\n\t}\n\n\t@BeforeClass\n\tpublic static void setUpClass() throws Exception {\n\t}\n\n\t@AfterClass\n\tpublic static void tearDownClass() throws Exception {\n\t}\n\n\t@Before\n\tpublic void setUp() {\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t}\n\n\t/**\n\t * Test of process method, of class FastaReader.\n\t */\n\t@Test\n\tpublic void testProcess() throws Exception {\n\t\tSystem.out.println(\"process\");\n\t\tInputStream inStream = this.getClass().getResourceAsStream(\"/PF00104_small.fasta\");\n\t\tassertNotNull(inStream);\n\n\n\t\tFastaReader<ProteinSequence,AminoAcidCompound> fastaReader = new FastaReader<ProteinSequence,AminoAcidCompound>(inStream, new GenericFastaHeaderParser<ProteinSequence,AminoAcidCompound>(), new ProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet()));\n\t\tLinkedHashMap<String,ProteinSequence> proteinSequences = fastaReader.process();\n\t\tinStream.close();\n\n\t\t//Should have 282 sequences\n\t\t//System.out.println(\"Expecting 283 got \" + proteinSequences.size());\n\t\tassertEquals(proteinSequences.size() ,  283 );\n\n\t\tint seqNum = 0;\n\t\tfor(String id:proteinSequences.keySet()) {\n\t\t\tProteinSequence proteinSequence = proteinSequences.get(id);\n\t\t\tswitch(seqNum) {\n\t\t\tcase 0:\n\t\t\t\tassertEquals(proteinSequence.getAccession().getID(),\"A2D504_ATEGE/1-46\");\n\t\t\t\tassertEquals(proteinSequence.getSequenceAsStringn\t\t\t\tbreak;\n\t\t\tcase 281:\n\t\t\t\t//System.out.println(proteinSequence.getAccession());\n\t\t\t\t//System.out.println(proteinSequence.getSequenceAsString());\n\t\t\t\tassertEquals(proteinSequence.getAccession().getID(),\"Q9PU76_CRONI/141-323\");\n\t\t\t\tassertEquals(proteinSequence.getSequenceAsString(),\"VETVTELTEFAKSI-PGFS-N----LD-LND----------------Q----VTL--LKY-----------GVY----------------------EA-IFAM------LASVMNK---DGMPVAYGNGFITRE------------------------------------------------------------------------------------------------------------------------------------------------------------FLKSLRKPFCDIMEPKFDFA-MKF-NSL-E-LDDSDI--------------------SLFVA-AIIC-CGDRPG-------------------------------------------LVNV--GHIEKMQESIVHVLKL-H-----LQN---------NH---PD----------------------------DI------F--------LFP-KLLQKMAD-LRQLV-----------------TEH-AQLV--QIIKK---TESDAHLHPLL-------QEI---\");\n\t\t\t\tbreak;\n\t\t\tcase 282:\n\t\t\t\tassertEquals(proteinSequence.getAccession().getID(),\"Q98SJ1_CHICK/15-61\");\n\t\t\t\tassertEquals(proteinSequence.getSequenceAsStringn\t\t\t\tbreak;\n\t\t\t}\n\t\t\tseqNum++;\n\t\t}\n\t\tassertEquals(seqNum,283);\n\t}\n\t\n}\n","commitMessage":"Changes to handle adding of features from GFF file\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@7585 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"Fixed biojava3-core compile bugs.\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@7643 7c6358e6-4a41-0410-a743-a5b2a554c398\n","allZero":false}