{"repository":"biojava","prod_path":"biojava-genome/src/main/java/org/biojava/nbio/genome/GeneFeatureHelper.java","test_path":"biojava-genome/src/test/java/org/biojava/nbio/genome/GeneFeatureHelperTest.java","prod_time":"2024-05-15 23:59:58","test_time":"2024-05-15 23:59:58","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":11,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":1,"add_packageid_line":0,"add_parameter_line":9,"add_return_line":0,"del_annotation_line":0,"del_call_line":11,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":9,"del_return_line":0,"label":"POSITIVE","prod_commitID":"1ae6b52630282eba2079b5764218f5420c1b12b5","test_commitID":"1ae6b52630282eba2079b5764218f5420c1b12b5","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.genome;\n\nimport org.biojava.nbio.genome.parsers.gff.*;\nimport org.biojava.nbio.core.sequence.*;\nimport org.biojava.nbio.core.sequence.io.FastaReaderHelper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\n\n/**\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class GeneFeatureHelper {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(GeneFeatureHelper.class);\n\n\tstatic public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile(File fastaSequenceFile, File uppercaseFastaFile, boolean throwExceptionGeneNotFound) throws Exception {\n\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = new LinkedHashMap<>();\n\t\tLinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n\t\tfor (String accession : dnaSequenceList.keySet()) {\n\t\t\tDNASequence contigSequence = dnaSequenceList.get(accession);\n\t\t\tChromosomeSequence chromsomeSequence = new ChromosomeSequence(contigSequence.getSequenceAsString());\n\t\t\tchromsomeSequence.setAccession(contigSequence.getAccession());\n\t\t\tchromosomeSequenceList.put(accession, chromsomeSequence);\n\t\t}\n\n\n\t\tLinkedHashMap<String, DNASequence> geneSequenceList = FastaReaderHelper.readFastaDNASequence(uppercaseFastaFile);\n\t\tfor (DNASequence dnaSequence : geneSequenceList.values()) {\n\t\t\tString geneSequence = dnaSequence.getSequenceAsString();\n\t\t\tString lcGeneSequence = geneSequence.toLowerCase();\n\t\t\tString reverseGeneSequence = dnaSequence.getReverse().getSequenceAsString();\n\t\t\tString lcReverseGeneSequence = reverseGeneSequence.toLowerCase();\n\t\t\tInteger bioStart = null;\n\t\t\tInteger bioEnd = null;\n\t\t\tStrand strand = Strand.POSITIVE;\n\t\t\tboolean geneFound = false;\n\t\t\tString accession = \"\";\n\t\t\tDNASequence contigDNASequence = null;\n\t\t\tfor (String id : dnaSequenceList.keySet()) {\n\t\t\t\taccession = id;\n\t\t\t\tcontigDNASequence = dnaSequenceList.get(id);\n\t\t\t\tString contigSequence = contigDNASequence.getSequenceAsString().toLowerCase();\n\t\t\t\tbioStart = contigSequence.indexOf(lcGeneSequence);\n\t\t\t\tif (bioStart != -1) {\n\t\t\t\t\tbioStart = bioStart + 1;\n\t\t\t\t\tbioEnd = bioStart + geneSequence.length() - 1;\n\t\t\t\t\tgeneFound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tbioStart = contigSequence.indexOf(lcReverseGeneSequence);\n\t\t\t\t\tif (bioStart != -1) {\n\t\t\t\t\t\tbioStart = bioStart + 1;\n\t\t\t\t\t\tbioEnd = bioStart - geneSequence.length() - 1;\n\t\t\t\t\t\tstrand = Strand.NEGATIVE;\n\t\t\t\t\t\tgeneFound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (geneFound) {\n\t\t\t\tlogger.info(\"Gene {} found at {} {} {} {}\",\n\t\t\t\t\t\tdnaSequence.getAccession().toString(), contigDNASequence.getAccession().toString(), bioStart, bioEnd, strand);\n\t\t\t\tChromosomeSequence chromosomeSequence = chromosomeSequenceList.get(accession);\n\n\t\t\t\tArrayList<Integer> exonBoundries = new ArrayList<>();\n\n\t\t\t\t//look for transitions from lowercase to upper case\n\t\t\t\tfor (int i = 0; i < geneSequence.length(); i++) {\n\t\t\t\t\tif (i == 0 && Character.isUpperCase(geneSequence.charAt(i))) {\n\t\t\t\t\t\texonBoundries.add(i);\n\t\t\t\t\t} else if (i == geneSequence.length() - 1) {\n\t\t\t\t\t\texonBoundries.add(i);\n\t\t\t\t\t} else if (Character.isUpperCase(geneSequence.charAt(i)) && Character.isLowerCase(geneSequence.charAt(i - 1))) {\n\t\t\t\t\t\texonBoundries.add(i);\n\t\t\t\t\t} else if (Character.isUpperCase(geneSequence.charAt(i)) && Character.isLowerCase(geneSequence.charAt(i + 1))) {\n\t\t\t\t\t\texonBoundries.add(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tCollections.reverse(exonBoundries);\n\t\t\t\t}\n\n\n\t\t\t\tString geneaccession = dnaSequence.getAccession().getID();\n\t\t\t\tString note = geneaccession;\n\t\t\t\tString[] values = geneaccession.split(\" \");\n\t\t\t\tgeneaccession = values[0];\n\n\n\n\t\t\t\tGeneSequence geneSeq = chromosomeSequence.addGene(new AccessionID(geneaccession), bioStart, bioEnd, strand);\n\t\t\t\tgeneSeq.addNote(note);\n\t\t\t\tgeneSeq.setSource(uppercaseFastaFile.getName());\n\t\t\t\t//String transcriptName = geneaccession + \"-transcript\";\n\t\t\t\t//TranscriptSequence transcriptSequence = geneSeq.addTranscript(new AccessionID(transcriptName), bioStart, bioEnd);\n\n\t\t\t\tint runningFrameLength = 0;\n\t\t\t\tfor (int i = 0; i < exonBoundries.size() - 1; i = i + 2) {\n\t\t\t\t\tint cdsBioStart = exonBoundries.get(i) + bioStart;\n\t\t\t\t\tint cdsBioEnd = exonBoundries.get(i + 1) + bioStart;\n\t\t\t\t\trunningFrameLength = runningFrameLength + Math.abs(cdsBioEnd - cdsBioStart) + 1;\n\t\t\t\t\t//String cdsName = transcriptName + \"-cds-\" + cdsBioStart + \"-\" + cdsBioEnd;\n\n\t\t\t\t\t//AccessionID cdsAccessionID = new AccessionID(cdsName);\n\t\t\t\t\t//ExonSequence exonSequence = geneSeq.addExon(cdsAccessionID, cdsBioStart, cdsBioEnd);\n\t\t\t\t\tint remainder = runningFrameLength % 3;\n\t\t\t\t\t//int frame = 0;\n\t\t\t\t\tif (remainder == 1) {\n\t\t\t\t\t\t//frame = 2; // borrow 2 from next CDS region\n\t\t\t\t\t} else if (remainder == 2) {\n\t\t\t\t\t\t//frame = 1;\n\t\t\t\t\t}\n\t\t\t\t\t//CDSSequence cdsSequence = transcriptSequence.addCDS(cdsAccessionID, cdsBioStart, cdsBioEnd, frame);\n\t\t\t\t}\n\n\n\t\t\t} else {\n\t\t\t\tif (throwExceptionGeneNotFound) {\n\t\t\t\t\tthrow new Exception(dnaSequence.getAccession().toString() + \" not found\");\n\t\t\t\t}\n\t\t\t\tlogger.info(\"Gene not found {}\", dnaSequence.getAccession().toString());\n\t\t\t}\n\n\t\t}\n\t\treturn chromosomeSequenceList;\n\t}\n\n\t/**\n\t * Output a gff3 feature file that will give the length of each scaffold/chromosome in the fasta file.\n\t * Used for gbrowse so it knows length.\n\t * @param fastaSequenceFile\n\t * @param gffFile\n\t * @throws Exception\n\t */\n\tstatic public void outputFastaSequenceLengthGFF3(File fastaSequenceFile, File gffFile) throws Exception {\n\t\tLinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n\t\tString fileName = fastaSequenceFile.getName();\n\t\tFileWriter fw = new FileWriter(gffFile);\n\t\tString newLine = System.getProperty(\"line.separator\");\n\t\tfw.write(\"##gff-version 3\" + newLine);\n\t\tfor (DNASequence dnaSequence : dnaSequenceList.values()) {\n\t\t\tString gff3line = dnaSequence.getAccession().getID() + \"\\t\" + fileName + \"\\t\" + \"contig\" + \"\\t\" + \"1\" + \"\\t\" + dnaSequence.getBioEnd() + \"\\t.\\t.\\t.\\tName=\" + dnaSequence.getAccession().getID() + newLine;\n\t\t\tfw.write(gff3line);\n\t\t}\n\t\tfw.close();\n\t}\n\n\t/**\n\t * Loads Fasta file and GFF2 feature file generated from the geneid prediction algorithm\n\t *\n\t * @param fastaSequenceFile\n\t * @param gffFile\n\t * @return\n\t * @throws Exception\n\t */\n\tstatic public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGeneIDGFF2(File fastaSequenceFile, File gffFile) throws Exception {\n\t\tLinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n\t\tFeatureList listGenes = GeneIDGFF2Reader.read(gffFile.getAbsolutePath());\n\t\taddGeneIDGFF2GeneFeatures(chromosomeSequenceList, listGenes);\n\t\treturn chromosomeSequenceList;\n\t}\n\n\t/**\n\t * Load GFF2 feature file generated from the geneid prediction algorithm and map features onto the chromosome sequences\n\t *\n\t * @param chromosomeSequenceList\n\t * @param listGenes\n\t * @throws Exception\n\t */\n\tstatic public void addGeneIDGFF2GeneFeatures(LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n\t\tCollection<String> geneIds = listGenes.attributeValues(\"gene_id\");\n\t\tfor (String geneid : geneIds) {\n\t\t\tFeatureList gene = listGenes.selectByAttribute(\"gene_id\", geneid);\n\t\t\tFeatureI geneFeature = gene.get(0);\n\t\t\tChromosomeSequence seq = chromosomeSequenceList.get(geneFeature.seqname());\n\t\t\tgeneid = geneid.replaceAll(\"_\", \".G\");\n\t\t\tAccessionID geneAccessionID = new AccessionID(geneid);\n\t\t\tGeneSequence geneSequence = null;\n\t\t\tCollection<String> transcriptids = gene.attributeValues(\"gene_id\");\n\t\t\tfor (String transcriptid : transcriptids) {\n\t\t\t\t// get all the individual features (exons, CDS regions, etc.) of this gene\n\t\t\t\tFeatureList transcriptFeature = listGenes.selectByAttribute(\"gene_id\", transcriptid);\n\t\t\t\ttranscriptid = transcriptid.replaceAll(\"_\", \".G\");\n\n\n\n\n\t\t\t\t//      String seqName = feature.seqname();\n\t\t\t\t//FeatureI startCodon = null;\n\t\t\t\t//FeatureI stopCodon = null;\n\t\t\t\tInteger startCodonBegin = null;\n\t\t\t\tInteger stopCodonEnd = null;\n\t\t\t\t//String startCodonName = \"\";\n\t\t\t\t//String stopCodonName = \"\";\n\n\n\t\t\t\t// now select only the coding regions of this gene\n\t\t\t\tFeatureList firstFeatures = transcriptFeature.selectByType(\"First\");\n\t\t\t\tFeatureList terminalFeatures = transcriptFeature.selectByType(\"Terminal\");\n\t\t\t\tFeatureList internalFeatures = transcriptFeature.selectByType(\"Internal\");\n\t\t\t\tFeatureList singleFeatures = transcriptFeature.selectByType(\"Single\");\n\t\t\t\tFeatureList cdsFeatures = new FeatureList();\n\t\t\t\tcdsFeatures.add(firstFeatures);\n\t\t\t\tcdsFeatures.add(terminalFeatures);\n\t\t\t\tcdsFeatures.add(internalFeatures);\n\t\t\t\tcdsFeatures.add(singleFeatures);\n\t\t\t\t// sort them\n\t\t\t\tcdsFeatures = cdsFeatures.sortByStart();\n\t\t\t\tStrand strand = Strand.POSITIVE;\n\t\t\t\tFeatureI feature = cdsFeatures.get(0);\n\t\t\t\tif (feature.location().isNegative()) {\n\t\t\t\t\tstrand = Strand.NEGATIVE;\n\t\t\t\t}\n\t\t\t\tif (startCodonBegin == null) {\n\t\t\t\t\tFeatureI firstFeature = cdsFeatures.get(0);\n\t\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\t\tstartCodonBegin = firstFeature.location().bioEnd();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstartCodonBegin = firstFeature.location().bioStart();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (stopCodonEnd == null) {\n\n\t\t\t\t\tFeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n\t\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\t\tstopCodonEnd = lastFeature.location().bioStart();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstopCodonEnd = lastFeature.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//for gtf ordering can be strand based so first is last and last is first\n\t\t\t\tif (startCodonBegin > stopCodonEnd) {\n\t\t\t\t\tint temp = startCodonBegin;\n\t\t\t\t\tstartCodonBegin = stopCodonEnd;\n\t\t\t\t\tstopCodonEnd = temp;\n\t\t\t\t}\n\n\t\t\t\tAccessionID transcriptAccessionID = new AccessionID(transcriptid);\n\t\t\t\tif (geneSequence == null) {\n\t\t\t\t\tgeneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n\t\t\t\t\tgeneSequence.setSource(((Feature) feature).source());\n\t\t\t\t} else {\n\t\t\t\t\t//if multiple transcripts for one gene make sure the gene is defined as the min and max start/end\n\n\t\t\t\t\tif (startCodonBegin < geneSequence.getBioBegin()) {\n\t\t\t\t\t\tgeneSequence.setBioBegin(startCodonBegin);\n\t\t\t\t\t}\n\t\t\t\t\tif (stopCodonEnd > geneSequence.getBioBegin()) {\n\t\t\t\t\t\tgeneSequence.setBioEnd(stopCodonEnd);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tTranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n\t\t\t\t/*\n\t\t\t\tif (startCodon != null) {\n\t\t\t\t\tif (startCodonName == null || startCodonName.length() == 0) {\n\t\t\t\t\t\tstartCodonName = transcriptid + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\ttranscriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n\t\t\t\t}\n\t\t\t\tif (stopCodon != null) {\n\t\t\t\t\tif (stopCodonName == null || stopCodonName.length() == 0) {\n\t\t\t\t\t\tstopCodonName = transcriptid + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\ttranscriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n\t\t\t\t}\n\t\t\t\t*/\n\n\t\t\t\tfor (FeatureI cdsFeature : cdsFeatures) {\n\t\t\t\t\tFeature cds = (Feature) cdsFeature;\n\t\t\t\t\tString cdsName = cds.getAttribute(\"transcript_name\");\n\t\t\t\t\tif (cdsName == null || cdsName.length() == 0) {\n\t\t\t\t\t\tcdsName = transcriptid + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\tAccessionID cdsAccessionID = new AccessionID(cdsName);\n\t\t\t\t\t//ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n\t\t\t\t\tCDSSequence cdsSequence = transcriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), cds.frame());\n\t\t\t\t\tcdsSequence.setSequenceScore(cds.score());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tstatic public LinkedHashMap<String, ChromosomeSequence> getChromosomeSequenceFromDNASequence(LinkedHashMap<String, DNASequence> dnaSequenceList) {\n\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = new LinkedHashMap<>();\n\t\tfor (String key : dnaSequenceList.keySet()) {\n\t\t\tDNASequence dnaSequence = dnaSequenceList.get(key);\n\t\t\tChromosomeSequence chromosomeSequence = new ChromosomeSequence(dnaSequence.getProxySequenceReader()); //we want the underlying sequence but don't need storage\n\t\t\tchromosomeSequence.setAccession(dnaSequence.getAccession());\n\t\t\tchromosomeSequenceList.put(key, chromosomeSequence);\n\t\t}\n\t\treturn chromosomeSequenceList;\n\t}\n\n\t/**\n\t * Lots of variations in the ontology or descriptors that can be used in GFF3 which requires writing a custom parser to handle a GFF3 generated or used\n\t * by a specific application. Probably could be abstracted out but for now easier to handle with custom code to deal with gff3 elements that are not\n\t * included but can be extracted from other data elements.\n\t * @param fastaSequenceFile\n\t * @param gffFile\n\t * @param lazyloadsequences If set to true then the fasta file will be parsed for accession id but sequences will be read from disk when needed to save memory\n\t * @return\n\t * @throws Exception\n\t */\n\tstatic public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGmodGFF3(File fastaSequenceFile, File gffFile,boolean lazyloadsequences) throws Exception {\n\t\tLinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile,lazyloadsequences);\n\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n\t\tFeatureList listGenes = GFF3Reader.read(gffFile.getAbsolutePath());\n\t\taddGmodGFF3GeneFeatures(chromosomeSequenceList, listGenes);\n\t\treturn chromosomeSequenceList;\n\t}\n\n\t/**\n\t * Load GFF3 file using mRNA as the gene feature as not all GFF3 files are complete\n\t * @param chromosomeSequenceList\n\t * @param listGenes\n\t * @throws Exception\n\t */\n\tstatic public void addGmodGFF3GeneFeatures(LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n\n\n\t\t// key off mRNA as being a known feature that may or may not have a parent gene\n\n\n\t\tFeatureList mRNAFeatures = listGenes.selectByType(\"mRNA\");\n\t\tLinkedHashMap<String,FeatureList> featureIDHashMap = FeatureHelper.buildFeatureAtrributeIndex(\"ID\", listGenes);\n\t\tLinkedHashMap<String,FeatureList> featureParentHashMap = FeatureHelper.buildFeatureAtrributeIndex(\"Parent\", listGenes);\n\n\t\tfor (FeatureI f : mRNAFeatures) {\n\t\t\tString geneID;\n\t\t\tString geneNote = null;\n\t\t\tString geneSource = null;\n\t\t\tString sequenceName = null;\n\t\t\tChromosomeSequence seq = null;\n\t\t\tGeneSequence geneSequence = null;\n\n\t\t\tFeature mRNAFeature = (Feature) f;\n\t\t\tString mRNAID = mRNAFeature.getAttribute(\"ID\");\n\t\t\tString mRNAsource = mRNAFeature.source();\n\t\t\tString mRNANote = mRNAFeature.getAttribute(\"Note\");\n\t\t\tString mRNAParent = mRNAFeature.getAttribute(\"Parent\");\n\t\t\tif (mRNAParent != null && mRNAParent.length() > 0) {\n\t\t\t   // FeatureList geneFeatureList = listGenes.selectByAttribute(\"ID\", mRNAParent);\n\t\t\t\tFeatureList geneFeatureList = featureIDHashMap.get(mRNAParent);\n\t\t\t\tFeature geneFeature = (Feature) geneFeatureList.get(0);\n\t\t\t\tgeneID = geneFeature.getAttribute(\"ID\");\n\t\t\t\tgeneNote = geneFeature.getAttribute(\"Note\");\n\t\t\t\tgeneSource = geneFeature.source();\n\t\t\t\tsequenceName = geneFeature.seqname();\n\n\t\t\t\t//\n\t\t\t} else {\n\t\t\t\t//deal with cases where no parent gene is given\n\t\t\t\tgeneID = mRNAID;\n\t\t\t\tgeneSource = mRNAsource;\n\t\t\t\tsequenceName = mRNAFeature.seqname();\n\t\t\t}\n\n\t\t\tseq = chromosomeSequenceList.get(sequenceName);\n\n\t\t\tAccessionID geneAccessionID = new AccessionID(geneID);\n\n\t\t  //  FeatureList mRNAChildren = listGenes.selectByAttribute(\"Parent\", mRNAID);\n\t\t\tFeatureList mRNAChildren = featureParentHashMap.get(mRNAID);\n\t\t\tFeatureList cdsFeatures = mRNAChildren.selectByType(\"CDS\");\n\t\t\tFeatureI feature = cdsFeatures.get(0);\n\t\t\tStrand strand = Strand.POSITIVE;\n\n\t\t\tif (feature.location().isNegative()) {\n\t\t\t\tstrand = Strand.NEGATIVE;\n\t\t\t}\n\t\t\tcdsFeatures = cdsFeatures.sortByStart();\n\n\n\n\n\n\n\n\t\t\t//String seqName = feature.seqname();\n\t\t\tFeatureI startCodon = null;\n\t\t\tFeatureI stopCodon = null;\n\t\t\tInteger startCodonBegin = null;\n\t\t\tInteger stopCodonEnd = null;\n\t\t\tString startCodonName = \"\";\n\t\t\tString stopCodonName = \"\";\n\t\t\tFeatureList startCodonList = mRNAChildren.selectByType(\"five_prime_UTR\");\n\t\t\tif (startCodonList != null && startCodonList.size() > 0) {\n\t\t\t\tstartCodon = startCodonList.get(0);\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tstartCodonBegin = startCodon.location().bioEnd();\n\t\t\t\t} else {\n\t\t\t\t\tstartCodonBegin = startCodon.location().bioStart();\n\t\t\t\t}\n\t\t\t\tstartCodonName = startCodon.getAttribute(\"ID\");\n\t\t\t}\n\n\t\t\tFeatureList stopCodonList = mRNAChildren.selectByType(\"three_prime_UTR\");\n\n\t\t\tif (stopCodonList != null && stopCodonList.size() > 0) {\n\t\t\t\tstopCodon = stopCodonList.get(0);\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tstopCodonEnd = stopCodon.location().bioStart();\n\t\t\t\t} else {\n\t\t\t\t\tstopCodonEnd = stopCodon.location().bioEnd();\n\t\t\t\t}\n\t\t\t\tstopCodonName = stopCodon.getAttribute(\"ID\");\n\n\t\t\t}\n\n\n\n\n\t\t\tif (startCodonBegin == null) {\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tFeatureI firstFeature = cdsFeatures.get(0);\n\n\t\t\t\t\tstartCodonBegin = firstFeature.location().bioEnd();\n\t\t\t\t} else {\n\t\t\t\t\tFeatureI firstFeature = cdsFeatures.get(0);\n\n\t\t\t\t\tstartCodonBegin = firstFeature.location().bioStart();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (stopCodonEnd == null) {\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tFeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n\t\t\t\t\tstopCodonEnd = lastFeature.location().bioStart();\n\t\t\t\t} else {\n\t\t\t\t\tFeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n\t\t\t\t\tstopCodonEnd = lastFeature.location().bioEnd();\n\t\t\t\t}\n\t\t\t}\n\t\t\t//for gtf ordering can be strand based so first is last and last is first\n\t\t\tif (startCodonBegin > stopCodonEnd) {\n\t\t\t\tint temp = startCodonBegin;\n\t\t\t\tstartCodonBegin = stopCodonEnd;\n\t\t\t\tstopCodonEnd = temp;\n\t\t\t}\n\n\n\n\t\t\tAccessionID transcriptAccessionID = new AccessionID(mRNAID);\n\t\t\tgeneSequence = seq.getGene(geneID);\n\t\t\tif (geneSequence == null) {\n\t\t\t\tgeneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n\t\t\t\tgeneSequence.setSource(geneSource);\n\t\t\t\tif (geneNote != null && geneNote.length() > 0) {\n\t\t\t\t\tgeneSequence.addNote(geneNote);\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (startCodonBegin < geneSequence.getBioBegin()) {\n\t\t\t\t\tgeneSequence.setBioBegin(startCodonBegin);\n\t\t\t\t}\n\t\t\t\tif (stopCodonEnd > geneSequence.getBioBegin()) {\n\t\t\t\t\tgeneSequence.setBioEnd(stopCodonEnd);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tTranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n\t\t\ttranscriptSequence.setSource(mRNAsource);\n\t\t\tif (mRNANote != null && mRNANote.length() > 0) {\n\t\t\t\ttranscriptSequence.addNote(mRNANote);\n\n\t\t\t}\n\t\t\tif (startCodon != null) {\n\t\t\t\tif (startCodonName == null || startCodonName.length() == 0) {\n\t\t\t\t\tstartCodonName = mRNAID + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n\t\t\t\t}\n\t\t\t\ttranscriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n\t\t\t}\n\t\t\tif (stopCodon != null) {\n\t\t\t\tif (stopCodonName == null || stopCodonName.length() == 0) {\n\t\t\t\t\tstopCodonName = mRNAID + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n\t\t\t\t}\n\t\t\t\ttranscriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n\t\t\t}\n\n\t\t\tfor (FeatureI cdsFeature : cdsFeatures) {\n\t\t\t\tFeature cds = (Feature) cdsFeature;\n\t\t\t\tString cdsNote = cdsFeature.getAttribute(\"Note\");\n\t\t\t\tString cdsSource = cds.source();\n\t\t\t\tString cdsName = cds.getAttribute(\"ID\");\n\t\t\t\tif (cdsName == null || cdsName.length() == 0) {\n\t\t\t\t\tcdsName = mRNAID + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n\t\t\t\t}\n\t\t\t\tAccessionID cdsAccessionID = new AccessionID(cdsName);\n\t\t\t\tExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n\t\t\t\texonSequence.setSource(cdsSource);\n\t\t\t\tif (cdsNote != null && cdsNote.length() > 0) {\n\t\t\t\t\texonSequence.addNote(cdsNote);\n\t\t\t\t}\n\t\t\t\ttranscriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), cds.frame());\n\t\t\t}\n\t\t\tgeneSequence.addIntronsUsingExons();\n\n\t\t}\n\n\t}\n\n\tstatic public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGlimmerGFF3(File fastaSequenceFile, File gffFile) throws Exception {\n\t\tLinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n\t\tFeatureList listGenes = GFF3Reader.read(gffFile.getAbsolutePath());\n\t\taddGlimmerGFF3GeneFeatures(chromosomeSequenceList, listGenes);\n\t\treturn chromosomeSequenceList;\n\t}\n\n\tstatic public void addGlimmerGFF3GeneFeatures(LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n\t\tFeatureList mRNAFeatures = listGenes.selectByType(\"mRNA\");\n\t\tfor (FeatureI f : mRNAFeatures) {\n\t\t\tFeature mRNAFeature = (Feature) f;\n\t\t\tString geneid = mRNAFeature.getAttribute(\"ID\");\n\t\t\tString source = mRNAFeature.source();\n\n\t\t\tFeatureList gene = listGenes.selectByAttribute(\"Parent\", geneid);\n\t\t\tFeatureI geneFeature = gene.get(0);\n\t\t\tChromosomeSequence seq = chromosomeSequenceList.get(geneFeature.seqname());\n\t\t\tAccessionID geneAccessionID = new AccessionID(geneid);\n\t\t\tGeneSequence geneSequence = null;\n\n\t\t\tFeatureList cdsFeatures = gene.selectByType(\"CDS\");\n\t\t\tFeatureI feature = cdsFeatures.get(0);\n\t\t\tStrand strand = Strand.POSITIVE;\n\n\t\t\tif (feature.location().isNegative()) {\n\t\t\t\tstrand = Strand.NEGATIVE;\n\t\t\t}\n\t\t\tcdsFeatures = cdsFeatures.sortByStart();\n\n\n\n\n\n\n\n\t\t\t//String seqName = feature.seqname();\n\t\t\tFeatureI startCodon = null;\n\t\t\tFeatureI stopCodon = null;\n\t\t\tInteger startCodonBegin = null;\n\t\t\tInteger stopCodonEnd = null;\n\t\t\tString startCodonName = \"\";\n\t\t\tString stopCodonName = \"\";\n\t\t\tFeatureList startCodonList = gene.selectByAttribute(\"Note\", \"initial-exon\");\n\t\t\tif (startCodonList != null && startCodonList.size() > 0) {\n\t\t\t\tstartCodon = startCodonList.get(0);\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tstartCodonBegin = startCodon.location().bioEnd();\n\t\t\t\t} else {\n\t\t\t\t\tstartCodonBegin = startCodon.location().bioStart();\n\t\t\t\t}\n\t\t\t\tstartCodonName = startCodon.getAttribute(\"ID\");\n\t\t\t}\n\n\t\t\tFeatureList stopCodonList = gene.selectByAttribute(\"Note\", \"final-exon\");\n\n\t\t\tif (stopCodonList != null && stopCodonList.size() > 0) {\n\t\t\t\tstopCodon = stopCodonList.get(0);\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tstopCodonEnd = stopCodon.location().bioStart();\n\t\t\t\t} else {\n\t\t\t\t\tstopCodonEnd = stopCodon.location().bioEnd();\n\t\t\t\t}\n\t\t\t\tstopCodonName = stopCodon.getAttribute(\"ID\");\n\n\t\t\t}\n\n\n\n\n\t\t\tif (startCodonBegin == null) {\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tFeatureI firstFeature = cdsFeatures.get(0);\n\n\t\t\t\t\tstartCodonBegin = firstFeature.location().bioEnd();\n\t\t\t\t} else {\n\t\t\t\t\tFeatureI firstFeature = cdsFeatures.get(0);\n\n\t\t\t\t\tstartCodonBegin = firstFeature.location().bioStart();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (stopCodonEnd == null) {\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tFeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n\t\t\t\t\tstopCodonEnd = lastFeature.location().bioStart();\n\t\t\t\t} else {\n\t\t\t\t\tFeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n\t\t\t\t\tstopCodonEnd = lastFeature.location().bioEnd();\n\t\t\t\t}\n\t\t\t}\n\t\t\t//for gtf ordering can be strand based so first is last and last is first\n\t\t\tif (startCodonBegin > stopCodonEnd) {\n\t\t\t\tint temp = startCodonBegin;\n\t\t\t\tstartCodonBegin = stopCodonEnd;\n\t\t\t\tstopCodonEnd = temp;\n\t\t\t}\n\n\n\n\t\t\tAccessionID transcriptAccessionID = new AccessionID(geneid);\n\t\t\tif (geneSequence == null) {\n\t\t\t\tgeneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n\t\t\t\tgeneSequence.setSource(source);\n\t\t\t}\n\t\t\t/*\n\t\t\telse {\n\n\t\t\t\tif (startCodonBegin < geneSequence.getBioBegin()) {\n\t\t\t\t\tgeneSequence.setBioBegin(startCodonBegin);\n\t\t\t\t}\n\t\t\t\tif (stopCodonEnd > geneSequence.getBioBegin()) {\n\t\t\t\t\tgeneSequence.setBioEnd(stopCodonEnd);\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n\t\t\tTranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n\t\t\tif (startCodon != null) {\n\t\t\t\tif (startCodonName == null || startCodonName.length() == 0) {\n\t\t\t\t\tstartCodonName = geneid + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n\t\t\t\t}\n\t\t\t\ttranscriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n\t\t\t}\n\t\t\tif (stopCodon != null) {\n\t\t\t\tif (stopCodonName == null || stopCodonName.length() == 0) {\n\t\t\t\t\tstopCodonName = geneid + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n\t\t\t\t}\n\t\t\t\ttranscriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n\t\t\t}\n\n\t\t\tfor (FeatureI cdsFeature : cdsFeatures) {\n\t\t\t\tFeature cds = (Feature) cdsFeature;\n\t\t\t\tString cdsName = cds.getAttribute(\"ID\");\n\t\t\t\tif (cdsName == null || cdsName.length() == 0) {\n\t\t\t\t\tcdsName = geneid + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n\t\t\t\t}\n\t\t\t\tAccessionID cdsAccessionID = new AccessionID(cdsName);\n\t\t\t\t//ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n\t\t\t\ttranscriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), cds.frame());\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tstatic public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGeneMarkGTF(File fastaSequenceFile, File gffFile) throws Exception {\n\t\tLinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n\t\tFeatureList listGenes = GeneMarkGTFReader.read(gffFile.getAbsolutePath());\n\t\taddGeneMarkGTFGeneFeatures(chromosomeSequenceList, listGenes);\n\t\treturn chromosomeSequenceList;\n\t}\n\n\tstatic public void addGeneMarkGTFGeneFeatures(LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n\t\tCollection<String> geneIds = listGenes.attributeValues(\"gene_id\");\n\t\tfor (String geneid : geneIds) {\n\t\t\t//       if(geneid.equals(\"45_g\")){\n\t\t\t//           int dummy =1;\n\t\t\t//       }\n\t\t\tFeatureList gene = listGenes.selectByAttribute(\"gene_id\", geneid);\n\t\t\tFeatureI geneFeature = gene.get(0);\n\t\t\tChromosomeSequence seq = chromosomeSequenceList.get(geneFeature.seqname());\n\t\t\tAccessionID geneAccessionID = new AccessionID(geneid);\n\t\t\tGeneSequence geneSequence = null;\n\t\t\tCollection<String> transcriptids = gene.attributeValues(\"transcript_id\");\n\t\t\tfor (String transcriptid : transcriptids) {\n\t\t\t\t// get all the individual features (exons, CDS regions, etc.) of this gene\n\n\n\t\t\t\tFeatureList transcriptFeature = listGenes.selectByAttribute(\"transcript_id\", transcriptid);\n\t\t\t\t// now select only the coding regions of this gene\n\t\t\t\tFeatureList cdsFeatures = transcriptFeature.selectByType(\"CDS\");\n\t\t\t\t// sort them\n\t\t\t\tcdsFeatures = cdsFeatures.sortByStart();\n\n\t\t\t\tFeatureI feature = cdsFeatures.get(0);\n\t\t\t\tStrand strand = Strand.POSITIVE;\n\n\t\t\t\tif (feature.location().isNegative()) {\n\t\t\t\t\tstrand = Strand.NEGATIVE;\n\t\t\t\t}\n\n\t\t\t\t//String seqName = feature.seqname();\n\t\t\t\tFeatureI startCodon = null;\n\t\t\t\tFeatureI stopCodon = null;\n\t\t\t\tInteger startCodonBegin = null;\n\t\t\t\tInteger stopCodonEnd = null;\n\t\t\t\tString startCodonName = \"\";\n\t\t\t\tString stopCodonName = \"\";\n\t\t\t\tFeatureList startCodonList = transcriptFeature.selectByType(\"start_codon\");\n\t\t\t\tif (startCodonList != null && startCodonList.size() > 0) {\n\t\t\t\t\tstartCodon = startCodonList.get(0);\n\t\t\t\t\tif (strand == Strand.POSITIVE) {\n\t\t\t\t\t\tstartCodonBegin = startCodon.location().bioStart();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstartCodonBegin = startCodon.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\tstartCodonName = startCodon.getAttribute(\"transcript_name\");\n\t\t\t\t}\n\n\t\t\t\tFeatureList stopCodonList = transcriptFeature.selectByType(\"stop_codon\");\n\n\t\t\t\tif (stopCodonList != null && stopCodonList.size() > 0) {\n\t\t\t\t\tstopCodon = stopCodonList.get(0);\n\t\t\t\t\tif (strand == Strand.POSITIVE) {\n\t\t\t\t\t\tstopCodonEnd = stopCodon.location().bioEnd();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstopCodonEnd = stopCodon.location().bioStart();\n\t\t\t\t\t}\n\n\t\t\t\t\tstopCodonName = stopCodon.getAttribute(\"transcript_name\");\n\n\t\t\t\t}\n\n\n\n\n\t\t\t\tif (startCodonBegin == null) {\n\t\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\t\tFeatureI firstFeature = cdsFeatures.get(0);\n\n\t\t\t\t\t\tstartCodonBegin = firstFeature.location().bioEnd();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tFeatureI firstFeature = cdsFeatures.get(0);\n\n\t\t\t\t\t\tstartCodonBegin = firstFeature.location().bioStart();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (stopCodonEnd == null) {\n\t\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\t\tFeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n\t\t\t\t\t\tstopCodonEnd = lastFeature.location().bioStart();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tFeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n\t\t\t\t\t\tstopCodonEnd = lastFeature.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//for gtf ordering can be strand based so first is last and last is first\n\t\t\t\tif (startCodonBegin > stopCodonEnd) {\n\t\t\t\t\tint temp = startCodonBegin;\n\t\t\t\t\tstartCodonBegin = stopCodonEnd;\n\t\t\t\t\tstopCodonEnd = temp;\n\t\t\t\t}\n\n\t\t\t\tAccessionID transcriptAccessionID = new AccessionID(transcriptid);\n\t\t\t\tif (geneSequence == null) {\n\t\t\t\t\tgeneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n\t\t\t\t\tgeneSequence.setSource(((Feature) feature).source());\n\t\t\t\t} else {\n\t\t\t\t\t//if multiple transcripts for one gene make sure the gene is defined as the min and max start/end\n\n\t\t\t\t\tif (startCodonBegin < geneSequence.getBioBegin()) {\n\t\t\t\t\t\tgeneSequence.setBioBegin(startCodonBegin);\n\t\t\t\t\t}\n\t\t\t\t\tif (stopCodonEnd > geneSequence.getBioBegin()) {\n\t\t\t\t\t\tgeneSequence.setBioEnd(stopCodonEnd);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tTranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n\t\t\t\tif (startCodon != null) {\n\t\t\t\t\tif (startCodonName == null || startCodonName.length() == 0) {\n\t\t\t\t\t\tstartCodonName = transcriptid + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\ttranscriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n\t\t\t\t}\n\t\t\t\tif (stopCodon != null) {\n\t\t\t\t\tif (stopCodonName == null || stopCodonName.length() == 0) {\n\t\t\t\t\t\tstopCodonName = transcriptid + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\ttranscriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n\t\t\t\t}\n\n\t\t\t\tfor (FeatureI cdsFeature : cdsFeatures) {\n\t\t\t\t\tFeature cds = (Feature) cdsFeature;\n\t\t\t\t\t// for genemark it appears frame of 2 =1 and frame of 1 = 2\n\t\t\t\t\t// doesn't matter when you string cds regions together as one block\n\t\t\t\t\t// but does make a difference when you try to make a protein sequence for each CDS region where\n\t\t\t\t\t// you give up or borrow based on the frame value\n\t\t\t\t\t// compared with gff like files and docs for geneid and glimmer where geneid and glimmer both do it the same\n\t\t\t\t\t// way that appears to match the gff3 docs.\n\t\t\t\t\tint frame = cds.frame();\n\t\t\t\t\tif (frame == 1) {\n\t\t\t\t\t\tframe = 2;\n\t\t\t\t\t} else if (frame == 2) {\n\t\t\t\t\t\tframe = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tframe = 0;\n\t\t\t\t\t}\n\t\t\t\t\tString cdsName = cds.getAttribute(\"transcript_name\");\n\t\t\t\t\tif (cdsName == null || cdsName.length() == 0) {\n\t\t\t\t\t\tcdsName = transcriptid + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\tAccessionID cdsAccessionID = new AccessionID(cdsName);\n\t\t\t\t\t//ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n\t\t\t\t\ttranscriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), frame);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tstatic public LinkedHashMap<String, ProteinSequence> getProteinSequences(Collection<ChromosomeSequence> chromosomeSequences) throws Exception {\n\t\tLinkedHashMap<String, ProteinSequence> proteinSequenceHashMap = new LinkedHashMap<>();\n\t\tfor (ChromosomeSequence dnaSequence : chromosomeSequences) {\n\t\t\tfor (GeneSequence geneSequence : dnaSequence.getGeneSequences().values()) {\n\t\t\t\tfor (TranscriptSequence transcriptSequence : geneSequence.getTranscripts().values()) {\n\t\t\t\t\t//TODO remove?\n//                    DNASequence dnaCodingSequence = transcriptSequence.getDNACodingSequence();\n//                    logger.info(\"CDS={}\", dnaCodingSequence.getSequenceAsString());\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tProteinSequence proteinSequence = transcriptSequence.getProteinSequence();\n\n//                        logger.info(\"{} {}\", proteinSequence.getAccession().getID(), proteinSequence);\n\t\t\t\t\t\tif (proteinSequenceHashMap.containsKey(proteinSequence.getAccession().getID())) {\n\t\t\t\t\t\t\tthrow new Exception(\"Duplicate protein sequence id=\" + proteinSequence.getAccession().getID() + \" found at Gene id=\" + geneSequence.getAccession().getID());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tproteinSequenceHashMap.put(proteinSequence.getAccession().getID(), proteinSequence);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tlogger.error(\"Exception: \", e);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\treturn proteinSequenceHashMap;\n\t}\n\n\tstatic public LinkedHashMap<String, GeneSequence> getGeneSequences(Collection<ChromosomeSequence> chromosomeSequences) throws Exception {\n\t\tLinkedHashMap<String, GeneSequence> geneSequenceHashMap = new LinkedHashMap<>();\n\t\tfor (ChromosomeSequence chromosomeSequence : chromosomeSequences) {\n\t\t\tfor (GeneSequence geneSequence : chromosomeSequence.getGeneSequences().values()) {\n\t\t\t\tgeneSequenceHashMap.put(geneSequence.getAccession().getID(), geneSequence);\n\t\t\t}\n\t\t}\n\n\t\treturn geneSequenceHashMap;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n/*        if (false) {\n\t\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGeneMarkGTF(new File(\"Scaffolds.fna\"), new File(\"genemark_hmm.gtf\"));\n\t\t\tLinkedHashMap<String, ProteinSequence> proteinSequenceList = GeneFeatureHelper.getProteinSequences(chromosomeSequenceList.values());\n\t\t}\n\n\t\tif (false) {\n\t\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGlimmerGFF3(new File(\"Scaffolds.fna\"), new File(\"glimmerhmm.gff\"));\n\t\t\tLinkedHashMap<String, ProteinSequence> proteinSequenceList = GeneFeatureHelper.getProteinSequences(chromosomeSequenceList.values());\n\t\t\t//  for (ProteinSequence proteinSequence : proteinSequenceList.values()) {\n\t\t\t//      logger.info(proteinSequence.getAccession().getID() + \" \" + proteinSequence);\n\t\t\t//  }\n\t\t\tFastaWriterHelper.writeProteinSequence(new File(\"predicted_glimmer.faa\"), proteinSequenceList.values());\n\n\t\t}\n\t\tif (false) {\n\t\t\tGeneFeatureHelper.outputFastaSequenceLengthGFF3(new File(\"Scaffolds.fna\"), new File(\"scaffolds.gff3\"));\n\t\t}\n\n */\n\n\t\ttry {\n\n\t\t\tif (true) {\n\t\t\t\t//File fastaSequenceFile = new File(\"Scaffolds.fna\");\n\t\t\t\t//File gff3File = new File(\"geneid-v6.gff3\");\n\t\t\t\t//LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceHashMap = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGmodGFF3(fastaSequenceFile, gff3File,true);\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Exception: \", e);\n\t\t}\n\n\t}\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.genome;\n\nimport org.biojava.nbio.genome.parsers.gff.*;\nimport org.biojava.nbio.core.sequence.*;\nimport org.biojava.nbio.core.sequence.io.FastaReaderHelper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n/**\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class GeneFeatureHelper {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(GeneFeatureHelper.class);\n\n\tstatic public LinkedHashMap<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile(File fastaSequenceFile, File uppercaseFastaFile, boolean throwExceptionGeneNotFound) throws Exception {\n\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = new LinkedHashMap<>();\n\t\tMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n\t\tfor (String accession : dnaSequenceList.keySet()) {\n\t\t\tDNASequence contigSequence = dnaSequenceList.get(accession);\n\t\t\tChromosomeSequence chromsomeSequence = new ChromosomeSequence(contigSequence.getSequenceAsString());\n\t\t\tchromsomeSequence.setAccession(contigSequence.getAccession());\n\t\t\tchromosomeSequenceList.put(accession, chromsomeSequence);\n\t\t}\n\n\n\t\tMap<String, DNASequence> geneSequenceList = FastaReaderHelper.readFastaDNASequence(uppercaseFastaFile);\n\t\tfor (DNASequence dnaSequence : geneSequenceList.values()) {\n\t\t\tString geneSequence = dnaSequence.getSequenceAsString();\n\t\t\tString lcGeneSequence = geneSequence.toLowerCase();\n\t\t\tString reverseGeneSequence = dnaSequence.getReverse().getSequenceAsString();\n\t\t\tString lcReverseGeneSequence = reverseGeneSequence.toLowerCase();\n\t\t\tInteger bioStart = null;\n\t\t\tInteger bioEnd = null;\n\t\t\tStrand strand = Strand.POSITIVE;\n\t\t\tboolean geneFound = false;\n\t\t\tString accession = \"\";\n\t\t\tDNASequence contigDNASequence = null;\n\t\t\tfor (String id : dnaSequenceList.keySet()) {\n\t\t\t\taccession = id;\n\t\t\t\tcontigDNASequence = dnaSequenceList.get(id);\n\t\t\t\tString contigSequence = contigDNASequence.getSequenceAsString().toLowerCase();\n\t\t\t\tbioStart = contigSequence.indexOf(lcGeneSequence);\n\t\t\t\tif (bioStart != -1) {\n\t\t\t\t\tbioStart = bioStart + 1;\n\t\t\t\t\tbioEnd = bioStart + geneSequence.length() - 1;\n\t\t\t\t\tgeneFound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tbioStart = contigSequence.indexOf(lcReverseGeneSequence);\n\t\t\t\t\tif (bioStart != -1) {\n\t\t\t\t\t\tbioStart = bioStart + 1;\n\t\t\t\t\t\tbioEnd = bioStart - geneSequence.length() - 1;\n\t\t\t\t\t\tstrand = Strand.NEGATIVE;\n\t\t\t\t\t\tgeneFound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (geneFound) {\n\t\t\t\tlogger.info(\"Gene {} found at {} {} {} {}\",\n\t\t\t\t\t\tdnaSequence.getAccession().toString(), contigDNASequence.getAccession().toString(), bioStart, bioEnd, strand);\n\t\t\t\tChromosomeSequence chromosomeSequence = chromosomeSequenceList.get(accession);\n\n\t\t\t\tArrayList<Integer> exonBoundries = new ArrayList<>();\n\n\t\t\t\t//look for transitions from lowercase to upper case\n\t\t\t\tfor (int i = 0; i < geneSequence.length(); i++) {\n\t\t\t\t\tif (i == 0 && Character.isUpperCase(geneSequence.charAt(i))) {\n\t\t\t\t\t\texonBoundries.add(i);\n\t\t\t\t\t} else if (i == geneSequence.length() - 1) {\n\t\t\t\t\t\texonBoundries.add(i);\n\t\t\t\t\t} else if (Character.isUpperCase(geneSequence.charAt(i)) && Character.isLowerCase(geneSequence.charAt(i - 1))) {\n\t\t\t\t\t\texonBoundries.add(i);\n\t\t\t\t\t} else if (Character.isUpperCase(geneSequence.charAt(i)) && Character.isLowerCase(geneSequence.charAt(i + 1))) {\n\t\t\t\t\t\texonBoundries.add(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tCollections.reverse(exonBoundries);\n\t\t\t\t}\n\n\n\t\t\t\tString geneaccession = dnaSequence.getAccession().getID();\n\t\t\t\tString note = geneaccession;\n\t\t\t\tString[] values = geneaccession.split(\" \");\n\t\t\t\tgeneaccession = values[0];\n\n\n\n\t\t\t\tGeneSequence geneSeq = chromosomeSequence.addGene(new AccessionID(geneaccession), bioStart, bioEnd, strand);\n\t\t\t\tgeneSeq.addNote(note);\n\t\t\t\tgeneSeq.setSource(uppercaseFastaFile.getName());\n\t\t\t\t//String transcriptName = geneaccession + \"-transcript\";\n\t\t\t\t//TranscriptSequence transcriptSequence = geneSeq.addTranscript(new AccessionID(transcriptName), bioStart, bioEnd);\n\n\t\t\t\tint runningFrameLength = 0;\n\t\t\t\tfor (int i = 0; i < exonBoundries.size() - 1; i = i + 2) {\n\t\t\t\t\tint cdsBioStart = exonBoundries.get(i) + bioStart;\n\t\t\t\t\tint cdsBioEnd = exonBoundries.get(i + 1) + bioStart;\n\t\t\t\t\trunningFrameLength = runningFrameLength + Math.abs(cdsBioEnd - cdsBioStart) + 1;\n\t\t\t\t\t//String cdsName = transcriptName + \"-cds-\" + cdsBioStart + \"-\" + cdsBioEnd;\n\n\t\t\t\t\t//AccessionID cdsAccessionID = new AccessionID(cdsName);\n\t\t\t\t\t//ExonSequence exonSequence = geneSeq.addExon(cdsAccessionID, cdsBioStart, cdsBioEnd);\n\t\t\t\t\tint remainder = runningFrameLength % 3;\n\t\t\t\t\t//int frame = 0;\n\t\t\t\t\tif (remainder == 1) {\n\t\t\t\t\t\t//frame = 2; // borrow 2 from next CDS region\n\t\t\t\t\t} else if (remainder == 2) {\n\t\t\t\t\t\t//frame = 1;\n\t\t\t\t\t}\n\t\t\t\t\t//CDSSequence cdsSequence = transcriptSequence.addCDS(cdsAccessionID, cdsBioStart, cdsBioEnd, frame);\n\t\t\t\t}\n\n\n\t\t\t} else {\n\t\t\t\tif (throwExceptionGeneNotFound) {\n\t\t\t\t\tthrow new Exception(dnaSequence.getAccession().toString() + \" not found\");\n\t\t\t\t}\n\t\t\t\tlogger.info(\"Gene not found {}\", dnaSequence.getAccession().toString());\n\t\t\t}\n\n\t\t}\n\t\treturn chromosomeSequenceList;\n\t}\n\n\t/**\n\t * Output a gff3 feature file that will give the length of each scaffold/chromosome in the fasta file.\n\t * Used for gbrowse so it knows length.\n\t * @param fastaSequenceFile\n\t * @param gffFile\n\t * @throws Exception\n\t */\n\tstatic public void outputFastaSequenceLengthGFF3(File fastaSequenceFile, File gffFile) throws Exception {\n\t\tMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n\t\tString fileName = fastaSequenceFile.getName();\n\t\tFileWriter fw = new FileWriter(gffFile);\n\t\tString newLine = System.getProperty(\"line.separator\");\n\t\tfw.write(\"##gff-version 3\" + newLine);\n\t\tfor (DNASequence dnaSequence : dnaSequenceList.values()) {\n\t\t\tString gff3line = dnaSequence.getAccession().getID() + \"\\t\" + fileName + \"\\t\" + \"contig\" + \"\\t\" + \"1\" + \"\\t\" + dnaSequence.getBioEnd() + \"\\t.\\t.\\t.\\tName=\" + dnaSequence.getAccession().getID() + newLine;\n\t\t\tfw.write(gff3line);\n\t\t}\n\t\tfw.close();\n\t}\n\n\t/**\n\t * Loads Fasta file and GFF2 feature file generated from the geneid prediction algorithm\n\t *\n\t * @param fastaSequenceFile\n\t * @param gffFile\n\t * @return\n\t * @throws Exception\n\t */\n\tstatic public Map<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGeneIDGFF2(File fastaSequenceFile, File gffFile) throws Exception {\n\t\tMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n\t\tMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n\t\tFeatureList listGenes = GeneIDGFF2Reader.read(gffFile.getAbsolutePath());\n\t\taddGeneIDGFF2GeneFeatures(chromosomeSequenceList, listGenes);\n\t\treturn chromosomeSequenceList;\n\t}\n\n\t/**\n\t * Load GFF2 feature file generated from the geneid prediction algorithm and map features onto the chromosome sequences\n\t *\n\t * @param chromosomeSequenceList\n\t * @param listGenes\n\t * @throws Exception\n\t */\n\tstatic public void addGeneIDGFF2GeneFeatures(Map<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n\t\tCollection<String> geneIds = listGenes.attributeValues(\"gene_id\");\n\t\tfor (String geneid : geneIds) {\n\t\t\tFeatureList gene = listGenes.selectByAttribute(\"gene_id\", geneid);\n\t\t\tFeatureI geneFeature = gene.get(0);\n\t\t\tChromosomeSequence seq = chromosomeSequenceList.get(geneFeature.seqname());\n\t\t\tgeneid = geneid.replaceAll(\"_\", \".G\");\n\t\t\tAccessionID geneAccessionID = new AccessionID(geneid);\n\t\t\tGeneSequence geneSequence = null;\n\t\t\tCollection<String> transcriptids = gene.attributeValues(\"gene_id\");\n\t\t\tfor (String transcriptid : transcriptids) {\n\t\t\t\t// get all the individual features (exons, CDS regions, etc.) of this gene\n\t\t\t\tFeatureList transcriptFeature = listGenes.selectByAttribute(\"gene_id\", transcriptid);\n\t\t\t\ttranscriptid = transcriptid.replaceAll(\"_\", \".G\");\n\n\n\n\n\t\t\t\t//      String seqName = feature.seqname();\n\t\t\t\t//FeatureI startCodon = null;\n\t\t\t\t//FeatureI stopCodon = null;\n\t\t\t\tInteger startCodonBegin = null;\n\t\t\t\tInteger stopCodonEnd = null;\n\t\t\t\t//String startCodonName = \"\";\n\t\t\t\t//String stopCodonName = \"\";\n\n\n\t\t\t\t// now select only the coding regions of this gene\n\t\t\t\tFeatureList firstFeatures = transcriptFeature.selectByType(\"First\");\n\t\t\t\tFeatureList terminalFeatures = transcriptFeature.selectByType(\"Terminal\");\n\t\t\t\tFeatureList internalFeatures = transcriptFeature.selectByType(\"Internal\");\n\t\t\t\tFeatureList singleFeatures = transcriptFeature.selectByType(\"Single\");\n\t\t\t\tFeatureList cdsFeatures = new FeatureList();\n\t\t\t\tcdsFeatures.add(firstFeatures);\n\t\t\t\tcdsFeatures.add(terminalFeatures);\n\t\t\t\tcdsFeatures.add(internalFeatures);\n\t\t\t\tcdsFeatures.add(singleFeatures);\n\t\t\t\t// sort them\n\t\t\t\tcdsFeatures = cdsFeatures.sortByStart();\n\t\t\t\tStrand strand = Strand.POSITIVE;\n\t\t\t\tFeatureI feature = cdsFeatures.get(0);\n\t\t\t\tif (feature.location().isNegative()) {\n\t\t\t\t\tstrand = Strand.NEGATIVE;\n\t\t\t\t}\n\t\t\t\tif (startCodonBegin == null) {\n\t\t\t\t\tFeatureI firstFeature = cdsFeatures.get(0);\n\t\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\t\tstartCodonBegin = firstFeature.location().bioEnd();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstartCodonBegin = firstFeature.location().bioStart();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (stopCodonEnd == null) {\n\n\t\t\t\t\tFeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n\t\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\t\tstopCodonEnd = lastFeature.location().bioStart();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstopCodonEnd = lastFeature.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//for gtf ordering can be strand based so first is last and last is first\n\t\t\t\tif (startCodonBegin > stopCodonEnd) {\n\t\t\t\t\tint temp = startCodonBegin;\n\t\t\t\t\tstartCodonBegin = stopCodonEnd;\n\t\t\t\t\tstopCodonEnd = temp;\n\t\t\t\t}\n\n\t\t\t\tAccessionID transcriptAccessionID = new AccessionID(transcriptid);\n\t\t\t\tif (geneSequence == null) {\n\t\t\t\t\tgeneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n\t\t\t\t\tgeneSequence.setSource(((Feature) feature).source());\n\t\t\t\t} else {\n\t\t\t\t\t//if multiple transcripts for one gene make sure the gene is defined as the min and max start/end\n\n\t\t\t\t\tif (startCodonBegin < geneSequence.getBioBegin()) {\n\t\t\t\t\t\tgeneSequence.setBioBegin(startCodonBegin);\n\t\t\t\t\t}\n\t\t\t\t\tif (stopCodonEnd > geneSequence.getBioBegin()) {\n\t\t\t\t\t\tgeneSequence.setBioEnd(stopCodonEnd);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tTranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n\t\t\t\t/*\n\t\t\t\tif (startCodon != null) {\n\t\t\t\t\tif (startCodonName == null || startCodonName.length() == 0) {\n\t\t\t\t\t\tstartCodonName = transcriptid + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\ttranscriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n\t\t\t\t}\n\t\t\t\tif (stopCodon != null) {\n\t\t\t\t\tif (stopCodonName == null || stopCodonName.length() == 0) {\n\t\t\t\t\t\tstopCodonName = transcriptid + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\ttranscriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n\t\t\t\t}\n\t\t\t\t*/\n\n\t\t\t\tfor (FeatureI cdsFeature : cdsFeatures) {\n\t\t\t\t\tFeature cds = (Feature) cdsFeature;\n\t\t\t\t\tString cdsName = cds.getAttribute(\"transcript_name\");\n\t\t\t\t\tif (cdsName == null || cdsName.length() == 0) {\n\t\t\t\t\t\tcdsName = transcriptid + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\tAccessionID cdsAccessionID = new AccessionID(cdsName);\n\t\t\t\t\t//ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n\t\t\t\t\tCDSSequence cdsSequence = transcriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), cds.frame());\n\t\t\t\t\tcdsSequence.setSequenceScore(cds.score());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tstatic public Map<String, ChromosomeSequence> getChromosomeSequenceFromDNASequence(Map<String, DNASequence> dnaSequenceList) {\n\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = new LinkedHashMap<>();\n\t\tfor (String key : dnaSequenceList.keySet()) {\n\t\t\tDNASequence dnaSequence = dnaSequenceList.get(key);\n\t\t\tChromosomeSequence chromosomeSequence = new ChromosomeSequence(dnaSequence.getProxySequenceReader()); //we want the underlying sequence but don't need storage\n\t\t\tchromosomeSequence.setAccession(dnaSequence.getAccession());\n\t\t\tchromosomeSequenceList.put(key, chromosomeSequence);\n\t\t}\n\t\treturn chromosomeSequenceList;\n\t}\n\n\t/**\n\t * Lots of variations in the ontology or descriptors that can be used in GFF3 which requires writing a custom parser to handle a GFF3 generated or used\n\t * by a specific application. Probably could be abstracted out but for now easier to handle with custom code to deal with gff3 elements that are not\n\t * included but can be extracted from other data elements.\n\t * @param fastaSequenceFile\n\t * @param gffFile\n\t * @param lazyloadsequences If set to true then the fasta file will be parsed for accession id but sequences will be read from disk when needed to save memory\n\t * @return\n\t * @throws Exception\n\t */\n\tstatic public Map<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGmodGFF3(File fastaSequenceFile, File gffFile,boolean lazyloadsequences) throws Exception {\n\t\tMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile,lazyloadsequences);\n\t\tMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n\t\tFeatureList listGenes = GFF3Reader.read(gffFile.getAbsolutePath());\n\t\taddGmodGFF3GeneFeatures(chromosomeSequenceList, listGenes);\n\t\treturn chromosomeSequenceList;\n\t}\n\n\t/**\n\t * Load GFF3 file using mRNA as the gene feature as not all GFF3 files are complete\n\t * @param chromosomeSequenceList\n\t * @param listGenes\n\t * @throws Exception\n\t */\n\tstatic public void addGmodGFF3GeneFeatures(Map<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n\n\n\t\t// key off mRNA as being a known feature that may or may not have a parent gene\n\n\n\t\tFeatureList mRNAFeatures = listGenes.selectByType(\"mRNA\");\n\t\tLinkedHashMap<String,FeatureList> featureIDHashMap = FeatureHelper.buildFeatureAtrributeIndex(\"ID\", listGenes);\n\t\tLinkedHashMap<String,FeatureList> featureParentHashMap = FeatureHelper.buildFeatureAtrributeIndex(\"Parent\", listGenes);\n\n\t\tfor (FeatureI f : mRNAFeatures) {\n\t\t\tString geneID;\n\t\t\tString geneNote = null;\n\t\t\tString geneSource = null;\n\t\t\tString sequenceName = null;\n\t\t\tChromosomeSequence seq = null;\n\t\t\tGeneSequence geneSequence = null;\n\n\t\t\tFeature mRNAFeature = (Feature) f;\n\t\t\tString mRNAID = mRNAFeature.getAttribute(\"ID\");\n\t\t\tString mRNAsource = mRNAFeature.source();\n\t\t\tString mRNANote = mRNAFeature.getAttribute(\"Note\");\n\t\t\tString mRNAParent = mRNAFeature.getAttribute(\"Parent\");\n\t\t\tif (mRNAParent != null && mRNAParent.length() > 0) {\n\t\t\t   // FeatureList geneFeatureList = listGenes.selectByAttribute(\"ID\", mRNAParent);\n\t\t\t\tFeatureList geneFeatureList = featureIDHashMap.get(mRNAParent);\n\t\t\t\tFeature geneFeature = (Feature) geneFeatureList.get(0);\n\t\t\t\tgeneID = geneFeature.getAttribute(\"ID\");\n\t\t\t\tgeneNote = geneFeature.getAttribute(\"Note\");\n\t\t\t\tgeneSource = geneFeature.source();\n\t\t\t\tsequenceName = geneFeature.seqname();\n\n\t\t\t\t//\n\t\t\t} else {\n\t\t\t\t//deal with cases where no parent gene is given\n\t\t\t\tgeneID = mRNAID;\n\t\t\t\tgeneSource = mRNAsource;\n\t\t\t\tsequenceName = mRNAFeature.seqname();\n\t\t\t}\n\n\t\t\tseq = chromosomeSequenceList.get(sequenceName);\n\n\t\t\tAccessionID geneAccessionID = new AccessionID(geneID);\n\n\t\t  //  FeatureList mRNAChildren = listGenes.selectByAttribute(\"Parent\", mRNAID);\n\t\t\tFeatureList mRNAChildren = featureParentHashMap.get(mRNAID);\n\t\t\tFeatureList cdsFeatures = mRNAChildren.selectByType(\"CDS\");\n\t\t\tFeatureI feature = cdsFeatures.get(0);\n\t\t\tStrand strand = Strand.POSITIVE;\n\n\t\t\tif (feature.location().isNegative()) {\n\t\t\t\tstrand = Strand.NEGATIVE;\n\t\t\t}\n\t\t\tcdsFeatures = cdsFeatures.sortByStart();\n\n\n\n\n\n\n\n\t\t\t//String seqName = feature.seqname();\n\t\t\tFeatureI startCodon = null;\n\t\t\tFeatureI stopCodon = null;\n\t\t\tInteger startCodonBegin = null;\n\t\t\tInteger stopCodonEnd = null;\n\t\t\tString startCodonName = \"\";\n\t\t\tString stopCodonName = \"\";\n\t\t\tFeatureList startCodonList = mRNAChildren.selectByType(\"five_prime_UTR\");\n\t\t\tif (startCodonList != null && startCodonList.size() > 0) {\n\t\t\t\tstartCodon = startCodonList.get(0);\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tstartCodonBegin = startCodon.location().bioEnd();\n\t\t\t\t} else {\n\t\t\t\t\tstartCodonBegin = startCodon.location().bioStart();\n\t\t\t\t}\n\t\t\t\tstartCodonName = startCodon.getAttribute(\"ID\");\n\t\t\t}\n\n\t\t\tFeatureList stopCodonList = mRNAChildren.selectByType(\"three_prime_UTR\");\n\n\t\t\tif (stopCodonList != null && stopCodonList.size() > 0) {\n\t\t\t\tstopCodon = stopCodonList.get(0);\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tstopCodonEnd = stopCodon.location().bioStart();\n\t\t\t\t} else {\n\t\t\t\t\tstopCodonEnd = stopCodon.location().bioEnd();\n\t\t\t\t}\n\t\t\t\tstopCodonName = stopCodon.getAttribute(\"ID\");\n\n\t\t\t}\n\n\n\n\n\t\t\tif (startCodonBegin == null) {\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tFeatureI firstFeature = cdsFeatures.get(0);\n\n\t\t\t\t\tstartCodonBegin = firstFeature.location().bioEnd();\n\t\t\t\t} else {\n\t\t\t\t\tFeatureI firstFeature = cdsFeatures.get(0);\n\n\t\t\t\t\tstartCodonBegin = firstFeature.location().bioStart();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (stopCodonEnd == null) {\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tFeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n\t\t\t\t\tstopCodonEnd = lastFeature.location().bioStart();\n\t\t\t\t} else {\n\t\t\t\t\tFeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n\t\t\t\t\tstopCodonEnd = lastFeature.location().bioEnd();\n\t\t\t\t}\n\t\t\t}\n\t\t\t//for gtf ordering can be strand based so first is last and last is first\n\t\t\tif (startCodonBegin > stopCodonEnd) {\n\t\t\t\tint temp = startCodonBegin;\n\t\t\t\tstartCodonBegin = stopCodonEnd;\n\t\t\t\tstopCodonEnd = temp;\n\t\t\t}\n\n\n\n\t\t\tAccessionID transcriptAccessionID = new AccessionID(mRNAID);\n\t\t\tgeneSequence = seq.getGene(geneID);\n\t\t\tif (geneSequence == null) {\n\t\t\t\tgeneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n\t\t\t\tgeneSequence.setSource(geneSource);\n\t\t\t\tif (geneNote != null && geneNote.length() > 0) {\n\t\t\t\t\tgeneSequence.addNote(geneNote);\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (startCodonBegin < geneSequence.getBioBegin()) {\n\t\t\t\t\tgeneSequence.setBioBegin(startCodonBegin);\n\t\t\t\t}\n\t\t\t\tif (stopCodonEnd > geneSequence.getBioBegin()) {\n\t\t\t\t\tgeneSequence.setBioEnd(stopCodonEnd);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tTranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n\t\t\ttranscriptSequence.setSource(mRNAsource);\n\t\t\tif (mRNANote != null && mRNANote.length() > 0) {\n\t\t\t\ttranscriptSequence.addNote(mRNANote);\n\n\t\t\t}\n\t\t\tif (startCodon != null) {\n\t\t\t\tif (startCodonName == null || startCodonName.length() == 0) {\n\t\t\t\t\tstartCodonName = mRNAID + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n\t\t\t\t}\n\t\t\t\ttranscriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n\t\t\t}\n\t\t\tif (stopCodon != null) {\n\t\t\t\tif (stopCodonName == null || stopCodonName.length() == 0) {\n\t\t\t\t\tstopCodonName = mRNAID + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n\t\t\t\t}\n\t\t\t\ttranscriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n\t\t\t}\n\n\t\t\tfor (FeatureI cdsFeature : cdsFeatures) {\n\t\t\t\tFeature cds = (Feature) cdsFeature;\n\t\t\t\tString cdsNote = cdsFeature.getAttribute(\"Note\");\n\t\t\t\tString cdsSource = cds.source();\n\t\t\t\tString cdsName = cds.getAttribute(\"ID\");\n\t\t\t\tif (cdsName == null || cdsName.length() == 0) {\n\t\t\t\t\tcdsName = mRNAID + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n\t\t\t\t}\n\t\t\t\tAccessionID cdsAccessionID = new AccessionID(cdsName);\n\t\t\t\tExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n\t\t\t\texonSequence.setSource(cdsSource);\n\t\t\t\tif (cdsNote != null && cdsNote.length() > 0) {\n\t\t\t\t\texonSequence.addNote(cdsNote);\n\t\t\t\t}\n\t\t\t\ttranscriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), cds.frame());\n\t\t\t}\n\t\t\tgeneSequence.addIntronsUsingExons();\n\n\t\t}\n\n\t}\n\n\tstatic public Map<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGlimmerGFF3(File fastaSequenceFile, File gffFile) throws Exception {\n\t\tMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n\t\tMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n\t\tFeatureList listGenes = GFF3Reader.read(gffFile.getAbsolutePath());\n\t\taddGlimmerGFF3GeneFeatures(chromosomeSequenceList, listGenes);\n\t\treturn chromosomeSequenceList;\n\t}\n\n\tstatic public void addGlimmerGFF3GeneFeatures(Map<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n\t\tFeatureList mRNAFeatures = listGenes.selectByType(\"mRNA\");\n\t\tfor (FeatureI f : mRNAFeatures) {\n\t\t\tFeature mRNAFeature = (Feature) f;\n\t\t\tString geneid = mRNAFeature.getAttribute(\"ID\");\n\t\t\tString source = mRNAFeature.source();\n\n\t\t\tFeatureList gene = listGenes.selectByAttribute(\"Parent\", geneid);\n\t\t\tFeatureI geneFeature = gene.get(0);\n\t\t\tChromosomeSequence seq = chromosomeSequenceList.get(geneFeature.seqname());\n\t\t\tAccessionID geneAccessionID = new AccessionID(geneid);\n\t\t\tGeneSequence geneSequence = null;\n\n\t\t\tFeatureList cdsFeatures = gene.selectByType(\"CDS\");\n\t\t\tFeatureI feature = cdsFeatures.get(0);\n\t\t\tStrand strand = Strand.POSITIVE;\n\n\t\t\tif (feature.location().isNegative()) {\n\t\t\t\tstrand = Strand.NEGATIVE;\n\t\t\t}\n\t\t\tcdsFeatures = cdsFeatures.sortByStart();\n\n\n\n\n\n\n\n\t\t\t//String seqName = feature.seqname();\n\t\t\tFeatureI startCodon = null;\n\t\t\tFeatureI stopCodon = null;\n\t\t\tInteger startCodonBegin = null;\n\t\t\tInteger stopCodonEnd = null;\n\t\t\tString startCodonName = \"\";\n\t\t\tString stopCodonName = \"\";\n\t\t\tFeatureList startCodonList = gene.selectByAttribute(\"Note\", \"initial-exon\");\n\t\t\tif (startCodonList != null && startCodonList.size() > 0) {\n\t\t\t\tstartCodon = startCodonList.get(0);\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tstartCodonBegin = startCodon.location().bioEnd();\n\t\t\t\t} else {\n\t\t\t\t\tstartCodonBegin = startCodon.location().bioStart();\n\t\t\t\t}\n\t\t\t\tstartCodonName = startCodon.getAttribute(\"ID\");\n\t\t\t}\n\n\t\t\tFeatureList stopCodonList = gene.selectByAttribute(\"Note\", \"final-exon\");\n\n\t\t\tif (stopCodonList != null && stopCodonList.size() > 0) {\n\t\t\t\tstopCodon = stopCodonList.get(0);\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tstopCodonEnd = stopCodon.location().bioStart();\n\t\t\t\t} else {\n\t\t\t\t\tstopCodonEnd = stopCodon.location().bioEnd();\n\t\t\t\t}\n\t\t\t\tstopCodonName = stopCodon.getAttribute(\"ID\");\n\n\t\t\t}\n\n\n\n\n\t\t\tif (startCodonBegin == null) {\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tFeatureI firstFeature = cdsFeatures.get(0);\n\n\t\t\t\t\tstartCodonBegin = firstFeature.location().bioEnd();\n\t\t\t\t} else {\n\t\t\t\t\tFeatureI firstFeature = cdsFeatures.get(0);\n\n\t\t\t\t\tstartCodonBegin = firstFeature.location().bioStart();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (stopCodonEnd == null) {\n\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\tFeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n\t\t\t\t\tstopCodonEnd = lastFeature.location().bioStart();\n\t\t\t\t} else {\n\t\t\t\t\tFeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n\t\t\t\t\tstopCodonEnd = lastFeature.location().bioEnd();\n\t\t\t\t}\n\t\t\t}\n\t\t\t//for gtf ordering can be strand based so first is last and last is first\n\t\t\tif (startCodonBegin > stopCodonEnd) {\n\t\t\t\tint temp = startCodonBegin;\n\t\t\t\tstartCodonBegin = stopCodonEnd;\n\t\t\t\tstopCodonEnd = temp;\n\t\t\t}\n\n\n\n\t\t\tAccessionID transcriptAccessionID = new AccessionID(geneid);\n\t\t\tif (geneSequence == null) {\n\t\t\t\tgeneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n\t\t\t\tgeneSequence.setSource(source);\n\t\t\t}\n\t\t\t/*\n\t\t\telse {\n\n\t\t\t\tif (startCodonBegin < geneSequence.getBioBegin()) {\n\t\t\t\t\tgeneSequence.setBioBegin(startCodonBegin);\n\t\t\t\t}\n\t\t\t\tif (stopCodonEnd > geneSequence.getBioBegin()) {\n\t\t\t\t\tgeneSequence.setBioEnd(stopCodonEnd);\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n\t\t\tTranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n\t\t\tif (startCodon != null) {\n\t\t\t\tif (startCodonName == null || startCodonName.length() == 0) {\n\t\t\t\t\tstartCodonName = geneid + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n\t\t\t\t}\n\t\t\t\ttranscriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n\t\t\t}\n\t\t\tif (stopCodon != null) {\n\t\t\t\tif (stopCodonName == null || stopCodonName.length() == 0) {\n\t\t\t\t\tstopCodonName = geneid + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n\t\t\t\t}\n\t\t\t\ttranscriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n\t\t\t}\n\n\t\t\tfor (FeatureI cdsFeature : cdsFeatures) {\n\t\t\t\tFeature cds = (Feature) cdsFeature;\n\t\t\t\tString cdsName = cds.getAttribute(\"ID\");\n\t\t\t\tif (cdsName == null || cdsName.length() == 0) {\n\t\t\t\t\tcdsName = geneid + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n\t\t\t\t}\n\t\t\t\tAccessionID cdsAccessionID = new AccessionID(cdsName);\n\t\t\t\t//ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n\t\t\t\ttranscriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), cds.frame());\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tstatic public Map<String, ChromosomeSequence> loadFastaAddGeneFeaturesFromGeneMarkGTF(File fastaSequenceFile, File gffFile) throws Exception {\n\t\tMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile);\n\t\tMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n\t\tFeatureList listGenes = GeneMarkGTFReader.read(gffFile.getAbsolutePath());\n\t\taddGeneMarkGTFGeneFeatures(chromosomeSequenceList, listGenes);\n\t\treturn chromosomeSequenceList;\n\t}\n\n\tstatic public void addGeneMarkGTFGeneFeatures(Map<String, ChromosomeSequence> chromosomeSequenceList, FeatureList listGenes) throws Exception {\n\t\tCollection<String> geneIds = listGenes.attributeValues(\"gene_id\");\n\t\tfor (String geneid : geneIds) {\n\t\t\t//       if(geneid.equals(\"45_g\")){\n\t\t\t//           int dummy =1;\n\t\t\t//       }\n\t\t\tFeatureList gene = listGenes.selectByAttribute(\"gene_id\", geneid);\n\t\t\tFeatureI geneFeature = gene.get(0);\n\t\t\tChromosomeSequence seq = chromosomeSequenceList.get(geneFeature.seqname());\n\t\t\tAccessionID geneAccessionID = new AccessionID(geneid);\n\t\t\tGeneSequence geneSequence = null;\n\t\t\tCollection<String> transcriptids = gene.attributeValues(\"transcript_id\");\n\t\t\tfor (String transcriptid : transcriptids) {\n\t\t\t\t// get all the individual features (exons, CDS regions, etc.) of this gene\n\n\n\t\t\t\tFeatureList transcriptFeature = listGenes.selectByAttribute(\"transcript_id\", transcriptid);\n\t\t\t\t// now select only the coding regions of this gene\n\t\t\t\tFeatureList cdsFeatures = transcriptFeature.selectByType(\"CDS\");\n\t\t\t\t// sort them\n\t\t\t\tcdsFeatures = cdsFeatures.sortByStart();\n\n\t\t\t\tFeatureI feature = cdsFeatures.get(0);\n\t\t\t\tStrand strand = Strand.POSITIVE;\n\n\t\t\t\tif (feature.location().isNegative()) {\n\t\t\t\t\tstrand = Strand.NEGATIVE;\n\t\t\t\t}\n\n\t\t\t\t//String seqName = feature.seqname();\n\t\t\t\tFeatureI startCodon = null;\n\t\t\t\tFeatureI stopCodon = null;\n\t\t\t\tInteger startCodonBegin = null;\n\t\t\t\tInteger stopCodonEnd = null;\n\t\t\t\tString startCodonName = \"\";\n\t\t\t\tString stopCodonName = \"\";\n\t\t\t\tFeatureList startCodonList = transcriptFeature.selectByType(\"start_codon\");\n\t\t\t\tif (startCodonList != null && startCodonList.size() > 0) {\n\t\t\t\t\tstartCodon = startCodonList.get(0);\n\t\t\t\t\tif (strand == Strand.POSITIVE) {\n\t\t\t\t\t\tstartCodonBegin = startCodon.location().bioStart();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstartCodonBegin = startCodon.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\tstartCodonName = startCodon.getAttribute(\"transcript_name\");\n\t\t\t\t}\n\n\t\t\t\tFeatureList stopCodonList = transcriptFeature.selectByType(\"stop_codon\");\n\n\t\t\t\tif (stopCodonList != null && stopCodonList.size() > 0) {\n\t\t\t\t\tstopCodon = stopCodonList.get(0);\n\t\t\t\t\tif (strand == Strand.POSITIVE) {\n\t\t\t\t\t\tstopCodonEnd = stopCodon.location().bioEnd();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstopCodonEnd = stopCodon.location().bioStart();\n\t\t\t\t\t}\n\n\t\t\t\t\tstopCodonName = stopCodon.getAttribute(\"transcript_name\");\n\n\t\t\t\t}\n\n\n\n\n\t\t\t\tif (startCodonBegin == null) {\n\t\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\t\tFeatureI firstFeature = cdsFeatures.get(0);\n\n\t\t\t\t\t\tstartCodonBegin = firstFeature.location().bioEnd();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tFeatureI firstFeature = cdsFeatures.get(0);\n\n\t\t\t\t\t\tstartCodonBegin = firstFeature.location().bioStart();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (stopCodonEnd == null) {\n\t\t\t\t\tif (strand == Strand.NEGATIVE) {\n\t\t\t\t\t\tFeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n\t\t\t\t\t\tstopCodonEnd = lastFeature.location().bioStart();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tFeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n\t\t\t\t\t\tstopCodonEnd = lastFeature.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//for gtf ordering can be strand based so first is last and last is first\n\t\t\t\tif (startCodonBegin > stopCodonEnd) {\n\t\t\t\t\tint temp = startCodonBegin;\n\t\t\t\t\tstartCodonBegin = stopCodonEnd;\n\t\t\t\t\tstopCodonEnd = temp;\n\t\t\t\t}\n\n\t\t\t\tAccessionID transcriptAccessionID = new AccessionID(transcriptid);\n\t\t\t\tif (geneSequence == null) {\n\t\t\t\t\tgeneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n\t\t\t\t\tgeneSequence.setSource(((Feature) feature).source());\n\t\t\t\t} else {\n\t\t\t\t\t//if multiple transcripts for one gene make sure the gene is defined as the min and max start/end\n\n\t\t\t\t\tif (startCodonBegin < geneSequence.getBioBegin()) {\n\t\t\t\t\t\tgeneSequence.setBioBegin(startCodonBegin);\n\t\t\t\t\t}\n\t\t\t\t\tif (stopCodonEnd > geneSequence.getBioBegin()) {\n\t\t\t\t\t\tgeneSequence.setBioEnd(stopCodonEnd);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tTranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n\t\t\t\tif (startCodon != null) {\n\t\t\t\t\tif (startCodonName == null || startCodonName.length() == 0) {\n\t\t\t\t\t\tstartCodonName = transcriptid + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\ttranscriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n\t\t\t\t}\n\t\t\t\tif (stopCodon != null) {\n\t\t\t\t\tif (stopCodonName == null || stopCodonName.length() == 0) {\n\t\t\t\t\t\tstopCodonName = transcriptid + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\ttranscriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n\t\t\t\t}\n\n\t\t\t\tfor (FeatureI cdsFeature : cdsFeatures) {\n\t\t\t\t\tFeature cds = (Feature) cdsFeature;\n\t\t\t\t\t// for genemark it appears frame of 2 =1 and frame of 1 = 2\n\t\t\t\t\t// doesn't matter when you string cds regions together as one block\n\t\t\t\t\t// but does make a difference when you try to make a protein sequence for each CDS region where\n\t\t\t\t\t// you give up or borrow based on the frame value\n\t\t\t\t\t// compared with gff like files and docs for geneid and glimmer where geneid and glimmer both do it the same\n\t\t\t\t\t// way that appears to match the gff3 docs.\n\t\t\t\t\tint frame = cds.frame();\n\t\t\t\t\tif (frame == 1) {\n\t\t\t\t\t\tframe = 2;\n\t\t\t\t\t} else if (frame == 2) {\n\t\t\t\t\t\tframe = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tframe = 0;\n\t\t\t\t\t}\n\t\t\t\t\tString cdsName = cds.getAttribute(\"transcript_name\");\n\t\t\t\t\tif (cdsName == null || cdsName.length() == 0) {\n\t\t\t\t\t\tcdsName = transcriptid + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\tAccessionID cdsAccessionID = new AccessionID(cdsName);\n\t\t\t\t\t//ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n\t\t\t\t\ttranscriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), frame);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tstatic public LinkedHashMap<String, ProteinSequence> getProteinSequences(Collection<ChromosomeSequence> chromosomeSequences) throws Exception {\n\t\tLinkedHashMap<String, ProteinSequence> proteinSequenceHashMap = new LinkedHashMap<>();\n\t\tfor (ChromosomeSequence dnaSequence : chromosomeSequences) {\n\t\t\tfor (GeneSequence geneSequence : dnaSequence.getGeneSequences().values()) {\n\t\t\t\tfor (TranscriptSequence transcriptSequence : geneSequence.getTranscripts().values()) {\n\t\t\t\t\t//TODO remove?\n//                    DNASequence dnaCodingSequence = transcriptSequence.getDNACodingSequence();\n//                    logger.info(\"CDS={}\", dnaCodingSequence.getSequenceAsString());\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tProteinSequence proteinSequence = transcriptSequence.getProteinSequence();\n\n//                        logger.info(\"{} {}\", proteinSequence.getAccession().getID(), proteinSequence);\n\t\t\t\t\t\tif (proteinSequenceHashMap.containsKey(proteinSequence.getAccession().getID())) {\n\t\t\t\t\t\t\tthrow new Exception(\"Duplicate protein sequence id=\" + proteinSequence.getAccession().getID() + \" found at Gene id=\" + geneSequence.getAccession().getID());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tproteinSequenceHashMap.put(proteinSequence.getAccession().getID(), proteinSequence);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tlogger.error(\"Exception: \", e);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\treturn proteinSequenceHashMap;\n\t}\n\n\tstatic public LinkedHashMap<String, GeneSequence> getGeneSequences(Collection<ChromosomeSequence> chromosomeSequences) throws Exception {\n\t\tLinkedHashMap<String, GeneSequence> geneSequenceHashMap = new LinkedHashMap<>();\n\t\tfor (ChromosomeSequence chromosomeSequence : chromosomeSequences) {\n\t\t\tfor (GeneSequence geneSequence : chromosomeSequence.getGeneSequences().values()) {\n\t\t\t\tgeneSequenceHashMap.put(geneSequence.getAccession().getID(), geneSequence);\n\t\t\t}\n\t\t}\n\n\t\treturn geneSequenceHashMap;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n/*        if (false) {\n\t\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGeneMarkGTF(new File(\"Scaffolds.fna\"), new File(\"genemark_hmm.gtf\"));\n\t\t\tLinkedHashMap<String, ProteinSequence> proteinSequenceList = GeneFeatureHelper.getProteinSequences(chromosomeSequenceList.values());\n\t\t}\n\n\t\tif (false) {\n\t\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGlimmerGFF3(new File(\"Scaffolds.fna\"), new File(\"glimmerhmm.gff\"));\n\t\t\tLinkedHashMap<String, ProteinSequence> proteinSequenceList = GeneFeatureHelper.getProteinSequences(chromosomeSequenceList.values());\n\t\t\t//  for (ProteinSequence proteinSequence : proteinSequenceList.values()) {\n\t\t\t//      logger.info(proteinSequence.getAccession().getID() + \" \" + proteinSequence);\n\t\t\t//  }\n\t\t\tFastaWriterHelper.writeProteinSequence(new File(\"predicted_glimmer.faa\"), proteinSequenceList.values());\n\n\t\t}\n\t\tif (false) {\n\t\t\tGeneFeatureHelper.outputFastaSequenceLengthGFF3(new File(\"Scaffolds.fna\"), new File(\"scaffolds.gff3\"));\n\t\t}\n\n */\n\n\t\ttry {\n\n\t\t\tif (true) {\n\t\t\t\t//File fastaSequenceFile = new File(\"Scaffolds.fna\");\n\t\t\t\t//File gff3File = new File(\"geneid-v6.gff3\");\n\t\t\t\t//LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceHashMap = GeneFeatureHelper.loadFastaAddGeneFeaturesFromGmodGFF3(fastaSequenceFile, gff3File,true);\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Exception: \", e);\n\t\t}\n\n\t}\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.genome;\n\nimport junitx.framework.FileAssert;\nimport org.biojava.nbio.genome.parsers.gff.FeatureList;\nimport org.biojava.nbio.genome.parsers.gff.GFF3Reader;\nimport org.biojava.nbio.genome.parsers.gff.GFF3Writer;\nimport org.biojava.nbio.core.sequence.ChromosomeSequence;\nimport org.biojava.nbio.core.sequence.GeneSequence;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.io.FastaWriterHelper;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.nio.file.Files;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\n\n/**\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class GeneFeatureHelperTest {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(GeneFeatureHelperTest.class);\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t}\n\n\t@After\n\tpublic void tearDown() throws Exception {\n\t}\n\n\t@Test\n\tpublic void testZeroLocation() throws Exception {\n\n\t\t@SuppressWarnings(\"unused\")\n\t\tFeatureList listGenes = GFF3Reader.read(\"src/test/resources/amphimedon.gff3\");\n\t}\n\n\t/**\n\t * Test of loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile method, of class GeneFeatureHelper.\n\t *\n\t * @throws Exception\n\t */\n\n\t@Test\n\tpublic void testLoadFastaAddGeneFeaturesFromUpperCaseExonFastaFile() throws Exception {\n\t\t// logger.info(\"loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile\");\n\t\tFile fastaSequenceFile = new File(\"src/test/resources/volvox_all.fna\");\n\t\tFile uppercaseFastaFile = new File(\"src/test/resources/volvox_all_genes_exon_uppercase.fna\");\n\t\tboolean throwExceptionGeneNotFound = false;\n\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceHashMap = GeneFeatureHelper\n\t\t\t\t.loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile(fastaSequenceFile, uppercaseFastaFile,\n\t\t\t\t\t\tthrowExceptionGeneNotFound);\n\n\t\tFile tmp = Files.createTempFile(\"volvox_all_genes_exon_uppercase\",\"gff3\").toFile();\n\t\ttmp.deleteOnExit();\n\t\tFileOutputStream fo = new FileOutputStream(tmp);\n\t\tGFF3Writer gff3Writer = new GFF3Writer();\n\t\tgff3Writer.write(fo, chromosomeSequenceHashMap);\n\t\tfo.close();\n\n\t}\n\n\t/**\n\t * Test of outputFastaSequenceLengthGFF3 method, of class GeneFeatureHelper.\n\t */\n\t@Test\n\tpublic void testOutputFastaSequenceLengthGFF3() throws Exception {\n\t\t// logger.info(\"outputFastaSequenceLengthGFF3\");\n\n\t\tFile fastaSequenceFile = new File(\"src/test/resources/volvox_all.fna\");\n\t\tFile gffFile = Files.createTempFile(\"volvox_length\",\"gff3\").toFile();\n\t\tgffFile.deleteOnExit();\n\t\tGeneFeatureHelper.outputFastaSequenceLengthGFF3(fastaSequenceFile, gffFile);\n\t\tFileAssert.assertEquals(\"volvox_length.gff3 and volvox_length_output.gff3 are not equal\", gffFile,\n\t\t\t\tnew File(\"src/test/resources/volvox_length_reference.gff3\"));\n\n\t}\n\n\t/**\n\t * Test if the note from a gff3 file is added to the gene sequence\n\t *\n\t * @throws Exception\n\t */\n\n\t@Test\n\tpublic void testAddGFF3Note() throws Exception {\n\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper\n\t\t\t\t.loadFastaAddGeneFeaturesFromGmodGFF3(new File(\"src/test/resources/volvox_all.fna\"), new File(\n\t\t\t\t\t\t\"src/test/resources/volvox.gff3\"), false);\n\t\tChromosomeSequence ctgASequence = chromosomeSequenceList.get(\"ctgA\");\n\t\tGeneSequence edenGeneSequence = ctgASequence.getGene(\"EDEN\");\n\t\tlogger.info(\"Note {}\", edenGeneSequence.getNotesList());\n\t}\n\n\t/**\n\t * Test of getProteinSequences method, of class GeneFeatureHelper. Used gff3 file that was modified from the volvox\n\t * gff version. Do not have the reference protein that is generated from each CDS record so subject to being\n\t * incorrect without a validated test case. Could not find anyone providing a gff3 test case with expected protein\n\t * output.\n\t */\n\t@Test\n\tpublic void testGetProteinSequences() throws Exception {\n\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper\n\t\t\t\t.loadFastaAddGeneFeaturesFromGmodGFF3(new File(\"src/test/resources/volvox_all.fna\"), new File(\n\t\t\t\t\t\t\"src/test/resources/volvox.gff3\"), false);\n\t\tLinkedHashMap<String, ProteinSequence> proteinSequenceList = GeneFeatureHelper\n\t\t\t\t.getProteinSequences(chromosomeSequenceList.values());\n\t\t// for(ProteinSequence proteinSequence : proteinSequenceList.values()){\n\t\t// logger.info(\"Output={}\", proteinSequence.getSequenceAsString());\n\t\t// }\n\t\tFile tmp = Files.createTempFile(\"volvox_all\",\"faa\").toFile();\n\t\ttmp.deleteOnExit();\n\t\tFastaWriterHelper.writeProteinSequence(tmp, proteinSequenceList.values());\n\t\tFileAssert.assertEquals(\"volvox_all_reference.faa and volvox_all.faa are not equal\", new File(\n\t\t\t\t\"src/test/resources/volvox_all_reference.faa\"), tmp);\n\t}\n\n\t/**\n\t * Test of getGeneSequences method, of class GeneFeatureHelper.\n\t */\n\t@Test\n\tpublic void testGetGeneSequences() throws Exception {\n\t\t// logger.info(\"getGeneSequences\");\n\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper\n\t\t\t\t.loadFastaAddGeneFeaturesFromGmodGFF3(new File(\"src/test/resources/volvox_all.fna\"), new File(\n\t\t\t\t\t\t\"src/test/resources/volvox.gff3\"), true);\n\t\tLinkedHashMap<String, GeneSequence> geneSequenceHashMap = GeneFeatureHelper\n\t\t\t\t.getGeneSequences(chromosomeSequenceList.values());\n\t\tCollection<GeneSequence> geneSequences = geneSequenceHashMap.values();\n\n\t\tFile tmp = Files.createTempFile(\"volvox_all_genes_exon_uppercase\",\"fna\").toFile();\n\t\ttmp.deleteOnExit();\n\t\tFastaWriterHelper.writeGeneSequence(tmp, geneSequences, true);\n\t}\n\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.genome;\n\nimport junitx.framework.FileAssert;\nimport org.biojava.nbio.genome.parsers.gff.FeatureList;\nimport org.biojava.nbio.genome.parsers.gff.GFF3Reader;\nimport org.biojava.nbio.genome.parsers.gff.GFF3Writer;\nimport org.biojava.nbio.core.sequence.ChromosomeSequence;\nimport org.biojava.nbio.core.sequence.GeneSequence;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.io.FastaWriterHelper;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.nio.file.Files;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n/**\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class GeneFeatureHelperTest {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(GeneFeatureHelperTest.class);\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t}\n\n\t@After\n\tpublic void tearDown() throws Exception {\n\t}\n\n\t@Test\n\tpublic void testZeroLocation() throws Exception {\n\n\t\t@SuppressWarnings(\"unused\")\n\t\tFeatureList listGenes = GFF3Reader.read(\"src/test/resources/amphimedon.gff3\");\n\t}\n\n\t/**\n\t * Test of loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile method, of class GeneFeatureHelper.\n\t *\n\t * @throws Exception\n\t */\n\n\t@Test\n\tpublic void testLoadFastaAddGeneFeaturesFromUpperCaseExonFastaFile() throws Exception {\n\t\t// logger.info(\"loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile\");\n\t\tFile fastaSequenceFile = new File(\"src/test/resources/volvox_all.fna\");\n\t\tFile uppercaseFastaFile = new File(\"src/test/resources/volvox_all_genes_exon_uppercase.fna\");\n\t\tboolean throwExceptionGeneNotFound = false;\n\t\tLinkedHashMap<String, ChromosomeSequence> chromosomeSequenceHashMap = GeneFeatureHelper\n\t\t\t\t.loadFastaAddGeneFeaturesFromUpperCaseExonFastaFile(fastaSequenceFile, uppercaseFastaFile,\n\t\t\t\t\t\tthrowExceptionGeneNotFound);\n\n\t\tFile tmp = Files.createTempFile(\"volvox_all_genes_exon_uppercase\",\"gff3\").toFile();\n\t\ttmp.deleteOnExit();\n\t\tFileOutputStream fo = new FileOutputStream(tmp);\n\t\tGFF3Writer gff3Writer = new GFF3Writer();\n\t\tgff3Writer.write(fo, chromosomeSequenceHashMap);\n\t\tfo.close();\n\n\t}\n\n\t/**\n\t * Test of outputFastaSequenceLengthGFF3 method, of class GeneFeatureHelper.\n\t */\n\t@Test\n\tpublic void testOutputFastaSequenceLengthGFF3() throws Exception {\n\t\t// logger.info(\"outputFastaSequenceLengthGFF3\");\n\n\t\tFile fastaSequenceFile = new File(\"src/test/resources/volvox_all.fna\");\n\t\tFile gffFile = Files.createTempFile(\"volvox_length\",\"gff3\").toFile();\n\t\tgffFile.deleteOnExit();\n\t\tGeneFeatureHelper.outputFastaSequenceLengthGFF3(fastaSequenceFile, gffFile);\n\t\tFileAssert.assertEquals(\"volvox_length.gff3 and volvox_length_output.gff3 are not equal\", gffFile,\n\t\t\t\tnew File(\"src/test/resources/volvox_length_reference.gff3\"));\n\n\t}\n\n\t/**\n\t * Test if the note from a gff3 file is added to the gene sequence\n\t *\n\t * @throws Exception\n\t */\n\n\t@Test\n\tpublic void testAddGFF3Note() throws Exception {\n\t\tMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper\n\t\t\t\t.loadFastaAddGeneFeaturesFromGmodGFF3(new File(\"src/test/resources/volvox_all.fna\"), new File(\n\t\t\t\t\t\t\"src/test/resources/volvox.gff3\"), false);\n\t\tChromosomeSequence ctgASequence = chromosomeSequenceList.get(\"ctgA\");\n\t\tGeneSequence edenGeneSequence = ctgASequence.getGene(\"EDEN\");\n\t\tlogger.info(\"Note {}\", edenGeneSequence.getNotesList());\n\t}\n\n\t/**\n\t * Test of getProteinSequences method, of class GeneFeatureHelper. Used gff3 file that was modified from the volvox\n\t * gff version. Do not have the reference protein that is generated from each CDS record so subject to being\n\t * incorrect without a validated test case. Could not find anyone providing a gff3 test case with expected protein\n\t * output.\n\t */\n\t@Test\n\tpublic void testGetProteinSequences() throws Exception {\n\t\tMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper\n\t\t\t\t.loadFastaAddGeneFeaturesFromGmodGFF3(new File(\"src/test/resources/volvox_all.fna\"), new File(\n\t\t\t\t\t\t\"src/test/resources/volvox.gff3\"), false);\n\t\tMap<String, ProteinSequence> proteinSequenceList = GeneFeatureHelper\n\t\t\t\t.getProteinSequences(chromosomeSequenceList.values());\n\t\t// for(ProteinSequence proteinSequence : proteinSequenceList.values()){\n\t\t// logger.info(\"Output={}\", proteinSequence.getSequenceAsString());\n\t\t// }\n\t\tFile tmp = Files.createTempFile(\"volvox_all\",\"faa\").toFile();\n\t\ttmp.deleteOnExit();\n\t\tFastaWriterHelper.writeProteinSequence(tmp, proteinSequenceList.values());\n\t\tFileAssert.assertEquals(\"volvox_all_reference.faa and volvox_all.faa are not equal\", new File(\n\t\t\t\t\"src/test/resources/volvox_all_reference.faa\"), tmp);\n\t}\n\n\t/**\n\t * Test of getGeneSequences method, of class GeneFeatureHelper.\n\t */\n\t@Test\n\tpublic void testGetGeneSequences() throws Exception {\n\t\t// logger.info(\"getGeneSequences\");\n\t\tMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper\n\t\t\t\t.loadFastaAddGeneFeaturesFromGmodGFF3(new File(\"src/test/resources/volvox_all.fna\"), new File(\n\t\t\t\t\t\t\"src/test/resources/volvox.gff3\"), true);\n\t\tMap<String, GeneSequence> geneSequenceHashMap = GeneFeatureHelper\n\t\t\t\t.getGeneSequences(chromosomeSequenceList.values());\n\t\tCollection<GeneSequence> geneSequences = geneSequenceHashMap.values();\n\n\t\tFile tmp = Files.createTempFile(\"volvox_all_genes_exon_uppercase\",\"fna\").toFile();\n\t\ttmp.deleteOnExit();\n\t\tFastaWriterHelper.writeGeneSequence(tmp, geneSequences, true);\n\t}\n\n}\n","commitMessage":"Fix issue s1319 Declarations should use Java collection interfaces on biojava-core\n","test_commitMessage":"Fix issue s1319 Declarations should use Java collection interfaces on biojava-core\n","allZero":false}