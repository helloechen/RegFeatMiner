{"repository":"biojava","prod_path":"biojava3-sequencing/src/main/java/org/biojava3/sequencing/io/fastq/StreamingFastqParser.java","test_path":"biojava3-sequencing/src/test/java/org/biojava3/sequencing/io/fastq/StreamingFastqParserTest.java","prod_time":"2014-08-06 01:23:41","test_time":"2014-08-06 01:23:41","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":1,"add_classname_line":0,"add_condition_line":1,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":1,"add_return_line":0,"del_annotation_line":0,"del_call_line":1,"del_classname_line":0,"del_condition_line":1,"del_field_line":0,"del_import_line":2,"del_packageid_line":0,"del_parameter_line":3,"del_return_line":0,"label":"POSITIVE","prod_commitID":"074a50bcd47ad001c274495a0b59bb9c8c045748","test_commitID":"074a50bcd47ad001c274495a0b59bb9c8c045748","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\nimport java.io.Closeable;\nimport java.io.IOException;\n\nimport com.google.common.io.InputSupplier;\n\n/**\n * Event based parser for FASTQ formatted sequences.\n *\n * @since 3.0.3\n */\nfinal class StreamingFastqParser\n{\n\n    /**\n     * Stream the specified input supplier.\n     *\n     * @param supplier input supplier, must not be null\n     * @param variant FASTQ variant, must not be null\n     * @param listener event based reader callback, must not be null\n     * @throws IOException if an I/O error occurs\n     */\n    static <R extends Readable & Closeable> void stream(final InputSupplier<R> supplier,\n                                                        final FastqVariant variant,\n                                                        final StreamListener listener)\n        throws IOException\n    {\n        if (supplier == null)\n        {\n            throw new IllegalArgumentException(\"supplier must not be null\");\n        }\n        if (variant == null)\n        {\n            throw new IllegalArgumentException(\"variant must not be null\");\n        }\n        if (listener == null)\n        {\n            throw new IllegalArgumentException(\"listener must not be null\");\n        }\n\n        final FastqBuilder builder = new FastqBuilder().withVariant(variant);\n        FastqParser.parse(supplier, new ParseListener()\n            {\n                @Override\n                public void description(final String description) throws IOException\n                {\n                    builder.withDescription(description);\n                }\n\n                @Override\n                public void sequence(final String sequence) throws IOException\n                {\n                    builder.withSequence(sequence);\n                }\n\n                @Override\n                public void appendSequence(final String sequence) throws IOException\n                {\n                    builder.appendSequence(sequence);\n                }\n\n                @Override\n                public void repeatDescription(final String repeatDescription) throws IOException\n                {\n                    String description = builder.getDescription();\n                    if ((description != null) && (description.length() > 0) && (repeatDescription.length() > 0))\n                    {\n                        if (!description.equals(repeatDescription))\n                        {\n                            throw new IOException(\"repeat description must match description\");\n                        }\n                    }\n                }\n\n                /**\n                 * Validate the specified quality line.\n                 *\n                 * @param quality quality line to validate\n                 * @throws IOException if an I/O error occurs\n                 */\n                private void validateQuality(final String quality) throws IOException\n                {\n                    for (int i = 0, size = quality.length(); i < size; i++)\n                    {\n                        char c = quality.charAt(i);\n                        int qualityScore = variant.qualityScore(c);\n                        if (qualityScore < variant.minimumQualityScore() || qualityScore > variant.maximumQualityScore())\n                        {\n                            throw new IOException(\"quality score must be between \" + variant.minimumQualityScore() +\n                                                  \" and \" + variant.maximumQualityScore() + \", was \" + qualityScore +\n                                                  \" for ASCII char '\" + c + \"'\");\n                        }\n                    }\n                }\n\n                @Override\n                public void quality(final String quality) throws IOException\n                {\n                    validateQuality(quality);\n                    builder.withQuality(quality);\n                }\n\n                @Override\n                public void appendQuality(final String quality) throws IOException\n                {\n                    validateQuality(quality);\n                    builder.appendQuality(quality);\n                }\n\n                @Override\n                public void complete() throws IOException\n                {\n                    try\n                    {\n                        listener.fastq(builder.build());\n                    }\n                    catch (IllegalStateException e)\n                    {\n                        throw new IOException(\"caught an IllegalStateException\", e);\n                    }\n                }\n            });\n    }\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\nimport java.io.IOException;\n\n/**\n * Event based parser for FASTQ formatted sequences.\n *\n * @since 3.0.3\n */\nfinal class StreamingFastqParser\n{\n\n    /**\n     * Stream the specified readable.\n     *\n     * @param readable readable, must not be null\n     * @param variant FASTQ variant, must not be null\n     * @param listener event based reader callback, must not be null\n     * @throws IOException if an I/O error occurs\n     */\n    static void stream(final Readable readable, final FastqVariant variant, final StreamListener listener)\n        throws IOException\n    {\n        if (readable == null)\n        {\n            throw new IllegalArgumentException(\"readable must not be null\");\n        }\n        if (variant == null)\n        {\n            throw new IllegalArgumentException(\"variant must not be null\");\n        }\n        if (listener == null)\n        {\n            throw new IllegalArgumentException(\"listener must not be null\");\n        }\n\n        final FastqBuilder builder = new FastqBuilder().withVariant(variant);\n        FastqParser.parse(readable, new ParseListener()\n            {\n                @Override\n                public void description(final String description) throws IOException\n                {\n                    builder.withDescription(description);\n                }\n\n                @Override\n                public void sequence(final String sequence) throws IOException\n                {\n                    builder.withSequence(sequence);\n                }\n\n                @Override\n                public void appendSequence(final String sequence) throws IOException\n                {\n                    builder.appendSequence(sequence);\n                }\n\n                @Override\n                public void repeatDescription(final String repeatDescription) throws IOException\n                {\n                    String description = builder.getDescription();\n                    if ((description != null) && (description.length() > 0) && (repeatDescription.length() > 0))\n                    {\n                        if (!description.equals(repeatDescription))\n                        {\n                            throw new IOException(\"repeat description must match description\");\n                        }\n                    }\n                }\n\n                /**\n                 * Validate the specified quality line.\n                 *\n                 * @param quality quality line to validate\n                 * @throws IOException if an I/O error occurs\n                 */\n                private void validateQuality(final String quality) throws IOException\n                {\n                    for (int i = 0, size = quality.length(); i < size; i++)\n                    {\n                        char c = quality.charAt(i);\n                        int qualityScore = variant.qualityScore(c);\n                        if (qualityScore < variant.minimumQualityScore() || qualityScore > variant.maximumQualityScore())\n                        {\n                            throw new IOException(\"quality score must be between \" + variant.minimumQualityScore() +\n                                                  \" and \" + variant.maximumQualityScore() + \", was \" + qualityScore +\n                                                  \" for ASCII char '\" + c + \"'\");\n                        }\n                    }\n                }\n\n                @Override\n                public void quality(final String quality) throws IOException\n                {\n                    validateQuality(quality);\n                    builder.withQuality(quality);\n                }\n\n                @Override\n                public void appendQuality(final String quality) throws IOException\n                {\n                    validateQuality(quality);\n                    builder.appendQuality(quality);\n                }\n\n                @Override\n                public void complete() throws IOException\n                {\n                    try\n                    {\n                        listener.fastq(builder.build());\n                    }\n                    catch (IllegalStateException e)\n                    {\n                        throw new IOException(\"caught an IllegalStateException\", e);\n                    }\n                }\n            });\n    }\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\nimport java.io.IOException;\nimport java.io.StringReader;\n\nimport com.google.common.io.InputSupplier;\n\nimport junit.framework.TestCase;\n\n/**\n * Unit test for StreamingFastqParser.\n */\npublic class StreamingFastqParserTest extends TestCase\n{\n\n    public void testStreamNullSupplier() throws Exception\n    {\n        try\n        {\n            StreamingFastqParser.stream((InputSupplier<StringReader>) null, FastqVariant.FASTQ_SANGER, new StreamListener() {\n                @Override\n                public void fastq(final Fastq fastq) {\n                    // empty\n                }\n            });\n            fail(\"stream(null,,) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testStreamNullVariant() throws Exception\n    {\n        try\n        {\n            final String input = \"\";\n            InputSupplier<StringReader> supplier = new InputSupplier<StringReader>() {\n                @Override\n                public StringReader getInput() throws IOException {\n                    return new StringReader(input);\n                }\n            };\n            StreamingFastqParser.stream(supplier, null, new StreamListener() {\n                @Override\n                public void fastq(final Fastq fastq) {\n                    // empty\n                }\n            });\n            fail(\"stream(null,,) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testStreamNullListener() throws Exception\n    {\n        try\n        {\n            final String input = \"\";\n            StreamingFastqParser.stream(new InputSupplier<StringReader>() {\n                @Override\n                public StringReader getInput() throws IOException {\n                    return new StringReader(input);\n                }\n            }, FastqVariant.FASTQ_SANGER, null);\n            fail(\"stream(null,,) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\nimport java.io.IOException;\nimport java.io.StringReader;\n\nimport junit.framework.TestCase;\n\n/**\n * Unit test for StreamingFastqParser.\n */\npublic class StreamingFastqParserTest extends TestCase\n{\n\n    public void testStreamNullReadable() throws Exception\n    {\n        try\n        {\n            StreamingFastqParser.stream((Readable) null, FastqVariant.FASTQ_SANGER, new StreamListener() {\n                @Override\n                public void fastq(final Fastq fastq) {\n                    // empty\n                }\n            });\n            fail(\"stream(null,,) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testStreamNullVariant() throws Exception\n    {\n        try\n        {\n            final String input = \"\";\n            StreamingFastqParser.stream(new StringReader(input), null, new StreamListener() {\n                @Override\n                public void fastq(final Fastq fastq) {\n                    // empty\n                }\n            });\n            fail(\"stream(null,,) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testStreamNullListener() throws Exception\n    {\n        try\n        {\n            final String input = \"\";\n            StreamingFastqParser.stream(new StringReader(input), FastqVariant.FASTQ_SANGER, null);\n            fail(\"stream(null,,) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n}\n","commitMessage":"update guava to version 17.0, refactor methods that accept InputSupplier --> Readable\n","test_commitMessage":"update guava to version 17.0, refactor methods that accept InputSupplier --> Readable\n","allZero":false}