{"repository":"biojava","prod_path":"biojava3-sequencing/src/main/java/org/biojava3/sequencing/io/fastq/FastqBuilder.java","test_path":"biojava3-sequencing/src/test/java/org/biojava3/sequencing/io/fastq/FastqBuilderTest.java","prod_time":"2013-04-20 05:01:46","test_time":"2013-04-20 05:01:46","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":2,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":2,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"a7c12fcc3b184078f10c04ae5a9fd746ea9df78a","test_commitID":"a7c12fcc3b184078f10c04ae5a9fd746ea9df78a","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\n/**\n * Fluent builder API for creating FASTQ formatted sequences.\n *\n * @since 3.0.3\n */\npublic final class FastqBuilder\n{\n    /** Description for this FASTQ formatted sequence builder. */\n    private String description;\n\n    /** Sequence for this FASTQ formatted sequence builder. */\n    private StringBuilder sequence;\n\n    /** Quality scores for this FASTQ formatted sequence builder. */\n    private StringBuilder quality;\n\n    /** FASTQ sequence format variant for this FASTQ formatted sequence builder. */\n    private FastqVariant variant = DEFAULT_VARIANT;\n\n    /** Default FASTQ sequence format variant, <code>FastqVariant.FASTQ_SANGER</code>. */\n    public static final FastqVariant DEFAULT_VARIANT = FastqVariant.FASTQ_SANGER;\n\n\n    /**\n     * Create a new FASTQ formatted sequence builder.\n     */\n    public FastqBuilder()\n    {\n        // empty\n    }\n\n\n    /**\n     * Return the description for this FASTQ formatted sequence builder.\n     *\n     * @return the description for this FASTQ formatted sequence builder\n     */\n    public String getDescription()\n    {\n        return description;\n    }\n\n    /**\n     * Return this FASTQ formatted sequence builder configured with the specified description.\n     *\n     * @param description description for this FASTQ formatted sequence builder, must not be null\n     * @return this FASTQ formatted sequence builder configured with the specified description\n     */\n    public FastqBuilder withDescription(final String description)\n    {\n        if (description == null)\n        {\n            throw new IllegalArgumentException(\"description must not be null\");\n        }\n        this.description = description;\n        return this;\n    }\n\n    /**\n     * Return this FASTQ formatted sequence builder configured with the specified sequence.\n     *\n     * @param sequence sequence for this FASTQ formatted sequence builder, must not be null\n     * @return this FASTQ formatted sequence builder configured with the specified sequence\n     */\n    public FastqBuilder withSequence(final String sequence)\n    {\n        if (sequence == null)\n        {\n            throw new IllegalArgumentException(\"sequence must not be null\");\n        }\n        if (this.sequence == null)\n        {\n            this.sequence = new StringBuilder(sequence.length());\n        }\n        this.sequence.replace(0, this.sequence.length(), sequence);\n        return this;\n    }\n\n    /**\n     * Return this FASTQ formatted sequence builder configured with the specified sequence\n     * appended to its current sequence.\n     *\n     * @param sequence sequence to append to the sequence for this FASTQ formatted sequence builder, must not be null\n     * @return this FASTQ formatted sequence builder configured with the specified sequence\n     *    appended to its current sequence\n     */\n    public FastqBuilder appendSequence(final String sequence)\n    {\n        if (sequence == null)\n        {\n            throw new IllegalArgumentException(\"sequence must not be null\");\n        }\n        if (this.sequence == null)\n        {\n            this.sequence = new StringBuilder(sequence.length());\n        }\n        this.sequence.append(sequence);\n        return this;\n    }\n\n    /**\n     * Return this FASTQ formatted sequence builder configured with the specified quality scores.\n     *\n     * @param quality quality scores for this FASTQ formatted sequence builder, must not be null\n     * @return this FASTQ formatted sequence builder configured with the specified quality scores\n     */\n    public FastqBuilder withQuality(final String quality)\n    {\n        if (quality == null)\n        {\n            throw new IllegalArgumentException(\"quality must not be null\");\n        }\n        if (this.quality == null)\n        {\n            this.quality = new StringBuilder(quality.length());\n        }\n        this.quality.replace(0, this.quality.length(), quality);\n        return this;\n    }\n\n    /**\n     * Return this FASTQ formatted sequence builder configured with the specified quality scores\n     * appended to its current quality scores.\n     *\n     * @param quality quality scores to append to the quality scores for this FASTQ formatted sequence\n     *    builder, must not be null\n     * @return this FASTQ formatted sequence builder configured with the specified quality scores\n     *    appended to its current quality scores\n     */\n    public FastqBuilder appendQuality(final String quality)\n    {\n        if (quality == null)\n        {\n            throw new IllegalArgumentException(\"quality must not be null\");\n        }\n        if (this.quality == null)\n        {\n            this.quality = new StringBuilder(quality.length());\n        }\n        this.quality.append(quality);\n        return this;\n    }\n\n    /**\n     * Return true if the sequence and quality scores for this FASTQ formatted sequence builder are equal in length.\n     *\n     * @return true if the sequence and quality scores for this FASTQ formatted sequence builder are equal in length\n     */\n    public boolean sequenceAndQualityLengthsMatch()\n    {\n        // todo: null check?\n        return sequence.length() == quality.length();\n    }\n\n    /**\n     * Return this FASTQ formatted sequence builder configured with the specified FASTQ sequence format variant.\n     *\n     * @param variant FASTQ sequence format variant for this FASTQ formatted sequence builder, must not be null\n     * @return this FASTQ formatted sequence builder configured with the specified FASTQ sequence format variant\n     */\n    public FastqBuilder withVariant(final FastqVariant variant)\n    {\n        if (variant == null)\n        {\n            throw new IllegalArgumentException(\"variant must not be null\");\n        }\n        this.variant = variant;\n        return this;\n    }\n\n    /**\n     * Build and return a new FASTQ formatted sequence configured from the properties of this builder.\n     *\n     * @return a new FASTQ formatted sequence configured from the properties of this builder\n     * @throws IllegalStateException if the configuration of this builder results in an illegal state\n     */\n    public Fastq build()\n    {\n        if (description == null)\n        {\n            throw new IllegalStateException(\"description must not be null\");\n        }\n        if (sequence == null)\n        {\n            throw new IllegalStateException(\"sequence must not be null\");\n        }\n        if (quality == null)\n        {\n            throw new IllegalStateException(\"quality must not be null\");\n        }\n        if (!sequenceAndQualityLengthsMatch())\n        {\n            throw new IllegalStateException(\"sequence and quality scores must be the same length\");\n        }\n        Fastq fastq = new Fastq(description, sequence.toString(), quality.toString(), variant);\n        return fastq;\n    }\n}","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\n/**\n * Fluent builder API for creating FASTQ formatted sequences.\n *\n * @since 3.0.3\n */\npublic final class FastqBuilder\n{\n    /** Description for this FASTQ formatted sequence builder. */\n    private String description;\n\n    /** Sequence for this FASTQ formatted sequence builder. */\n    private StringBuilder sequence;\n\n    /** Quality scores for this FASTQ formatted sequence builder. */\n    private StringBuilder quality;\n\n    /** FASTQ sequence format variant for this FASTQ formatted sequence builder. */\n    private FastqVariant variant = DEFAULT_VARIANT;\n\n    /** Default FASTQ sequence format variant, <code>FastqVariant.FASTQ_SANGER</code>. */\n    public static final FastqVariant DEFAULT_VARIANT = FastqVariant.FASTQ_SANGER;\n\n\n    /**\n     * Create a new FASTQ formatted sequence builder.\n     */\n    public FastqBuilder()\n    {\n        // empty\n    }\n\n\n    /**\n     * Return the description for this FASTQ formatted sequence builder.\n     *\n     * @return the description for this FASTQ formatted sequence builder\n     */\n    public String getDescription()\n    {\n        return description;\n    }\n\n    /**\n     * Return this FASTQ formatted sequence builder configured with the specified description.\n     *\n     * @param description description for this FASTQ formatted sequence builder, must not be null\n     * @return this FASTQ formatted sequence builder configured with the specified description\n     */\n    public FastqBuilder withDescription(final String description)\n    {\n        if (description == null)\n        {\n            throw new IllegalArgumentException(\"description must not be null\");\n        }\n        this.description = description;\n        return this;\n    }\n\n    /**\n     * Return this FASTQ formatted sequence builder configured with the specified sequence.\n     *\n     * @param sequence sequence for this FASTQ formatted sequence builder, must not be null\n     * @return this FASTQ formatted sequence builder configured with the specified sequence\n     */\n    public FastqBuilder withSequence(final String sequence)\n    {\n        if (sequence == null)\n        {\n            throw new IllegalArgumentException(\"sequence must not be null\");\n        }\n        if (this.sequence == null)\n        {\n            this.sequence = new StringBuilder(sequence.length());\n        }\n        this.sequence.replace(0, this.sequence.length(), sequence);\n        return this;\n    }\n\n    /**\n     * Return this FASTQ formatted sequence builder configured with the specified sequence\n     * appended to its current sequence.\n     *\n     * @param sequence sequence to append to the sequence for this FASTQ formatted sequence builder, must not be null\n     * @return this FASTQ formatted sequence builder configured with the specified sequence\n     *    appended to its current sequence\n     */\n    public FastqBuilder appendSequence(final String sequence)\n    {\n        if (sequence == null)\n        {\n            throw new IllegalArgumentException(\"sequence must not be null\");\n        }\n        if (this.sequence == null)\n        {\n            this.sequence = new StringBuilder(sequence.length());\n        }\n        this.sequence.append(sequence);\n        return this;\n    }\n\n    /**\n     * Return this FASTQ formatted sequence builder configured with the specified quality scores.\n     *\n     * @param quality quality scores for this FASTQ formatted sequence builder, must not be null\n     * @return this FASTQ formatted sequence builder configured with the specified quality scores\n     */\n    public FastqBuilder withQuality(final String quality)\n    {\n        if (quality == null)\n        {\n            throw new IllegalArgumentException(\"quality must not be null\");\n        }\n        if (this.quality == null)\n        {\n            this.quality = new StringBuilder(quality.length());\n        }\n        this.quality.replace(0, this.quality.length(), quality);\n        return this;\n    }\n\n    /**\n     * Return this FASTQ formatted sequence builder configured with the specified quality scores\n     * appended to its current quality scores.\n     *\n     * @param quality quality scores to append to the quality scores for this FASTQ formatted sequence\n     *    builder, must not be null\n     * @return this FASTQ formatted sequence builder configured with the specified quality scores\n     *    appended to its current quality scores\n     */\n    public FastqBuilder appendQuality(final String quality)\n    {\n        if (quality == null)\n        {\n            throw new IllegalArgumentException(\"quality must not be null\");\n        }\n        if (this.quality == null)\n        {\n            this.quality = new StringBuilder(quality.length());\n        }\n        this.quality.append(quality);\n        return this;\n    }\n\n    /**\n     * Return true if the sequence and quality scores for this FASTQ formatted sequence builder are equal in length.\n     *\n     * @return true if the sequence and quality scores for this FASTQ formatted sequence builder are equal in length\n     */\n    public boolean sequenceAndQualityLengthsMatch()\n    {\n        if (sequence == null && quality == null)\n        {\n            return true;\n        }\n        if ((sequence != null && quality == null) || (sequence == null && quality != null))\n        {\n            return false;\n        }\n        return sequence.length() == quality.length();\n    }\n\n    /**\n     * Return this FASTQ formatted sequence builder configured with the specified FASTQ sequence format variant.\n     *\n     * @param variant FASTQ sequence format variant for this FASTQ formatted sequence builder, must not be null\n     * @return this FASTQ formatted sequence builder configured with the specified FASTQ sequence format variant\n     */\n    public FastqBuilder withVariant(final FastqVariant variant)\n    {\n        if (variant == null)\n        {\n            throw new IllegalArgumentException(\"variant must not be null\");\n        }\n        this.variant = variant;\n        return this;\n    }\n\n    /**\n     * Build and return a new FASTQ formatted sequence configured from the properties of this builder.\n     *\n     * @return a new FASTQ formatted sequence configured from the properties of this builder\n     * @throws IllegalStateException if the configuration of this builder results in an illegal state\n     */\n    public Fastq build()\n    {\n        if (description == null)\n        {\n            throw new IllegalStateException(\"description must not be null\");\n        }\n        if (sequence == null)\n        {\n            throw new IllegalStateException(\"sequence must not be null\");\n        }\n        if (quality == null)\n        {\n            throw new IllegalStateException(\"quality must not be null\");\n        }\n        if (!sequenceAndQualityLengthsMatch())\n        {\n            throw new IllegalStateException(\"sequence and quality scores must be the same length\");\n        }\n        Fastq fastq = new Fastq(description, sequence.toString(), quality.toString(), variant);\n        return fastq;\n    }\n}","originTest":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava3.sequencing.io.fastq;\r\n\r\nimport junit.framework.TestCase;\r\n\r\n/**\r\n * Unit test for FastqBuilder.\r\n */\r\npublic final class FastqBuilderTest\r\n    extends TestCase\r\n{\r\n\r\n    public void testConstructor()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder();\r\n        assertNotNull(fastqBuilder);\r\n    }\r\n\r\n    public void testBuildDefault()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder();\r\n            fastqBuilder.build();\r\n            fail(\"build default expected IllegalStateException\");\r\n        }\r\n        catch (IllegalStateException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildNullDescription()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(null)\r\n                .withSequence(\"sequence\")\r\n                .withQuality(\"quality_\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build null description expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildNullSequence()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withSequence(null)\r\n                .withQuality(\"quality_\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build null sequence expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildNullAppendSequence()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .appendSequence(null)\r\n                .withQuality(\"quality_\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build null append sequence expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildNullQuality()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withSequence(\"sequence\")\r\n                .withQuality(null)\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build null quality expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildNullAppendQuality()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withSequence(\"sequence\")\r\n                .appendQuality(null)\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build null append quality expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildNullVariant()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withSequence(\"sequence\")\r\n                .withQuality(\"quality_\")\r\n                .withVariant(null);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build null variant expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildMissingDescription()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withSequence(\"sequence\")\r\n                .withQuality(\"quality_\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build missing description expected IllegalStateException\");\r\n        }\r\n        catch (IllegalStateException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildMissingSequence()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withQuality(\"quality_\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build missing sequence expected IllegalStateException\");\r\n        }\r\n        catch (IllegalStateException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildMissingQuality()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withSequence(\"sequence\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build missing quality expected IllegalStateException\");\r\n        }\r\n        catch (IllegalStateException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildDefaultVariant()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withSequence(\"sequence\")\r\n            .withQuality(\"quality_\");\r\n\r\n        Fastq fastq = fastqBuilder.build();\r\n        assertEquals(\"description\", fastqBuilder.getDescription());\r\n        assertTrue(fastqBuilder.sequenceAndQualityLengthsMatch());\r\n        assertEquals(\"description\", fastq.getDescription());\r\n        assertEquals(\"sequence\", fastq.getSequence());\r\n        assertEquals(\"quality_\", fastq.getQuality());\r\n        assertEquals(FastqBuilder.DEFAULT_VARIANT, fastq.getVariant());\r\n    }\r\n\r\n    public void testBuild()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withSequence(\"sequence\")\r\n            .withQuality(\"quality_\")\r\n            .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n        Fastq fastq = fastqBuilder.build();\r\n        assertEquals(\"description\", fastqBuilder.getDescription());\r\n        assertTrue(fastqBuilder.sequenceAndQualityLengthsMatch());\r\n        assertEquals(\"description\", fastq.getDescription());\r\n        assertEquals(\"sequence\", fastq.getSequence());\r\n        assertEquals(\"quality_\", fastq.getQuality());\r\n        assertEquals(FastqVariant.FASTQ_SOLEXA, fastq.getVariant());\r\n    }\r\n\r\n    public void testBuildAppendSequence()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .appendSequence(\"seq\")\r\n            .appendSequence(\"uence\")\r\n            .withQuality(\"quality_\")\r\n            .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n        Fastq fastq = fastqBuilder.build();\r\n        assertEquals(\"description\", fastqBuilder.getDescription());\r\n        assertTrue(fastqBuilder.sequenceAndQualityLengthsMatch());\r\n        assertEquals(\"description\", fastq.getDescription());\r\n        assertEquals(\"sequence\", fastq.getSequence());\r\n        assertEquals(\"quality_\", fastq.getQuality());\r\n        assertEquals(FastqVariant.FASTQ_SOLEXA, fastq.getVariant());\r\n    }\r\n\r\n    public void testBuildAppendQuality()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withSequence(\"sequence\")\r\n            .appendQuality(\"qual\")\r\n            .appendQuality(\"ity_\")\r\n            .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n        Fastq fastq = fastqBuilder.build();\r\n        assertEquals(\"description\", fastqBuilder.getDescription());\r\n        assertTrue(fastqBuilder.sequenceAndQualityLengthsMatch());\r\n        assertEquals(\"description\", fastq.getDescription());\r\n        assertEquals(\"sequence\", fastq.getSequence());\r\n        assertEquals(\"quality_\", fastq.getQuality());\r\n        assertEquals(FastqVariant.FASTQ_SOLEXA, fastq.getVariant());\r\n    }\r\n\r\n    public void testBuildNonMatchingSequenceQualityScoreLengths0()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withSequence(\"01234\")\r\n                .withQuality(\"0123\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build sequence length > quality length expected IllegalStateException\");\r\n        }\r\n        catch (IllegalStateException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildNonMatchingSequenceQualityScoreLengths1()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withSequence(\"0123\")\r\n                .withQuality(\"01234\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build sequence length < quality length expected IllegalStateException\");\r\n        }\r\n        catch (IllegalStateException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildMultiple()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withQuality(\"quality__\")\r\n            .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n        for (int i = 0; i < 10; i++)\r\n        {\r\n            Fastq fastq = fastqBuilder.withSequence(\"sequence\" + i).build();\r\n            assertEquals(\"description\", fastqBuilder.getDescription());\r\n            assertTrue(fastqBuilder.sequenceAndQualityLengthsMatch());\r\n            assertEquals(\"description\", fastq.getDescription());\r\n            assertEquals(\"sequence\" + i, fastq.getSequence());\r\n            assertEquals(\"quality__\", fastq.getQuality());\r\n            assertEquals(FastqVariant.FASTQ_SOLEXA, fastq.getVariant());\r\n        }\r\n    }\r\n}","changedTest":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava3.sequencing.io.fastq;\r\n\r\nimport junit.framework.TestCase;\r\n\r\n/**\r\n * Unit test for FastqBuilder.\r\n */\r\npublic final class FastqBuilderTest\r\n    extends TestCase\r\n{\r\n\r\n    public void testConstructor()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder();\r\n        assertNotNull(fastqBuilder);\r\n    }\r\n\r\n    public void testBuildDefault()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder();\r\n            fastqBuilder.build();\r\n            fail(\"build default expected IllegalStateException\");\r\n        }\r\n        catch (IllegalStateException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildNullDescription()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(null)\r\n                .withSequence(\"sequence\")\r\n                .withQuality(\"quality_\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build null description expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildNullSequence()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withSequence(null)\r\n                .withQuality(\"quality_\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build null sequence expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildNullAppendSequence()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .appendSequence(null)\r\n                .withQuality(\"quality_\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build null append sequence expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildNullQuality()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withSequence(\"sequence\")\r\n                .withQuality(null)\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build null quality expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildNullAppendQuality()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withSequence(\"sequence\")\r\n                .appendQuality(null)\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build null append quality expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildNullVariant()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withSequence(\"sequence\")\r\n                .withQuality(\"quality_\")\r\n                .withVariant(null);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build null variant expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildMissingDescription()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withSequence(\"sequence\")\r\n                .withQuality(\"quality_\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build missing description expected IllegalStateException\");\r\n        }\r\n        catch (IllegalStateException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildMissingSequence()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withQuality(\"quality_\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build missing sequence expected IllegalStateException\");\r\n        }\r\n        catch (IllegalStateException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildMissingQuality()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withSequence(\"sequence\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build missing quality expected IllegalStateException\");\r\n        }\r\n        catch (IllegalStateException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildDefaultVariant()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withSequence(\"sequence\")\r\n            .withQuality(\"quality_\");\r\n\r\n        Fastq fastq = fastqBuilder.build();\r\n        assertEquals(\"description\", fastqBuilder.getDescription());\r\n        assertTrue(fastqBuilder.sequenceAndQualityLengthsMatch());\r\n        assertEquals(\"description\", fastq.getDescription());\r\n        assertEquals(\"sequence\", fastq.getSequence());\r\n        assertEquals(\"quality_\", fastq.getQuality());\r\n        assertEquals(FastqBuilder.DEFAULT_VARIANT, fastq.getVariant());\r\n    }\r\n\r\n    public void testBuild()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withSequence(\"sequence\")\r\n            .withQuality(\"quality_\")\r\n            .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n        Fastq fastq = fastqBuilder.build();\r\n        assertEquals(\"description\", fastqBuilder.getDescription());\r\n        assertTrue(fastqBuilder.sequenceAndQualityLengthsMatch());\r\n        assertEquals(\"description\", fastq.getDescription());\r\n        assertEquals(\"sequence\", fastq.getSequence());\r\n        assertEquals(\"quality_\", fastq.getQuality());\r\n        assertEquals(FastqVariant.FASTQ_SOLEXA, fastq.getVariant());\r\n    }\r\n\r\n    public void testBuildAppendSequence()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .appendSequence(\"seq\")\r\n            .appendSequence(\"uence\")\r\n            .withQuality(\"quality_\")\r\n            .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n        Fastq fastq = fastqBuilder.build();\r\n        assertEquals(\"description\", fastqBuilder.getDescription());\r\n        assertTrue(fastqBuilder.sequenceAndQualityLengthsMatch());\r\n        assertEquals(\"description\", fastq.getDescription());\r\n        assertEquals(\"sequence\", fastq.getSequence());\r\n        assertEquals(\"quality_\", fastq.getQuality());\r\n        assertEquals(FastqVariant.FASTQ_SOLEXA, fastq.getVariant());\r\n    }\r\n\r\n    public void testBuildAppendQuality()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withSequence(\"sequence\")\r\n            .appendQuality(\"qual\")\r\n            .appendQuality(\"ity_\")\r\n            .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n        Fastq fastq = fastqBuilder.build();\r\n        assertEquals(\"description\", fastqBuilder.getDescription());\r\n        assertTrue(fastqBuilder.sequenceAndQualityLengthsMatch());\r\n        assertEquals(\"description\", fastq.getDescription());\r\n        assertEquals(\"sequence\", fastq.getSequence());\r\n        assertEquals(\"quality_\", fastq.getQuality());\r\n        assertEquals(FastqVariant.FASTQ_SOLEXA, fastq.getVariant());\r\n    }\r\n\r\n    public void testBuildNonMatchingSequenceQualityScoreLengthsBothNull()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n        assertTrue(fastqBuilder.sequenceAndQualityLengthsMatch());\r\n    }\r\n\r\n    public void testBuildNonMatchingSequenceQualityScoreLengthsSequenceNull()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withQuality(\"0123\")\r\n            .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n        assertEquals(false, fastqBuilder.sequenceAndQualityLengthsMatch());\r\n    }\r\n\r\n    public void testBuildNonMatchingSequenceQualityScoreLengthsQualityNull()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withSequence(\"ACTG\")\r\n            .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n        assertEquals(false, fastqBuilder.sequenceAndQualityLengthsMatch());\r\n    }\r\n\r\n    public void testBuildNonMatchingSequenceQualityScoreLengths0()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withSequence(\"01234\")\r\n                .withQuality(\"0123\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build sequence length > quality length expected IllegalStateException\");\r\n        }\r\n        catch (IllegalStateException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildNonMatchingSequenceQualityScoreLengths1()\r\n    {\r\n        try\r\n        {\r\n            FastqBuilder fastqBuilder = new FastqBuilder()\r\n                .withDescription(\"description\")\r\n                .withSequence(\"0123\")\r\n                .withQuality(\"01234\")\r\n                .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n            fastqBuilder.build();\r\n            fail(\"build sequence length < quality length expected IllegalStateException\");\r\n        }\r\n        catch (IllegalStateException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testBuildMultiple()\r\n    {\r\n        FastqBuilder fastqBuilder = new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withQuality(\"quality__\")\r\n            .withVariant(FastqVariant.FASTQ_SOLEXA);\r\n\r\n        for (int i = 0; i < 10; i++)\r\n        {\r\n            Fastq fastq = fastqBuilder.withSequence(\"sequence\" + i).build();\r\n            assertEquals(\"description\", fastqBuilder.getDescription());\r\n            assertTrue(fastqBuilder.sequenceAndQualityLengthsMatch());\r\n            assertEquals(\"description\", fastq.getDescription());\r\n            assertEquals(\"sequence\" + i, fastq.getSequence());\r\n            assertEquals(\"quality__\", fastq.getQuality());\r\n            assertEquals(FastqVariant.FASTQ_SOLEXA, fastq.getVariant());\r\n        }\r\n    }\r\n}","commitMessage":"add null check to sequence and quality lengths match\n","test_commitMessage":"add null check to sequence and quality lengths match\n","allZero":false}