{"repository":"biojava","prod_path":"biojava-structure/src/main/java/org/biojava/nbio/structure/Element.java","test_path":"biojava-structure/src/test/java/org/biojava/nbio/structure/ElementTest.java","prod_time":"2023-05-21 23:40:41","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":1,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":1,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"86307e962b30dc805cf3b1476133985120600037","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 29.04.2010\n *\n */\npackage org.biojava.nbio.structure;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Element is an enumeration of the elements of the periodic table. In addition,\n * several attributes of each element are accessible.\n * <B>Note:</B> Deuterium and Tritium are treated as separate elements D and T,\n * respectively. Sometimes part of a molecule is represented as an R-group, which\n * is represented as the element R.\n *\n *\n * @author Peter Rose\n * @version %I% %G%\n * @since 3.0\n *\n */\n\npublic enum Element {\n\n\t// most frequently used elements first\n\tH(1, 1, 39, 1.10f, 0.32f, 1, 1, 1, 1, 1, 1.008f, 0, 1, new int[] {1}, 2.20f, ElementType.OTHER_NONMETAL),\n\tC(6, 2, 0, 1.55f, 0.77f, 4, 4, 4, 4, 4, 12.011f, 2, -4, new int[] {-4,-3,-2,0,-1,1,2,3,4}, 2.55f, ElementType.OTHER_NONMETAL),\n\tN(7, 2, 57, 1.40f, 0.75f, 5, 2, 5, 3, 4, 14.007f, 2, -3, new int[] {-3,-2,-1,0,1,2,3,4,5}, 3.04f, ElementType.OTHER_NONMETAL),\n\tO(8, 2, 65, 1.35f, 0.73f, 6, 1, 2, 2, 2, 16.000f, 2, -2, new int[] {-2,-1,0,1,2}, 3.44f, ElementType.OTHER_NONMETAL),\n\t/**\n\t * Deuterium\n\t */\n\tD(1, 1, 27, 1.10f, 0.32f, 1, 1, 1, 1, 1, 1.008f, 0, 1, new int[] {0,1}, 2.20f, ElementType.OTHER_NONMETAL), // need to edit properties!\n\t/**\n\t * Tritium\n\t */\n\tT(1, 1, 90, 1.10f, 0.32f, 1, 1, 1, 1, 1, 1.008f, 0, 1, new int[] {0,1}, 2.20f, ElementType.OTHER_NONMETAL), // need to edit properties!\n\tHe(2, 1, 40, 2.20f, 1.60f, 2, 0, 12, 0, 0, 4.003f, 2, 0, new int[] {0}, 0.0f, ElementType.NOBLE_GAS), // electroneg not reported\n\tLi(3, 2, 50, 1.22f, 1.34f, 1, 0, 12, 0, 1, 6.940f, 2, 1, new int[] {0,1}, 0.98f, ElementType.ALKALI_METAL),\n\tBe(4, 2, 12, 0.63f, 0.90f, 2, 0, 12, 2, 2, 9.012f, 2, 2, new int[] {0,1,2}, 1.57f, ElementType.TRANSITION_METAL),\n\tB(5, 2, 10, 1.55f, 0.82f, 3, 3, 5, 3, 4, 10.810f, 2, 3, new int[] {0,1,2,3}, 2.04f, ElementType.METALLOID),\n\tF(9, 2, 32, 1.30f, 0.72f, 7, 0, 1, 1, 1, 18.998f, 2, -1, new int[] {-1,0,1}, 3.98f, ElementType.HALOGEN),\n\tNe(10, 2, 61, 2.02f, 1.12f, 8, 0, 12, 0, 0, 20.170f, 10, 0, new int[] {}, 0.00f, ElementType.NOBLE_GAS), // electroneg not reported\n\tNa(11, 3, 58, 2.20f, 1.54f, 1, 0, 1, 0, 0, 22.990f, 10, 1, new int[] {-1,0,1}, 0.93f, ElementType.ALKALI_METAL),\n\tMg(12, 3, 54, 1.50f, 1.30f, 2, 0, 2, 0, 2, 24.305f, 10, 2, new int[] {0,1,2}, 1.31f, ElementType.ALKALINE_EARTH_METAL),\n\tAl(13, 3, 4, 1.50f, 1.18f, 3, 0, 5, 0, 4, 26.982f, 10, 3, new int[] {0,1,2,3}, 1.61f, ElementType.POST_TRANSITION_METAL),\n\tSi(14, 3, 86, 2.20f, 1.11f, 4, 4, 4, 4, 4, 28.086f, 10, 4, new int[] {-4,-3,-2,-1,0,1,2,3,4}, 1.90f, ElementType.METALLOID),\n\tP(15, 3, 67, 1.88f, 1.06f, 5, 3, 5, 3, 5, 30.974f, 10, 5, new int[] {-3,-2,-1,0,1,2,3,4,5}, 2.19f, ElementType.OTHER_NONMETAL),\n\tS(16, 3, 82, 1.81f, 1.02f, 6, 2, 6, 2, 6, 32.060f, 10, -2, new int[] {-2,-1,0,1,2,3,4,5,6}, 2.58f, ElementType.OTHER_NONMETAL),\n\tCl(17, 3, 21, 1.75f, 0.99f, 7, 0, 1, 1, 1, 35.453f, 10, -1, new int[] {-1,0,1,2,3,4,5,6,7}, 3.16f, ElementType.HALOGEN),\n\tAr(18, 4, 6, 2.77f, 1.54f, 8, 0, 12, 0, 0, 39.948f, 18, 0, new int[] {0}, 0.00f, ElementType.NOBLE_GAS), // electroneg not reported\n\tK(19, 4, 47, 2.39f, 1.96f, 1, 0, 12, 0, 0, 39.102f, 18, 1, new int[] {-1,0,1}, 0.82f, ElementType.ALKALI_METAL),\n\tCa(20, 4, 17, 1.95f, 1.74f, 2, 0, 2, 0, 0, 40.080f, 18, 2, new int[] {0,1,2}, 1.00f, ElementType.ALKALINE_EARTH_METAL),\n\tSc(21, 4, 84, 1.32f, 1.44f, 3, 0, 12, 3, 0, 44.956f, 18, 3, new int[] {0,1,2,3}, 1.36f, ElementType.TRANSITION_METAL),\n\tTi(22, 4, 96, 1.95f, 1.36f, 4, 2, 4, 3, 4, 47.880f, 18, 4, new int[] {-1,0,1,2,3,4}, 1.54f, ElementType.TRANSITION_METAL),\n\tV(23, 4, 100, 1.06f, 1.25f, 5, 0, 12, 3, 0, 50.040f, 18, 5, new int[] {-1,0,1,2,3,4,5}, 1.63f, ElementType.TRANSITION_METAL),\n\tCr(24, 4, 24, 1.13f, 1.27f, 6, 0, 12, 2, 0, 51.996f, 18, 3, new int[] {-2,-1,0,1,2,3,4,5,6}, 1.66f, ElementType.TRANSITION_METAL),\n\tMn(25, 4, 55, 1.19f, 1.39f, 7, 0, 12, 0, 0, 54.938f, 18, 2, new int[] {-3,-2,-1,0,1,2,3,4,5,6,7}, 1.55f, ElementType.TRANSITION_METAL),\n\tFe(26, 4, 33, 1.95f, 1.25f, 3, 0, 8, 0, 0, 55.847f, 18, 3, new int[] {-2,-1,0,1,2,3,4,5,6}, 1.83f, ElementType.TRANSITION_METAL),\n\tCo(27, 4, 23, 1.13f, 1.26f, 3, 0, 12, 0, 0, 58.933f, 18, 2, new int[] {-1,0,1,2,3,4,5}, 1.88f, ElementType.TRANSITION_METAL),\n\tNi(28, 4, 62, 1.24f, 1.21f, 3, 0, 12, 0, 0, 58.710f, 18, 2, new int[] {-1,0,1,2,3,4}, 1.91f, ElementType.TRANSITION_METAL),\n\tCu(29, 4, 26, 1.15f, 1.38f, 2, 0, 4, 0, 0, 63.546f, 18, 2, new int[] {0,1,2,3,4}, 1.90f, ElementType.TRANSITION_METAL),\n\tZn(30, 4, 106, 1.15f, 1.31f, 2, 0, 2, 0, 0, 65.380f, 18, 2, new int[] {0,1,2}, 1.65f, ElementType.TRANSITION_METAL),\n\tGa(31, 4, 36, 1.55f, 1.26f, 3, 1, 4, 2, 4, 69.720f, 28, 3, new int[] {0,1,2,3}, 1.81f, ElementType.POST_TRANSITION_METAL),\n\tGe(32, 4, 38, 2.72f, 1.22f, 4, 0, 12, 4, 4, 72.590f, 28, 4, new int[] {-4,-3,-2,-1,0,1,2,3,4}, 2.01f, ElementType.METALLOID),\n\tAs(33, 4, 7, 0.83f, 1.19f, 5, 0, 12, 3, 5, 74.922f, 28, -3, new int[] {-3,0,1,2,3,5}, 2.18f, ElementType.METALLOID),\n\tSe(34, 4, 85, 0.90f, 1.16f, 6, 0, 12, 2, 6, 78.960f, 28, 4, new int[] {-2,0,1,2,4,6}, 2.55f, ElementType.OTHER_NONMETAL),\n\tBr(35, 4, 15, 1.95f, 1.14f, 7, 0, 1, 1, 1, 79.904f, 28, -1, new int[] {-1,0,1,2,3,4,5,7}, 2.96f, ElementType.HALOGEN),\n\tKr(36, 4, 48, 1.90f, 1.60f, 8, 0, 12, 0, 0, 83.800f, 28, 0, new int[] {0,2}, 3.00f, ElementType.NOBLE_GAS),\n\tRb(37, 5, 77, 2.65f, 2.11f, 1, 0, 12, 0, 0, 85.467f, 36, 1, new int[] {-1,0,1}, 0.82f, ElementType.ALKALI_METAL),\n\tSr(38, 5, 89, 2.02f, 1.92f, 2, 0, 12, 2, 0, 87.620f, 36, 2, new int[] {0,1,2}, 0.95f, ElementType.ALKALINE_EARTH_METAL),\n\tY(39, 5, 103, 1.61f, 1.62f, 3, 0, 12, 3, 0, 88.806f, 36, 3, new int[] {0,1,2,3}, 1.22f, ElementType.TRANSITION_METAL),\n\tZr(40, 5, 105, 1.42f, 1.48f, 4, 0, 12, 4, 0, 91.220f, 36, 4, new int[] {0,1,2,3,4}, 1.33f, ElementType.TRANSITION_METAL),\n\tNb(41, 5, 59, 1.33f, 1.37f, 5, 0, 12, 3, 0, 92.906f, 36, 5, new int[] {-1,0,1,2,3,4,5}, 1.60f, ElementType.TRANSITION_METAL),\n\tMo(42, 5, 56, 1.75f, 1.45f, 6, 1, 6, 3, 0, 95.940f, 36, 6, new int[] {-2,-1,0,1,2,3,4,5,6}, 2.16f, ElementType.TRANSITION_METAL),\n\tTc(43, 5, 93, 1.80f, 1.56f, 7, 0, 12, 6, 0, 98.910f, 36, 7, new int[] {-3,-1,0,1,2,3,4,5,6,7}, 1.90f, ElementType.TRANSITION_METAL),\n\tRu(44, 5, 81, 1.20f, 1.26f, 8, 0, 12, 3, 0, 101.070f, 36, 4, new int[] {-2,0,1,2,3,4,5,6,7,8}, 2.20f, ElementType.TRANSITION_METAL),\n\tRh(45, 5, 79, 1.22f, 1.35f, 4, 0, 12, 3, 0, 102.906f, 36, 3, new int[] {-1,0,1,2,3,4,5,6}, 2.28f, ElementType.TRANSITION_METAL),\n\tPd(46, 5, 70, 1.44f, 1.31f, 4, 0, 12, 2, 0, 106.400f, 36, 2, new int[] {0,1,2,4}, 2.20f, ElementType.TRANSITION_METAL),\n\tAg(47, 5, 3, 1.55f, 1.53f, 1, 0, 6, 0, 0, 107.868f, 36, 1, new int[] {0,1,2,3,4}, 1.93f, ElementType.TRANSITION_METAL),\n\tCd(48, 5, 18, 1.75f, 1.48f, 2, 0, 12, 0, 0, 112.400f, 36, 2, new int[] {0,1,2}, 1.69f, ElementType.TRANSITION_METAL),\n\tIn(49, 5, 45, 1.46f, 1.44f, 3, 0, 12, 3, 0, 114.820f, 46, 3, new int[] {0,1,2,3}, 1.78f, ElementType.POST_TRANSITION_METAL),\n\tSn(50, 5, 88, 1.67f, 1.41f, 4, 0, 12, 2, 4, 118.690f, 46, 4, new int[] {-4,0,2,4}, 1.96f, ElementType.POST_TRANSITION_METAL),\n\tSb(51, 5, 83, 1.12f, 1.38f, 5, 0, 12, 4, 5, 121.750f, 46, -3, new int[] {-3,0,3,5}, 2.05f, ElementType.METALLOID),\n\tTe(52, 5, 94, 1.26f, 1.35f, 6, 0, 12, 2, 6, 127.600f, 46, 4, new int[] {-2,0,2,4,5,6}, 2.10f, ElementType.METALLOID),\n\tI(53, 5, 44, 2.15f, 1.33f, 7, 1, 1, 1, 1, 126.905f, 46, -1, new int[] {-1,0,1,3,4,5,7}, 2.66f, ElementType.HALOGEN),\n\tXe(54, 5, 102, 2.10f, 1.70f, 8, 0, 12, 0, 0, 131.300f, 46, 0, new int[] {0,1,2,4,6,8}, 2.60f, ElementType.NOBLE_GAS),\n\tCs(55, 6, 25, 3.01f, 2.25f, 1, 0, 12, 0, 0, 132.905f, 54, 1, new int[] {-1,0,1}, 0.79f, ElementType.ALKALI_METAL),\n\tBa(56, 6, 11, 2.41f, 1.98f, 2, 0, 12, 0, 0, 137.340f, 54, 2, new int[] {0,2}, 0.89f, ElementType.ALKALINE_EARTH_METAL),\n\tLa(57, 6, 49, 1.83f, 1.95f, 3, 0, 12, 3, 0, 138.905f, 54, 3, new int[] {0,2,3}, 1.10f, ElementType.LANTHANOID),\n\tCe(58, 6, 19, 1.86f, 1.03f, 4, 0, 12, 3, 0, 140.120f, 54, 3, new int[] {0,2,3,4}, 1.12f, ElementType.LANTHANOID),\n\tPr(59, 6, 73, 1.62f, 0.90f, 4, 0, 12, 3, 0, 140.908f, 55, 3, new int[] {0,2,3,4}, 1.13f, ElementType.LANTHANOID),\n\tNd(60, 6, 60, 1.79f, 0.99f, 3, 0, 12, 3, 0, 144.240f, 56, 3, new int[] {0,2,3,4}, 1.14f, ElementType.LANTHANOID),\n\tPm(61, 6, 71, 1.76f, 0.98f, 3, 0, 12, 3, 0, 145.000f, 58, 3, new int[] {0,2,3}, 1.13f, ElementType.LANTHANOID),\n\tSm(62, 6, 87, 1.74f, 0.96f, 3, 0, 12, 2, 0, 150.400f, 59, 3, new int[] {0,2,3}, 1.17f, ElementType.LANTHANOID),\n\tEu(63, 6, 31, 1.96f, 1.09f, 3, 0, 12, 2, 0, 151.960f, 60, 3, new int[] {0,2,3}, 1.20f, ElementType.LANTHANOID),\n\tGd(64, 6, 37, 1.69f, 0.94f, 3, 0, 12, 3, 0, 157.250f, 61, 3, new int[] {0,1,2,3}, 1.20f, ElementType.LANTHANOID),\n\tTb(65, 6, 92, 1.66f, 0.92f, 4, 0, 12, 3, 0, 158.925f, 61, 3, new int[] {0,1,2,3,4}, 1.10f, ElementType.LANTHANOID),\n\tDy(66, 6, 28, 1.63f, 0.91f, 3, 0, 12, 3, 0, 162.500f, 62, 3, new int[] {0,2,3,4}, 1.22f, ElementType.LANTHANOID),\n\tHo(67, 6, 43, 1.61f, 0.89f, 3, 0, 12, 3, 0, 164.930f, 64, 3, new int[] {0,2,3}, 1.23f, ElementType.LANTHANOID),\n\tEr(68, 6, 29, 1.59f, 0.88f, 3, 0, 12, 3, 0, 167.260f, 65, 3, new int[] {0,2,3}, 1.24f, ElementType.LANTHANOID),\n\tTm(69, 6, 98, 1.57f, 0.87f, 3, 0, 12, 3, 0, 168.934f, 66, 3, new int[] {0,2,3,4}, 1.25f, ElementType.LANTHANOID),\n\tYb(70, 6, 104, 1.54f, 0.86f, 3, 0, 12, 2, 0, 173.040f, 67, 3, new int[] {0,2,3}, 1.10f, ElementType.LANTHANOID),\n\tLu(71, 6, 52, 1.53f, 0.85f, 3, 0, 12, 3, 0, 174.970f, 68, 3, new int[] {0,3}, 1.27f, ElementType.LANTHANOID),\n\tHf(72, 6, 41, 1.40f, 1.58f, 4, 0, 12, 4, 0, 178.490f, 68, 4, new int[] {0,2,3,4}, 1.30f, ElementType.TRANSITION_METAL),\n\tTa(73, 6, 91, 1.22f, 1.38f, 5, 0, 12, 5, 0, 180.850f, 68, 5, new int[] {-1,0,2,3,4,5}, 1.50f, ElementType.TRANSITION_METAL),\n\tW(74, 6, 101, 1.26f, 1.46f, 6, 0, 12, 6, 0, 183.850f, 68, 6, new int[] {-2,-1,0,1,2,3,4,5,6}, 2.36f, ElementType.TRANSITION_METAL),\n\tRe(75, 6, 78, 1.30f, 1.59f, 7, 0, 12, 4, 0, 186.200f, 68, 7, new int[] {-3,-1,0,1,2,3,4,5,6,7}, 1.90f, ElementType.TRANSITION_METAL),\n\tOs(76, 6, 66, 1.58f, 1.28f, 8, 0, 12, 2, 0, 190.200f, 68, 4, new int[] {-2,-1,0,1,2,3,4,5,6,7,8}, 2.20f, ElementType.TRANSITION_METAL),\n\tIr(77, 6, 46, 1.22f, 1.37f, 6, 0, 12, 3, 0, 192.220f, 68, 4, new int[] {-3,-1,0,1,2,3,4,5,6,8}, 2.20f, ElementType.TRANSITION_METAL),\n\tPt(78, 6, 74, 1.55f, 1.28f, 4, 0, 6, 0, 0, 195.090f, 68, 4, new int[] {-2,-1,0,1,2,3,4,5,6}, 2.28f, ElementType.TRANSITION_METAL),\n\tAu(79, 6, 9, 1.45f, 1.44f, 3, 0, 6, 0, 0, 196.967f, 68, 3, new int[] {-1,0,1,2,3,5}, 2.54f, ElementType.TRANSITION_METAL),\n\tHg(80, 6, 42, 1.55f, 1.32f, 2, 0, 12, 1, 2, 200.59f, 78, 1, new int[] {0,1,2,4}, 2.00f, ElementType.TRANSITION_METAL),\n\tTl(81, 6, 97, 1.96f, 1.45f, 3, 0, 12, 1, 3, 204.3833f, 78, 1, new int[] {-1,0,1,3}, 1.62f, ElementType.POST_TRANSITION_METAL),\n\tPb(82, 6, 69, 2.16f, 1.47f, 4, 0, 12, 2, 4, 207.200f, 78, 2, new int[] {-4,0,2,4}, 2.33f, ElementType.POST_TRANSITION_METAL),\n\tBi(83, 6, 13, 1.73f, 1.46f, 5, 0, 12, 3, 3, 208.981f, 78, 3, new int[] {-3,0,1,3,5}, 2.20f, ElementType.POST_TRANSITION_METAL),\n\tPo(84, 6, 72, 1.21f, 0.67f, 6, 0, 12, 4, 2, 209.000f, 78, 4, new int[] {-2,0,2,4,5,6}, 2.0f, ElementType.METALLOID),\n\tAt(85, 6, 8, 1.12f, 0.62f, 7, 0, 12, 1, 1, 210.000f, 78, -1, new int[] {-1,0,1,3,5,7}, 2.20f, ElementType.HALOGEN),\n\tRn(86, 6, 80, 2.30f, 1.90f, 8, 0, 12, 0, 0, 222.000f, 78, 0, new int[] {0,2,6}, 0.0f, ElementType.NOBLE_GAS), // electroneg not reported\n\tFr(87, 7, 35, 3.24f, 1.80f, 1, 0, 12, 0, 0, 223.000f, -1, 1, new int[] {0,1}, 0.70f, ElementType.ALKALI_METAL),\n\tRa(88, 7, 76, 2.57f, 1.43f, 2, 0, 12, 2, 0, 226.000f, -1, 2, new int[] {0,2}, 0.9f, ElementType.ALKALINE_EARTH_METAL),\n\tAc(89, 7, 2, 2.12f, 1.18f, 3, 0, 12, 4, 0, 227.000f, -1, 3, new int[] {0,2,3}, 1.1f, ElementType.ACTINOID),\n\tTh(90, 7, 95, 1.84f, 1.02f, 4, 0, 12, 1, 0, 232.038f, -1, 4, new int[] {0,2,3,4}, 1.30f, ElementType.ACTINOID),\n\tPa(91, 7, 68, 1.60f, 0.89f, 5, 0, 12, 4, 0, 231.036f, -1, 5, new int[] {0,2,3,4,5}, 1.50f, ElementType.ACTINOID),\n\tU(92, 7, 99, 1.75f, 0.97f, 6, 0, 12, 4, 0, 238.029f, -1, 6, new int[] {0,2,3,4,5,6}, 1.38f, ElementType.ACTINOID),\n\tNp(93, 7, 64, 1.71f, 0.95f, 6, 0, 12, 4, 0, 237.048f, -1, 5, new int[] {0,3,4,5,6,7}, 1.36f, ElementType.ACTINOID),\n\tPu(94, 7, 75, 1.67f, 0.93f, 6, 0, 12, 3, 0, 244.000f, -1, 4, new int[] {0,3,4,5,6,7,8}, 1.28f, ElementType.ACTINOID),\n\tAm(95, 7, 5, 1.66f, 0.92f, 6, 0, 12, 3, 0, 243.000f, -1, 3, new int[] {0,2,3,4,5,6,7}, 1.13f, ElementType.ACTINOID),\n\tCm(96, 7, 22, 1.65f, 0.91f, 3, 0, 12, 3, 0, 248.000f, -1, 3, new int[] {0,3,4}, 1.28f, ElementType.ACTINOID),\n\tBk(97, 7, 14, 1.64f, 0.90f, 4, 0, 12, 3, 0, 247.000f, -1, 3, new int[] {0,2,3,4}, 1.30f, ElementType.ACTINOID),\n\tCf(98, 7, 20, 1.63f, 0.89f, 3, 0, 12, 4, 0, 251.000f, -1, 3, new int[] {0,2,3,4}, 1.30f, ElementType.ACTINOID),\n\tEs(99, 7, 30, 1.62f, 0.88f, -1, 0, 12, 4, 0, 254.000f, -1, 3, new int[] {0,2,3}, 1.30f, ElementType.ACTINOID),\n\tFm(100, 7, 34, 1.61f, 0.87f, -1, 0, 12, 4, 0, 257.000f, -1, 3, new int[] {0,2,3}, 1.30f, ElementType.ACTINOID),\n\tMd(101, 7, 53, 1.60f, 0.86f, -1, 0, 12, 4, 0, 256.000f, -1, 3, new int[] {0,2,3}, 1.30f, ElementType.ACTINOID),\n\tNo(102, 7, 63, 1.59f, 0.85f, -1, 0, 12, 4, 0, 254.000f, -1, 3, new int[] {0,2,3}, 1.30f, ElementType.ACTINOID),\n\tLr(103, 7, 51, 1.58f, 0.84f, -1, 0, 12, 4, 0, 257.000f, -1, 3, new int[] {0,3}, 0.00f, ElementType.ACTINOID), // electroneg not reported\n\t/**\n\t * R-group to represent generic groups that are sometimes present in MDL .sdf\n\t * files.\n\t */\n\tR(104, 0, 105, 0.0f, 0.0f, 0, 0, 4, 1, 0, 0.000f, -1, 3, null, 0.00f, ElementType.UNKNOWN); // this is an R-group\n\t// should these be declared final?\n\tprivate int atomicNumber;\n\tprivate int period;\n\t//private int hillOrder;\n\tprivate float VDWRadius; // in Angstroms\n\tprivate float covalentRadius; // in Angstroms\n\tprivate int valenceElectronCount;\n\tprivate int minimumValence;\n\tprivate int maximumValence;\n\tprivate int commonValence;\n\tprivate int maximumCovalentValence;\n\tprivate float atomicMass;\n\tprivate int coreElectronCount;\n\tprivate int oxidationState;\n\tprivate int[] allOxidationStates;\n\t// Pauling electronegativity: http://en.wikipedia.org/wiki/Electronegativity\n\tprivate float paulingElectronegativity;\n\t// Element type: http://www.ptable.com/\n\tprivate ElementType elementType;\n\t//private static final Element[] hillOrderIndex;\n\n//\n//    static {\n//        hillOrderIndex = new Element[Element.values().length + 1];\n//        for (Element e : Element.values()) {\n//            hillOrderIndex[e.getHillOrder()] = e;\n//        }\n//        hillOrderIndex[Element.H.getHillOrder()] = Element.H; // special case for hydrogen\n//    }\n\n\tprivate static final Map<String,Element> allElements ;\n\n\tstatic {\n\t\tallElements = new HashMap<String,Element>();\n\t\tfor (Element e : Element.values()){\n\t\t\tallElements.put(e.toString().toLowerCase(), e);\n\t\t}\n\t}\n\tprivate Element(int atomicNumber,\n\t\t\tint period,\n\t\t\tint hillOrder,\n\t\t\tfloat VDWRadius,\n\t\t\tfloat covalentRadius,\n\t\t\tint valenceElectronCount,\n\t\t\tint minimumValence,\n\t\t\tint maximumValence,\n\t\t\tint commonValence,\n\t\t\tint maximumCovalentValence,\n\t\t\tfloat atomicMass,\n\t\t\tint coreElectronCount,\n\t\t\tint oxidationState,\n\t\t\tint[] allOxidationStates,\n\t\t\tfloat paulingElectronegativity,\n\t\t\tElementType elementType) {\n\n\t\tthis.atomicNumber = atomicNumber;\n\t\tthis.period = period;\n\t\t//this.hillOrder = hillOrder;\n\t\tthis.VDWRadius = VDWRadius;\n\t\tthis.covalentRadius = covalentRadius;\n\t\tthis.valenceElectronCount = valenceElectronCount;\n\t\tthis.minimumValence = minimumValence;\n\t\tthis.maximumValence = maximumValence;\n\t\tthis.commonValence = commonValence;\n\t\tthis.maximumCovalentValence = maximumCovalentValence;\n\t\tthis.atomicMass = atomicMass;\n\t\tthis.coreElectronCount = coreElectronCount;\n\t\tthis.oxidationState = oxidationState;\n\t\tthis.allOxidationStates = allOxidationStates;\n\t\tthis.paulingElectronegativity = paulingElectronegativity;\n\t\tthis.elementType = elementType;\n\n\n\t}\n\n\t/**\n\t * Returns a list of all oxidation states the element is found in.\n\t * The set is by Greenwood and Norman in \"Chemistry of the Elements (ISBN:0080379419).\n\t * @return An array of oxidation states sorted from most negative to most positive.\n\t */\n\tpublic int[] getAllOxidationStates() {\n\t\treturn allOxidationStates;\n\t}\n\n\t/**\n\t * Returns the atomic number of this Element.\n\t * @return the atomic number of this Element.\n\t */\n\tpublic int getAtomicNumber() {\n\t\treturn atomicNumber;\n\t}\n\n\t/**\n\t * Returns the period in the periodic table of this Element.\n\t * @return the period in the periodic table of this Element.\n\t */\n\tpublic int getPeriod() {\n\t\treturn period;\n\t}\n\n\t/**\n\t * Returns the Hill Order of this Element. The Hill Order represents the\n\t * priority by which elements are sorted in molecular formulas.\n\t * The Hill system is a system of writing chemical formulas such that the\n\t * number of carbon atoms in a molecule is indicated first, the number of\n\t * hydrogen atoms next, and then the number of all other chemical elements\n\t * subsequently, in alphabetical order. When the formula contains no carbon,\n\t * all the elements, including hydrogen, are listed alphabetically.\n\t * <p>\n\t * Edwin A. Hill, \"On A System Of Indexing Chemical Literature;\n\t * Adopted By The Classification Division Of The U. S. Patent Office\".\n\t * J. Am. Chem. Soc. 1900, 22(8), 478-494.\n\t * <p>\n\t * <a href=\"http://en.wikipedia.org/wiki/Hill_system\">\n\t * http://en.wikipedia.org/wiki/Hill_system</a>\n\t * <p>\n\t * @return the Hill Order of this Element.\n\t */\n\tpublic int getHillOrder() {\n\t\tthrow new RuntimeException(\"Not implemented, yet!\");\n\t\t//throw new NotImplementedYetException();\n\t\t//return hillOrder;\n\t}\n\n\t/**\n\t * Returns the van der Waals radius of this Element.\n\t * @return the van der Waals radius of this Element, measured in Angstroms.\n\t */\n\tpublic float getVDWRadius() {\n\t\treturn VDWRadius;\n\t}\n\n\t/**\n\t * Returns the covalent radius of this Element.\n\t * @return covalent radius, measured in Angstroms.\n\t */\n\tpublic float getCovalentRadius() {\n\t\treturn covalentRadius;\n\t}\n\n\t/**\n\t * Returns the number of valence electrons for this Element.\n\t * @return the number of valence electrons for this Element.\n\t */\n\tpublic int getValenceElectronCount() {\n\t\treturn valenceElectronCount;\n\t}\n\n\t/**\n\t * Returns the minimum valence for this Element.\n\t * @return the minimum valence of this atom.\n\t */\n\tpublic int getMinimumValence() {\n\t\treturn minimumValence;\n\t}\n\n\t/**\n\t * Returns the maximum valence for this Element.\n\t * @return the maximum valence for this Element.\n\t */\n\tpublic int getMaximumValence() {\n\t\treturn maximumValence;\n\t}\n\n\t/**\n\t * Returns the common valence for this Element.\n\t * @return the common valence for this Element.\n\t */\n\tpublic int getCommonValence() {\n\t\treturn commonValence;\n\t}\n\n\t/**\n\t * Returns the maximum valence for this Element.\n\t * @return the maximum valence of this element.\n\t */\n\tpublic int getMaximumCovalentValence() {\n\t\treturn maximumCovalentValence;\n\t}\n\n\t/**\n\t * Returns the atomic mass for this Element.\n\t * @return the atomic mass for this Element, measured in g/mol.\n\t */\n\tpublic float getAtomicMass() {\n\t\treturn atomicMass;\n\t}\n\n\t/**\n\t * Returns the number of core electrons for this Element.\n\t * @return number of core electrons for this Element.\n\t */\n\tpublic int getCoreElectronCount() {\n\t\treturn coreElectronCount;\n\t}\n\n\t/**\n\t * Returns a typical oxidation state for this Element. This information is mostly\n\t * useful for metals.\n\t * @return a typical oxidation state for this Element.\n\t */\n\tpublic int getOxidationState() {\n\t\treturn oxidationState;\n\t}\n\n\t/**\n\t * Returns the Pauling electronegativity for this Element.\n\t * @return the Pauling electronegativity for this Element.\n\t */\n\tpublic float getPaulingElectronegativity() {\n\t\treturn paulingElectronegativity;\n\t}\n\n\t/**\n\t * Returns the Element Type for this Element.\n\t * @return the Element Type for this Element.\n\t */\n\tpublic ElementType getElementType() {\n\t\treturn elementType;\n\t}\n\n\t/**\n\t * Returns the Element that corresponds to the specified element symbol. The case\n\t * of the element symbol is ignored. Example: FE, fe, Fe represent iron.\n\t * @param elementSymbol element symbol to specify Element.\n\t * @return the Element specified by the element symbol.\n\t */\n\tpublic static Element valueOfIgnoreCase(String elementSymbol) throws IllegalArgumentException {\n\n\t\tElement e = allElements.get(elementSymbol.toLowerCase());\n\t\tif ( e != null)\n\t\t\treturn e;\n\t\tthrow new IllegalArgumentException(\"Invalid element symbol: \" + elementSymbol);\n\t}\n\n\t/**\n\t * Returns <code>true</code> if this Element is Hydrogen.\n\t * <p>\n\t * <strong>Note:</strong> Deuterium ({@link #D}) and Tritium ({@link Element#T}) will return\n\t * <code>true</code> to this method.\n\t * </p>\n\t *\n\t * @return <CODE>true</CODE> if the Element is Hydrogen.\n\t */\n\tpublic boolean isHydrogen() {\n\t\treturn this == H || this == D || this == T;\n\t}\n\n\t/**\n\t * Returns <CODE>true</CODE> is the Element is an not Hydrogen (or an\n\t * isotope of Hydrogen).\n\t * <p>\n\t * This method is the exact opposite of {@link #isHydrogen()}.\n\t * </p>\n\t *\n\t * @return <CODE>true</CODE> is Element is not Hydrogen.\n\t */\n\tpublic boolean isHeavyAtom() {\n\t\treturn !isHydrogen();\n\t}\n\n\t/**\n\t * Returns <CODE>true</CODE> if Element is not Hydrogen and not Carbon.\n\t * @return <CODE>true</CODE> if Element is not Hydrogen and not Carbon.\n\t */\n\tpublic boolean isHeteroAtom() {\n\t\treturn !(this == C || this == H);\n\t}\n\n\t/**\n\t * Returns <CODE>true</CODE> if ElementType is a metal.\n\t * @return <CODE>true</CODE> if ElementType is a metal.\n\t */\n\tpublic boolean isMetal() {\n\t\treturn elementType.isMetal();\n\t}\n\n\t/**\n\t * Returns <CODE>true</CODE> if ElementType is a metalloid.\n\t * @return <CODE>true</CODE> if ElementType is a metalloid.\n\t */\n\tpublic boolean isMetalloid() {\n\t\treturn elementType.isMetalloid();\n\t}\n\n\t/**\n\t * Returns <CODE>true</CODE> if ElementType is a non-metal.\n\t * @return <CODE>true</CODE> if ElementType is a non-metal.\n\t */\n\tpublic boolean isNonMetal() {\n\t\treturn elementType.isNonMetal();\n\t}\n\n\t/**\n\t * Returns <CODE>true</CODE> if Element is a halogen (F, Cl, Br, I, At).\n\t * @return <CODE>true</CODE> if Element is a halogen.\n\t */\n\tpublic boolean isHalogen() {\n\t\treturn elementType.equals(ElementType.HALOGEN);\n\t}\n\n\t/**\n\t * Returns <CODE>true</CODE> if Element is a chalcogen (O, S, Se, Te, Po).\n\t * @return <CODE>true</CODE> if Element is a chalcogen.\n\t */\n\tpublic boolean isChalcogen() {\n\t\treturn (this == O || this == S || this == Se || this == Te ||\n\t\t\t\tthis == Po);\n\t}\n\n\t/**\n\t * Returns the Element that corresponds to the specified Hill Order.\n\t * @param index the Hill Order.\n\t * @return the Element that corresponds to the specified Hill Order.\n\t * @see #getHillOrder()\n\t */\n\tpublic static Element getElementFromHillIndex(int index) {\n\t\tthrow new UnsupportedOperationException(\"Not implemented, yet!\");\n\t\t//return hillOrderIndex[index];\n\t}\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 29.04.2010\n *\n */\npackage org.biojava.nbio.structure;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Element is an enumeration of the elements of the periodic table. In addition,\n * several attributes of each element are accessible.\n * <B>Note:</B> Deuterium and Tritium are treated as separate elements D and T,\n * respectively. Sometimes part of a molecule is represented as an R-group, which\n * is represented as the element R.\n *\n *\n * @author Peter Rose\n * @version %I% %G%\n * @since 3.0\n *\n */\n\npublic enum Element {\n\n\t// most frequently used elements first\n\tH(1, 1, 39, 1.10f, 0.32f, 1, 1, 1, 1, 1, 1.008f, 0, 1, new int[] {1}, 2.20f, ElementType.OTHER_NONMETAL),\n\tC(6, 2, 0, 1.55f, 0.77f, 4, 4, 4, 4, 4, 12.011f, 2, -4, new int[] {-4,-3,-2,0,-1,1,2,3,4}, 2.55f, ElementType.OTHER_NONMETAL),\n\tN(7, 2, 57, 1.40f, 0.75f, 5, 2, 5, 3, 4, 14.007f, 2, -3, new int[] {-3,-2,-1,0,1,2,3,4,5}, 3.04f, ElementType.OTHER_NONMETAL),\n\tO(8, 2, 65, 1.35f, 0.73f, 6, 1, 2, 2, 2, 16.000f, 2, -2, new int[] {-2,-1,0,1,2}, 3.44f, ElementType.OTHER_NONMETAL),\n\t/**\n\t * Deuterium\n\t */\n\tD(1, 1, 27, 1.10f, 0.32f, 1, 1, 1, 1, 1, 1.008f, 0, 1, new int[] {0,1}, 2.20f, ElementType.OTHER_NONMETAL), // need to edit properties!\n\t/**\n\t * Tritium\n\t */\n\tT(1, 1, 90, 1.10f, 0.32f, 1, 1, 1, 1, 1, 1.008f, 0, 1, new int[] {0,1}, 2.20f, ElementType.OTHER_NONMETAL), // need to edit properties!\n\tHe(2, 1, 40, 2.20f, 1.60f, 2, 0, 12, 0, 0, 4.003f, 2, 0, new int[] {0}, 0.0f, ElementType.NOBLE_GAS), // electroneg not reported\n\tLi(3, 2, 50, 1.22f, 1.34f, 1, 0, 12, 0, 1, 6.940f, 2, 1, new int[] {0,1}, 0.98f, ElementType.ALKALI_METAL),\n\tBe(4, 2, 12, 0.63f, 0.90f, 2, 0, 12, 2, 2, 9.012f, 2, 2, new int[] {0,1,2}, 1.57f, ElementType.TRANSITION_METAL),\n\tB(5, 2, 10, 1.55f, 0.82f, 3, 3, 5, 3, 4, 10.810f, 2, 3, new int[] {0,1,2,3}, 2.04f, ElementType.METALLOID),\n\tF(9, 2, 32, 1.30f, 0.72f, 7, 0, 1, 1, 1, 18.998f, 2, -1, new int[] {-1,0,1}, 3.98f, ElementType.HALOGEN),\n\tNe(10, 2, 61, 2.02f, 1.12f, 8, 0, 12, 0, 0, 20.170f, 10, 0, new int[] {}, 0.00f, ElementType.NOBLE_GAS), // electroneg not reported\n\tNa(11, 3, 58, 2.20f, 1.54f, 1, 0, 1, 0, 0, 22.990f, 10, 1, new int[] {-1,0,1}, 0.93f, ElementType.ALKALI_METAL),\n\tMg(12, 3, 54, 1.50f, 1.30f, 2, 0, 2, 0, 2, 24.305f, 10, 2, new int[] {0,1,2}, 1.31f, ElementType.ALKALINE_EARTH_METAL),\n\tAl(13, 3, 4, 1.50f, 1.18f, 3, 0, 5, 0, 4, 26.982f, 10, 3, new int[] {0,1,2,3}, 1.61f, ElementType.POST_TRANSITION_METAL),\n\tSi(14, 3, 86, 2.20f, 1.11f, 4, 4, 4, 4, 4, 28.086f, 10, 4, new int[] {-4,-3,-2,-1,0,1,2,3,4}, 1.90f, ElementType.METALLOID),\n\tP(15, 3, 67, 1.88f, 1.06f, 5, 3, 5, 3, 5, 30.974f, 10, 5, new int[] {-3,-2,-1,0,1,2,3,4,5}, 2.19f, ElementType.OTHER_NONMETAL),\n\tS(16, 3, 82, 1.81f, 1.02f, 6, 2, 6, 2, 6, 32.060f, 10, -2, new int[] {-2,-1,0,1,2,3,4,5,6}, 2.58f, ElementType.OTHER_NONMETAL),\n\tCl(17, 3, 21, 1.75f, 0.99f, 7, 0, 1, 1, 1, 35.453f, 10, -1, new int[] {-1,0,1,2,3,4,5,6,7}, 3.16f, ElementType.HALOGEN),\n\tAr(18, 4, 6, 2.77f, 1.54f, 8, 0, 12, 0, 0, 39.948f, 18, 0, new int[] {0}, 0.00f, ElementType.NOBLE_GAS), // electroneg not reported\n\tK(19, 4, 47, 2.39f, 1.96f, 1, 0, 12, 0, 0, 39.102f, 18, 1, new int[] {-1,0,1}, 0.82f, ElementType.ALKALI_METAL),\n\tCa(20, 4, 17, 1.95f, 1.74f, 2, 0, 2, 0, 0, 40.080f, 18, 2, new int[] {0,1,2}, 1.00f, ElementType.ALKALINE_EARTH_METAL),\n\tSc(21, 4, 84, 1.32f, 1.44f, 3, 0, 12, 3, 0, 44.956f, 18, 3, new int[] {0,1,2,3}, 1.36f, ElementType.TRANSITION_METAL),\n\tTi(22, 4, 96, 1.95f, 1.36f, 4, 2, 4, 3, 4, 47.880f, 18, 4, new int[] {-1,0,1,2,3,4}, 1.54f, ElementType.TRANSITION_METAL),\n\tV(23, 4, 100, 1.06f, 1.25f, 5, 0, 12, 3, 0, 50.040f, 18, 5, new int[] {-1,0,1,2,3,4,5}, 1.63f, ElementType.TRANSITION_METAL),\n\tCr(24, 4, 24, 1.13f, 1.27f, 6, 0, 12, 2, 0, 51.996f, 18, 3, new int[] {-2,-1,0,1,2,3,4,5,6}, 1.66f, ElementType.TRANSITION_METAL),\n\tMn(25, 4, 55, 1.19f, 1.39f, 7, 0, 12, 0, 0, 54.938f, 18, 2, new int[] {-3,-2,-1,0,1,2,3,4,5,6,7}, 1.55f, ElementType.TRANSITION_METAL),\n\tFe(26, 4, 33, 1.95f, 1.25f, 3, 0, 8, 0, 0, 55.847f, 18, 3, new int[] {-2,-1,0,1,2,3,4,5,6}, 1.83f, ElementType.TRANSITION_METAL),\n\tCo(27, 4, 23, 1.13f, 1.26f, 3, 0, 12, 0, 0, 58.933f, 18, 2, new int[] {-1,0,1,2,3,4,5}, 1.88f, ElementType.TRANSITION_METAL),\n\tNi(28, 4, 62, 1.24f, 1.21f, 3, 0, 12, 0, 0, 58.710f, 18, 2, new int[] {-1,0,1,2,3,4}, 1.91f, ElementType.TRANSITION_METAL),\n\tCu(29, 4, 26, 1.15f, 1.38f, 2, 0, 4, 0, 0, 63.546f, 18, 2, new int[] {0,1,2,3,4}, 1.90f, ElementType.TRANSITION_METAL),\n\tZn(30, 4, 106, 1.15f, 1.31f, 2, 0, 2, 0, 0, 65.380f, 18, 2, new int[] {0,1,2}, 1.65f, ElementType.TRANSITION_METAL),\n\tGa(31, 4, 36, 1.55f, 1.26f, 3, 1, 4, 2, 4, 69.720f, 28, 3, new int[] {0,1,2,3}, 1.81f, ElementType.POST_TRANSITION_METAL),\n\tGe(32, 4, 38, 2.72f, 1.22f, 4, 0, 12, 4, 4, 72.590f, 28, 4, new int[] {-4,-3,-2,-1,0,1,2,3,4}, 2.01f, ElementType.METALLOID),\n\tAs(33, 4, 7, 0.83f, 1.19f, 5, 0, 12, 3, 5, 74.922f, 28, -3, new int[] {-3,0,1,2,3,5}, 2.18f, ElementType.METALLOID),\n\tSe(34, 4, 85, 0.90f, 1.16f, 6, 0, 12, 2, 6, 78.960f, 28, 4, new int[] {-2,0,1,2,4,6}, 2.55f, ElementType.OTHER_NONMETAL),\n\tBr(35, 4, 15, 1.95f, 1.14f, 7, 0, 1, 1, 1, 79.904f, 28, -1, new int[] {-1,0,1,2,3,4,5,7}, 2.96f, ElementType.HALOGEN),\n\tKr(36, 4, 48, 1.90f, 1.60f, 8, 0, 12, 0, 0, 83.800f, 28, 0, new int[] {0,2}, 3.00f, ElementType.NOBLE_GAS),\n\tRb(37, 5, 77, 2.65f, 2.11f, 1, 0, 12, 0, 0, 85.467f, 36, 1, new int[] {-1,0,1}, 0.82f, ElementType.ALKALI_METAL),\n\tSr(38, 5, 89, 2.02f, 1.92f, 2, 0, 12, 2, 0, 87.620f, 36, 2, new int[] {0,1,2}, 0.95f, ElementType.ALKALINE_EARTH_METAL),\n\tY(39, 5, 103, 1.61f, 1.62f, 3, 0, 12, 3, 0, 88.806f, 36, 3, new int[] {0,1,2,3}, 1.22f, ElementType.TRANSITION_METAL),\n\tZr(40, 5, 105, 1.42f, 1.48f, 4, 0, 12, 4, 0, 91.220f, 36, 4, new int[] {0,1,2,3,4}, 1.33f, ElementType.TRANSITION_METAL),\n\tNb(41, 5, 59, 1.33f, 1.37f, 5, 0, 12, 3, 0, 92.906f, 36, 5, new int[] {-1,0,1,2,3,4,5}, 1.60f, ElementType.TRANSITION_METAL),\n\tMo(42, 5, 56, 1.75f, 1.45f, 6, 1, 6, 3, 0, 95.940f, 36, 6, new int[] {-2,-1,0,1,2,3,4,5,6}, 2.16f, ElementType.TRANSITION_METAL),\n\tTc(43, 5, 93, 1.80f, 1.56f, 7, 0, 12, 6, 0, 98.910f, 36, 7, new int[] {-3,-1,0,1,2,3,4,5,6,7}, 1.90f, ElementType.TRANSITION_METAL),\n\tRu(44, 5, 81, 1.20f, 1.26f, 8, 0, 12, 3, 0, 101.070f, 36, 4, new int[] {-2,0,1,2,3,4,5,6,7,8}, 2.20f, ElementType.TRANSITION_METAL),\n\tRh(45, 5, 79, 1.22f, 1.35f, 4, 0, 12, 3, 0, 102.906f, 36, 3, new int[] {-1,0,1,2,3,4,5,6}, 2.28f, ElementType.TRANSITION_METAL),\n\tPd(46, 5, 70, 1.44f, 1.31f, 4, 0, 12, 2, 0, 106.400f, 36, 2, new int[] {0,1,2,4}, 2.20f, ElementType.TRANSITION_METAL),\n\tAg(47, 5, 3, 1.55f, 1.53f, 1, 0, 6, 0, 0, 107.868f, 36, 1, new int[] {0,1,2,3,4}, 1.93f, ElementType.TRANSITION_METAL),\n\tCd(48, 5, 18, 1.75f, 1.48f, 2, 0, 12, 0, 0, 112.400f, 36, 2, new int[] {0,1,2}, 1.69f, ElementType.TRANSITION_METAL),\n\tIn(49, 5, 45, 1.46f, 1.44f, 3, 0, 12, 3, 0, 114.820f, 46, 3, new int[] {0,1,2,3}, 1.78f, ElementType.POST_TRANSITION_METAL),\n\tSn(50, 5, 88, 1.67f, 1.41f, 4, 0, 12, 2, 4, 118.690f, 46, 4, new int[] {-4,0,2,4}, 1.96f, ElementType.POST_TRANSITION_METAL),\n\tSb(51, 5, 83, 1.12f, 1.38f, 5, 0, 12, 4, 5, 121.750f, 46, -3, new int[] {-3,0,3,5}, 2.05f, ElementType.METALLOID),\n\tTe(52, 5, 94, 1.26f, 1.35f, 6, 0, 12, 2, 6, 127.600f, 46, 4, new int[] {-2,0,2,4,5,6}, 2.10f, ElementType.METALLOID),\n\tI(53, 5, 44, 2.15f, 1.33f, 7, 1, 1, 1, 1, 126.905f, 46, -1, new int[] {-1,0,1,3,4,5,7}, 2.66f, ElementType.HALOGEN),\n\tXe(54, 5, 102, 2.10f, 1.70f, 8, 0, 12, 0, 0, 131.300f, 46, 0, new int[] {0,1,2,4,6,8}, 2.60f, ElementType.NOBLE_GAS),\n\tCs(55, 6, 25, 3.01f, 2.25f, 1, 0, 12, 0, 0, 132.905f, 54, 1, new int[] {-1,0,1}, 0.79f, ElementType.ALKALI_METAL),\n\tBa(56, 6, 11, 2.41f, 1.98f, 2, 0, 12, 0, 0, 137.340f, 54, 2, new int[] {0,2}, 0.89f, ElementType.ALKALINE_EARTH_METAL),\n\tLa(57, 6, 49, 1.83f, 1.95f, 3, 0, 12, 3, 0, 138.905f, 54, 3, new int[] {0,2,3}, 1.10f, ElementType.LANTHANOID),\n\tCe(58, 6, 19, 1.86f, 1.03f, 4, 0, 12, 3, 0, 140.120f, 54, 3, new int[] {0,2,3,4}, 1.12f, ElementType.LANTHANOID),\n\tPr(59, 6, 73, 1.62f, 0.90f, 4, 0, 12, 3, 0, 140.908f, 55, 3, new int[] {0,2,3,4}, 1.13f, ElementType.LANTHANOID),\n\tNd(60, 6, 60, 1.79f, 0.99f, 3, 0, 12, 3, 0, 144.240f, 56, 3, new int[] {0,2,3,4}, 1.14f, ElementType.LANTHANOID),\n\tPm(61, 6, 71, 1.76f, 0.98f, 3, 0, 12, 3, 0, 145.000f, 58, 3, new int[] {0,2,3}, 1.13f, ElementType.LANTHANOID),\n\tSm(62, 6, 87, 1.74f, 0.96f, 3, 0, 12, 2, 0, 150.400f, 59, 3, new int[] {0,2,3}, 1.17f, ElementType.LANTHANOID),\n\tEu(63, 6, 31, 1.96f, 1.09f, 3, 0, 12, 2, 0, 151.960f, 60, 3, new int[] {0,2,3}, 1.20f, ElementType.LANTHANOID),\n\tGd(64, 6, 37, 1.69f, 0.94f, 3, 0, 12, 3, 0, 157.250f, 61, 3, new int[] {0,1,2,3}, 1.20f, ElementType.LANTHANOID),\n\tTb(65, 6, 92, 1.66f, 0.92f, 4, 0, 12, 3, 0, 158.925f, 61, 3, new int[] {0,1,2,3,4}, 1.10f, ElementType.LANTHANOID),\n\tDy(66, 6, 28, 1.63f, 0.91f, 3, 0, 12, 3, 0, 162.500f, 62, 3, new int[] {0,2,3,4}, 1.22f, ElementType.LANTHANOID),\n\tHo(67, 6, 43, 1.61f, 0.89f, 3, 0, 12, 3, 0, 164.930f, 64, 3, new int[] {0,2,3}, 1.23f, ElementType.LANTHANOID),\n\tEr(68, 6, 29, 1.59f, 0.88f, 3, 0, 12, 3, 0, 167.260f, 65, 3, new int[] {0,2,3}, 1.24f, ElementType.LANTHANOID),\n\tTm(69, 6, 98, 1.57f, 0.87f, 3, 0, 12, 3, 0, 168.934f, 66, 3, new int[] {0,2,3,4}, 1.25f, ElementType.LANTHANOID),\n\tYb(70, 6, 104, 1.54f, 0.86f, 3, 0, 12, 2, 0, 173.040f, 67, 3, new int[] {0,2,3}, 1.10f, ElementType.LANTHANOID),\n\tLu(71, 6, 52, 1.53f, 0.85f, 3, 0, 12, 3, 0, 174.970f, 68, 3, new int[] {0,3}, 1.27f, ElementType.LANTHANOID),\n\tHf(72, 6, 41, 1.40f, 1.58f, 4, 0, 12, 4, 0, 178.490f, 68, 4, new int[] {0,2,3,4}, 1.30f, ElementType.TRANSITION_METAL),\n\tTa(73, 6, 91, 1.22f, 1.38f, 5, 0, 12, 5, 0, 180.850f, 68, 5, new int[] {-1,0,2,3,4,5}, 1.50f, ElementType.TRANSITION_METAL),\n\tW(74, 6, 101, 1.26f, 1.46f, 6, 0, 12, 6, 0, 183.850f, 68, 6, new int[] {-2,-1,0,1,2,3,4,5,6}, 2.36f, ElementType.TRANSITION_METAL),\n\tRe(75, 6, 78, 1.30f, 1.59f, 7, 0, 12, 4, 0, 186.200f, 68, 7, new int[] {-3,-1,0,1,2,3,4,5,6,7}, 1.90f, ElementType.TRANSITION_METAL),\n\tOs(76, 6, 66, 1.58f, 1.28f, 8, 0, 12, 2, 0, 190.200f, 68, 4, new int[] {-2,-1,0,1,2,3,4,5,6,7,8}, 2.20f, ElementType.TRANSITION_METAL),\n\tIr(77, 6, 46, 1.22f, 1.37f, 6, 0, 12, 3, 0, 192.220f, 68, 4, new int[] {-3,-1,0,1,2,3,4,5,6,8}, 2.20f, ElementType.TRANSITION_METAL),\n\tPt(78, 6, 74, 1.55f, 1.28f, 4, 0, 6, 0, 0, 195.090f, 68, 4, new int[] {-2,-1,0,1,2,3,4,5,6}, 2.28f, ElementType.TRANSITION_METAL),\n\tAu(79, 6, 9, 1.45f, 1.44f, 3, 0, 6, 0, 0, 196.967f, 68, 3, new int[] {-1,0,1,2,3,5}, 2.54f, ElementType.TRANSITION_METAL),\n\tHg(80, 6, 42, 1.55f, 1.32f, 2, 0, 12, 1, 2, 200.59f, 78, 1, new int[] {0,1,2,4}, 2.00f, ElementType.TRANSITION_METAL),\n\tTl(81, 6, 97, 1.96f, 1.45f, 3, 0, 12, 1, 3, 204.3833f, 78, 1, new int[] {-1,0,1,3}, 1.62f, ElementType.POST_TRANSITION_METAL),\n\tPb(82, 6, 69, 2.16f, 1.47f, 4, 0, 12, 2, 4, 207.200f, 78, 2, new int[] {-4,0,2,4}, 2.33f, ElementType.POST_TRANSITION_METAL),\n\tBi(83, 6, 13, 1.73f, 1.46f, 5, 0, 12, 3, 3, 208.981f, 78, 3, new int[] {-3,0,1,3,5}, 2.20f, ElementType.POST_TRANSITION_METAL),\n\tPo(84, 6, 72, 1.21f, 0.67f, 6, 0, 12, 4, 2, 209.000f, 78, 4, new int[] {-2,0,2,4,5,6}, 2.0f, ElementType.METALLOID),\n\tAt(85, 6, 8, 1.12f, 0.62f, 7, 0, 12, 1, 1, 210.000f, 78, -1, new int[] {-1,0,1,3,5,7}, 2.20f, ElementType.HALOGEN),\n\tRn(86, 6, 80, 2.30f, 1.90f, 8, 0, 12, 0, 0, 222.000f, 78, 0, new int[] {0,2,6}, 0.0f, ElementType.NOBLE_GAS), // electroneg not reported\n\tFr(87, 7, 35, 3.24f, 1.80f, 1, 0, 12, 0, 0, 223.000f, -1, 1, new int[] {0,1}, 0.70f, ElementType.ALKALI_METAL),\n\tRa(88, 7, 76, 2.57f, 1.43f, 2, 0, 12, 2, 0, 226.000f, -1, 2, new int[] {0,2}, 0.9f, ElementType.ALKALINE_EARTH_METAL),\n\tAc(89, 7, 2, 2.12f, 1.18f, 3, 0, 12, 4, 0, 227.000f, -1, 3, new int[] {0,2,3}, 1.1f, ElementType.ACTINOID),\n\tTh(90, 7, 95, 1.84f, 1.02f, 4, 0, 12, 1, 0, 232.038f, -1, 4, new int[] {0,2,3,4}, 1.30f, ElementType.ACTINOID),\n\tPa(91, 7, 68, 1.60f, 0.89f, 5, 0, 12, 4, 0, 231.036f, -1, 5, new int[] {0,2,3,4,5}, 1.50f, ElementType.ACTINOID),\n\tU(92, 7, 99, 1.75f, 0.97f, 6, 0, 12, 4, 0, 238.029f, -1, 6, new int[] {0,2,3,4,5,6}, 1.38f, ElementType.ACTINOID),\n\tNp(93, 7, 64, 1.71f, 0.95f, 6, 0, 12, 4, 0, 237.048f, -1, 5, new int[] {0,3,4,5,6,7}, 1.36f, ElementType.ACTINOID),\n\tPu(94, 7, 75, 1.67f, 0.93f, 6, 0, 12, 3, 0, 244.000f, -1, 4, new int[] {0,3,4,5,6,7,8}, 1.28f, ElementType.ACTINOID),\n\tAm(95, 7, 5, 1.66f, 0.92f, 6, 0, 12, 3, 0, 243.000f, -1, 3, new int[] {0,2,3,4,5,6,7}, 1.13f, ElementType.ACTINOID),\n\tCm(96, 7, 22, 1.65f, 0.91f, 3, 0, 12, 3, 0, 248.000f, -1, 3, new int[] {0,3,4}, 1.28f, ElementType.ACTINOID),\n\tBk(97, 7, 14, 1.64f, 0.90f, 4, 0, 12, 3, 0, 247.000f, -1, 3, new int[] {0,2,3,4}, 1.30f, ElementType.ACTINOID),\n\tCf(98, 7, 20, 1.63f, 0.89f, 3, 0, 12, 4, 0, 251.000f, -1, 3, new int[] {0,2,3,4}, 1.30f, ElementType.ACTINOID),\n\tEs(99, 7, 30, 1.62f, 0.88f, -1, 0, 12, 4, 0, 254.000f, -1, 3, new int[] {0,2,3}, 1.30f, ElementType.ACTINOID),\n\tFm(100, 7, 34, 1.61f, 0.87f, -1, 0, 12, 4, 0, 257.000f, -1, 3, new int[] {0,2,3}, 1.30f, ElementType.ACTINOID),\n\tMd(101, 7, 53, 1.60f, 0.86f, -1, 0, 12, 4, 0, 256.000f, -1, 3, new int[] {0,2,3}, 1.30f, ElementType.ACTINOID),\n\tNo(102, 7, 63, 1.59f, 0.85f, -1, 0, 12, 4, 0, 254.000f, -1, 3, new int[] {0,2,3}, 1.30f, ElementType.ACTINOID),\n\tLr(103, 7, 51, 1.58f, 0.84f, -1, 0, 12, 4, 0, 257.000f, -1, 3, new int[] {0,3}, 0.00f, ElementType.ACTINOID), // electroneg not reported\n\t/**\n\t * R-group to represent generic groups that are sometimes present in MDL .sdf\n\t * files.\n\t */\n\tR(104, 0, 105, 0.0f, 0.0f, 0, 0, 4, 1, 0, 0.000f, -1, 3, null, 0.00f, ElementType.UNKNOWN); // this is an R-group\n\t// should these be declared final?\n\tprivate int atomicNumber;\n\tprivate int period;\n\t//private int hillOrder;\n\tprivate float VDWRadius; // in Angstroms\n\tprivate float covalentRadius; // in Angstroms\n\tprivate int valenceElectronCount;\n\tprivate int minimumValence;\n\tprivate int maximumValence;\n\tprivate int commonValence;\n\tprivate int maximumCovalentValence;\n\tprivate float atomicMass;\n\tprivate int coreElectronCount;\n\tprivate int oxidationState;\n\tprivate int[] allOxidationStates;\n\t// Pauling electronegativity: http://en.wikipedia.org/wiki/Electronegativity\n\tprivate float paulingElectronegativity;\n\t// Element type: http://www.ptable.com/\n\tprivate ElementType elementType;\n\t//private static final Element[] hillOrderIndex;\n\n//\n//    static {\n//        hillOrderIndex = new Element[Element.values().length + 1];\n//        for (Element e : Element.values()) {\n//            hillOrderIndex[e.getHillOrder()] = e;\n//        }\n//        hillOrderIndex[Element.H.getHillOrder()] = Element.H; // special case for hydrogen\n//    }\n\n\tprivate static final Map<String,Element> allElements ;\n\n\tstatic {\n\t\tallElements = new HashMap<String,Element>();\n\t\tfor (Element e : Element.values()){\n\t\t\tallElements.put(e.toString().toLowerCase(), e);\n\t\t}\n\t}\n\tprivate Element(int atomicNumber,\n\t\t\tint period,\n\t\t\tint hillOrder,\n\t\t\tfloat VDWRadius,\n\t\t\tfloat covalentRadius,\n\t\t\tint valenceElectronCount,\n\t\t\tint minimumValence,\n\t\t\tint maximumValence,\n\t\t\tint commonValence,\n\t\t\tint maximumCovalentValence,\n\t\t\tfloat atomicMass,\n\t\t\tint coreElectronCount,\n\t\t\tint oxidationState,\n\t\t\tint[] allOxidationStates,\n\t\t\tfloat paulingElectronegativity,\n\t\t\tElementType elementType) {\n\n\t\tthis.atomicNumber = atomicNumber;\n\t\tthis.period = period;\n\t\t//this.hillOrder = hillOrder;\n\t\tthis.VDWRadius = VDWRadius;\n\t\tthis.covalentRadius = covalentRadius;\n\t\tthis.valenceElectronCount = valenceElectronCount;\n\t\tthis.minimumValence = minimumValence;\n\t\tthis.maximumValence = maximumValence;\n\t\tthis.commonValence = commonValence;\n\t\tthis.maximumCovalentValence = maximumCovalentValence;\n\t\tthis.atomicMass = atomicMass;\n\t\tthis.coreElectronCount = coreElectronCount;\n\t\tthis.oxidationState = oxidationState;\n\t\tthis.allOxidationStates = allOxidationStates;\n\t\tthis.paulingElectronegativity = paulingElectronegativity;\n\t\tthis.elementType = elementType;\n\n\n\t}\n\n\t/**\n\t * Returns a list of all oxidation states the element is found in.\n\t * The set is by Greenwood and Norman in \"Chemistry of the Elements (ISBN:0080379419).\n\t * @return An array of oxidation states sorted from most negative to most positive.\n\t */\n\tpublic int[] getAllOxidationStates() {\n\t\treturn allOxidationStates;\n\t}\n\n\t/**\n\t * Returns the atomic number of this Element.\n\t * @return the atomic number of this Element.\n\t */\n\tpublic int getAtomicNumber() {\n\t\treturn atomicNumber;\n\t}\n\n\t/**\n\t * Returns the period in the periodic table of this Element.\n\t * @return the period in the periodic table of this Element.\n\t */\n\tpublic int getPeriod() {\n\t\treturn period;\n\t}\n\n\t/**\n\t * Returns the Hill Order of this Element. The Hill Order represents the\n\t * priority by which elements are sorted in molecular formulas.\n\t * The Hill system is a system of writing chemical formulas such that the\n\t * number of carbon atoms in a molecule is indicated first, the number of\n\t * hydrogen atoms next, and then the number of all other chemical elements\n\t * subsequently, in alphabetical order. When the formula contains no carbon,\n\t * all the elements, including hydrogen, are listed alphabetically.\n\t * <p>\n\t * Edwin A. Hill, \"On A System Of Indexing Chemical Literature;\n\t * Adopted By The Classification Division Of The U. S. Patent Office\".\n\t * J. Am. Chem. Soc. 1900, 22(8), 478-494.\n\t * <p>\n\t * <a href=\"http://en.wikipedia.org/wiki/Hill_system\">\n\t * http://en.wikipedia.org/wiki/Hill_system</a>\n\t * <p>\n\t * @return the Hill Order of this Element.\n\t */\n\tpublic int getHillOrder() {\n\t\tthrow new RuntimeException(\"Not implemented, yet!\");\n\t\t//throw new NotImplementedYetException();\n\t\t//return hillOrder;\n\t}\n\n\t/**\n\t * Returns the van der Waals radius of this Element.\n\t * @return the van der Waals radius of this Element, measured in Angstroms.\n\t */\n\tpublic float getVDWRadius() {\n\t\treturn VDWRadius;\n\t}\n\n\t/**\n\t * Returns the covalent radius of this Element.\n\t * @return covalent radius, measured in Angstroms.\n\t */\n\tpublic float getCovalentRadius() {\n\t\treturn covalentRadius;\n\t}\n\n\t/**\n\t * Returns the number of valence electrons for this Element.\n\t * @return the number of valence electrons for this Element.\n\t */\n\tpublic int getValenceElectronCount() {\n\t\treturn valenceElectronCount;\n\t}\n\n\t/**\n\t * Returns the minimum valence for this Element.\n\t * @return the minimum valence of this atom.\n\t */\n\tpublic int getMinimumValence() {\n\t\treturn minimumValence;\n\t}\n\n\t/**\n\t * Returns the maximum valence for this Element.\n\t * @return the maximum valence for this Element.\n\t */\n\tpublic int getMaximumValence() {\n\t\treturn maximumValence;\n\t}\n\n\t/**\n\t * Returns the common valence for this Element.\n\t * @return the common valence for this Element.\n\t */\n\tpublic int getCommonValence() {\n\t\treturn commonValence;\n\t}\n\n\t/**\n\t * Returns the maximum valence for this Element.\n\t * @return the maximum valence of this element.\n\t */\n\tpublic int getMaximumCovalentValence() {\n\t\treturn maximumCovalentValence;\n\t}\n\n\t/**\n\t * Returns the atomic mass for this Element.\n\t * @return the atomic mass for this Element, measured in g/mol.\n\t */\n\tpublic float getAtomicMass() {\n\t\treturn atomicMass;\n\t}\n\n\t/**\n\t * Returns the number of core electrons for this Element.\n\t * @return number of core electrons for this Element.\n\t */\n\tpublic int getCoreElectronCount() {\n\t\treturn coreElectronCount;\n\t}\n\n\t/**\n\t * Returns a typical oxidation state for this Element. This information is mostly\n\t * useful for metals.\n\t * @return a typical oxidation state for this Element.\n\t */\n\tpublic int getOxidationState() {\n\t\treturn oxidationState;\n\t}\n\n\t/**\n\t * Returns the Pauling electronegativity for this Element.\n\t * @return the Pauling electronegativity for this Element.\n\t */\n\tpublic float getPaulingElectronegativity() {\n\t\treturn paulingElectronegativity;\n\t}\n\n\t/**\n\t * Returns the Element Type for this Element.\n\t * @return the Element Type for this Element.\n\t */\n\tpublic ElementType getElementType() {\n\t\treturn elementType;\n\t}\n\n\t/**\n\t * Returns the Element that corresponds to the specified element symbol. The case\n\t * of the element symbol is ignored. Example: FE, fe, Fe represent iron.\n\t * @param elementSymbol element symbol to specify Element.\n\t * @return the Element specified by the element symbol.\n\t */\n\tpublic static Element valueOfIgnoreCase(String elementSymbol) {\n\n\t\tElement e = allElements.get(elementSymbol.toLowerCase());\n\t\tif ( e != null)\n\t\t\treturn e;\n\t\tthrow new IllegalArgumentException(\"Invalid element symbol: \" + elementSymbol);\n\t}\n\n\t/**\n\t * Returns <code>true</code> if this Element is Hydrogen.\n\t * <p>\n\t * <strong>Note:</strong> Deuterium ({@link #D}) and Tritium ({@link Element#T}) will return\n\t * <code>true</code> to this method.\n\t * </p>\n\t *\n\t * @return <CODE>true</CODE> if the Element is Hydrogen.\n\t */\n\tpublic boolean isHydrogen() {\n\t\treturn this == H || this == D || this == T;\n\t}\n\n\t/**\n\t * Returns <CODE>true</CODE> is the Element is an not Hydrogen (or an\n\t * isotope of Hydrogen).\n\t * <p>\n\t * This method is the exact opposite of {@link #isHydrogen()}.\n\t * </p>\n\t *\n\t * @return <CODE>true</CODE> is Element is not Hydrogen.\n\t */\n\tpublic boolean isHeavyAtom() {\n\t\treturn !isHydrogen();\n\t}\n\n\t/**\n\t * Returns <CODE>true</CODE> if Element is not Hydrogen and not Carbon.\n\t * @return <CODE>true</CODE> if Element is not Hydrogen and not Carbon.\n\t */\n\tpublic boolean isHeteroAtom() {\n\t\treturn !(this == C || this == H);\n\t}\n\n\t/**\n\t * Returns <CODE>true</CODE> if ElementType is a metal.\n\t * @return <CODE>true</CODE> if ElementType is a metal.\n\t */\n\tpublic boolean isMetal() {\n\t\treturn elementType.isMetal();\n\t}\n\n\t/**\n\t * Returns <CODE>true</CODE> if ElementType is a metalloid.\n\t * @return <CODE>true</CODE> if ElementType is a metalloid.\n\t */\n\tpublic boolean isMetalloid() {\n\t\treturn elementType.isMetalloid();\n\t}\n\n\t/**\n\t * Returns <CODE>true</CODE> if ElementType is a non-metal.\n\t * @return <CODE>true</CODE> if ElementType is a non-metal.\n\t */\n\tpublic boolean isNonMetal() {\n\t\treturn elementType.isNonMetal();\n\t}\n\n\t/**\n\t * Returns <CODE>true</CODE> if Element is a halogen (F, Cl, Br, I, At).\n\t * @return <CODE>true</CODE> if Element is a halogen.\n\t */\n\tpublic boolean isHalogen() {\n\t\treturn elementType.equals(ElementType.HALOGEN);\n\t}\n\n\t/**\n\t * Returns <CODE>true</CODE> if Element is a chalcogen (O, S, Se, Te, Po).\n\t * @return <CODE>true</CODE> if Element is a chalcogen.\n\t */\n\tpublic boolean isChalcogen() {\n\t\treturn (this == O || this == S || this == Se || this == Te ||\n\t\t\t\tthis == Po);\n\t}\n\n\t/**\n\t * Returns the Element that corresponds to the specified Hill Order.\n\t * @param index the Hill Order.\n\t * @return the Element that corresponds to the specified Hill Order.\n\t * @see #getHillOrder()\n\t */\n\tpublic static Element getElementFromHillIndex(int index) {\n\t\tthrow new UnsupportedOperationException(\"Not implemented, yet!\");\n\t\t//return hillOrderIndex[index];\n\t}\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojava.nbio.structure;\n\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\n/**\n * Tests for Element class.\n *\n * @author Peter Rose\n * @since 3.0\n */\npublic class ElementTest {\n\n\t@Test\n\tpublic void testIsMetal() {\n\t\tElement h = Element.H;\n\t\tAssert.assertFalse(h.isMetal());\n\t\tElement he = Element.He;\n\t\tAssert.assertFalse(he.isMetal());\n\t\tElement li = Element.Li;\n\t\tAssert.assertTrue(li.isMetal());\n\t\tElement be = Element.Be;\n\t\tAssert.assertTrue(be.isMetal());\n\t\tElement b = Element.B;\n\t\tAssert.assertFalse(b.isMetal());\n\t\tElement c = Element.C;\n\t\tAssert.assertFalse(c.isMetal());\n\t\tElement f = Element.F;\n\t\tAssert.assertFalse(f.isMetal());\n\t\tElement al = Element.Al;\n\t\tAssert.assertTrue(al.isMetal());\n\t\tElement sc = Element.Sc;\n\t\tAssert.assertTrue(sc.isMetal());\n\t\tElement la = Element.La;\n\t\tAssert.assertTrue(la.isMetal());\n\t\tElement ac = Element.Ac;\n\t\tAssert.assertTrue(ac.isMetal());\n\t};\n\n\t@Test\n\tpublic void testIsMetalloid() {\n\t\tElement h = Element.H;\n\t\tAssert.assertFalse(h.isMetalloid());\n\t\tElement he = Element.He;\n\t\tAssert.assertFalse(he.isMetalloid());\n\t\tElement li = Element.Li;\n\t\tAssert.assertFalse(li.isMetalloid());\n\t\tElement be = Element.Be;\n\t\tAssert.assertFalse(be.isMetalloid());\n\t\tElement b = Element.B;\n\t\tAssert.assertTrue(b.isMetalloid());\n\t\tElement c = Element.C;\n\t\tAssert.assertFalse(c.isMetalloid());\n\t\tElement f = Element.F;\n\t\tAssert.assertFalse(f.isMetalloid());\n\t\tElement al = Element.Al;\n\t\tAssert.assertFalse(al.isMetalloid());\n\t\tElement sc = Element.Sc;\n\t\tAssert.assertFalse(sc.isMetalloid());\n\t\tElement la = Element.La;\n\t\tAssert.assertFalse(la.isMetalloid());\n\t\tElement ac = Element.Ac;\n\t\tAssert.assertFalse(ac.isMetalloid());\n\t}\n\n\t@Test\n\tpublic void testIsNonMetal() {\n\t\tElement h = Element.H;\n\t\tAssert.assertTrue(h.isNonMetal());\n\t\tElement he = Element.He;\n\t\tAssert.assertTrue(he.isNonMetal());\n\t\tElement li = Element.Li;\n\t\tAssert.assertFalse(li.isNonMetal());\n\t\tElement be = Element.Be;\n\t\tAssert.assertFalse(be.isNonMetal());\n\t\tElement b = Element.B;\n\t\tAssert.assertFalse(b.isNonMetal());\n\t\tElement c = Element.C;\n\t\tAssert.assertTrue(c.isNonMetal());\n\t\tElement f = Element.F;\n\t\tAssert.assertTrue(f.isNonMetal());\n\t\tElement al = Element.Al;\n\t\tAssert.assertFalse(al.isNonMetal());\n\t\tElement sc = Element.Sc;\n\t\tAssert.assertFalse(sc.isNonMetal());\n\t\tElement la = Element.La;\n\t\tAssert.assertFalse(la.isNonMetal());\n\t\tElement ac = Element.Ac;\n\t\tAssert.assertFalse(ac.isNonMetal());\n\t}\n\n}\n","changedTest":"","commitMessage":"Fix Sonar S1130 throws declarations should not be superfluous\n","test_commitMessage":"","allZero":false}