{"repository":"biojava","prod_path":"biojava-structure/src/main/java/org/biojava/nbio/structure/BioAssemblyIdentifier.java","test_path":"biojava-structure/src/test/java/org/biojava/nbio/structure/TestBioAssemblyIdentifier.java","prod_time":"2021-10-30 05:42:41","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":5,"add_classname_line":0,"add_condition_line":0,"add_field_line":1,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":1,"add_return_line":4,"del_annotation_line":0,"del_call_line":3,"del_classname_line":0,"del_condition_line":0,"del_field_line":1,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":4,"label":"NEGATIVE","prod_commitID":"12d348d0ad2a4f252276d8e64cf46ace04fc37b0","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.structure;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.biojava.nbio.structure.align.util.AtomCache;\n\npublic class BioAssemblyIdentifier implements StructureIdentifier {\n\n\tprivate static final long serialVersionUID = -356206725119993449L;\n\n\tprivate String pdbCode;\n\tprivate int biolNr;\n\n\tpublic static final Pattern BIO_NAME_PATTERN = Pattern.compile(\"^(?:BIO:)([0-9][a-z0-9]{3})(?::([0-9]+))?$\", Pattern.CASE_INSENSITIVE);\n\n\tpublic BioAssemblyIdentifier(String name) {\n\t\tMatcher match = BIO_NAME_PATTERN.matcher(name);\n\t\tif(! match.matches() ) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid BIO identifier\");\n\t\t}\n\t\tpdbCode = match.group(1);\n\t\tif(match.group(2) != null) {\n\t\t\tbiolNr = Integer.parseInt(match.group(2));\n\t\t} else {\n\t\t\tbiolNr = 1;\n\t\t}\n\t}\n\n\tpublic BioAssemblyIdentifier(String pdbCode, int biolNr) {\n\t\tthis.pdbCode = pdbCode;\n\t\tthis.biolNr = biolNr;\n\t}\n\n\t@Override\n\tpublic String getIdentifier() {\n\t\tif( biolNr < 0) {\n\t\t\treturn \"BIO:\"+pdbCode;\n\t\t} else {\n\t\t\treturn String.format(\"BIO:%s:%d\",pdbCode,biolNr);\n\t\t}\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn getIdentifier();\n\t}\n\n\t@Override\n\tpublic Structure loadStructure(AtomCache cache) throws StructureException,\n\t\t\tIOException {\n\t\treturn cache.getBiologicalAssembly(pdbCode, biolNr, AtomCache.DEFAULT_BIOASSEMBLY_STYLE);\n\t}\n\n\t@Override\n\tpublic SubstructureIdentifier toCanonical() throws StructureException {\n\t\treturn new SubstructureIdentifier(pdbCode, new ArrayList<ResidueRange>());\n\t}\n\n\t@Override\n\tpublic Structure reduce(Structure input) throws StructureException {\n\t\t// Should be the full structure\n\t\treturn input;\n\t}\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.structure;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.biojava.nbio.structure.align.util.AtomCache;\n\npublic class BioAssemblyIdentifier implements StructureIdentifier {\n\n\tprivate static final long serialVersionUID = -356206725119993449L;\n\n\tprivate PdbId pdbId;\n\tprivate int biolNr;\n\n\tpublic static final Pattern BIO_NAME_PATTERN = Pattern.compile(\"^(?:BIO:)([0-9][a-z0-9]{3})(?::([0-9]+))?$\", Pattern.CASE_INSENSITIVE);\n\n\tpublic BioAssemblyIdentifier(String name) {\n\t\tMatcher match = BIO_NAME_PATTERN.matcher(name);\n\t\tif(! match.matches() ) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid BIO identifier\");\n\t\t}\n\t\tpdbId = new PdbId(match.group(1));\n\t\tif(match.group(2) != null) {\n\t\t\tbiolNr = Integer.parseInt(match.group(2));\n\t\t} else {\n\t\t\tbiolNr = 1;\n\t\t}\n\t}\n\n\t/**\n\t * @param pdbCode\n\t * @param biolNr\n\t */\n\tpublic BioAssemblyIdentifier(String pdbCode, int biolNr) {\n\t\tthis(new PdbId(pdbCode), biolNr);\n\t}\n\n\t/**\n\t * @param pdbCode\n\t * @param biolNr\n\t */\n\tpublic BioAssemblyIdentifier(PdbId pdbId, int biolNr) {\n\t\tthis.pdbId = pdbId;\n\t\tthis.biolNr = biolNr;\n\t}\n\n\t@Override\n\tpublic String getIdentifier() {\n\t\tif( biolNr < 0) {\n\t\t\treturn \"BIO:\"+pdbId.getId();\n\t\t} else {\n\t\t\treturn String.format(\"BIO:%s:%d\",pdbId.getId(),biolNr);\n\t\t}\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn getIdentifier();\n\t}\n\n\t@Override\n\tpublic Structure loadStructure(AtomCache cache) throws StructureException,\n\t\t\tIOException {\n\t\treturn cache.getBiologicalAssembly(pdbId, biolNr, AtomCache.DEFAULT_BIOASSEMBLY_STYLE);\n\t}\n\n\t@Override\n\tpublic SubstructureIdentifier toCanonical() throws StructureException {\n\t\treturn new SubstructureIdentifier(pdbId, new ArrayList<ResidueRange>());\n\t}\n\n\t@Override\n\tpublic Structure reduce(Structure input) throws StructureException {\n\t\t// Should be the full structure\n\t\treturn input;\n\t}\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.structure;\n\nimport static org.junit.Assert.*;\n\nimport java.io.IOException;\n\nimport org.biojava.nbio.structure.align.util.AtomCache;\nimport org.junit.Test;\n\npublic class TestBioAssemblyIdentifier {\n\n\n\t@Test\n\tpublic void test() throws IOException, StructureException {\n\n\t\tAtomCache cache = new AtomCache();\n\t\tBioAssemblyIdentifier id;\n\t\tStructure s;\n\n\t\t// first assembly\n\t\tid = new BioAssemblyIdentifier(\"BIO:2ehz:1\");\n\t\ts = cache.getStructure(id);\n\t\tassertEquals(\"Number of models\",1, s.nrModels());\n\t\tassertEquals(\"Number of chains\",88, s.getChains().size());\n\t\t// equivalent\n\t\tid = new BioAssemblyIdentifier(\"BIO:2ehz\");\n\t\ts = cache.getStructure(id);\n\t\tassertEquals(\"Number of models\",1, s.nrModels());\n\t\tassertEquals(\"Number of chains\",8,s.getPolyChains().size());\n\t\t// No second\n\t\tid = new BioAssemblyIdentifier(\"BIO:2ehz:2\");\n\t\ttry {\n\t\t\ts = cache.getStructure(id);\n\t\t\tfail(\"Expected exception for invalid assembly number\");\n\t\t} catch( StructureException e) {}\n\t\t// AU\n\t\tid = new BioAssemblyIdentifier(\"BIO:2ehz:0\");\n\t\ts = cache.getStructure(id);\n\t\tassertEquals(\"Number of models\",1, s.nrModels());\n\t\tassertEquals(\"Number of chains per model\",1,s.getPolyChains(0).size());\n\n\t}\n\n}\n","changedTest":"","commitMessage":"Support extended pdbid (#950)\n\n* Support for extended PDBID PDB_nnnnNXXX\r\n\r\nCreated a new class PDBId, and removed old deprecated methods.\r\nMost of the changes are in Structure, StructureImpl, and PDBFileParser\r\nclasses.\r\n\r\n* Some deprecated functions removal\r\n\r\n* Fix typo\r\n\r\n* Targeted most of Spencer's comments\r\n\r\n* Fixed a bug in PDBId.equals() method\r\n\r\n* Changing PDBID in SCOP record to lower case\r\n\r\nto match the expected String\r\n\r\n* public static PDBId field XXXX\r\n\r\n* Behavior is now an enum\r\n\r\n* Expose Pattern objects instead of Strings\r\n\r\n* ID stored internally in a reduced format (without initial \"PDB_\" prefix)\r\n\r\nOnly the ID proper is stored (in upper case).\r\ne.g. for 1abc we store 00001ABC.\r\n\r\nThis format is the trade off between storing short/extended format and\r\nall extended format.\r\nstoring the ID proper allows direct comparison and fast ordering of\r\nPDBId objects with uniform names in the format \\d{4}[1-9][0-9A-Z]{3}.\r\n\r\n* Enhancements and bug fix\r\n\r\n* Added BDBId Unit test\r\n\r\n* Added @Deprecated codeTag\r\n\r\n* Adding more TODOs\r\n\r\n* more replacement of deprecated methods\r\n\r\n* Removed PDBIdException\r\n\r\nI replaced the PDBException with IllegalArgumentException or\r\nStructureException:\r\n- Constant literal extraction\r\n- Inlined short private methods\r\n- Renamed isShortPDBId() and isExtendedPDBID() to isValidShortPDBID()\r\nand isValidExtendedPDBID()\r\n\r\nAdditional modifications:\r\n- Organized imports\r\n\r\n* review and untouch regular expressions\r\n\r\n* Un-deprecate, copy javadoc, and remove @author on methods\r\n\r\n* Remove NullPointerException\r\n\r\nI will write the full class javadoc later\r\n\r\n* Bug fix\r\n\r\n* clean commented out code\r\n\r\n* Update CHANGELOG\r\n\r\nMentioned that getReducedStructure() is removed from StructureTools\r\n\r\n* Fix unit test\r\n\r\nI accident.y found that the test case is not written as it should be.\r\n\r\n* PdbPair does not accept null\r\n\r\nIt also considers an object and its reverse equal\r\n\r\n* Addressing reviewer's comments\r\n\r\n* Change capitalization state\r\n\r\n- Class name: changed into PdbId\r\n- methods name: changed into getPdbId(), setPdbId(PdbId)\r\n- field name: pdbId\r\n\r\n* Fix probable NPE + keep consistent PdbId method naming convention\r\n\r\n* Addressed some of the reviewer's comments.\r\n\r\n* Use JUnit 5\r\n\r\n* PdbId class Documentation\r\n\r\n* JavaDoc style update\r\n\r\n* Minor updates\r\n\r\n* Reverting a wrong optimization\r\n\r\nIt introduced a new bug. Reverting it.\r\n\r\n* Adding BioJava development code\r\n\r\n* Javadoc\r\n\r\n* XXXX PdbId objects are not equal unless they are the same object\r\n\r\n* No more XXXX. ANY malformed PdbId gracefully set to null\r\n\r\n* Addressing Reviewer's comments\r\n\r\n* Removing TODOs","test_commitMessage":"","allZero":false}