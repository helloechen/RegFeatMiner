{"repository":"biojava","prod_path":"biojava3-structure/src/main/java/org/biojava/bio/structure/Element.java","test_path":"biojava3-structure/src/test/java/org/biojava/bio/structure/ElementTest.java","prod_time":"2011-03-16 07:47:19","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":2,"add_classname_line":0,"add_condition_line":0,"add_field_line":1,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":2,"del_classname_line":0,"del_condition_line":0,"del_field_line":1,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":1,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"29d62a640a4d03c91c9541d88a2ec2cab3a147b2","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 29.04.2010\n *\n */\npackage org.biojava.bio.structure;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Element is an enumeration of the elements of the periodic table. In addition,\n * several attributes of each element are accessible.\n * <B>Note:</B> Deuterium and Tritium are treated as separate elements D and T,\n * respectively. Sometimes part of a molecule is represented as an R-group, which\n * is represented as the element R.\n * \n *  \n * @author Peter Rose\n * @version %I% %G%\n * @since 3.0\n * \n */\n\npublic enum Element implements Serializable {\n\n\t// most frequently used elements first\n    H(1, 1, 39, 1.10f, 0.32f, 1, 1, 1, 1, 1, 1.008f, 0, 1, 2.20f, ElementType.OTHER_NONMETAL),\n    C(6, 2, 0, 1.55f, 0.77f, 4, 4, 4, 4, 4, 12.011f, 2, -4, 2.55f, ElementType.OTHER_NONMETAL),\n    N(7, 2, 57, 1.40f, 0.75f, 5, 2, 5, 3, 4, 14.007f, 2, -3, 3.04f, ElementType.OTHER_NONMETAL),\n    O(8, 2, 65, 1.35f, 0.73f, 6, 1, 2, 2, 2, 16.000f, 2, -2, 3.44f, ElementType.OTHER_NONMETAL),\n    /**\n     * Deuterim\n     */\n    D(1, 1, 27, 1.10f, 0.32f, 1, 1, 1, 1, 1, 1.008f, 0, 1, 2.20f, ElementType.OTHER_NONMETAL), // need to edit properties!\n    /**\n     * Tritium\n     */\n    T(1, 1, 90, 1.10f, 0.32f, 1, 1, 1, 1, 1, 1.008f, 0, 1, 2.20f, ElementType.OTHER_NONMETAL), // need to edit properties!\n    He(2, 1, 40, 2.20f, 1.60f, 2, 0, 12, 0, 0, 4.003f, 2, 0, 0.0f, ElementType.NOBLE_GAS), // electroneg not reported\n    Li(3, 2, 50, 1.22f, 1.34f, 1, 0, 12, 0, 1, 6.940f, 2, 1, 0.98f, ElementType.ALKALI_METAL),\n    Be(4, 2, 12, 0.63f, 0.90f, 2, 0, 12, 2, 2, 9.012f, 2, 2, 1.57f, ElementType.TRANSITION_METAL),\n    B(5, 2, 10, 1.55f, 0.82f, 3, 3, 5, 3, 4, 10.810f, 2, 3, 2.04f, ElementType.METALLOID),\n    F(9, 2, 32, 1.30f, 0.72f, 7, 0, 1, 1, 1, 18.998f, 2, -1, 3.98f, ElementType.HALOGEN),\n    Ne(10, 2, 61, 2.02f, 1.12f, 8, 0, 12, 0, 0, 20.170f, 10, 0, 0.00f, ElementType.NOBLE_GAS), // electroneg not reported\n    Na(11, 3, 58, 2.20f, 1.54f, 1, 0, 1, 0, 0, 22.990f, 10, 1, 0.93f, ElementType.ALKALI_METAL),\n    Mg(12, 3, 54, 1.50f, 1.30f, 2, 0, 2, 0, 2, 24.305f, 10, 2, 1.31f, ElementType.ALKALINE_EARTH_METAL),\n    Al(13, 3, 4, 1.50f, 1.18f, 3, 0, 5, 0, 4, 26.982f, 10, 3, 1.61f, ElementType.POST_TRANSITION_METAL),\n    Si(14, 3, 86, 2.20f, 1.11f, 4, 4, 4, 4, 4, 28.086f, 10, 4, 1.90f, ElementType.METALLOID),\n    P(15, 3, 67, 1.88f, 1.06f, 5, 3, 5, 3, 5, 30.974f, 10, 5, 2.19f, ElementType.OTHER_NONMETAL),\n    S(16, 3, 82, 1.81f, 1.02f, 6, 2, 6, 2, 6, 32.060f, 10, -2, 2.58f, ElementType.OTHER_NONMETAL), \n    Cl(17, 3, 21, 1.75f, 0.99f, 7, 0, 1, 1, 1, 35.453f, 10, -1, 3.16f, ElementType.HALOGEN),\n    Ar(18, 4, 6, 2.77f, 1.54f, 8, 0, 12, 0, 0, 39.948f, 18, 0, 0.00f, ElementType.NOBLE_GAS), // electroneg not reported\n    K(19, 4, 47, 2.39f, 1.96f, 1, 0, 12, 0, 0, 39.102f, 18, 1, 0.82f, ElementType.ALKALI_METAL),\n    Ca(20, 4, 17, 1.95f, 1.74f, 2, 0, 2, 0, 0, 40.080f, 18, 2, 1.00f, ElementType.ALKALINE_EARTH_METAL),\n    Sc(21, 4, 84, 1.32f, 1.44f, 3, 0, 12, 3, 0, 44.956f, 18, 3, 1.36f, ElementType.TRANSITION_METAL),\n    Ti(22, 4, 96, 1.95f, 1.36f, 4, 2, 4, 3, 4, 47.880f, 18, 4, 1.54f, ElementType.TRANSITION_METAL),\n    V(23, 4, 100, 1.06f, 1.25f, 5, 0, 12, 3, 0, 50.040f, 18, 5, 1.63f, ElementType.TRANSITION_METAL),\n    Cr(24, 4, 24, 1.13f, 1.27f, 6, 0, 12, 2, 0, 51.996f, 18, 3, 1.66f, ElementType.TRANSITION_METAL),\n    Mn(25, 4, 55, 1.19f, 1.39f, 7, 0, 12, 0, 0, 54.938f, 18, 2, 1.55f, ElementType.TRANSITION_METAL),\n    Fe(26, 4, 33, 1.95f, 1.25f, 3, 0, 8, 0, 0, 55.847f, 18, 3, 1.83f, ElementType.TRANSITION_METAL),\n    Co(27, 4, 23, 1.13f, 1.26f, 3, 0, 12, 0, 0, 58.933f, 18, 2, 1.88f, ElementType.TRANSITION_METAL),\n    Ni(28, 4, 62, 1.24f, 1.21f, 3, 0, 12, 0, 0, 58.710f, 18, 2, 1.91f, ElementType.TRANSITION_METAL),\n    Cu(29, 4, 26, 1.15f, 1.38f, 2, 0, 4, 0, 0, 63.546f, 18, 2, 1.90f, ElementType.TRANSITION_METAL),\n    Zn(30, 4, 106, 1.15f, 1.31f, 2, 0, 2, 0, 0, 65.380f, 18, 2, 1.65f, ElementType.TRANSITION_METAL),\n    Ga(31, 4, 36, 1.55f, 1.26f, 3, 1, 4, 2, 4, 69.720f, 28, 3, 1.81f, ElementType.POST_TRANSITION_METAL),\n    Ge(32, 4, 38, 2.72f, 1.22f, 4, 0, 12, 4, 4, 72.590f, 28, 4, 2.01f, ElementType.METALLOID),\n    As(33, 4, 7, 0.83f, 1.19f, 5, 0, 12, 3, 5, 74.922f, 28, -3, 2.18f, ElementType.METALLOID),\n    Se(34, 4, 85, 0.90f, 1.16f, 6, 0, 12, 2, 6, 78.960f, 28, 4, 2.55f, ElementType.OTHER_NONMETAL),\n    Br(35, 4, 15, 1.95f, 1.14f, 7, 0, 1, 1, 1, 79.904f, 28, -1, 2.96f, ElementType.HALOGEN),\n    Kr(36, 4, 48, 1.90f, 1.60f, 8, 0, 12, 0, 0, 83.800f, 28, 0, 3.00f, ElementType.NOBLE_GAS),\n    Rb(37, 5, 77, 2.65f, 2.11f, 1, 0, 12, 0, 0, 85.467f, 36, 1, 0.82f, ElementType.ALKALI_METAL),\n    Sr(38, 5, 89, 2.02f, 1.92f, 2, 0, 12, 2, 0, 87.620f, 36, 2, 0.95f, ElementType.ALKALINE_EARTH_METAL),\n    Y(39, 5, 103, 1.61f, 1.62f, 3, 0, 12, 3, 0, 88.806f, 36, 3, 1.22f, ElementType.TRANSITION_METAL),\n    Zr(40, 5, 105, 1.42f, 1.48f, 4, 0, 12, 4, 0, 91.220f, 36, 4, 1.33f, ElementType.TRANSITION_METAL),\n    Nb(41, 5, 59, 1.33f, 1.37f, 5, 0, 12, 3, 0, 92.906f, 36, 5, 1.60f, ElementType.TRANSITION_METAL),\n    Mo(42, 5, 56, 1.75f, 1.45f, 6, 1, 6, 3, 0, 95.940f, 36, 6, 2.16f, ElementType.TRANSITION_METAL),\n    Tc(43, 5, 93, 1.80f, 1.56f, 7, 0, 12, 6, 0, 98.910f, 36, 7, 1.90f, ElementType.TRANSITION_METAL),\n    Ru(44, 5, 81, 1.20f, 1.26f, 8, 0, 12, 3, 0, 101.070f, 36, 4, 2.20f, ElementType.TRANSITION_METAL),\n    Rh(45, 5, 79, 1.22f, 1.35f, 4, 0, 12, 3, 0, 102.906f, 36, 3, 2.28f, ElementType.TRANSITION_METAL),\n    Pd(46, 5, 70, 1.44f, 1.31f, 4, 0, 12, 2, 0, 106.400f, 36, 2, 2.20f, ElementType.TRANSITION_METAL),\n    Ag(47, 5, 3, 1.55f, 1.53f, 1, 0, 6, 0, 0, 107.868f, 36, 1, 1.93f, ElementType.TRANSITION_METAL),\n    Cd(48, 5, 18, 1.75f, 1.48f, 2, 0, 12, 0, 0, 112.400f, 36, 2, 1.69f, ElementType.TRANSITION_METAL),\n    In(49, 5, 45, 1.46f, 1.44f, 3, 0, 12, 3, 0, 114.820f, 46, 3, 1.78f, ElementType.POST_TRANSITION_METAL),\n    Sn(50, 5, 88, 1.67f, 1.41f, 4, 0, 12, 2, 4, 118.690f, 46, 4, 1.96f, ElementType.POST_TRANSITION_METAL),\n    Sb(51, 5, 83, 1.12f, 1.38f, 5, 0, 12, 4, 5, 121.750f, 46, -3, 2.05f, ElementType.METALLOID),\n    Te(52, 5, 94, 1.26f, 1.35f, 6, 0, 12, 2, 6, 127.600f, 46, 4, 2.10f, ElementType.METALLOID),\n    I(53, 5, 44, 2.15f, 1.33f, 7, 1, 1, 1, 1, 126.905f, 46, -1, 2.66f, ElementType.HALOGEN),\n    Xe(54, 5, 102, 2.10f, 1.70f, 8, 0, 12, 0, 0, 131.300f, 46, 0, 2.60f, ElementType.NOBLE_GAS),\n    Cs(55, 6, 25, 3.01f, 2.25f, 1, 0, 12, 0, 0, 132.905f, 54, 1, 0.79f, ElementType.ALKALI_METAL),\n    Ba(56, 6, 11, 2.41f, 1.98f, 2, 0, 12, 0, 0, 137.340f, 54, 2, 0.89f, ElementType.ALKALINE_EARTH_METAL),\n    La(57, 6, 49, 1.83f, 1.95f, 3, 0, 12, 3, 0, 138.905f, 54, 3, 1.10f, ElementType.LANTHANOID),\n    Ce(58, 6, 19, 1.86f, 1.03f, 4, 0, 12, 3, 0, 140.120f, 54, 3, 1.12f, ElementType.LANTHANOID),\n    Pr(59, 6, 73, 1.62f, 0.90f, 4, 0, 12, 3, 0, 140.908f, 55, 3, 1.13f, ElementType.LANTHANOID),\n    Nd(60, 6, 60, 1.79f, 0.99f, 3, 0, 12, 3, 0, 144.240f, 56, 3, 1.14f, ElementType.LANTHANOID),\n    Pm(61, 6, 71, 1.76f, 0.98f, 3, 0, 12, 3, 0, 145.000f, 58, 3, 1.13f, ElementType.LANTHANOID),\n    Sm(62, 6, 87, 1.74f, 0.96f, 3, 0, 12, 2, 0, 150.400f, 59, 3, 1.17f, ElementType.LANTHANOID),\n    Eu(63, 6, 31, 1.96f, 1.09f, 3, 0, 12, 2, 0, 151.960f, 60, 3, 1.20f, ElementType.LANTHANOID),\n    Gd(64, 6, 37, 1.69f, 0.94f, 3, 0, 12, 3, 0, 157.250f, 61, 3, 1.20f, ElementType.LANTHANOID),\n    Tb(65, 6, 92, 1.66f, 0.92f, 4, 0, 12, 3, 0, 158.925f, 61, 3, 1.10f, ElementType.LANTHANOID),\n    Dy(66, 6, 28, 1.63f, 0.91f, 3, 0, 12, 3, 0, 162.500f, 62, 3, 1.22f, ElementType.LANTHANOID),\n    Ho(67, 6, 43, 1.61f, 0.89f, 3, 0, 12, 3, 0, 164.930f, 64, 3, 1.23f, ElementType.LANTHANOID),\n    Er(68, 6, 29, 1.59f, 0.88f, 3, 0, 12, 3, 0, 167.260f, 65, 3, 1.24f, ElementType.LANTHANOID),\n    Tm(69, 6, 98, 1.57f, 0.87f, 3, 0, 12, 3, 0, 168.934f, 66, 3, 1.25f, ElementType.LANTHANOID),\n    Yb(70, 6, 104, 1.54f, 0.86f, 3, 0, 12, 2, 0, 173.040f, 67, 3, 1.10f, ElementType.LANTHANOID),\n    Lu(71, 6, 52, 1.53f, 0.85f, 3, 0, 12, 3, 0, 174.970f, 68, 3, 1.27f, ElementType.LANTHANOID),\n    Hf(72, 6, 41, 1.40f, 1.58f, 4, 0, 12, 4, 0, 178.490f, 68, 4, 1.30f, ElementType.TRANSITION_METAL),\n    Ta(73, 6, 91, 1.22f, 1.38f, 5, 0, 12, 5, 0, 180.850f, 68, 5, 1.50f, ElementType.TRANSITION_METAL),\n    W(74, 6, 101, 1.26f, 1.46f, 6, 0, 12, 6, 0, 183.850f, 68, 6, 2.36f, ElementType.TRANSITION_METAL),\n    Re(75, 6, 78, 1.30f, 1.59f, 7, 0, 12, 4, 0, 186.200f, 68, 7, 1.90f, ElementType.TRANSITION_METAL),\n    Os(76, 6, 66, 1.58f, 1.28f, 8, 0, 12, 2, 0, 190.200f, 68, 4, 2.20f, ElementType.TRANSITION_METAL),\n    Ir(77, 6, 46, 1.22f, 1.37f, 6, 0, 12, 3, 0, 192.220f, 68, 4, 2.20f, ElementType.TRANSITION_METAL),\n    Pt(78, 6, 74, 1.55f, 1.28f, 4, 0, 6, 0, 0, 195.090f, 68, 4, 2.28f, ElementType.TRANSITION_METAL),\n    Au(79, 6, 9, 1.45f, 1.44f, 3, 0, 6, 0, 0, 196.967f, 68, 3, 2.54f, ElementType.TRANSITION_METAL),\n    Hg(80, 6, 42, 1.55f, 1.32f, 2, 0, 12, 1, 2, 200.59f, 78, 1, 2.00f, ElementType.TRANSITION_METAL),\n    Tl(81, 6, 97, 1.96f, 1.45f, 3, 0, 12, 1, 3, 204.3833f, 78, 1, 1.62f, ElementType.POST_TRANSITION_METAL),\n    Pb(82, 6, 69, 2.16f, 1.47f, 4, 0, 12, 2, 4, 207.200f, 78, 2, 2.33f, ElementType.POST_TRANSITION_METAL),\n    Bi(83, 6, 13, 1.73f, 1.46f, 5, 0, 12, 3, 3, 208.981f, 78, 3, 2.20f, ElementType.POST_TRANSITION_METAL),\n    Po(84, 6, 72, 1.21f, 0.67f, 6, 0, 12, 4, 2, 209.000f, 78, 4, 2.0f, ElementType.METALLOID),\n    At(85, 6, 8, 1.12f, 0.62f, 7, 0, 12, 1, 1, 210.000f, 78, -1, 2.20f, ElementType.HALOGEN),\n    Rn(86, 6, 80, 2.30f, 1.90f, 8, 0, 12, 0, 0, 222.000f, 78, 0, 0.0f, ElementType.NOBLE_GAS), // electroneg not reported\n    Fr(87, 7, 35, 3.24f, 1.80f, 1, 0, 12, 0, 0, 223.000f, -1, 1, 0.70f, ElementType.ALKALI_METAL),\n    Ra(88, 7, 76, 2.57f, 1.43f, 2, 0, 12, 2, 0, 226.000f, -1, 2, 0.9f, ElementType.ALKALINE_EARTH_METAL),\n    Ac(89, 7, 2, 2.12f, 1.18f, 3, 0, 12, 4, 0, 227.000f, -1, 3, 1.1f, ElementType.ACTINOID),\n    Th(90, 7, 95, 1.84f, 1.02f, 4, 0, 12, 1, 0, 232.038f, -1, 4, 1.30f, ElementType.ACTINOID),\n    Pa(91, 7, 68, 1.60f, 0.89f, 5, 0, 12, 4, 0, 231.036f, -1, 5, 1.50f, ElementType.ACTINOID),\n    U(92, 7, 99, 1.75f, 0.97f, 6, 0, 12, 4, 0, 238.029f, -1, 6, 1.38f, ElementType.ACTINOID),\n    Np(93, 7, 64, 1.71f, 0.95f, 6, 0, 12, 4, 0, 237.048f, -1, 5, 1.36f, ElementType.ACTINOID),\n    Pu(94, 7, 75, 1.67f, 0.93f, 6, 0, 12, 3, 0, 244.000f, -1, 4, 1.28f, ElementType.ACTINOID),\n    Am(95, 7, 5, 1.66f, 0.92f, 6, 0, 12, 3, 0, 243.000f, -1, 3, 1.13f, ElementType.ACTINOID),\n    Cm(96, 7, 22, 1.65f, 0.91f, 3, 0, 12, 3, 0, 248.000f, -1, 3, 1.28f, ElementType.ACTINOID),\n    Bk(97, 7, 14, 1.64f, 0.90f, 4, 0, 12, 3, 0, 247.000f, -1, 3, 1.30f, ElementType.ACTINOID),\n    Cf(98, 7, 20, 1.63f, 0.89f, 3, 0, 12, 4, 0, 251.000f, -1, 3, 1.30f, ElementType.ACTINOID),\n    Es(99, 7, 30, 1.62f, 0.88f, -1, 0, 12, 4, 0, 254.000f, -1, 3, 1.30f, ElementType.ACTINOID),\n    Fm(100, 7, 34, 1.61f, 0.87f, -1, 0, 12, 4, 0, 257.000f, -1, 3, 1.30f, ElementType.ACTINOID),\n    Md(101, 7, 53, 1.60f, 0.86f, -1, 0, 12, 4, 0, 256.000f, -1, 3, 1.30f, ElementType.ACTINOID),\n    No(102, 7, 63, 1.59f, 0.85f, -1, 0, 12, 4, 0, 254.000f, -1, 3, 1.30f, ElementType.ACTINOID),\n    Lr(103, 7, 51, 1.58f, 0.84f, -1, 0, 12, 4, 0, 257.000f, -1, 3, 0.00f, ElementType.ACTINOID), // electroneg not reported\n    /**\n     * R-group to represent generic groups that are sometimes present in MDL .sdf\n     * files.\n     */\n    R(104, 0, 105, 0.0f, 0.0f, 0, 0, 4, 1, 0, 0.000f, -1, 3, 0.00f, ElementType.UNKNOWN); // this is an R-group\n    // should these be declared final?\n    private int atomicNumber;\n    private int period;\n    private int hillOrder;\n    private float VDWRadius; // in Angstroms\n    private float covalentRadius; // in Angstroms\n    private int valenceElectronCount;\n    private int minimumValence;\n    private int maximumValence;\n    private int commonValence;\n    private int maximumCovalentValence;\n    private float atomicMass;\n    private int coreElectronCount;\n    private int oxidationState;\n    // Pauling electronegativity: http://en.wikipedia.org/wiki/Electronegativity\n    private float paulingElectronegativity;\n    // Element type: http://www.ptable.com/\n    private ElementType elementType;\n    //private static final Element[] hillOrderIndex;\n    \n//\n//    static {\n//        hillOrderIndex = new Element[Element.values().length + 1];\n//        for (Element e : Element.values()) {\n//            hillOrderIndex[e.getHillOrder()] = e;\n//        }\n//        hillOrderIndex[Element.H.getHillOrder()] = Element.H; // special case for hydrogen\n//    }\n\n    private static Map<String,Element> allElements = new HashMap<String,Element>();\n   \n    private Element(int atomicNumber,\n            int period,\n            int hillOrder,\n            float VDWRadius,\n            float covalentRadius,\n            int valenceElectronCount,\n            int minimumValence,\n            int maximumValence,\n            int commonValence,\n            int maximumCovalentValence,\n            float atomicMass,\n            int coreElectronCount,\n            int oxidationState,\n            float paulingElectronegativity,\n            ElementType elementType) {\n\n        this.atomicNumber = atomicNumber;\n        this.period = period;\n        this.hillOrder = hillOrder;\n        this.VDWRadius = VDWRadius;\n        this.covalentRadius = covalentRadius;\n        this.valenceElectronCount = valenceElectronCount;\n        this.minimumValence = minimumValence;\n        this.maximumValence = maximumValence;\n        this.commonValence = commonValence;\n        this.maximumCovalentValence = maximumCovalentValence;\n        this.atomicMass = atomicMass;\n        this.coreElectronCount = coreElectronCount;\n        this.oxidationState = oxidationState;\n        this.paulingElectronegativity = paulingElectronegativity;\n        this.elementType = elementType;\n        \n        addElement(this.toString(),this);\n    }\n\n    private static void addElement(String name, Element e){\n    \tallElements.put(name.toLowerCase(), e);\n    }\n    /**\n     * Returns the atomic number of this Element.\n     * @return the atomic number of this Element.\n     */\n    public int getAtomicNumber() {\n        return atomicNumber;\n    }\n\n    /**\n     * Returns the period in the periodic table of this Element.\n     * @return the period in the periodic table of this Element.\n     */\n    public int getPeriod() {\n        return period;\n    }\n\n    /**\n     * Returns the Hill Order of this Element. The Hill Order represents the\n     * priority by which elements are sorted in molecular formulas.\n     * The Hill system is a system of writing chemical formulas such that the\n     * number of carbon atoms in a molecule is indicated first, the number of\n     * hydrogen atoms next, and then the number of all other chemical elements\n     * subsequently, in alphabetical order. When the formula contains no carbon,\n     * all the elements, including hydrogen, are listed alphabetically.\n     * <p>\n     * Edwin A. Hill, \"On A System Of Indexing Chemical Literature;\n     * Adopted By The Classification Division Of The U. S. Patent Office\".\n     * J. Am. Chem. Soc. 1900, 22(8), 478-494.\n     * <p>\n     * <a href=\"http://en.wikipedia.org/wiki/Hill_system\">\n     * http://en.wikipedia.org/wiki/Hill_system</a>\n     * <p>\n     * @return the Hill Order of this Element.\n     */\n    public int getHillOrder() {\n    \tthrow new RuntimeException(\"Not implemented, yet!\");\n    \t//throw new NotImplementedYetException();\n        //return hillOrder;\n    }\n\n    /**\n     * Returns the van der Waals radius of this Element.\n     * @return the van der Waals radius of this Element, measured in Angstroms.\n     */\n    public float getVDWRadius() {\n        return VDWRadius;\n    }\n\n    /**\n     * Returns the covalent radius of this Element.\n     * @return covalent radius, measured in Angstroms.\n     */\n    public float getCovalentRadius() {\n        return covalentRadius;\n    }\n\n    /**\n     * Returns the number of valence electrons for this Element.\n     * @return the number of valence electrons for this Element.\n     */\n    public int getValenceElectronCount() {\n        return valenceElectronCount;\n    }\n\n    /**\n     * Returns the minimum valence for this Element.\n     * @return the minimum valence of this atom.\n     */\n    public int getMinimumValence() {\n        return minimumValence;\n    }\n\n    /**\n     * Returns the maximum valence for this Element.\n     * @return the maximum valence for this Element.\n     */\n    public int getMaximumValence() {\n        return maximumValence;\n    }\n\n    /**\n     * Returns the common valence for this Element.\n     * @return the common valence for this Element.\n     */\n    public int getCommonValence() {\n        return commonValence;\n    }\n\n    /**\n     * Returns the maximum valence for this Element.\n     * @return the maximum valence of this element.\n     */\n    public int getMaximumCovalentValence() {\n        return maximumCovalentValence;\n    }\n\n    /**\n     * Returns the atomic mass for this Element.\n     * @return the atomic mass for this Element, measured in g/mol.\n     */\n    public float getAtomicMass() {\n        return atomicMass;\n    }\n\n    /**\n     * Returns the number of core electrons for this Element.\n     * @return number of core electrons for this Element.\n     */\n    public int getCoreElectronCount() {\n        return coreElectronCount;\n    }\n\n    /**\n     * Returns a typical oxidation state for this Element. This information is mostly\n     * useful for metals.\n     * @return a typical oxidation state for this Element.\n     */\n    public int getOxidationState() {\n        return oxidationState;\n    }\n\n    /**\n     * Returns the Pauling electronegativity for this Element.\n     * @return the Pauling electronegativity for this Element.\n     */\n    public float getPaulingElectronegativity() {\n        return paulingElectronegativity;\n    }\n\n    /**\n     * Returns the Element Type for this Element.\n     * @return the Element Type for this Element.\n     */\n    public ElementType getElementType() {\n        return elementType;\n    }\n    \n    /**\n     * Returns the Element that corresponds to the specified element symbol. The case\n     * of the element symbol is ignored. Example: FE, fe, Fe represent iron.\n     * @param elementSymbol element symbol to specify Element.\n     * @return the Element specified by the element symbol.\n     */\n    public static Element valueOfIgnoreCase(String elementSymbol) throws IllegalArgumentException {\n\n    \tElement e = allElements.get(elementSymbol.toLowerCase());\n        if ( e != null)\n        \treturn e;\n        throw new IllegalArgumentException(\"Invalid element symbol: \" + elementSymbol);\n    }\n\n    /**\n     * Returns true if this Element is Hydrogen. <B>Note:</B> currently Deuterium (D)\n     * and Tritium (T) are not considered Hydrogen.\n     * @return <CODE>true</CODE> if the Element is Hydrogen.\n     */\n    public boolean isHydrogen() {\n        return (this == H);\n    }\n\n    /**\n     * Returns <CODE>true</CODE> is the Element is an not Hydrogen.\n     * @return <CODE>true</CODE> is Element is not Hydrogen.\n     */\n    public boolean isHeavyAtom() {\n        return (this != H);\n    }\n\n    /**\n     * Returns <CODE>true</CODE> if Element is not Hydrogen and not Carbon.\n     * @return <CODE>true</CODE> if Element is not Hydrogen and not Carbon.\n     */\n    public boolean isHeteroAtom() {\n        return !(this == C || this == H);\n    }\n\n\t/**\n     * Returns <CODE>true</CODE> if ElementType is a metal.\n     * @return <CODE>true</CODE> if ElementType is a metal.\n     */\n\tpublic boolean isMetal() {\n\t\treturn elementType.isMetal();\n\t}\n\t\n\t/**\n     * Returns <CODE>true</CODE> if ElementType is a metalloid.\n     * @return <CODE>true</CODE> if ElementType is a metalloid.\n     */\n\tpublic boolean isMetalloid() {\n\t\treturn elementType.isMetalloid();\n\t}\n\t\n\t/**\n     * Returns <CODE>true</CODE> if ElementType is a non-metal.\n     * @return <CODE>true</CODE> if ElementType is a non-metal.\n     */\n\tpublic boolean isNonMetal() {\n\t\treturn elementType.isNonMetal();\n\t}\n\t\n\t/**\n     * Returns <CODE>true</CODE> if Element is a halogen (F, Cl, Br, I, At).\n     * @return <CODE>true</CODE> if Element is a halogen.\n     */\n    public boolean isHalogen() {\n        return elementType.equals(ElementType.HALOGEN);\n    }\n    \n    /**\n     * Returns <CODE>true</CODE> if Element is a chalcogen (O, S, Se, Te, Po).\n     * @return <CODE>true</CODE> if Element is a chalcogen.\n     */\n    public boolean isChalcogen() {\n        return (this == O || this == S || this == Se || this == Te ||\n                this == Po);\n    }\n\n    /**\n     * Returns the Element that corresponds to the specified Hill Order.\n     * @param index the Hill Order.\n     * @return the Element that corresponds to the specified Hill Order.\n     * @see #getHillOrder()\n     */\n    public static Element getElementFromHillIndex(int index) {\n    \tthrow new RuntimeException(\"Not implemented, yet!\");\n        //return hillOrderIndex[index];\n    }\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 29.04.2010\n *\n */\npackage org.biojava.bio.structure;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Element is an enumeration of the elements of the periodic table. In addition,\n * several attributes of each element are accessible.\n * <B>Note:</B> Deuterium and Tritium are treated as separate elements D and T,\n * respectively. Sometimes part of a molecule is represented as an R-group, which\n * is represented as the element R.\n * \n *  \n * @author Peter Rose\n * @version %I% %G%\n * @since 3.0\n * \n */\n\npublic enum Element implements Serializable {\n\n\t// most frequently used elements first\n    H(1, 1, 39, 1.10f, 0.32f, 1, 1, 1, 1, 1, 1.008f, 0, 1, 2.20f, ElementType.OTHER_NONMETAL),\n    C(6, 2, 0, 1.55f, 0.77f, 4, 4, 4, 4, 4, 12.011f, 2, -4, 2.55f, ElementType.OTHER_NONMETAL),\n    N(7, 2, 57, 1.40f, 0.75f, 5, 2, 5, 3, 4, 14.007f, 2, -3, 3.04f, ElementType.OTHER_NONMETAL),\n    O(8, 2, 65, 1.35f, 0.73f, 6, 1, 2, 2, 2, 16.000f, 2, -2, 3.44f, ElementType.OTHER_NONMETAL),\n    /**\n     * Deuterim\n     */\n    D(1, 1, 27, 1.10f, 0.32f, 1, 1, 1, 1, 1, 1.008f, 0, 1, 2.20f, ElementType.OTHER_NONMETAL), // need to edit properties!\n    /**\n     * Tritium\n     */\n    T(1, 1, 90, 1.10f, 0.32f, 1, 1, 1, 1, 1, 1.008f, 0, 1, 2.20f, ElementType.OTHER_NONMETAL), // need to edit properties!\n    He(2, 1, 40, 2.20f, 1.60f, 2, 0, 12, 0, 0, 4.003f, 2, 0, 0.0f, ElementType.NOBLE_GAS), // electroneg not reported\n    Li(3, 2, 50, 1.22f, 1.34f, 1, 0, 12, 0, 1, 6.940f, 2, 1, 0.98f, ElementType.ALKALI_METAL),\n    Be(4, 2, 12, 0.63f, 0.90f, 2, 0, 12, 2, 2, 9.012f, 2, 2, 1.57f, ElementType.TRANSITION_METAL),\n    B(5, 2, 10, 1.55f, 0.82f, 3, 3, 5, 3, 4, 10.810f, 2, 3, 2.04f, ElementType.METALLOID),\n    F(9, 2, 32, 1.30f, 0.72f, 7, 0, 1, 1, 1, 18.998f, 2, -1, 3.98f, ElementType.HALOGEN),\n    Ne(10, 2, 61, 2.02f, 1.12f, 8, 0, 12, 0, 0, 20.170f, 10, 0, 0.00f, ElementType.NOBLE_GAS), // electroneg not reported\n    Na(11, 3, 58, 2.20f, 1.54f, 1, 0, 1, 0, 0, 22.990f, 10, 1, 0.93f, ElementType.ALKALI_METAL),\n    Mg(12, 3, 54, 1.50f, 1.30f, 2, 0, 2, 0, 2, 24.305f, 10, 2, 1.31f, ElementType.ALKALINE_EARTH_METAL),\n    Al(13, 3, 4, 1.50f, 1.18f, 3, 0, 5, 0, 4, 26.982f, 10, 3, 1.61f, ElementType.POST_TRANSITION_METAL),\n    Si(14, 3, 86, 2.20f, 1.11f, 4, 4, 4, 4, 4, 28.086f, 10, 4, 1.90f, ElementType.METALLOID),\n    P(15, 3, 67, 1.88f, 1.06f, 5, 3, 5, 3, 5, 30.974f, 10, 5, 2.19f, ElementType.OTHER_NONMETAL),\n    S(16, 3, 82, 1.81f, 1.02f, 6, 2, 6, 2, 6, 32.060f, 10, -2, 2.58f, ElementType.OTHER_NONMETAL), \n    Cl(17, 3, 21, 1.75f, 0.99f, 7, 0, 1, 1, 1, 35.453f, 10, -1, 3.16f, ElementType.HALOGEN),\n    Ar(18, 4, 6, 2.77f, 1.54f, 8, 0, 12, 0, 0, 39.948f, 18, 0, 0.00f, ElementType.NOBLE_GAS), // electroneg not reported\n    K(19, 4, 47, 2.39f, 1.96f, 1, 0, 12, 0, 0, 39.102f, 18, 1, 0.82f, ElementType.ALKALI_METAL),\n    Ca(20, 4, 17, 1.95f, 1.74f, 2, 0, 2, 0, 0, 40.080f, 18, 2, 1.00f, ElementType.ALKALINE_EARTH_METAL),\n    Sc(21, 4, 84, 1.32f, 1.44f, 3, 0, 12, 3, 0, 44.956f, 18, 3, 1.36f, ElementType.TRANSITION_METAL),\n    Ti(22, 4, 96, 1.95f, 1.36f, 4, 2, 4, 3, 4, 47.880f, 18, 4, 1.54f, ElementType.TRANSITION_METAL),\n    V(23, 4, 100, 1.06f, 1.25f, 5, 0, 12, 3, 0, 50.040f, 18, 5, 1.63f, ElementType.TRANSITION_METAL),\n    Cr(24, 4, 24, 1.13f, 1.27f, 6, 0, 12, 2, 0, 51.996f, 18, 3, 1.66f, ElementType.TRANSITION_METAL),\n    Mn(25, 4, 55, 1.19f, 1.39f, 7, 0, 12, 0, 0, 54.938f, 18, 2, 1.55f, ElementType.TRANSITION_METAL),\n    Fe(26, 4, 33, 1.95f, 1.25f, 3, 0, 8, 0, 0, 55.847f, 18, 3, 1.83f, ElementType.TRANSITION_METAL),\n    Co(27, 4, 23, 1.13f, 1.26f, 3, 0, 12, 0, 0, 58.933f, 18, 2, 1.88f, ElementType.TRANSITION_METAL),\n    Ni(28, 4, 62, 1.24f, 1.21f, 3, 0, 12, 0, 0, 58.710f, 18, 2, 1.91f, ElementType.TRANSITION_METAL),\n    Cu(29, 4, 26, 1.15f, 1.38f, 2, 0, 4, 0, 0, 63.546f, 18, 2, 1.90f, ElementType.TRANSITION_METAL),\n    Zn(30, 4, 106, 1.15f, 1.31f, 2, 0, 2, 0, 0, 65.380f, 18, 2, 1.65f, ElementType.TRANSITION_METAL),\n    Ga(31, 4, 36, 1.55f, 1.26f, 3, 1, 4, 2, 4, 69.720f, 28, 3, 1.81f, ElementType.POST_TRANSITION_METAL),\n    Ge(32, 4, 38, 2.72f, 1.22f, 4, 0, 12, 4, 4, 72.590f, 28, 4, 2.01f, ElementType.METALLOID),\n    As(33, 4, 7, 0.83f, 1.19f, 5, 0, 12, 3, 5, 74.922f, 28, -3, 2.18f, ElementType.METALLOID),\n    Se(34, 4, 85, 0.90f, 1.16f, 6, 0, 12, 2, 6, 78.960f, 28, 4, 2.55f, ElementType.OTHER_NONMETAL),\n    Br(35, 4, 15, 1.95f, 1.14f, 7, 0, 1, 1, 1, 79.904f, 28, -1, 2.96f, ElementType.HALOGEN),\n    Kr(36, 4, 48, 1.90f, 1.60f, 8, 0, 12, 0, 0, 83.800f, 28, 0, 3.00f, ElementType.NOBLE_GAS),\n    Rb(37, 5, 77, 2.65f, 2.11f, 1, 0, 12, 0, 0, 85.467f, 36, 1, 0.82f, ElementType.ALKALI_METAL),\n    Sr(38, 5, 89, 2.02f, 1.92f, 2, 0, 12, 2, 0, 87.620f, 36, 2, 0.95f, ElementType.ALKALINE_EARTH_METAL),\n    Y(39, 5, 103, 1.61f, 1.62f, 3, 0, 12, 3, 0, 88.806f, 36, 3, 1.22f, ElementType.TRANSITION_METAL),\n    Zr(40, 5, 105, 1.42f, 1.48f, 4, 0, 12, 4, 0, 91.220f, 36, 4, 1.33f, ElementType.TRANSITION_METAL),\n    Nb(41, 5, 59, 1.33f, 1.37f, 5, 0, 12, 3, 0, 92.906f, 36, 5, 1.60f, ElementType.TRANSITION_METAL),\n    Mo(42, 5, 56, 1.75f, 1.45f, 6, 1, 6, 3, 0, 95.940f, 36, 6, 2.16f, ElementType.TRANSITION_METAL),\n    Tc(43, 5, 93, 1.80f, 1.56f, 7, 0, 12, 6, 0, 98.910f, 36, 7, 1.90f, ElementType.TRANSITION_METAL),\n    Ru(44, 5, 81, 1.20f, 1.26f, 8, 0, 12, 3, 0, 101.070f, 36, 4, 2.20f, ElementType.TRANSITION_METAL),\n    Rh(45, 5, 79, 1.22f, 1.35f, 4, 0, 12, 3, 0, 102.906f, 36, 3, 2.28f, ElementType.TRANSITION_METAL),\n    Pd(46, 5, 70, 1.44f, 1.31f, 4, 0, 12, 2, 0, 106.400f, 36, 2, 2.20f, ElementType.TRANSITION_METAL),\n    Ag(47, 5, 3, 1.55f, 1.53f, 1, 0, 6, 0, 0, 107.868f, 36, 1, 1.93f, ElementType.TRANSITION_METAL),\n    Cd(48, 5, 18, 1.75f, 1.48f, 2, 0, 12, 0, 0, 112.400f, 36, 2, 1.69f, ElementType.TRANSITION_METAL),\n    In(49, 5, 45, 1.46f, 1.44f, 3, 0, 12, 3, 0, 114.820f, 46, 3, 1.78f, ElementType.POST_TRANSITION_METAL),\n    Sn(50, 5, 88, 1.67f, 1.41f, 4, 0, 12, 2, 4, 118.690f, 46, 4, 1.96f, ElementType.POST_TRANSITION_METAL),\n    Sb(51, 5, 83, 1.12f, 1.38f, 5, 0, 12, 4, 5, 121.750f, 46, -3, 2.05f, ElementType.METALLOID),\n    Te(52, 5, 94, 1.26f, 1.35f, 6, 0, 12, 2, 6, 127.600f, 46, 4, 2.10f, ElementType.METALLOID),\n    I(53, 5, 44, 2.15f, 1.33f, 7, 1, 1, 1, 1, 126.905f, 46, -1, 2.66f, ElementType.HALOGEN),\n    Xe(54, 5, 102, 2.10f, 1.70f, 8, 0, 12, 0, 0, 131.300f, 46, 0, 2.60f, ElementType.NOBLE_GAS),\n    Cs(55, 6, 25, 3.01f, 2.25f, 1, 0, 12, 0, 0, 132.905f, 54, 1, 0.79f, ElementType.ALKALI_METAL),\n    Ba(56, 6, 11, 2.41f, 1.98f, 2, 0, 12, 0, 0, 137.340f, 54, 2, 0.89f, ElementType.ALKALINE_EARTH_METAL),\n    La(57, 6, 49, 1.83f, 1.95f, 3, 0, 12, 3, 0, 138.905f, 54, 3, 1.10f, ElementType.LANTHANOID),\n    Ce(58, 6, 19, 1.86f, 1.03f, 4, 0, 12, 3, 0, 140.120f, 54, 3, 1.12f, ElementType.LANTHANOID),\n    Pr(59, 6, 73, 1.62f, 0.90f, 4, 0, 12, 3, 0, 140.908f, 55, 3, 1.13f, ElementType.LANTHANOID),\n    Nd(60, 6, 60, 1.79f, 0.99f, 3, 0, 12, 3, 0, 144.240f, 56, 3, 1.14f, ElementType.LANTHANOID),\n    Pm(61, 6, 71, 1.76f, 0.98f, 3, 0, 12, 3, 0, 145.000f, 58, 3, 1.13f, ElementType.LANTHANOID),\n    Sm(62, 6, 87, 1.74f, 0.96f, 3, 0, 12, 2, 0, 150.400f, 59, 3, 1.17f, ElementType.LANTHANOID),\n    Eu(63, 6, 31, 1.96f, 1.09f, 3, 0, 12, 2, 0, 151.960f, 60, 3, 1.20f, ElementType.LANTHANOID),\n    Gd(64, 6, 37, 1.69f, 0.94f, 3, 0, 12, 3, 0, 157.250f, 61, 3, 1.20f, ElementType.LANTHANOID),\n    Tb(65, 6, 92, 1.66f, 0.92f, 4, 0, 12, 3, 0, 158.925f, 61, 3, 1.10f, ElementType.LANTHANOID),\n    Dy(66, 6, 28, 1.63f, 0.91f, 3, 0, 12, 3, 0, 162.500f, 62, 3, 1.22f, ElementType.LANTHANOID),\n    Ho(67, 6, 43, 1.61f, 0.89f, 3, 0, 12, 3, 0, 164.930f, 64, 3, 1.23f, ElementType.LANTHANOID),\n    Er(68, 6, 29, 1.59f, 0.88f, 3, 0, 12, 3, 0, 167.260f, 65, 3, 1.24f, ElementType.LANTHANOID),\n    Tm(69, 6, 98, 1.57f, 0.87f, 3, 0, 12, 3, 0, 168.934f, 66, 3, 1.25f, ElementType.LANTHANOID),\n    Yb(70, 6, 104, 1.54f, 0.86f, 3, 0, 12, 2, 0, 173.040f, 67, 3, 1.10f, ElementType.LANTHANOID),\n    Lu(71, 6, 52, 1.53f, 0.85f, 3, 0, 12, 3, 0, 174.970f, 68, 3, 1.27f, ElementType.LANTHANOID),\n    Hf(72, 6, 41, 1.40f, 1.58f, 4, 0, 12, 4, 0, 178.490f, 68, 4, 1.30f, ElementType.TRANSITION_METAL),\n    Ta(73, 6, 91, 1.22f, 1.38f, 5, 0, 12, 5, 0, 180.850f, 68, 5, 1.50f, ElementType.TRANSITION_METAL),\n    W(74, 6, 101, 1.26f, 1.46f, 6, 0, 12, 6, 0, 183.850f, 68, 6, 2.36f, ElementType.TRANSITION_METAL),\n    Re(75, 6, 78, 1.30f, 1.59f, 7, 0, 12, 4, 0, 186.200f, 68, 7, 1.90f, ElementType.TRANSITION_METAL),\n    Os(76, 6, 66, 1.58f, 1.28f, 8, 0, 12, 2, 0, 190.200f, 68, 4, 2.20f, ElementType.TRANSITION_METAL),\n    Ir(77, 6, 46, 1.22f, 1.37f, 6, 0, 12, 3, 0, 192.220f, 68, 4, 2.20f, ElementType.TRANSITION_METAL),\n    Pt(78, 6, 74, 1.55f, 1.28f, 4, 0, 6, 0, 0, 195.090f, 68, 4, 2.28f, ElementType.TRANSITION_METAL),\n    Au(79, 6, 9, 1.45f, 1.44f, 3, 0, 6, 0, 0, 196.967f, 68, 3, 2.54f, ElementType.TRANSITION_METAL),\n    Hg(80, 6, 42, 1.55f, 1.32f, 2, 0, 12, 1, 2, 200.59f, 78, 1, 2.00f, ElementType.TRANSITION_METAL),\n    Tl(81, 6, 97, 1.96f, 1.45f, 3, 0, 12, 1, 3, 204.3833f, 78, 1, 1.62f, ElementType.POST_TRANSITION_METAL),\n    Pb(82, 6, 69, 2.16f, 1.47f, 4, 0, 12, 2, 4, 207.200f, 78, 2, 2.33f, ElementType.POST_TRANSITION_METAL),\n    Bi(83, 6, 13, 1.73f, 1.46f, 5, 0, 12, 3, 3, 208.981f, 78, 3, 2.20f, ElementType.POST_TRANSITION_METAL),\n    Po(84, 6, 72, 1.21f, 0.67f, 6, 0, 12, 4, 2, 209.000f, 78, 4, 2.0f, ElementType.METALLOID),\n    At(85, 6, 8, 1.12f, 0.62f, 7, 0, 12, 1, 1, 210.000f, 78, -1, 2.20f, ElementType.HALOGEN),\n    Rn(86, 6, 80, 2.30f, 1.90f, 8, 0, 12, 0, 0, 222.000f, 78, 0, 0.0f, ElementType.NOBLE_GAS), // electroneg not reported\n    Fr(87, 7, 35, 3.24f, 1.80f, 1, 0, 12, 0, 0, 223.000f, -1, 1, 0.70f, ElementType.ALKALI_METAL),\n    Ra(88, 7, 76, 2.57f, 1.43f, 2, 0, 12, 2, 0, 226.000f, -1, 2, 0.9f, ElementType.ALKALINE_EARTH_METAL),\n    Ac(89, 7, 2, 2.12f, 1.18f, 3, 0, 12, 4, 0, 227.000f, -1, 3, 1.1f, ElementType.ACTINOID),\n    Th(90, 7, 95, 1.84f, 1.02f, 4, 0, 12, 1, 0, 232.038f, -1, 4, 1.30f, ElementType.ACTINOID),\n    Pa(91, 7, 68, 1.60f, 0.89f, 5, 0, 12, 4, 0, 231.036f, -1, 5, 1.50f, ElementType.ACTINOID),\n    U(92, 7, 99, 1.75f, 0.97f, 6, 0, 12, 4, 0, 238.029f, -1, 6, 1.38f, ElementType.ACTINOID),\n    Np(93, 7, 64, 1.71f, 0.95f, 6, 0, 12, 4, 0, 237.048f, -1, 5, 1.36f, ElementType.ACTINOID),\n    Pu(94, 7, 75, 1.67f, 0.93f, 6, 0, 12, 3, 0, 244.000f, -1, 4, 1.28f, ElementType.ACTINOID),\n    Am(95, 7, 5, 1.66f, 0.92f, 6, 0, 12, 3, 0, 243.000f, -1, 3, 1.13f, ElementType.ACTINOID),\n    Cm(96, 7, 22, 1.65f, 0.91f, 3, 0, 12, 3, 0, 248.000f, -1, 3, 1.28f, ElementType.ACTINOID),\n    Bk(97, 7, 14, 1.64f, 0.90f, 4, 0, 12, 3, 0, 247.000f, -1, 3, 1.30f, ElementType.ACTINOID),\n    Cf(98, 7, 20, 1.63f, 0.89f, 3, 0, 12, 4, 0, 251.000f, -1, 3, 1.30f, ElementType.ACTINOID),\n    Es(99, 7, 30, 1.62f, 0.88f, -1, 0, 12, 4, 0, 254.000f, -1, 3, 1.30f, ElementType.ACTINOID),\n    Fm(100, 7, 34, 1.61f, 0.87f, -1, 0, 12, 4, 0, 257.000f, -1, 3, 1.30f, ElementType.ACTINOID),\n    Md(101, 7, 53, 1.60f, 0.86f, -1, 0, 12, 4, 0, 256.000f, -1, 3, 1.30f, ElementType.ACTINOID),\n    No(102, 7, 63, 1.59f, 0.85f, -1, 0, 12, 4, 0, 254.000f, -1, 3, 1.30f, ElementType.ACTINOID),\n    Lr(103, 7, 51, 1.58f, 0.84f, -1, 0, 12, 4, 0, 257.000f, -1, 3, 0.00f, ElementType.ACTINOID), // electroneg not reported\n    /**\n     * R-group to represent generic groups that are sometimes present in MDL .sdf\n     * files.\n     */\n    R(104, 0, 105, 0.0f, 0.0f, 0, 0, 4, 1, 0, 0.000f, -1, 3, 0.00f, ElementType.UNKNOWN); // this is an R-group\n    // should these be declared final?\n    private int atomicNumber;\n    private int period;\n    private int hillOrder;\n    private float VDWRadius; // in Angstroms\n    private float covalentRadius; // in Angstroms\n    private int valenceElectronCount;\n    private int minimumValence;\n    private int maximumValence;\n    private int commonValence;\n    private int maximumCovalentValence;\n    private float atomicMass;\n    private int coreElectronCount;\n    private int oxidationState;\n    // Pauling electronegativity: http://en.wikipedia.org/wiki/Electronegativity\n    private float paulingElectronegativity;\n    // Element type: http://www.ptable.com/\n    private ElementType elementType;\n    //private static final Element[] hillOrderIndex;\n    \n//\n//    static {\n//        hillOrderIndex = new Element[Element.values().length + 1];\n//        for (Element e : Element.values()) {\n//            hillOrderIndex[e.getHillOrder()] = e;\n//        }\n//        hillOrderIndex[Element.H.getHillOrder()] = Element.H; // special case for hydrogen\n//    }\n\n    private static final Map<String,Element> allElements ;\n   \n    static {\n    \tallElements = new HashMap<String,Element>();\n    \tfor (Element e : Element.values()){\n    \t\tallElements.put(e.toString().toLowerCase(), e);\n    \t}\n    }\n    private Element(int atomicNumber,\n            int period,\n            int hillOrder,\n            float VDWRadius,\n            float covalentRadius,\n            int valenceElectronCount,\n            int minimumValence,\n            int maximumValence,\n            int commonValence,\n            int maximumCovalentValence,\n            float atomicMass,\n            int coreElectronCount,\n            int oxidationState,\n            float paulingElectronegativity,\n            ElementType elementType) {\n\n        this.atomicNumber = atomicNumber;\n        this.period = period;\n        this.hillOrder = hillOrder;\n        this.VDWRadius = VDWRadius;\n        this.covalentRadius = covalentRadius;\n        this.valenceElectronCount = valenceElectronCount;\n        this.minimumValence = minimumValence;\n        this.maximumValence = maximumValence;\n        this.commonValence = commonValence;\n        this.maximumCovalentValence = maximumCovalentValence;\n        this.atomicMass = atomicMass;\n        this.coreElectronCount = coreElectronCount;\n        this.oxidationState = oxidationState;\n        this.paulingElectronegativity = paulingElectronegativity;\n        this.elementType = elementType;\n        \n       \n    }\n    /**\n     * Returns the atomic number of this Element.\n     * @return the atomic number of this Element.\n     */\n    public int getAtomicNumber() {\n        return atomicNumber;\n    }\n\n    /**\n     * Returns the period in the periodic table of this Element.\n     * @return the period in the periodic table of this Element.\n     */\n    public int getPeriod() {\n        return period;\n    }\n\n    /**\n     * Returns the Hill Order of this Element. The Hill Order represents the\n     * priority by which elements are sorted in molecular formulas.\n     * The Hill system is a system of writing chemical formulas such that the\n     * number of carbon atoms in a molecule is indicated first, the number of\n     * hydrogen atoms next, and then the number of all other chemical elements\n     * subsequently, in alphabetical order. When the formula contains no carbon,\n     * all the elements, including hydrogen, are listed alphabetically.\n     * <p>\n     * Edwin A. Hill, \"On A System Of Indexing Chemical Literature;\n     * Adopted By The Classification Division Of The U. S. Patent Office\".\n     * J. Am. Chem. Soc. 1900, 22(8), 478-494.\n     * <p>\n     * <a href=\"http://en.wikipedia.org/wiki/Hill_system\">\n     * http://en.wikipedia.org/wiki/Hill_system</a>\n     * <p>\n     * @return the Hill Order of this Element.\n     */\n    public int getHillOrder() {\n    \tthrow new RuntimeException(\"Not implemented, yet!\");\n    \t//throw new NotImplementedYetException();\n        //return hillOrder;\n    }\n\n    /**\n     * Returns the van der Waals radius of this Element.\n     * @return the van der Waals radius of this Element, measured in Angstroms.\n     */\n    public float getVDWRadius() {\n        return VDWRadius;\n    }\n\n    /**\n     * Returns the covalent radius of this Element.\n     * @return covalent radius, measured in Angstroms.\n     */\n    public float getCovalentRadius() {\n        return covalentRadius;\n    }\n\n    /**\n     * Returns the number of valence electrons for this Element.\n     * @return the number of valence electrons for this Element.\n     */\n    public int getValenceElectronCount() {\n        return valenceElectronCount;\n    }\n\n    /**\n     * Returns the minimum valence for this Element.\n     * @return the minimum valence of this atom.\n     */\n    public int getMinimumValence() {\n        return minimumValence;\n    }\n\n    /**\n     * Returns the maximum valence for this Element.\n     * @return the maximum valence for this Element.\n     */\n    public int getMaximumValence() {\n        return maximumValence;\n    }\n\n    /**\n     * Returns the common valence for this Element.\n     * @return the common valence for this Element.\n     */\n    public int getCommonValence() {\n        return commonValence;\n    }\n\n    /**\n     * Returns the maximum valence for this Element.\n     * @return the maximum valence of this element.\n     */\n    public int getMaximumCovalentValence() {\n        return maximumCovalentValence;\n    }\n\n    /**\n     * Returns the atomic mass for this Element.\n     * @return the atomic mass for this Element, measured in g/mol.\n     */\n    public float getAtomicMass() {\n        return atomicMass;\n    }\n\n    /**\n     * Returns the number of core electrons for this Element.\n     * @return number of core electrons for this Element.\n     */\n    public int getCoreElectronCount() {\n        return coreElectronCount;\n    }\n\n    /**\n     * Returns a typical oxidation state for this Element. This information is mostly\n     * useful for metals.\n     * @return a typical oxidation state for this Element.\n     */\n    public int getOxidationState() {\n        return oxidationState;\n    }\n\n    /**\n     * Returns the Pauling electronegativity for this Element.\n     * @return the Pauling electronegativity for this Element.\n     */\n    public float getPaulingElectronegativity() {\n        return paulingElectronegativity;\n    }\n\n    /**\n     * Returns the Element Type for this Element.\n     * @return the Element Type for this Element.\n     */\n    public ElementType getElementType() {\n        return elementType;\n    }\n    \n    /**\n     * Returns the Element that corresponds to the specified element symbol. The case\n     * of the element symbol is ignored. Example: FE, fe, Fe represent iron.\n     * @param elementSymbol element symbol to specify Element.\n     * @return the Element specified by the element symbol.\n     */\n    public static Element valueOfIgnoreCase(String elementSymbol) throws IllegalArgumentException {\n\n    \tElement e = allElements.get(elementSymbol.toLowerCase());\n        if ( e != null)\n        \treturn e;\n        throw new IllegalArgumentException(\"Invalid element symbol: \" + elementSymbol);\n    }\n\n    /**\n     * Returns true if this Element is Hydrogen. <B>Note:</B> currently Deuterium (D)\n     * and Tritium (T) are not considered Hydrogen.\n     * @return <CODE>true</CODE> if the Element is Hydrogen.\n     */\n    public boolean isHydrogen() {\n        return (this == H);\n    }\n\n    /**\n     * Returns <CODE>true</CODE> is the Element is an not Hydrogen.\n     * @return <CODE>true</CODE> is Element is not Hydrogen.\n     */\n    public boolean isHeavyAtom() {\n        return (this != H);\n    }\n\n    /**\n     * Returns <CODE>true</CODE> if Element is not Hydrogen and not Carbon.\n     * @return <CODE>true</CODE> if Element is not Hydrogen and not Carbon.\n     */\n    public boolean isHeteroAtom() {\n        return !(this == C || this == H);\n    }\n\n\t/**\n     * Returns <CODE>true</CODE> if ElementType is a metal.\n     * @return <CODE>true</CODE> if ElementType is a metal.\n     */\n\tpublic boolean isMetal() {\n\t\treturn elementType.isMetal();\n\t}\n\t\n\t/**\n     * Returns <CODE>true</CODE> if ElementType is a metalloid.\n     * @return <CODE>true</CODE> if ElementType is a metalloid.\n     */\n\tpublic boolean isMetalloid() {\n\t\treturn elementType.isMetalloid();\n\t}\n\t\n\t/**\n     * Returns <CODE>true</CODE> if ElementType is a non-metal.\n     * @return <CODE>true</CODE> if ElementType is a non-metal.\n     */\n\tpublic boolean isNonMetal() {\n\t\treturn elementType.isNonMetal();\n\t}\n\t\n\t/**\n     * Returns <CODE>true</CODE> if Element is a halogen (F, Cl, Br, I, At).\n     * @return <CODE>true</CODE> if Element is a halogen.\n     */\n    public boolean isHalogen() {\n        return elementType.equals(ElementType.HALOGEN);\n    }\n    \n    /**\n     * Returns <CODE>true</CODE> if Element is a chalcogen (O, S, Se, Te, Po).\n     * @return <CODE>true</CODE> if Element is a chalcogen.\n     */\n    public boolean isChalcogen() {\n        return (this == O || this == S || this == Se || this == Te ||\n                this == Po);\n    }\n\n    /**\n     * Returns the Element that corresponds to the specified Hill Order.\n     * @param index the Hill Order.\n     * @return the Element that corresponds to the specified Hill Order.\n     * @see #getHillOrder()\n     */\n    public static Element getElementFromHillIndex(int index) {\n    \tthrow new RuntimeException(\"Not implemented, yet!\");\n        //return hillOrderIndex[index];\n    }\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojava.bio.structure;\n\nimport junit.framework.TestCase;\n\n/**\n * Tests for Element class.\n *\n * @author Peter Rose\n * @since 3.0\n * @version %I% %G%\n */\npublic class ElementTest extends TestCase {\n\n\tpublic void testIsMetal() {\n\t\tElement h = Element.H;\n\t\tassertFalse(h.isMetal());\n\t\tElement he = Element.He;\n\t\tassertFalse(he.isMetal());\n\t\tElement li = Element.Li;\n\t\tassertTrue(li.isMetal());\n\t\tElement be = Element.Be;\n\t\tassertTrue(be.isMetal());\n\t\tElement b = Element.B;\n\t\tassertFalse(b.isMetal());\n\t\tElement c = Element.C;\n\t\tassertFalse(c.isMetal());\n\t\tElement f = Element.F;\n\t\tassertFalse(f.isMetal());\n\t\tElement al = Element.Al;\n\t\tassertTrue(al.isMetal());\n\t\tElement sc = Element.Sc;\n\t\tassertTrue(sc.isMetal());\n\t\tElement la = Element.La;\n\t\tassertTrue(la.isMetal());\n\t\tElement ac = Element.Ac;\n\t\tassertTrue(ac.isMetal());\n\t};\n\n\tpublic void testIsMetalloid() {\n\t\tElement h = Element.H;\n\t\tassertFalse(h.isMetalloid());\n\t\tElement he = Element.He;\n\t\tassertFalse(he.isMetalloid());\n\t\tElement li = Element.Li;\n\t\tassertFalse(li.isMetalloid());\n\t\tElement be = Element.Be;\n\t\tassertFalse(be.isMetalloid());\n\t\tElement b = Element.B;\n\t\tassertTrue(b.isMetalloid());\n\t\tElement c = Element.C;\n\t\tassertFalse(c.isMetalloid());\n\t\tElement f = Element.F;\n\t\tassertFalse(f.isMetalloid());\n\t\tElement al = Element.Al;\n\t\tassertFalse(al.isMetalloid());\n\t\tElement sc = Element.Sc;\n\t\tassertFalse(sc.isMetalloid());\n\t\tElement la = Element.La;\n\t\tassertFalse(la.isMetalloid());\n\t\tElement ac = Element.Ac;\n\t\tassertFalse(ac.isMetalloid());\n\t}\n\n\tpublic void testIsNonMetal() {\n\t\tElement h = Element.H;\n\t\tassertTrue(h.isNonMetal());\n\t\tElement he = Element.He;\n\t\tassertTrue(he.isNonMetal());\n\t\tElement li = Element.Li;\n\t\tassertFalse(li.isNonMetal());\n\t\tElement be = Element.Be;\n\t\tassertFalse(be.isNonMetal());\n\t\tElement b = Element.B;\n\t\tassertFalse(b.isNonMetal());\n\t\tElement c = Element.C;\n\t\tassertTrue(c.isNonMetal());\n\t\tElement f = Element.F;\n\t\tassertTrue(f.isNonMetal());\n\t\tElement al = Element.Al;\n\t\tassertFalse(al.isNonMetal());\n\t\tElement sc = Element.Sc;\n\t\tassertFalse(sc.isNonMetal());\n\t\tElement la = Element.La;\n\t\tassertFalse(la.isNonMetal());\n\t\tElement ac = Element.Ac;\n\t\tassertFalse(ac.isNonMetal());\n\t}\n\n}\n","changedTest":"","commitMessage":"making sure we can lookup in allElements in O(1);\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8851 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"","allZero":false}