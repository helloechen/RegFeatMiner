{"repository":"biojava","prod_path":"biojava3-sequencing/src/main/java/org/biojava3/sequencing/io/fastq/FastqTools.java","test_path":"biojava3-sequencing/src/test/java/org/biojava3/sequencing/io/fastq/FastqToolsTest.java","prod_time":"2012-03-14 11:21:04","test_time":"2012-03-14 11:21:04","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":1,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":1,"del_return_line":0,"label":"POSITIVE","prod_commitID":"c1527ed05f2912534f66a38c47ceaed8e3b64d06","test_commitID":"c1527ed05f2912534f66a38c47ceaed8e3b64d06","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\nimport java.util.List;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.ImmutableList;\n\nimport org.biojava3.core.sequence.DNASequence;\nimport org.biojava3.core.sequence.compound.NucleotideCompound;\nimport org.biojava3.core.sequence.features.QualityFeature;\nimport org.biojava3.core.sequence.features.QuantityFeature;\nimport org.biojava3.core.sequence.template.AbstractSequence;\n\n/**\n * Utility methods for FASTQ formatted sequences.\n *\n * @since 3.0.3\n */\npublic final class FastqTools\n{\n\n    /**\n     * Private no-arg constructor.\n     */\n    private FastqTools()\n    {\n        // empty\n    }\n\n\n    public static DNASequence createDNASequence(final Fastq fastq)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        DNASequence sequence = new DNASequence(fastq.getSequence());\n        sequence.setOriginalHeader(fastq.getDescription());\n        return sequence;\n    }\n\n    public static DNASequence createDNASequenceWithQualityScores(final Fastq fastq)\n    {\n        DNASequence sequence = createDNASequence(fastq);\n        sequence.addFeature(1, sequence.getLength(), createQualityScores(fastq));\n        return sequence;\n    }\n\n    public static DNASequence createDNASequenceWithErrorProbabilities(final Fastq fastq)\n    {\n        DNASequence sequence = createDNASequence(fastq);\n        sequence.addFeature(1, sequence.getLength(), createErrorProbabilities(fastq));\n        return sequence;\n    }\n\n    public static DNASequence createDNASequenceWithQualityScoresAndErrorProbabilities(final Fastq fastq)\n    {\n        DNASequence sequence = createDNASequence(fastq);\n        sequence.addFeature(1, sequence.getLength(), createQualityScores(fastq));\n        sequence.addFeature(1, sequence.getLength(), createErrorProbabilities(fastq));\n        return sequence;\n    }\n\n    public static QualityFeature createQualityScores(final Fastq fastq)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        QualityFeature qualityScores = new QualityFeature<AbstractSequence<NucleotideCompound>, NucleotideCompound>(\"qualityScores\", \"sequencing\");\n        qualityScores.setQualities(toList(qualityScores(fastq)));\n        return qualityScores;\n    }\n\n    public static QuantityFeature createErrorProbabilities(final Fastq fastq)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        QuantityFeature errorProbabilities = new QuantityFeature<AbstractSequence<NucleotideCompound>, NucleotideCompound>(\"errorProbabilities\", \"sequencing\");\n        errorProbabilities.setQuantities(toList(errorProbabilities(fastq)));\n        return errorProbabilities;\n    }\n\n    /**\n     * Return the quality scores from the specified FASTQ formatted sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return the quality scores from the specified FASTQ formatted sequence\n     */\n    public static Iterable<Integer> qualityScores(final Fastq fastq)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        List<Integer> qualityScores = Lists.newArrayListWithExpectedSize(size);\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            qualityScores.add(variant.qualityScore(c));\n        }\n        return ImmutableList.copyOf(qualityScores);\n    }\n\n    /**\n     * Copy the quality scores from the specified FASTQ formatted sequence into the specified int array.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @param qualityScores int array of quality scores, must not be null and must be the same\n     *    length as the FASTQ formatted sequence quality\n     * @return the specified int array of quality scores\n     */\n    public static int[] qualityScores(final Fastq fastq, final int[] qualityScores)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        if (qualityScores == null)\n        {\n            throw new IllegalArgumentException(\"qualityScores must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        if (qualityScores.length != size)\n        {\n            throw new IllegalArgumentException(\"qualityScores must be the same length as the FASTQ formatted sequence quality\");\n        }\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            qualityScores[i] = variant.qualityScore(c);\n        }\n        return qualityScores;\n    }\n\n    /**\n     * Return the error probabilities from the specified FASTQ formatted sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return the error probabilities from the specified FASTQ formatted sequence\n     */\n    public static Iterable<Double> errorProbabilities(final Fastq fastq)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        List<Double> errorProbabilities = Lists.newArrayListWithExpectedSize(size);\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            errorProbabilities.add(variant.errorProbability(c));\n        }\n        return ImmutableList.copyOf(errorProbabilities);\n    }\n\n    /**\n     * Copy the error probabilities from the specified FASTQ formatted sequence into the specified double array.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @param errorProbabilities double array of error probabilities, must not be null and must be the same\n     *    length as the FASTQ formatted sequence quality\n     * @return the specified double array of error probabilities\n     */\n    public static double[] errorProbabilities(final Fastq fastq, final double[] errorProbabilities)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        if (errorProbabilities == null)\n        {\n            throw new IllegalArgumentException(\"errorProbabilities must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        if (errorProbabilities.length != size)\n        {\n            throw new IllegalArgumentException(\"errorProbabilities must be the same length as the FASTQ formatted sequence quality\");\n        }\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            errorProbabilities[i] = variant.errorProbability(c);\n        }\n        return errorProbabilities;\n    }\n\n    /**\n     * Return the specified iterable as a list.\n     *\n     * @param iterable iterable\n     * @return the specified iterable as a list\n     */\n    private static <T> List<T> toList(final Iterable<? extends T> iterable)\n    {\n        if (iterable instanceof List)\n        {\n            return (List<T>) iterable;\n        }\n        return ImmutableList.copyOf(iterable);\n    }\n}","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\nimport java.util.List;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.ImmutableList;\n\nimport org.biojava3.core.sequence.DNASequence;\nimport org.biojava3.core.sequence.compound.NucleotideCompound;\nimport org.biojava3.core.sequence.features.QualityFeature;\nimport org.biojava3.core.sequence.features.QuantityFeature;\nimport org.biojava3.core.sequence.template.AbstractSequence;\n\n/**\n * Utility methods for FASTQ formatted sequences.\n *\n * @since 3.0.3\n */\npublic final class FastqTools\n{\n\n    /**\n     * Private no-arg constructor.\n     */\n    private FastqTools()\n    {\n        // empty\n    }\n\n\n    /**\n     * Create and return a new {@link DNASequence} from the specified FASTQ formatted sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return a new {@link DNASequence} from the specified FASTQ formatted sequence\n     */\n    public static DNASequence createDNASequence(final Fastq fastq)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        DNASequence sequence = new DNASequence(fastq.getSequence());\n        sequence.setOriginalHeader(fastq.getDescription());\n        return sequence;\n    }\n\n    /**\n     * Create and return a new {@link DNASequence} with quality scores from the specified\n     * FASTQ formatted sequence.  The quality scores are stored in a {@link QualityFeature}\n     * with a type <code>\"qualityScores\"</code> the same length as the sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return a new {@link DNASequence} with quality scores from the specified FASTQ formatted sequence\n     */\n    public static DNASequence createDNASequenceWithQualityScores(final Fastq fastq)\n    {\n        DNASequence sequence = createDNASequence(fastq);\n        sequence.addFeature(1, sequence.getLength(), createQualityScores(fastq));\n        return sequence;\n    }\n\n    /**\n     * Create and return a new {@link DNASequence} with error probabilities from the specified\n     * FASTQ formatted sequence.  The error probabilities are stored in a {@link QuantityFeature}\n     * with a type <code>\"errorProbabilities\"</code> the same length as the sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return a new {@link DNASequence} with error probabilities from the specified FASTQ formatted sequence\n     */\n    public static DNASequence createDNASequenceWithErrorProbabilities(final Fastq fastq)\n    {\n        DNASequence sequence = createDNASequence(fastq);\n        sequence.addFeature(1, sequence.getLength(), createErrorProbabilities(fastq));\n        return sequence;\n    }\n\n    /**\n     * Create and return a new {@link DNASequence} with quality scores and error probabilities from the\n     * specified FASTQ formatted sequence.  The quality scores are stored in a {@link QualityFeature}\n     * with a type <code>\"qualityScores\"</code> the same length as the sequence and the error\n     * probabilities are stored in a {@link QuantityFeature} with a type <code>\"errorProbabilities\"</code>\n     * the same length as the sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return a new {@link DNASequence} with quality scores and error probabilities from the specified\n     *    FASTQ formatted sequence\n     */\n    public static DNASequence createDNASequenceWithQualityScoresAndErrorProbabilities(final Fastq fastq)\n    {\n        DNASequence sequence = createDNASequence(fastq);\n        sequence.addFeature(1, sequence.getLength(), createQualityScores(fastq));\n        sequence.addFeature(1, sequence.getLength(), createErrorProbabilities(fastq));\n        return sequence;\n    }\n\n    /**\n     * Create and return a new {@link QualityFeature} from the quality scores of the specified\n     * FASTQ formatted sequence.  The quality scores feature has a type <code>\"qualityScores\"</code>\n     * and will be the same length as the sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return a new {@link QualityFeature} from the quality scores of the specified FASTQ\n     *    formatted sequence\n     */\n    public static QualityFeature createQualityScores(final Fastq fastq)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        QualityFeature qualityScores = new QualityFeature<AbstractSequence<NucleotideCompound>, NucleotideCompound>(\"qualityScores\", \"sequencing\");\n        qualityScores.setQualities(toList(qualityScores(fastq)));\n        return qualityScores;\n    }\n\n    /**\n     * Create and return a new {@link QuantityFeature} from the error probabilities of the specified\n     * FASTQ formatted sequence.  The error probabilities feature has a type <code>\"errorProbabilities\"</code>\n     * and will be the same length as the sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return a new {@link QualityFeature} from the error probabilities of the specified FASTQ\n     *    formatted sequence\n     */\n    public static QuantityFeature createErrorProbabilities(final Fastq fastq)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        QuantityFeature errorProbabilities = new QuantityFeature<AbstractSequence<NucleotideCompound>, NucleotideCompound>(\"errorProbabilities\", \"sequencing\");\n        errorProbabilities.setQuantities(toList(errorProbabilities(fastq)));\n        return errorProbabilities;\n    }\n\n    /**\n     * Return the quality scores from the specified FASTQ formatted sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return the quality scores from the specified FASTQ formatted sequence\n     */\n    public static Iterable<Integer> qualityScores(final Fastq fastq)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        List<Integer> qualityScores = Lists.newArrayListWithExpectedSize(size);\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            qualityScores.add(variant.qualityScore(c));\n        }\n        return ImmutableList.copyOf(qualityScores);\n    }\n\n    /**\n     * Copy the quality scores from the specified FASTQ formatted sequence into the specified int array.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @param qualityScores int array of quality scores, must not be null and must be the same\n     *    length as the FASTQ formatted sequence quality\n     * @return the specified int array of quality scores\n     */\n    public static int[] qualityScores(final Fastq fastq, final int[] qualityScores)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        if (qualityScores == null)\n        {\n            throw new IllegalArgumentException(\"qualityScores must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        if (qualityScores.length != size)\n        {\n            throw new IllegalArgumentException(\"qualityScores must be the same length as the FASTQ formatted sequence quality\");\n        }\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            qualityScores[i] = variant.qualityScore(c);\n        }\n        return qualityScores;\n    }\n\n    /**\n     * Return the error probabilities from the specified FASTQ formatted sequence.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @return the error probabilities from the specified FASTQ formatted sequence\n     */\n    public static Iterable<Double> errorProbabilities(final Fastq fastq)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        List<Double> errorProbabilities = Lists.newArrayListWithExpectedSize(size);\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            errorProbabilities.add(variant.errorProbability(c));\n        }\n        return ImmutableList.copyOf(errorProbabilities);\n    }\n\n    /**\n     * Copy the error probabilities from the specified FASTQ formatted sequence into the specified double array.\n     *\n     * @param fastq FASTQ formatted sequence, must not be null\n     * @param errorProbabilities double array of error probabilities, must not be null and must be the same\n     *    length as the FASTQ formatted sequence quality\n     * @return the specified double array of error probabilities\n     */\n    public static double[] errorProbabilities(final Fastq fastq, final double[] errorProbabilities)\n    {\n        if (fastq == null)\n        {\n            throw new IllegalArgumentException(\"fastq must not be null\");\n        }\n        if (errorProbabilities == null)\n        {\n            throw new IllegalArgumentException(\"errorProbabilities must not be null\");\n        }\n        int size = fastq.getQuality().length();\n        if (errorProbabilities.length != size)\n        {\n            throw new IllegalArgumentException(\"errorProbabilities must be the same length as the FASTQ formatted sequence quality\");\n        }\n        FastqVariant variant = fastq.getVariant();\n        for (int i = 0; i < size; i++)\n        {\n            char c = fastq.getQuality().charAt(i);\n            errorProbabilities[i] = variant.errorProbability(c);\n        }\n        return errorProbabilities;\n    }\n\n    /**\n     * Return the specified iterable as a list.\n     *\n     * @param iterable iterable\n     * @return the specified iterable as a list\n     */\n    static <T> List<T> toList(final Iterable<? extends T> iterable)\n    {\n        if (iterable instanceof List)\n        {\n            return (List<T>) iterable;\n        }\n        return ImmutableList.copyOf(iterable);\n    }\n}","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\nimport junit.framework.TestCase;\n\n/**\n * Unit test for FastqTools.\n */\npublic final class FastqToolsTest extends TestCase\n{\n    private final FastqBuilder builder = new FastqBuilder().withDescription(\"foo\").withSequence(\"ACTG\").withQuality(\"ZZZZ\");\n\n    public void testQualityScores()\n    {\n        Iterable<Integer> qualityScores = FastqTools.qualityScores(builder.build());\n        assertNotNull(qualityScores);\n        int count = 0;\n        for (Integer qualityScore : qualityScores)\n        {\n            assertNotNull(qualityScore);\n            count++;\n        }\n        assertEquals(4, count);\n    }\n\n    public void testQualityScoresNullFastq()\n    {\n        try\n        {\n            FastqTools.qualityScores(null);\n            fail(\"qualityScores(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresIntArray()\n    {\n        int[] qualityScores = new int[4];\n        FastqTools.qualityScores(builder.build(), qualityScores);\n        for (int i = 0; i < 4; i++)\n        {\n            assertTrue(qualityScores[i] != 0);\n        }\n    }\n\n    public void testQualityScoresIntArrayNullFastq()\n    {\n        try\n        {\n            FastqTools.qualityScores(null, new int[0]);\n            fail(\"qualityScores(null, int[]) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresNullIntArray()\n    {\n        try\n        {\n            FastqTools.qualityScores(builder.build(), null);\n            fail(\"qualityScores(fastq, null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresQualityScoresTooSmall()\n    {\n        try\n        {\n            FastqTools.qualityScores(builder.build(), new int[3]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresQualityScoresTooLarge()\n    {\n        try\n        {\n            FastqTools.qualityScores(builder.build(), new int[5]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilities()\n    {\n        Iterable<Double> errorProbabilities = FastqTools.errorProbabilities(builder.build());\n        assertNotNull(errorProbabilities);\n        int count = 0;\n        for (Double errorProbability : errorProbabilities)\n        {\n            assertNotNull(errorProbability);\n            count++;\n        }\n        assertEquals(4, count);\n    }\n\n    public void testErrorProbabilitiesNullFastq()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(null);\n            fail(\"errorProbabilities(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesDoubleArray()\n    {\n        double[] errorProbabilities = new double[4];\n        FastqTools.errorProbabilities(builder.build(), errorProbabilities);\n        for (int i = 0; i < 0; i++)\n        {\n            assertTrue(errorProbabilities[i] > 0.0d);\n        }\n    }\n\n    public void testErrorProbabilitiesDoubleArrayNullFastq()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(null, new double[0]);\n            fail(\"errorProbabilities(null, double[]) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesNullErrorProbabilities()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(builder.build(), null);\n            fail(\"errorProbabilities(fastq, null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesErrorProbabilitiesTooSmall()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(builder.build(), new double[3]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesErrorProbabilitiesTooLarge()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(builder.build(), new double[5]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava3.sequencing.io.fastq;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport junit.framework.TestCase;\n\nimport org.biojava3.core.sequence.DNASequence;\nimport org.biojava3.core.sequence.features.QualityFeature;\nimport org.biojava3.core.sequence.features.QuantityFeature;\n\n/**\n * Unit test for FastqTools.\n */\npublic final class FastqToolsTest extends TestCase\n{\n    private final FastqBuilder builder = new FastqBuilder().withDescription(\"foo\").withSequence(\"ACTG\").withQuality(\"ZZZZ\");\n\n    public void testCreateDNASequence()\n    {\n        DNASequence sequence = FastqTools.createDNASequence(builder.build());\n        assertNotNull(sequence);\n    }\n\n    public void testCreateDNASequenceNullFastq()\n    {\n        try\n        {\n            FastqTools.createDNASequence(null);\n            fail(\"createDNASequence(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testCreateDNASequenceWithQualityScores()\n    {\n        DNASequence sequence = FastqTools.createDNASequenceWithQualityScores(builder.build());\n        assertNotNull(sequence);\n\n        List features = sequence.getFeaturesByType(\"qualityScores\");\n        assertNotNull(features);\n        assertEquals(1, features.size());\n        QualityFeature qualityScores = (QualityFeature) features.get(0);\n        assertEquals(sequence.getLength(), qualityScores.getQualities().size());\n        assertEquals(sequence.getLength(), qualityScores.getLocations().getLength());\n    }\n\n    public void testCreateDNASequenceWithQualityScoresNullFastq()\n    {\n        try\n        {\n            FastqTools.createDNASequenceWithQualityScores(null);\n            fail(\"createDNASequenceWithQualityScores(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testCreateDNASequenceWithErrorProbabilies()\n    {\n        DNASequence sequence = FastqTools.createDNASequenceWithErrorProbabilities(builder.build());\n        assertNotNull(sequence);\n\n        List features = sequence.getFeaturesByType(\"errorProbabilities\");\n        assertNotNull(features);\n        assertEquals(1, features.size());\n        QuantityFeature errorProbabilities = (QuantityFeature) features.get(0);\n        assertEquals(sequence.getLength(), errorProbabilities.getQuantities().size());\n        assertEquals(sequence.getLength(), errorProbabilities.getLocations().getLength());\n    }\n\n    public void testCreateDNASequenceWithErrorProbabilitiesNullFastq()\n    {\n        try\n        {\n            FastqTools.createDNASequenceWithErrorProbabilities(null);\n            fail(\"createDNASequenceWithErrorProbabilities(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testCreateDNASequenceWithQualityScoresAndErrorProbabilities()\n    {\n        DNASequence sequence = FastqTools.createDNASequenceWithQualityScoresAndErrorProbabilities(builder.build());\n        assertNotNull(sequence);\n\n        List qualityScoresFeatures = sequence.getFeaturesByType(\"qualityScores\");\n        assertNotNull(qualityScoresFeatures);\n        assertEquals(1, qualityScoresFeatures.size());\n        QualityFeature qualityScores = (QualityFeature) qualityScoresFeatures.get(0);\n        assertEquals(sequence.getLength(), qualityScores.getQualities().size());\n        assertEquals(sequence.getLength(), qualityScores.getLocations().getLength());\n\n        List errorProbabilitiesFeatures = sequence.getFeaturesByType(\"errorProbabilities\");\n        assertNotNull(errorProbabilitiesFeatures);\n        assertEquals(1, errorProbabilitiesFeatures.size());\n        QuantityFeature errorProbabilities = (QuantityFeature) errorProbabilitiesFeatures.get(0);\n        assertEquals(sequence.getLength(), errorProbabilities.getQuantities().size());\n        assertEquals(sequence.getLength(), errorProbabilities.getLocations().getLength());\n    }\n\n    public void testCreateDNASequenceWithQualityScoresAndErrorProbabilitiesNullFastq()\n    {\n        try\n        {\n            FastqTools.createDNASequenceWithQualityScoresAndErrorProbabilities(null);\n            fail(\"createDNASequenceWithQualityScoresAndErrorProbabilities(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testCreateQualityScores()\n    {\n        Fastq fastq = builder.build();\n        QualityFeature qualityScores = FastqTools.createQualityScores(fastq);\n        assertNotNull(qualityScores);\n        assertEquals(fastq.getSequence().length(), qualityScores.getQualities().size());\n    }\n\n    public void testCreateQualityScoresNullFastq()\n    {\n        try\n        {\n            FastqTools.createQualityScores(null);\n            fail(\"createQualityScores(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testCreateErrorProbabilities()\n    {\n        Fastq fastq = builder.build();\n        QuantityFeature errorProbabilities = FastqTools.createErrorProbabilities(fastq);\n        assertNotNull(errorProbabilities);\n        assertEquals(fastq.getSequence().length(), errorProbabilities.getQuantities().size());\n    }\n\n    public void testCreateErrorProbabilitiesNullFastq()\n    {\n        try\n        {\n            FastqTools.createErrorProbabilities(null);\n            fail(\"createErrorProbabilities(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScores()\n    {\n        Iterable<Integer> qualityScores = FastqTools.qualityScores(builder.build());\n        assertNotNull(qualityScores);\n        int count = 0;\n        for (Integer qualityScore : qualityScores)\n        {\n            assertNotNull(qualityScore);\n            count++;\n        }\n        assertEquals(4, count);\n    }\n\n    public void testQualityScoresNullFastq()\n    {\n        try\n        {\n            FastqTools.qualityScores(null);\n            fail(\"qualityScores(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresIntArray()\n    {\n        int[] qualityScores = new int[4];\n        FastqTools.qualityScores(builder.build(), qualityScores);\n        for (int i = 0; i < 4; i++)\n        {\n            assertTrue(qualityScores[i] != 0);\n        }\n    }\n\n    public void testQualityScoresIntArrayNullFastq()\n    {\n        try\n        {\n            FastqTools.qualityScores(null, new int[0]);\n            fail(\"qualityScores(null, int[]) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresNullIntArray()\n    {\n        try\n        {\n            FastqTools.qualityScores(builder.build(), null);\n            fail(\"qualityScores(fastq, null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresQualityScoresTooSmall()\n    {\n        try\n        {\n            FastqTools.qualityScores(builder.build(), new int[3]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testQualityScoresQualityScoresTooLarge()\n    {\n        try\n        {\n            FastqTools.qualityScores(builder.build(), new int[5]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilities()\n    {\n        Iterable<Double> errorProbabilities = FastqTools.errorProbabilities(builder.build());\n        assertNotNull(errorProbabilities);\n        int count = 0;\n        for (Double errorProbability : errorProbabilities)\n        {\n            assertNotNull(errorProbability);\n            count++;\n        }\n        assertEquals(4, count);\n    }\n\n    public void testErrorProbabilitiesNullFastq()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(null);\n            fail(\"errorProbabilities(null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesDoubleArray()\n    {\n        double[] errorProbabilities = new double[4];\n        FastqTools.errorProbabilities(builder.build(), errorProbabilities);\n        for (int i = 0; i < 0; i++)\n        {\n            assertTrue(errorProbabilities[i] > 0.0d);\n        }\n    }\n\n    public void testErrorProbabilitiesDoubleArrayNullFastq()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(null, new double[0]);\n            fail(\"errorProbabilities(null, double[]) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesNullErrorProbabilities()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(builder.build(), null);\n            fail(\"errorProbabilities(fastq, null) expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesErrorProbabilitiesTooSmall()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(builder.build(), new double[3]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testErrorProbabilitiesErrorProbabilitiesTooLarge()\n    {\n        try\n        {\n            FastqTools.errorProbabilities(builder.build(), new double[5]);\n            fail(\"expected IllegalArgumentException\");\n        }\n        catch (IllegalArgumentException e)\n        {\n            // expected\n        }\n    }\n\n    public void testToList()\n    {\n        List<String> list = new ArrayList<String>();\n        assertSame(list, FastqTools.toList(list));\n    }\n\n    public void testToListNotAList()\n    {\n        Collection<String> collection = new HashSet<String>();\n        assertTrue(FastqTools.toList(collection) instanceof List);\n        assertNotSame(collection, FastqTools.toList(collection));\n    }\n}\n","commitMessage":"adding javadoc comments, increasing unit test coverage\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@9583 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"adding javadoc comments, increasing unit test coverage\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@9583 7c6358e6-4a41-0410-a743-a5b2a554c398\n","allZero":false}