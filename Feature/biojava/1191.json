{"repository":"biojava","prod_path":"biojava3-protmod/src/main/java/org/biojava3/protmod/parser/ModifiedResidueParser.java","test_path":"biojava3-protmod/src/test/java/org/biojava3/protmod/parser/ModifiedResidueParserTest.java","prod_time":"2010-06-08 06:26:22","test_time":"2010-06-08 06:26:22","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":10,"add_classname_line":0,"add_condition_line":5,"add_field_line":0,"add_import_line":2,"add_packageid_line":0,"add_parameter_line":3,"add_return_line":1,"del_annotation_line":0,"del_call_line":9,"del_classname_line":0,"del_condition_line":5,"del_field_line":0,"del_import_line":3,"del_packageid_line":0,"del_parameter_line":2,"del_return_line":0,"label":"POSITIVE","prod_commitID":"d5c24620311d645cdd05238c26496410f950793b","test_commitID":"d5c24620311d645cdd05238c26496410f950793b","isfound":"found test change","originPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n * Created on Jun 6, 2010\r\n * Author: Jianjiong Gao \r\n *\r\n */\r\n\r\npackage org.biojava3.protmod.parser;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\nimport org.biojava.bio.structure.AminoAcid;\r\nimport org.biojava.bio.structure.Chain;\r\nimport org.biojava.bio.structure.Group;\r\nimport org.biojava.bio.structure.Structure;\r\n\r\nimport org.biojava3.protmod.Component;\r\nimport org.biojava3.protmod.ModificationCategory;\r\nimport org.biojava3.protmod.ModificationCondition;\r\nimport org.biojava3.protmod.ModifiedResidue;\r\nimport org.biojava3.protmod.ModifiedResidueImpl;\r\nimport org.biojava3.protmod.ProteinModification;\r\n\r\n/**\r\n * Identify modified residues in a 3-D structure.\r\n */\r\npublic class ModifiedResidueParser implements ProteinModificationParser {\r\n\t/**\r\n\t * Parse chemically modified residues in a structure.\r\n\t * @param structure query {@link Structure}.\r\n\t * @param potentialModifications query {@link ProteinModification}s.\r\n\t * @return an list of {@link ModifiedResidue}s.\r\n\t * @throws IllegalArgumentException if null structure, or null or \r\n\t *  empty potentialModifications, or potentialModifications contain \r\n\t *  modifications other than ModifiedResidues.\r\n\t */\r\n\tpublic List<ModifiedResidue> parse(final Structure structure, \r\n\t\t\tfinal Set<ProteinModification> potentialModifications) {\r\n\t\tif (structure==null) {\r\n\t\t\tthrow new IllegalArgumentException(\"Null structure.\");\r\n\t\t}\r\n\t\t\r\n\t\tif (potentialModifications==null || potentialModifications.isEmpty()) {\r\n\t\t\tthrow new IllegalArgumentException(\"Null or empty potentialModifications.\");\r\n\t\t}\r\n\t\t\r\n\t\tfor (ProteinModification mod:potentialModifications) {\r\n\t\t\tif (mod.getCategory()!=ModificationCategory.CHEMICAL_MODIFICATION) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Only CHEMICAL_MODIFICATION is allowed.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tList<ModifiedResidue> ret = new ArrayList();\r\n\t\t\r\n\t\t// TODO: how to deal with multi-model structure?\r\n\t\tList<Chain> chains = structure.getChains(0);\r\n\t\tfor (Chain chain : chains) {\r\n\t\t\tList<Group> aminoAcids = chain.getAtomGroups(\"amino\");\r\n\t\t\tint sizeAA = aminoAcids.size();\r\n\t\t\t\r\n\t\t\t// for all amino acid\r\n\t\t\tfor (int iAA=0; iAA<sizeAA; iAA++) {\r\n\t\t\t\tGroup group = aminoAcids.get(iAA);\r\n\t\t\t\tAminoAcid aa = (AminoAcid)group;\r\n\t\t\t\tString pdbccId = aa.getPDBName();\r\n\t\t\t\tProteinModification mod = ProteinModification.getByPdbccId(pdbccId);\r\n\t\t\t\tif (mod!=null && potentialModifications.contains(mod)) {\r\n\t\t\t\t\tModificationCondition condition = mod.getCondition();\r\n\t\t\t\t\tComponent comp = condition.getComponents()[0];\r\n\t\t\t\t\t\r\n\t\t\t\t\t// TODO: is this the correct way to determine N/C-terminal?\r\n\t\t\t\t\tif ((!comp.isNTerminal() && !comp.isCTerminal()) || // non-terminal\r\n\t\t\t\t\t\t\t(comp.isNTerminal() && iAA==0) ||           // N-terminal\r\n\t\t\t\t\t\t\t(comp.isCTerminal() && iAA==sizeAA-1)) {    // C-terminal\r\n\t\t\t\t\t\tModifiedResidue residue = new ModifiedResidueImpl(mod, aa);\r\n\t\t\t\t\t\tret.add(residue);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn ret;\r\n\t}\r\n}\r\n","changedPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n * Created on Jun 6, 2010\r\n * Author: Jianjiong Gao \r\n *\r\n */\r\n\r\npackage org.biojava3.protmod.parser;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\nimport org.biojava.bio.structure.Chain;\r\nimport org.biojava.bio.structure.Group;\r\nimport org.biojava.bio.structure.Structure;\r\n\r\nimport org.biojava3.protmod.Component;\r\nimport org.biojava3.protmod.ModificationCategory;\r\nimport org.biojava3.protmod.ModificationCondition;\r\nimport org.biojava3.protmod.ModifiedCompound;\r\nimport org.biojava3.protmod.ModifiedCompoundFactory;\r\nimport org.biojava3.protmod.ProteinModification;\r\n\r\n/**\r\n * Identify modified residues in a 3-D structure.\r\n */\r\npublic class ModifiedResidueParser implements ProteinModificationParser {\r\n\t/**\r\n\t * Parse chemically modified residues in a structure.\r\n\t * @param structure query {@link Structure}.\r\n\t * @param potentialModifications query {@link ProteinModification}s.\r\n\t * @param modelnr model number.\r\n\t * @return an list of {@link ModifiedCompound}s, or null if the\r\n\t *  nodelnr is larger than the number of models in the structure.\r\n\t * @throws IllegalArgumentException if null structure, or null or \r\n\t *  empty potentialModifications, or potentialModifications contain \r\n\t *  modifications other than ModifiedResidues.\r\n\t */\r\n\tpublic List<ModifiedCompound> parse(final Structure structure, \r\n\t\t\tfinal Set<ProteinModification> potentialModifications,\r\n\t\t\tfinal int modelnr) {\r\n\t\tif (structure==null) {\r\n\t\t\tthrow new IllegalArgumentException(\"Null structure.\");\r\n\t\t}\r\n\t\t\r\n\t\tif (potentialModifications==null || potentialModifications.isEmpty()) {\r\n\t\t\tthrow new IllegalArgumentException(\"Null or empty potentialModifications.\");\r\n\t\t}\r\n\t\t\r\n\t\tfor (ProteinModification mod:potentialModifications) {\r\n\t\t\tif (mod.getCategory()!=ModificationCategory.CHEMICAL_MODIFICATION) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Only CHEMICAL_MODIFICATION is allowed.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (modelnr >= structure.nrModels())\r\n\t\t\treturn null;\r\n\t\t\r\n\t\tList<ModifiedCompound> ret = new ArrayList<ModifiedCompound>();\r\n\t\t\r\n\t\t// TODO: how to deal with multi-model structure?\r\n\t\tList<Chain> chains = structure.getChains(0);\r\n\t\tfor (Chain chain : chains) {\r\n\t\t\tList<Group> residues = chain.getSeqResGroups();\r\n\t\t\tint sizeRes = residues.size();\r\n\t\t\t\r\n\t\t\t// for all amino acid\r\n\t\t\tfor (int iRes=0; iRes<sizeRes; iRes++) {\r\n\t\t\t\tGroup residue = residues.get(iRes);\r\n\t\t\t\tString pdbccId = residue.getPDBName();\r\n\t\t\t\tProteinModification mod = ProteinModification.getByPdbccId(pdbccId);\r\n\t\t\t\t\r\n\t\t\t\tif (mod==null || !potentialModifications.contains(mod)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tModificationCondition condition = mod.getCondition();\r\n\t\t\t\tComponent comp = condition.getComponents()[0];\r\n\t\t\t\t\r\n\t\t\t\t// TODO: is this the correct way to determine N/C-terminal?\r\n\t\t\t\tif ((comp.isNTerminal() && iRes==0) ||           // N-terminal\r\n\t\t\t\t\t\t(comp.isCTerminal() && iRes==sizeRes-1)) {    // C-terminal\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tModifiedCompound modRes = ModifiedCompoundFactory\r\n\t\t\t\t\t.createModifiedResidue(mod, residue);\r\n\t\t\t\tret.add(modRes);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn ret;\r\n\t}\r\n}\r\n","originTest":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n * Created on Jun 7, 2010\r\n * Author: Jianjiong Gao \r\n *\r\n */\r\n\r\npackage org.biojava3.protmod.parser;\r\n\r\nimport java.io.IOException;\r\n\r\nimport java.net.URL;\r\n\r\nimport java.util.List;\r\n\r\nimport junit.framework.TestCase;\r\n\r\nimport org.biojava.bio.structure.AminoAcid;\r\nimport org.biojava.bio.structure.Chain;\r\nimport org.biojava.bio.structure.Structure;\r\nimport org.biojava.bio.structure.io.PDBFileReader;\r\n\r\nimport org.biojava3.protmod.ModificationCategory;\r\nimport org.biojava3.protmod.ModifiedResidue;\r\nimport org.biojava3.protmod.ProteinModification;\r\n\r\npublic class ModifiedResidueParserTest extends TestCase {\r\n\r\n\tpublic void testParser() throws IOException {\r\n\t\tSystem.out.println(\"===Begin testing on ModifiedResidueParser\");\r\n\t\t\r\n\t\tURL fileUrl = ModifiedResidueParserTest.class.getResource(\"3MVJ.pdb\");\r\n\t\tassertNotNull(fileUrl);\r\n\t\t\r\n\t\tPDBFileReader pdbReader = new PDBFileReader();\r\n\t\tStructure struc = pdbReader.getStructure(fileUrl);\r\n\t\t\r\n\t\tModifiedResidueParser parser = new ModifiedResidueParser();\r\n\t\tList<ModifiedResidue> residues = parser.parse(struc, \r\n\t\t\t\tProteinModification.getByCategory(\r\n\t\t\t\tModificationCategory.CHEMICAL_MODIFICATION));\r\n\t\t\r\n\t\tfor (ModifiedResidue residue : residues) {\r\n\t\t\tProteinModification mod = residue.getModification();\r\n\t\t\tAminoAcid aa = residue.getModifiedAminoAcid();\r\n\t\t\tChain chain = aa.getParent();\r\n\t\t\tSystem.out.println(mod.getPdbccId()+\"\\t\"+chain.getName()+\"\\t\");\r\n\t\t}\r\n\r\n\t\tSystem.out.println(\"===End testing on ModifiedResidueParser\");\r\n\t}\r\n}\r\n","changedTest":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n * Created on Jun 7, 2010\r\n * Author: Jianjiong Gao \r\n *\r\n */\r\n\r\npackage org.biojava3.protmod.parser;\r\n\r\nimport java.io.IOException;\r\n\r\nimport java.net.URL;\r\n\r\nimport java.util.List;\r\n\r\nimport junit.framework.TestCase;\r\n\r\nimport org.biojava.bio.structure.Group;\r\nimport org.biojava.bio.structure.Chain;\r\nimport org.biojava.bio.structure.Structure;\r\nimport org.biojava.bio.structure.io.PDBFileReader;\r\n\r\nimport org.biojava3.protmod.ModificationCategory;\r\nimport org.biojava3.protmod.ModifiedCompound;\r\nimport org.biojava3.protmod.ProteinModification;\r\n\r\npublic class ModifiedResidueParserTest extends TestCase {\r\n\r\n\tpublic void testParser() throws IOException {\r\n\t\tSystem.out.println(\"===Begin testing on ModifiedResidueParser\");\r\n\t\t\r\n\t\tparserTest(\"3MVJ.pdb\");\r\n\t\t\r\n\t\tSystem.out.println(\"===End testing on ModifiedResidueParser\");\r\n\t}\r\n\t\r\n\tprivate void parserTest(String pdbfile) throws IOException {\r\n\t\tURL fileUrl = ModifiedResidueParserTest.class.getResource(pdbfile);\r\n\t\tassertNotNull(fileUrl);\r\n\t\t\r\n\t\tPDBFileReader pdbReader = new PDBFileReader();\r\n\t\tStructure struc = pdbReader.getStructure(fileUrl);\r\n\t\t\r\n\t\tModifiedResidueParser parser = new ModifiedResidueParser();\r\n\t\t\r\n\t\tint nrmodel = struc.nrModels();\r\n\t\tfor (int modelnr=0; modelnr<nrmodel; modelnr++) {\r\n\t\t\tList<ModifiedCompound> residues = parser.parse(struc, \r\n\t\t\t\t\tProteinModification.getByCategory(ModificationCategory.CHEMICAL_MODIFICATION),\r\n\t\t\t\t\tmodelnr);\r\n\t\t\t\r\n\t\t\tfor (ModifiedCompound residue : residues) {\r\n\t\t\t\tGroup g = residue.getProteinResidues().get(0);\r\n\t\t\t\tChain chain = g.getParent();\r\n\t\t\t\tSystem.out.println(g.getPDBName()+\"\\t\"+chain.getName()+\"\\t\"+g.getPDBCode());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","commitMessage":"biojava3-protmod: identifying modified residues tested.\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@7889 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"biojava3-protmod: identifying modified residues tested.\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@7889 7c6358e6-4a41-0410-a743-a5b2a554c398\n","allZero":false}