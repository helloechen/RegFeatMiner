{"repository":"biojava","prod_path":"biojava3-alignment/src/main/java/org/biojava3/alignment/SimpleGapPenalty.java","test_path":"biojava3-alignment/src/test/java/org/biojava3/alignment/SimpleGapPenaltyTest.java","prod_time":"2015-01-17 01:31:09","test_time":"2015-01-17 01:31:09","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":4,"add_classname_line":0,"add_condition_line":0,"add_field_line":2,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":5,"add_return_line":0,"del_annotation_line":0,"del_call_line":4,"del_classname_line":0,"del_condition_line":0,"del_field_line":2,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":5,"del_return_line":0,"label":"POSITIVE","prod_commitID":"b7de9bef8a4e86e1c9dc90711f8b6f3d8342e2e7","test_commitID":"b7de9bef8a4e86e1c9dc90711f8b6f3d8342e2e7","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 9, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport org.biojava3.alignment.template.GapPenalty;\n\n/**\n * Implements a data structure for the gap penalties used during a sequence alignment routine.\n *\n * @author Mark Chapman\n */\npublic class SimpleGapPenalty implements GapPenalty {\n\n    private static short dgop = 10, dgep = 1;\n\n    /**\n     * Sets the default gap extension penalty.\n     *\n     * @param gep the default gap extension penalty\n     */\n    public static void setDefaultExtensionPenalty(short gep) {\n        dgep = gep;\n    }\n\n    /**\n     * Sets the default gap open penalty.\n     *\n     * @param gop the default gap open penalty\n     */\n    public static void setDefaultOpenPenalty(short gop) {\n        dgop = gop;\n    }\n\n    private GapPenalty.Type type;\n    private short gop, gep;\n\n    /**\n     * Creates a new set of gap penalties using the defaults.\n     */\n    public SimpleGapPenalty() {\n        this(dgop, dgep);\n    }\n\n    /**\n     * Creates a new set of gap penalties.\n     *\n     * @param gop the gap open penalty; should be nonnegative\n     * @param gep the gap extension penalty; should be nonnegative\n     */\n    public SimpleGapPenalty(short gop, short gep) {\n        this.gop = (short) -Math.abs(gop);\n        this.gep = (short) -Math.abs(gep);\n        setType();\n    }\n\n    /**\n     * <strong>Returns the negative of the extension penalty passed to the constructor.</strong>\n     */\n    @Override\n    public short getExtensionPenalty() {\n        return gep;\n    }\n\n    /**\n     * <strong>Returns the negative of the opening penalty passed to the constructor.</strong>\n     */\n    @Override\n    public short getOpenPenalty() {\n        return gop;\n    }\n\n    @Override\n    public Type getType() {\n        return type;\n    }\n\n    /**\n     * @param gep Should be nonnegative\n     */\n    @Override\n    public void setExtensionPenalty(short gep) {\n        this.gep = (short) -Math.abs(gep);\n        setType();\n    }\n\n    /**\n     * @param gop Should be nonnegative\n     */\n    @Override\n    public void setOpenPenalty(short gop) {\n        this.gop = (short) -Math.abs(gop);\n        setType();\n    }\n\n    // helper method to set the type given the open and extension penalties\n    private void setType() {\n        type = (gop == 0) ? GapPenalty.Type.LINEAR : ((gep == 0) ? GapPenalty.Type.CONSTANT : GapPenalty.Type.AFFINE);\n    }\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 9, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport org.biojava3.alignment.template.GapPenalty;\n\n/**\n * Implements a data structure for the gap penalties used during a sequence alignment routine.\n *\n * @author Mark Chapman\n */\npublic class SimpleGapPenalty implements GapPenalty {\n\n    private static int dgop = 10, dgep = 1;\n\n    /**\n     * Sets the default gap extension penalty.\n     *\n     * @param gep the default gap extension penalty\n     */\n    public static void setDefaultExtensionPenalty(int gep) {\n        dgep = gep;\n    }\n\n    /**\n     * Sets the default gap open penalty.\n     *\n     * @param gop the default gap open penalty\n     */\n    public static void setDefaultOpenPenalty(int gop) {\n        dgop = gop;\n    }\n\n    private GapPenalty.Type type;\n    private int gop, gep;\n\n    /**\n     * Creates a new set of gap penalties using the defaults.\n     */\n    public SimpleGapPenalty() {\n        this(dgop, dgep);\n    }\n\n    /**\n     * Creates a new set of gap penalties.\n     *\n     * @param gop the gap open penalty; should be nonnegative\n     * @param gep the gap extension penalty; should be nonnegative\n     */\n    public SimpleGapPenalty(int gop, int gep) {\n        this.gop = -Math.abs(gop);\n        this.gep = -Math.abs(gep);\n        setType();\n    }\n\n    /**\n     * <strong>Returns the negative of the extension penalty passed to the constructor.</strong>\n     */\n    @Override\n    public int getExtensionPenalty() {\n        return gep;\n    }\n\n    /**\n     * <strong>Returns the negative of the opening penalty passed to the constructor.</strong>\n     */\n    @Override\n    public int getOpenPenalty() {\n        return gop;\n    }\n\n    @Override\n    public Type getType() {\n        return type;\n    }\n\n    /**\n     * @param gep Should be nonnegative\n     */\n    @Override\n    public void setExtensionPenalty(int gep) {\n        this.gep = -Math.abs(gep);\n        setType();\n    }\n\n    /**\n     * @param gop Should be nonnegative\n     */\n    @Override\n    public void setOpenPenalty(int gop) {\n        this.gop = -Math.abs(gop);\n        setType();\n    }\n\n    // helper method to set the type given the open and extension penalties\n    private void setType() {\n        type = (gop == 0) ? GapPenalty.Type.LINEAR : ((gep == 0) ? GapPenalty.Type.CONSTANT : GapPenalty.Type.AFFINE);\n    }\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 9, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport static org.junit.Assert.*;\n\nimport org.biojava3.alignment.template.GapPenalty;\nimport org.junit.Test;\n\npublic class SimpleGapPenaltyTest {\n\n    @Test\n    public void testSimpleGapPenalty() {\n        short gop = -12, gep = -3;\n        GapPenalty defaults = new SimpleGapPenalty();\n        SimpleGapPenalty.setDefaultOpenPenalty(gop);\n        SimpleGapPenalty.setDefaultExtensionPenalty(gep);\n        GapPenalty gaps = new SimpleGapPenalty();\n        assertEquals(gaps.getOpenPenalty(), gop);\n        assertEquals(gaps.getExtensionPenalty(), gep);\n        assertEquals(gaps.getType(), GapPenalty.Type.AFFINE);\n        SimpleGapPenalty.setDefaultOpenPenalty(defaults.getOpenPenalty());\n        SimpleGapPenalty.setDefaultExtensionPenalty(defaults.getExtensionPenalty());\n    }\n\n    @Test\n    public void testSimpleGapPenaltyShortShort() {\n        short gop = -10, gep = -4;\n        GapPenalty gaps = new SimpleGapPenalty(gop, gep);\n        assertEquals(gaps.getOpenPenalty(), gop);\n        assertEquals(gaps.getExtensionPenalty(), gep);\n        assertEquals(gaps.getType(), GapPenalty.Type.AFFINE);\n    }\n\n    @Test\n    public void testExtensionPenalty() {\n        GapPenalty gaps = new SimpleGapPenalty();\n        short gep = -14;\n        gaps.setExtensionPenalty(gep);\n        assertEquals(gaps.getExtensionPenalty(), gep);\n    }\n\n    @Test\n    public void testOpenPenalty() {\n        GapPenalty gaps = new SimpleGapPenalty();\n        short gop = -27;\n        gaps.setOpenPenalty(gop);\n        assertEquals(gaps.getOpenPenalty(), gop);\n    }\n\n    @Test\n    public void testType() {\n        assertEquals(new SimpleGapPenalty((short) 7, (short) 0).getType(), GapPenalty.Type.CONSTANT);\n        assertEquals(new SimpleGapPenalty((short) 0, (short) 5).getType(), GapPenalty.Type.LINEAR);\n        assertEquals(new SimpleGapPenalty((short) 8, (short) 3).getType(), GapPenalty.Type.AFFINE);\n    }\n\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 9, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport static org.junit.Assert.*;\n\nimport org.biojava3.alignment.template.GapPenalty;\nimport org.junit.Test;\n\npublic class SimpleGapPenaltyTest {\n\n    @Test\n    public void testSimpleGapPenalty() {\n        int gop = -12, gep = -3;\n        GapPenalty defaults = new SimpleGapPenalty();\n        SimpleGapPenalty.setDefaultOpenPenalty(gop);\n        SimpleGapPenalty.setDefaultExtensionPenalty(gep);\n        GapPenalty gaps = new SimpleGapPenalty();\n        assertEquals(gaps.getOpenPenalty(), gop);\n        assertEquals(gaps.getExtensionPenalty(), gep);\n        assertEquals(gaps.getType(), GapPenalty.Type.AFFINE);\n        SimpleGapPenalty.setDefaultOpenPenalty(defaults.getOpenPenalty());\n        SimpleGapPenalty.setDefaultExtensionPenalty(defaults.getExtensionPenalty());\n    }\n\n    @Test\n    public void testSimpleGapPenaltyShortShort() {\n        short gop = -10, gep = -4;\n        GapPenalty gaps = new SimpleGapPenalty(gop, gep);\n        assertEquals(gaps.getOpenPenalty(), gop);\n        assertEquals(gaps.getExtensionPenalty(), gep);\n        assertEquals(gaps.getType(), GapPenalty.Type.AFFINE);\n    }\n\n    @Test\n    public void testExtensionPenalty() {\n        GapPenalty gaps = new SimpleGapPenalty();\n        short gep = -14;\n        gaps.setExtensionPenalty(gep);\n        assertEquals(gaps.getExtensionPenalty(), gep);\n    }\n\n    @Test\n    public void testOpenPenalty() {\n        GapPenalty gaps = new SimpleGapPenalty();\n        short gop = -27;\n        gaps.setOpenPenalty(gop);\n        assertEquals(gaps.getOpenPenalty(), gop);\n    }\n\n    @Test\n    public void testType() {\n        assertEquals(new SimpleGapPenalty((short) 7, (short) 0).getType(), GapPenalty.Type.CONSTANT);\n        assertEquals(new SimpleGapPenalty((short) 0, (short) 5).getType(), GapPenalty.Type.LINEAR);\n        assertEquals(new SimpleGapPenalty((short) 8, (short) 3).getType(), GapPenalty.Type.AFFINE);\n    }\n\n}\n","commitMessage":"Fixing completely the int overflow bug in #202. \nAlignment was still not working properly for very large sequences:\ntested with sequence of PDB 2y9r (102 residues) against UniProt Q8WZ42\n(34350 residues), a null pointer exception was happening\nThe key in this patch is the modification in AbstractMatrixAligner:\nscore has to be initialized to Integer.MIN_VALUE and not to\nShort.MIN_VALUE","test_commitMessage":"Fixing completely the int overflow bug in #202. \nAlignment was still not working properly for very large sequences:\ntested with sequence of PDB 2y9r (102 residues) against UniProt Q8WZ42\n(34350 residues), a null pointer exception was happening\nThe key in this patch is the modification in AbstractMatrixAligner:\nscore has to be initialized to Integer.MIN_VALUE and not to\nShort.MIN_VALUE","allZero":false}