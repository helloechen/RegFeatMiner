{"repository":"biojava","prod_path":"biojava3-structure/src/main/java/org/biojava/bio/structure/scop/ScopDescription.java","test_path":"biojava3-structure/src/test/java/org/biojava/bio/structure/scop/ScopDescriptionTest.java","prod_time":"2011-06-09 03:15:40","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":1,"add_condition_line":0,"add_field_line":0,"add_import_line":1,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":1,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"efb4c74ae2cdf47ab7b32ac7006dae43193314fd","test_commitID":"","isfound":"not found test change","originPro":"package org.biojava.bio.structure.scop;\n\nimport java.io.StringWriter;\n\n/** Contains data from\n * dir.des.scop.txt_1.75\n * \n * <p>e.g \n * <pre>\n * SunID\tCat\tClass   \tName\tDescription\n * -----\t---\t-----   \t----\t-----------\n * 26154\tpx\tb.47.1.2\td1nrs.1\t1nrs L:,H:\n * 125030\tpx\tb.47.1.2\td1zgia1\t1zgi A:1A-245\n * </pre>\n * \n * @author Andreas Prlic\n *\n */\npublic class ScopDescription {\n   int sunID;\n   ScopCategory category;\n   String classificationId;\n   String name;\n   String description;\n\n\n   public String toString(){\n      StringWriter buf = new StringWriter();\n      \n      buf.append(sunID+\"\");\n      buf.append(\"\\t\");\n      buf.append(category.toString());\n      buf.append(\"\\t\");\n      buf.append(classificationId);\n      buf.append(\"\\t\");\n      buf.append(name);\n      buf.append(\"\\t\");\n      buf.append(description);\n    \n      return buf.toString();\n   }\n   \n\n   public int getSunID()\n   {\n      return sunID;\n   }\n   public void setSunID(int sunID)\n   {\n      this.sunID = sunID;\n   }\n   public ScopCategory getCategory()\n   {\n      return category;\n   }\n   public void setCategory(ScopCategory category)\n   {\n      this.category = category;\n   }\n   public String getClassificationId()\n   {\n      return classificationId;\n   }\n   public void setClassificationId(String classificationId)\n   {\n      this.classificationId = classificationId;\n   }\n   public String getName()\n   {\n      return name;\n   }\n   public void setName(String name)\n   {\n      this.name = name;\n   }\n   public String getDescription()\n   {\n      return description;\n   }\n   public void setDescription(String description)\n   {\n      this.description = description;\n   }\n\n   // Methods to return parts of the classificationID\n   \n   /**\n    * Return a portion of the classificationID corresponding to the specified\n    * category (class, fold, superfamily, family).\n    * \n    * <p>Example: for SCOP family \"b.5.1.1\",\n    * getClassificationId(ScopCategory.Superfamily) => \"b.5.1\"\n    */\n   public String getClassificationId(ScopCategory category) {\n\t   if(classificationId == null || classificationId.isEmpty()) {\n\t\t   return null;\n\t   }\n\t   \t   \n\t   int numParts = 0;\n\t   switch(category) {\n\t   case Family:      numParts++;\n\t   case Superfamily: numParts++;\n\t   case Fold:        numParts++;\n\t   case Class:       numParts++; break;\n\t   default:\n\t\t   throw new IllegalArgumentException(\"Only Class, Fold, Superfamily, and Family are supported.\");\n\t   }\n\t   \n\t   int endChar = -1;\n\t   for(int i = 0;i<numParts-1;i++) {\n\t\t   endChar = classificationId.indexOf('.', endChar+1);\n\t\t   if(endChar<0) {\n\t\t\t   // Not enough items in the classification for this category\n\t\t\t   return null;\n\t\t   }\n\t   }\n\t   endChar = classificationId.indexOf('.', endChar+1);\n\t   if(endChar<0) {\n\t\t   // category goes to the end\n\t\t   return classificationId;\n\t   }\n\t   else {\n\t\t   return classificationId.substring(0, endChar);\n\t   }\n\t   \n   }\n   \n   /**\n\t * @return\n\t * @see java.lang.Object#hashCode()\n\t */\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result\n\t\t\t\t+ ((category == null) ? 0 : category.hashCode());\n\t\tresult = prime\n\t\t\t\t* result\n\t\t\t\t+ ((classificationId == null) ? 0 : classificationId.hashCode());\n\t\tresult = prime * result + ((name == null) ? 0 : name.hashCode());\n\t\tresult = prime * result + sunID;\n\t\treturn result;\n\t}\n\n\n\t/**\n\t * Compares the fields sunID, category, classificationId, and name for equality\n\t * \n\t * @param obj\n\t * @return\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj) {\n\t\t\treturn true;\n\t\t}\n\t\tif (obj == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (getClass() != obj.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tScopDescription other = (ScopDescription) obj;\n\t\tif (category == null) {\n\t\t\tif (other.category != null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (!category.equals(other.category)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (classificationId == null) {\n\t\t\tif (other.classificationId != null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (!classificationId.equals(other.classificationId)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (name == null) {\n\t\t\tif (other.name != null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (!name.equals(other.name)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (sunID != other.sunID) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n}\n","changedPro":"package org.biojava.bio.structure.scop;\n\nimport java.io.Serializable;\nimport java.io.StringWriter;\n\n/** Contains data from\n * dir.des.scop.txt_1.75\n * \n * <p>e.g \n * <pre>\n * SunID\tCat\tClass   \tName\tDescription\n * -----\t---\t-----   \t----\t-----------\n * 26154\tpx\tb.47.1.2\td1nrs.1\t1nrs L:,H:\n * 125030\tpx\tb.47.1.2\td1zgia1\t1zgi A:1A-245\n * </pre>\n * \n * @author Andreas Prlic\n *\n */\npublic class ScopDescription implements Serializable{\n   int sunID;\n   ScopCategory category;\n   String classificationId;\n   String name;\n   String description;\n\n\n   public String toString(){\n      StringWriter buf = new StringWriter();\n      \n      buf.append(sunID+\"\");\n      buf.append(\"\\t\");\n      buf.append(category.toString());\n      buf.append(\"\\t\");\n      buf.append(classificationId);\n      buf.append(\"\\t\");\n      buf.append(name);\n      buf.append(\"\\t\");\n      buf.append(description);\n    \n      return buf.toString();\n   }\n   \n\n   public int getSunID()\n   {\n      return sunID;\n   }\n   public void setSunID(int sunID)\n   {\n      this.sunID = sunID;\n   }\n   public ScopCategory getCategory()\n   {\n      return category;\n   }\n   public void setCategory(ScopCategory category)\n   {\n      this.category = category;\n   }\n   public String getClassificationId()\n   {\n      return classificationId;\n   }\n   public void setClassificationId(String classificationId)\n   {\n      this.classificationId = classificationId;\n   }\n   public String getName()\n   {\n      return name;\n   }\n   public void setName(String name)\n   {\n      this.name = name;\n   }\n   public String getDescription()\n   {\n      return description;\n   }\n   public void setDescription(String description)\n   {\n      this.description = description;\n   }\n\n   // Methods to return parts of the classificationID\n   \n   /**\n    * Return a portion of the classificationID corresponding to the specified\n    * category (class, fold, superfamily, family).\n    * \n    * <p>Example: for SCOP family \"b.5.1.1\",\n    * getClassificationId(ScopCategory.Superfamily) => \"b.5.1\"\n    */\n   public String getClassificationId(ScopCategory category) {\n\t   if(classificationId == null || classificationId.isEmpty()) {\n\t\t   return null;\n\t   }\n\t   \t   \n\t   int numParts = 0;\n\t   switch(category) {\n\t   case Family:      numParts++;\n\t   case Superfamily: numParts++;\n\t   case Fold:        numParts++;\n\t   case Class:       numParts++; break;\n\t   default:\n\t\t   throw new IllegalArgumentException(\"Only Class, Fold, Superfamily, and Family are supported.\");\n\t   }\n\t   \n\t   int endChar = -1;\n\t   for(int i = 0;i<numParts-1;i++) {\n\t\t   endChar = classificationId.indexOf('.', endChar+1);\n\t\t   if(endChar<0) {\n\t\t\t   // Not enough items in the classification for this category\n\t\t\t   return null;\n\t\t   }\n\t   }\n\t   endChar = classificationId.indexOf('.', endChar+1);\n\t   if(endChar<0) {\n\t\t   // category goes to the end\n\t\t   return classificationId;\n\t   }\n\t   else {\n\t\t   return classificationId.substring(0, endChar);\n\t   }\n\t   \n   }\n   \n   /**\n\t * @return\n\t * @see java.lang.Object#hashCode()\n\t */\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result\n\t\t\t\t+ ((category == null) ? 0 : category.hashCode());\n\t\tresult = prime\n\t\t\t\t* result\n\t\t\t\t+ ((classificationId == null) ? 0 : classificationId.hashCode());\n\t\tresult = prime * result + ((name == null) ? 0 : name.hashCode());\n\t\tresult = prime * result + sunID;\n\t\treturn result;\n\t}\n\n\n\t/**\n\t * Compares the fields sunID, category, classificationId, and name for equality\n\t * \n\t * @param obj\n\t * @return\n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj) {\n\t\t\treturn true;\n\t\t}\n\t\tif (obj == null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (getClass() != obj.getClass()) {\n\t\t\treturn false;\n\t\t}\n\t\tScopDescription other = (ScopDescription) obj;\n\t\tif (category == null) {\n\t\t\tif (other.category != null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (!category.equals(other.category)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (classificationId == null) {\n\t\t\tif (other.classificationId != null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (!classificationId.equals(other.classificationId)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (name == null) {\n\t\t\tif (other.name != null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (!name.equals(other.name)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (sunID != other.sunID) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n}\n","originTest":"/**\n * \n */\npackage org.biojava.bio.structure.scop;\n\nimport junit.framework.TestCase;\n\n\n/**\n * @author Spencer Bliven <sbliven@ucsd.edu>\n *\n */\npublic class ScopDescriptionTest extends TestCase{\n\tpublic void testClassification() {\n\t\tScopDescription s = new ScopDescription();\n\t\ts.setClassificationId(\"b.12.1.7\");\n\t\t\n\t\tString scopClass;\n\t\t\n\t\ttry {\n\t\t\tscopClass = s.getClassificationId(ScopCategory.Px);\n\t\t\tfail(\"Illegal category. Should have thrown IllegalArgumentException\");\n\t\t} catch( IllegalArgumentException e) {\n\t\t\t//expected\n\t\t}\n\t\t\n\t\tscopClass = s.getClassificationId(ScopCategory.Class);\n\t\tassertEquals(\"b\",scopClass);\n\t\t\n\t\tscopClass = s.getClassificationId(ScopCategory.Fold);\n\t\tassertEquals(\"b.12\",scopClass);\n\t\t\n\t\tscopClass = s.getClassificationId(ScopCategory.Superfamily);\n\t\tassertEquals(\"b.12.1\",scopClass);\n\t\t\n\t\tscopClass = s.getClassificationId(ScopCategory.Family);\n\t\tassertEquals(\"b.12.1.7\",scopClass);\n\n\t\t\n\t\ts.setClassificationId(\"k.14\");\n\t\t\n\t\tscopClass = s.getClassificationId(ScopCategory.Class);\n\t\tassertEquals(\"k\",scopClass);\n\t\t\n\t\tscopClass = s.getClassificationId(ScopCategory.Fold);\n\t\tassertEquals(\"k.14\",scopClass);\n\t\t\n\t\tscopClass = s.getClassificationId(ScopCategory.Superfamily);\n\t\tassertNull(scopClass);\n\t\t\n\t\tscopClass = s.getClassificationId(ScopCategory.Family);\n\t\tassertNull(scopClass);\n\t}\n}\n","changedTest":"","commitMessage":"beans are now serializable\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8984 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"","allZero":false}