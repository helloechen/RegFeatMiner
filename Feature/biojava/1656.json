{"repository":"biojava","prod_path":"biojava3-structure/src/main/java/org/biojava/bio/structure/io/sifts/SiftsChainToUniprotMapping.java","test_path":"biojava3-structure/src/test/java/org/biojava/bio/structure/io/sifts/SiftsChainToUniprotMappingTest.java","prod_time":"2014-03-18 19:31:13","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":1,"add_classname_line":0,"add_condition_line":1,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":1,"del_classname_line":0,"del_condition_line":1,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"d6b64f72634c15d53696b1b0ac0b611939067d5c","test_commitID":"","isfound":"not found test change","originPro":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Dec 7, 2013\n * Created by Douglas Myers-Turnbull\n *\n */\npackage org.biojava.bio.structure.io.sifts;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.zip.GZIPInputStream;\n\nimport org.biojava.bio.structure.align.ce.AbstractUserArgumentProcessor;\nimport org.biojava3.core.sequence.io.util.IOUtils;\n\n/**\n * A mapping between UniProt entries and PDB chains.\n * For example\n * <pre>\n * SiftsChainToUniprot sifts = SiftsChainToUniprot.load();\n * SiftsChainEntry entry1 = sifts.getByUniProtId(\"P04585\");\n * System.out.println(entry1.getPdbId() + \".\" + entry1.getChainId()); // 1hiv.A\n * System.out.println(entry1.getPdbStart() + \"-\" + entry1.getPdbStop()); // 1-99\n * SiftsChainEntry entry2 = sifts.getByChainId(\"1hiv\", \"A\");\n * System.out.println(entry1.equals(entry2)); // true\n * </pre>\n * \n * @author dmyersturnbull\n * @see SiftsChainEntry\n * @since 3.0.7\n */\npublic class SiftsChainToUniprotMapping {\n\n\tprivate static File DEFAULT_FILE;\n\n\tprivate static final String DEFAULT_FILENAME = \"pdb_chain_uniprot.tsv\";\n\tprivate static final URL DEFAULT_URL;\n\n\tstatic {\n\t\ttry {\n\t\t\tDEFAULT_URL = new URL(\"ftp://ftp.ebi.ac.uk/pub/databases/msd/sifts/flatfiles/tsv/pdb_chain_uniprot.tsv.gz\");\n\t\t} catch (MalformedURLException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n\t/**\n\t * Loads the SIFTS mapping.\n\t * Attempts to load the mapping file file in the PDB cache directory.\n\t * If the file does not exist or could not be parsed, downloads and stores a GZ-compressed file.\n\t * @return\n\t * @throws IOException If the local file could not be read and could not be downloaded\n\t */\n\tpublic static SiftsChainToUniprotMapping load() throws IOException {\n\t\treturn load(false);\n\t}\n\n\t/**\n\t * Loads the SIFTS mapping.\n\t * Attempts to load the mapping file file in the PDB cache directory.\n\t * If the file does not exist or could not be parsed, downloads and stores a GZ-compressed file.\n\t * @param useOnlyLocal If true, will throw an IOException if the file needs to be downloaded\n\t * @return\n\t * @throws IOException If the local file could not be read and could not be downloaded (including if onlyLocal is true)\n\t */\n\tpublic static SiftsChainToUniprotMapping load(boolean useOnlyLocal) throws IOException {\n\t\tString cacheDir = System.getProperty(AbstractUserArgumentProcessor.CACHE_DIR);\n\t\tif (cacheDir != null) {\n\t\t\tDEFAULT_FILE = new File(cacheDir.endsWith(File.pathSeparator) ? cacheDir + DEFAULT_FILENAME : cacheDir\n\t\t\t\t\t+ File.pathSeparator + DEFAULT_FILENAME);\n\t\t} else {\n\t\t\tDEFAULT_FILE = File.createTempFile(DEFAULT_FILENAME, \"xml\");\n\t\t}\n\t\tif (!DEFAULT_FILE.exists()) {\n\t\t\tif (useOnlyLocal) throw new IOException(DEFAULT_FILE + \" does not exist, and did not download\");\n\t\t\tdownload();\n\t\t}\n\t\ttry {\n\t\t\treturn build();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tif (useOnlyLocal) throw new IOException(DEFAULT_FILE + \" could not be read, and did not redownload\");\n\t\t\tdownload();\n\t\t\treturn build();\n\t\t}\n\t}\n\n\tprivate static SiftsChainToUniprotMapping build() throws IOException {\n\t\tSiftsChainToUniprotMapping sifts = new SiftsChainToUniprotMapping();\n\t\tBufferedReader br = null;\n\t\ttry {\n\t\t\tbr = new BufferedReader(new FileReader(DEFAULT_FILE));\n\t\t\tString line = \"\";\n\t\t\twhile ((line = br.readLine()) != null) {\n\t\t\t\tif (line.isEmpty() || line.startsWith(\"#\") || line.startsWith(\"PDB\")) continue;\n\t\t\t\tString[] parts = line.split(\"\\t\");\n\t\t\t\tString pdbId = parts[0];\n\t\t\t\tString chainId = parts[1];\n\t\t\t\tString uniProtId = parts[2];\n\t\t\t\tString seqresStart = parts[3];\n\t\t\t\tString seqresEnd = parts[4];\n\t\t\t\tString pdbStart = parts[5];\n\t\t\t\tString pdbEnd = parts[6];\n\t\t\t\tString uniprotStart = parts[7];\n\t\t\t\tString uniprotEnd = parts[8];\n\t\t\t\tSiftsChainEntry entry = new SiftsChainEntry(pdbId, chainId, uniProtId, seqresStart, seqresEnd,\n\t\t\t\t\t\tpdbStart, pdbEnd, uniprotStart, uniprotEnd);\n\t\t\t\tsifts.byChainId.put(pdbId + \".\" + chainId, entry);\n\t\t\t\tsifts.byUniProtId.put(uniProtId, entry);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (br != null) {\n\t\t\t\ttry {\n\t\t\t\t\tbr.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sifts;\n\t}\n\n\tprivate static void download() throws IOException {\n\t\tInputStream in = null;\n\t\tOutputStream out = null;\n\t\ttry {\n\t\t\tin = new GZIPInputStream(DEFAULT_URL.openStream());\n\t\t\tout = new FileOutputStream(DEFAULT_FILE);\n\t\t\tIOUtils.copy(in, out);\n\t\t} finally {\n\t\t\tif (in != null) {\n\t\t\t\ttry {\n\t\t\t\t\tin.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (in != null) {\n\t\t\t\ttry {\n\t\t\t\t\tout.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate Map<String, SiftsChainEntry> byChainId = new HashMap<String, SiftsChainEntry>();\n\n\tprivate Map<String, SiftsChainEntry> byUniProtId = new HashMap<String, SiftsChainEntry>();\n\n\tprivate SiftsChainToUniprotMapping() {\n\n\t}\n\n\tpublic Set<Entry<String, SiftsChainEntry>> chainEntrySet() {\n\t\treturn byChainId.entrySet();\n\t}\n\n\tpublic boolean containsChainId(String pdbId, String chainId) {\n\t\treturn byChainId.containsKey(pdbId + \".\" + chainId);\n\t}\n\n\tpublic boolean containsUniProtId(String uniProtId) {\n\t\treturn byUniProtId.containsKey(uniProtId);\n\t}\n\n\tpublic SiftsChainEntry getByChainId(String pdbId, String chainId) {\n\t\treturn byChainId.get(pdbId + \".\" + chainId);\n\t}\n\n\tpublic SiftsChainEntry getByUniProtId(String uniProtId) {\n\t\treturn byUniProtId.get(uniProtId);\n\t}\n\n\tpublic Set<String> keySet() {\n\t\treturn byChainId.keySet();\n\t}\n\n\t/**\n\t * Returns the number of mapped entries.\n\t */\n\tpublic int size() {\n\t\treturn byChainId.size();\n\t}\n\n\tpublic Set<Entry<String, SiftsChainEntry>> uniProtEntrySet() {\n\t\treturn byChainId.entrySet();\n\t}\n\n\tpublic Collection<SiftsChainEntry> values() {\n\t\treturn byChainId.values();\n\t}\n}\n","changedPro":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Dec 7, 2013\n * Created by Douglas Myers-Turnbull\n *\n */\npackage org.biojava.bio.structure.io.sifts;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.zip.GZIPInputStream;\n\nimport org.biojava.bio.structure.align.ce.AbstractUserArgumentProcessor;\nimport org.biojava3.core.sequence.io.util.IOUtils;\n\n/**\n * A mapping between UniProt entries and PDB chains.\n * For example\n * <pre>\n * SiftsChainToUniprot sifts = SiftsChainToUniprot.load();\n * SiftsChainEntry entry1 = sifts.getByUniProtId(\"P04585\");\n * System.out.println(entry1.getPdbId() + \".\" + entry1.getChainId()); // 1hiv.A\n * System.out.println(entry1.getPdbStart() + \"-\" + entry1.getPdbStop()); // 1-99\n * SiftsChainEntry entry2 = sifts.getByChainId(\"1hiv\", \"A\");\n * System.out.println(entry1.equals(entry2)); // true\n * </pre>\n * \n * @author dmyersturnbull\n * @see SiftsChainEntry\n * @since 3.0.7\n */\npublic class SiftsChainToUniprotMapping {\n\n\tprivate static File DEFAULT_FILE;\n\n\tprivate static final String DEFAULT_FILENAME = \"pdb_chain_uniprot.tsv\";\n\tprivate static final URL DEFAULT_URL;\n\n\tstatic {\n\t\ttry {\n\t\t\tDEFAULT_URL = new URL(\"ftp://ftp.ebi.ac.uk/pub/databases/msd/sifts/flatfiles/tsv/pdb_chain_uniprot.tsv.gz\");\n\t\t} catch (MalformedURLException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n\t/**\n\t * Loads the SIFTS mapping.\n\t * Attempts to load the mapping file file in the PDB cache directory.\n\t * If the file does not exist or could not be parsed, downloads and stores a GZ-compressed file.\n\t * @return\n\t * @throws IOException If the local file could not be read and could not be downloaded\n\t */\n\tpublic static SiftsChainToUniprotMapping load() throws IOException {\n\t\treturn load(false);\n\t}\n\n\t/**\n\t * Loads the SIFTS mapping.\n\t * Attempts to load the mapping file file in the PDB cache directory.\n\t * If the file does not exist or could not be parsed, downloads and stores a GZ-compressed file.\n\t * @param useOnlyLocal If true, will throw an IOException if the file needs to be downloaded\n\t * @return\n\t * @throws IOException If the local file could not be read and could not be downloaded (including if onlyLocal is true)\n\t */\n\tpublic static SiftsChainToUniprotMapping load(boolean useOnlyLocal) throws IOException {\n\t\tString cacheDir = System.getProperty(AbstractUserArgumentProcessor.CACHE_DIR);\n\t\tif (cacheDir != null) {\n\t\t\tDEFAULT_FILE = new File(cacheDir.endsWith(File.pathSeparator) ? cacheDir + DEFAULT_FILENAME : cacheDir\n\t\t\t\t\t+ File.pathSeparator + DEFAULT_FILENAME);\n\t\t} else {\n\t\t\tDEFAULT_FILE = File.createTempFile(DEFAULT_FILENAME, \"xml\");\n\t\t}\n\t\tif (!DEFAULT_FILE.exists() || DEFAULT_FILE.length() == 0) {\n\t\t\tif (useOnlyLocal) throw new IOException(DEFAULT_FILE + \" does not exist, and did not download\");\n\t\t\tdownload();\n\t\t}\n\t\ttry {\n\t\t\treturn build();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\tif (useOnlyLocal) throw new IOException(DEFAULT_FILE + \" could not be read, and did not redownload\");\n\t\t\tdownload();\n\t\t\treturn build();\n\t\t}\n\t}\n\n\tprivate static SiftsChainToUniprotMapping build() throws IOException {\n\t\tSiftsChainToUniprotMapping sifts = new SiftsChainToUniprotMapping();\n\t\tBufferedReader br = null;\n\t\ttry {\n\t\t\tbr = new BufferedReader(new FileReader(DEFAULT_FILE));\n\t\t\tString line = \"\";\n\t\t\twhile ((line = br.readLine()) != null) {\n\t\t\t\tif (line.isEmpty() || line.startsWith(\"#\") || line.startsWith(\"PDB\")) continue;\n\t\t\t\tString[] parts = line.split(\"\\t\");\n\t\t\t\tString pdbId = parts[0];\n\t\t\t\tString chainId = parts[1];\n\t\t\t\tString uniProtId = parts[2];\n\t\t\t\tString seqresStart = parts[3];\n\t\t\t\tString seqresEnd = parts[4];\n\t\t\t\tString pdbStart = parts[5];\n\t\t\t\tString pdbEnd = parts[6];\n\t\t\t\tString uniprotStart = parts[7];\n\t\t\t\tString uniprotEnd = parts[8];\n\t\t\t\tSiftsChainEntry entry = new SiftsChainEntry(pdbId, chainId, uniProtId, seqresStart, seqresEnd,\n\t\t\t\t\t\tpdbStart, pdbEnd, uniprotStart, uniprotEnd);\n\t\t\t\tsifts.byChainId.put(pdbId + \".\" + chainId, entry);\n\t\t\t\tsifts.byUniProtId.put(uniProtId, entry);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (br != null) {\n\t\t\t\ttry {\n\t\t\t\t\tbr.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sifts;\n\t}\n\n\tprivate static void download() throws IOException {\n\t\tInputStream in = null;\n\t\tOutputStream out = null;\n\t\ttry {\n\t\t\tin = new GZIPInputStream(DEFAULT_URL.openStream());\n\t\t\tout = new FileOutputStream(DEFAULT_FILE);\n\t\t\tIOUtils.copy(in, out);\n\t\t} finally {\n\t\t\tif (in != null) {\n\t\t\t\ttry {\n\t\t\t\t\tin.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (in != null) {\n\t\t\t\ttry {\n\t\t\t\t\tout.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate Map<String, SiftsChainEntry> byChainId = new HashMap<String, SiftsChainEntry>();\n\n\tprivate Map<String, SiftsChainEntry> byUniProtId = new HashMap<String, SiftsChainEntry>();\n\n\tprivate SiftsChainToUniprotMapping() {\n\n\t}\n\n\tpublic Set<Entry<String, SiftsChainEntry>> chainEntrySet() {\n\t\treturn byChainId.entrySet();\n\t}\n\n\tpublic boolean containsChainId(String pdbId, String chainId) {\n\t\treturn byChainId.containsKey(pdbId + \".\" + chainId);\n\t}\n\n\tpublic boolean containsUniProtId(String uniProtId) {\n\t\treturn byUniProtId.containsKey(uniProtId);\n\t}\n\n\tpublic SiftsChainEntry getByChainId(String pdbId, String chainId) {\n\t\treturn byChainId.get(pdbId + \".\" + chainId);\n\t}\n\n\tpublic SiftsChainEntry getByUniProtId(String uniProtId) {\n\t\treturn byUniProtId.get(uniProtId);\n\t}\n\n\tpublic Set<String> keySet() {\n\t\treturn byChainId.keySet();\n\t}\n\n\t/**\n\t * Returns the number of mapped entries.\n\t */\n\tpublic int size() {\n\t\treturn byChainId.size();\n\t}\n\n\tpublic Set<Entry<String, SiftsChainEntry>> uniProtEntrySet() {\n\t\treturn byChainId.entrySet();\n\t}\n\n\tpublic Collection<SiftsChainEntry> values() {\n\t\treturn byChainId.values();\n\t}\n}\n","originTest":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Dec 7, 2013\n * Created by Douglas Myers-Turnbull\n *\n */\npackage org.biojava.bio.structure.io.sifts;\n\nimport static org.junit.Assert.*;\n\nimport java.io.IOException;\n\nimport org.junit.Test;\n\n/**\n * Tests {@link SiftsChainToUniprotMapping}.\n * @author dmyersturnbull\n * @since 3.0.7\n */\npublic class SiftsChainToUniprotMappingTest {\n\n\t@Test\n\tpublic void test() throws IOException {\n\t\tSiftsChainToUniprotMapping sifts = SiftsChainToUniprotMapping.load();\n\t\tSiftsChainEntry entry = sifts.getByChainId(\"1hiv\", \"A\");\n\t\tassertEquals(\"1hiv\", entry.getPdbId());\n\t\tassertEquals(\"A\", entry.getChainId());\n\t\tassertEquals(\"P04585\", entry.getUniProtId());\n\t}\n\t\n}\n","changedTest":"","commitMessage":"Improving TestAltLocs and fixing issue with SiftsChainToUniprotMapping\n- now TestAltLocs will test 3PIU with both pdb and cif parsers, before\nit depended whether the AtomCache was initialised to one or the other\ntype of file so result was a bit unpredictable\n- SiftsChainToUniprotMapping was not downloading the sifts file and\nsimply reading a blank file. This was making the corresponding test fail\nif run stand-alone (not if run as part of a full mvn intall, in that\ncase the file was getting downloaded by a previous test)","test_commitMessage":"","allZero":false}