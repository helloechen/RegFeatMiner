{"repository":"biojava","prod_path":"biojava-aa-prop/src/main/java/org/biojava/nbio/aaproperties/PeptidePropertiesImpl.java","test_path":"biojava-aa-prop/src/test/java/org/biojava/nbio/aaproperties/PeptidePropertiesImplTest.java","prod_time":"2016-06-04 23:29:38","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":1,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":1,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":1,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":1,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"713171bb1c9ff60c22dfe9897fc2bd4f8dda1d6b","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.aaproperties;\n\nimport org.biojava.nbio.aaproperties.xml.AminoAcidCompositionTable;\nimport org.biojava.nbio.aaproperties.xml.ElementTable;\nimport org.biojava.nbio.aaproperties.xml.MyValidationEventHandler;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Unmarshaller;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * This class contains the actual implementation of IPeptideProperties and is wrapped around by PeptideProperties for ease of use.\n *\n * @author kohchuanhock\n * @version 2011.08.22\n * @since 3.0.2\n * @see IPeptideProperties\n * @see PeptideProperties\n */\npublic class PeptidePropertiesImpl implements IPeptideProperties{\n\n\tprivate final static Logger logger = LoggerFactory.getLogger(PeptidePropertiesImpl.class);\n\n\t/**\n\t * @return the molecular weight of water\n\t */\n\tprivate double getWaterMoleculeWeight(){\n\t\tfinal double hydrogenMW = 1.0079;\n\t\tfinal double hydroxideMW = 17.0073;\n\t\t//H\t1.0079\tOH\t17.0073\n\t\treturn hydrogenMW + hydroxideMW;\n\t}\n\n\tprivate char[] getSequence(String sequence, boolean ignoreCase){\n\t\tif(ignoreCase){\n\t\t\treturn sequence.toUpperCase().toCharArray();\n\t\t}else{\n\t\t\treturn sequence.toCharArray();\n\t\t}\n\t}\n\n\t@Override\n\tpublic double getMolecularWeight(ProteinSequence sequence) {\n\t\tdouble value = 0.0;\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\t\tchar[] seq = getSequence(sequence.toString(), true);//ignore case\n\t\tfor(char aa:seq){\n\t\t\tAminoAcidCompound c = aaSet.getCompoundForString(aa + \"\");\n\t\t\tif(Constraints.aa2MolecularWeight.containsKey(c)){\n\t\t\t\tvalue += Constraints.aa2MolecularWeight.get(c);\n\t\t\t}\n\t\t}\n\t\tif(value == 0)\n\t\t\treturn value;\n\t\telse\n\t\t\treturn value + getWaterMoleculeWeight();\n\t}\n\n\t@Override\n\tpublic double getMolecularWeight(ProteinSequence sequence, File aminoAcidCompositionFile) throws JAXBException, FileNotFoundException {\n\t\tFile elementMassFile = new File(\"./src/main/resources/ElementMass.xml\");\n\t\tif(!elementMassFile.exists()){\n\t\t\tthrow new FileNotFoundException(\"Cannot locate ElementMass.xml. \" +\n\t\t\t\t\t\"Please use getMolecularWeight(ProteinSequence, File, File) to specify ElementMass.xml location.\");\n\t\t}\n\t\treturn getMolecularWeightBasedOnXML(sequence, obtainAminoAcidCompositionTable(elementMassFile, aminoAcidCompositionFile));\n\t}\n\n\t@Override\n\tpublic double getMolecularWeight(ProteinSequence sequence, File elementMassFile, File aminoAcidCompositionFile)\n\t\t\tthrows JAXBException, FileNotFoundException{\n\t\treturn getMolecularWeightBasedOnXML(sequence, obtainAminoAcidCompositionTable(elementMassFile, aminoAcidCompositionFile));\n\t}\n\n\t@Override\n\tpublic double getMolecularWeightBasedOnXML(ProteinSequence sequence, AminoAcidCompositionTable aminoAcidCompositionTable){\n\t\tdouble value = 0.0;\n\t\tchar[] seq = sequence.toString().toCharArray();\n\t\tfor(char aa:seq){\n\t\t\tDouble weight = aminoAcidCompositionTable.getMolecularWeight(aa);\n\t\t\tif(weight != null){\n\t\t\t\tvalue += weight;\n\t\t\t}\n\t\t}\n\t\tif(value == 0.0)\n\t\t\treturn value;\n\t\telse\n\t\t\treturn value + getWaterMoleculeWeight();\n\t}\n\n\t@Override\n\tpublic AminoAcidCompositionTable obtainAminoAcidCompositionTable(File aminoAcidCompositionFile)\n\t\tthrows JAXBException, FileNotFoundException{\n\t\tFile elementMassFile = new File(\"./src/main/resources/ElementMass.xml\");\n\t\tif(!elementMassFile.exists()){\n\t\t\tthrow new FileNotFoundException(\"Cannot locate ElementMass.xml. \" +\n\t\t\t\t\t\"Please use getMolecularWeight(ProteinSequence, File, File) to specify ElementMass.xml location.\");\n\t\t}\n\t\treturn obtainAminoAcidCompositionTable(elementMassFile, aminoAcidCompositionFile);\n\t}\n\n\t@Override\n\tpublic AminoAcidCompositionTable obtainAminoAcidCompositionTable(File elementMassFile, File aminoAcidCompositionFile)\n\t\tthrows JAXBException, FileNotFoundException{\n\t\t//Parse elementMassFile\n\t\tElementTable iTable = new ElementTable();\n\t\t// Get a JAXB Context for the object we created above\n\t\tJAXBContext jc = JAXBContext.newInstance(iTable.getClass());\n\t\tUnmarshaller u = jc.createUnmarshaller();\n\t\tu.setEventHandler(new MyValidationEventHandler());\n\t\tiTable = (ElementTable)u.unmarshal(new FileInputStream(elementMassFile));\n\t\tiTable.populateMaps();\n\n\t\t//Parse aminoAcidCompositionFile\n\t\tAminoAcidCompositionTable aTable = new AminoAcidCompositionTable();\n\t\t// Get a JAXB Context for the object we created above\n\t\tJAXBContext jc2 = JAXBContext.newInstance(aTable.getClass());\n\t\tUnmarshaller u2 = jc2.createUnmarshaller();\n\t\tu2.setEventHandler(new MyValidationEventHandler());\n\t\taTable = (AminoAcidCompositionTable)u2.unmarshal(new FileInputStream(aminoAcidCompositionFile));\n\t\taTable.computeMolecularWeight(iTable);\n\t\treturn aTable;\n\t}\n\n\t@Override\n\tpublic double getExtinctionCoefficient(ProteinSequence sequence, boolean assumeCysReduced) {\n\t\t//Tyr => Y\n\t\t//Trp => W\n\t\t//Cys => C\n\t\t//E(Prot) = Numb(Tyr)*Ext(Tyr) + Numb(Trp)*Ext(Trp) + Numb(Cystine)*Ext(Cystine)\n\t\t//where (for proteins in water measured at 280 nm): Ext(Tyr) = 1490, Ext(Trp) = 5500, Ext(Cystine) = 125;\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\t\tMap<AminoAcidCompound, Integer> extinctAA2Count = this.getExtinctAACount(sequence);\n\n\t\tdouble eProt;\n\t\tif(!assumeCysReduced){\n\t\t\teProt = extinctAA2Count.get(aaSet.getCompoundForString(\"Y\")) *\n\t\t\t\tConstraints.aa2ExtinctionCoefficient.get(aaSet.getCompoundForString(\"Y\")) +\n\t\t\t\textinctAA2Count.get(aaSet.getCompoundForString(\"W\")) *\n\t\t\t\tConstraints.aa2ExtinctionCoefficient.get(aaSet.getCompoundForString(\"W\")) +\n\t\t\t\textinctAA2Count.get(aaSet.getCompoundForString(\"C\")) *\n\t\t\t\tConstraints.aa2ExtinctionCoefficient.get(aaSet.getCompoundForString(\"C\"));\n\t\t}else\n\t\t\teProt = extinctAA2Count.get(aaSet.getCompoundForString(\"Y\")) *\n\t\t\t\tConstraints.aa2ExtinctionCoefficient.get(aaSet.getCompoundForString(\"Y\")) +\n\t\t\t\textinctAA2Count.get(aaSet.getCompoundForString(\"W\")) *\n\t\t\t\tConstraints.aa2ExtinctionCoefficient.get(aaSet.getCompoundForString(\"W\"));\n\n\t\treturn eProt;\n\t}\n\n\t@Override\n\tpublic double getAbsorbance(ProteinSequence sequence, boolean assumeCysReduced){\n\t\t//Absorb(Prot) = E(Prot) / Molecular_weight\n\t\tdouble mw = this.getMolecularWeight(sequence);\n\t\tdouble eProt = this.getExtinctionCoefficient(sequence, assumeCysReduced);\n\t\tif (mw == 0.0) {\n\t\t\tlogger.warn(\"Molecular weight is 0.0, can't divide by 0: setting absorbance to 0.0\");\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn eProt / mw;\n\t}\n\n\tprivate Map<AminoAcidCompound, Integer> getExtinctAACount(ProteinSequence sequence){\n\t\t//Cys => C, Tyr => Y, Trp => W\n\t\tint numW = 0;\n\t\tint smallW = 0;\n\t\tdouble numC = 0;\n\t\tdouble smallC = 0;\n\t\tint numY = 0;\n\t\tint smallY = 0;\n\t\tfor(char aa:sequence.getSequenceAsString().toCharArray()){\n\t\t\tswitch(aa){\n\t\t\tcase 'W': numW++; break;\n\t\t\tcase 'w': smallW++; break;\n\t\t\tcase 'C': numC += 0.5; break;\n\t\t\tcase 'c': smallC += 0.5; break;\n\t\t\tcase 'Y': numY++; break;\n\t\t\tcase 'y': smallY++; break;\n\t\t\t}\n\t\t}\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\t\tMap<AminoAcidCompound, Integer> extinctAA2Count = new HashMap<AminoAcidCompound, Integer>();\n\t\t//Ignore Case is always true\n\t\textinctAA2Count.put(aaSet.getCompoundForString(\"W\"), numW + smallW);\n\t\textinctAA2Count.put(aaSet.getCompoundForString(\"C\"), (int) (numC + smallC));\n\t\textinctAA2Count.put(aaSet.getCompoundForString(\"Y\"), numY + smallY);\n\t\treturn extinctAA2Count;\n\t}\n\n\t@Override\n\tpublic double getInstabilityIndex(ProteinSequence sequence) {\n\t\tdouble sum = 0.0;\n\t\tString s = sequence.getSequenceAsString().toUpperCase();\n\t\tfor(int i = 0; i < sequence.getLength() - 1; i++){\n\t\t\tString dipeptide = s.substring(i, i+2);\n\t\t\tif(Constraints.diAA2Instability.containsKey(dipeptide)){\n\t\t\t\tsum += Constraints.diAA2Instability.get(dipeptide);\n\t\t\t}\n\t\t}\n\t\tint denominator = s.length() - Utils.getNumberOfInvalidChar(s, null, true);\n\n\t\tif (denominator==0) {\n\t\t\tlogger.warn(\"Valid length of sequence is 0, can't divide by 0 to calculate instability index: setting instability index value to 0.0\");\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn sum * 10.0 / denominator;\n\t}\n\n\t@Override\n\tpublic double getApliphaticIndex(ProteinSequence sequence) {\n//\t\tAliphatic index = X(Ala) + a * X(Val) + b * ( X(Ile) + X(Leu) )\n//\t\twhere X(Ala), X(Val), X(Ile), and X(Leu) are mole percent (100 X mole fraction)\n//\t\tof alanine, valine, isoleucine, and leucine.\n//\t\tThe coefficients a and b are the relative volume of valine side chain (a = 2.9)\n//\t\tand of Leu/Ile side chains (b = 3.9) to the side chain of alanine.\n//\t\tAla => A, Val => V, Ile => I, Leu => L\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\t\tMap<AminoAcidCompound, Double> aa2Composition = getAAComposition(sequence);\n\t\tfinal double a = 2.9;\n\t\tfinal double b = 3.9;\n\t\tdouble xAla = aa2Composition.get(aaSet.getCompoundForString(\"A\"));\n\t\tdouble xVal = aa2Composition.get(aaSet.getCompoundForString(\"V\"));\n\t\tdouble xIle = aa2Composition.get(aaSet.getCompoundForString(\"I\"));\n\t\tdouble xLeu = aa2Composition.get(aaSet.getCompoundForString(\"L\"));\n\t\treturn (xAla + (a * xVal) + (b * (xIle + xLeu))) * 100;\n\t}\n\n\t@Override\n\tpublic double getAvgHydropathy(ProteinSequence sequence) {\n\t\tint validLength = 0;\n\t\tdouble total = 0.0;\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\t\tchar[] seq = this.getSequence(sequence.toString(), true);\n\t\tfor(char aa:seq){\n\t\t\tAminoAcidCompound c = aaSet.getCompoundForString(aa + \"\");\n\t\t\tif(Constraints.aa2Hydrophathicity.containsKey(c)){\n\t\t\t\ttotal += Constraints.aa2Hydrophathicity.get(c);\n\t\t\t\tvalidLength++;\n\t\t\t}\n\t\t}\n\t\tif (validLength==0) {\n\t\t\tlogger.warn(\"Valid length of sequence is 0, can't divide by 0 to calculate average hydropathy: setting average hydropathy to 0\");\n\t\t\treturn 0.0;\n\t\t}\n\n\t\treturn total / validLength;\n\t}\n\n\t@Override\n\tpublic double getIsoelectricPoint(ProteinSequence sequence, boolean useExpasyValues) {\n\t\tif(useExpasyValues){\n\t\t\treturn this.getIsoelectricPointExpasy(sequence.toString().toUpperCase());\n\t\t}else{\n\t\t\treturn this.getIsoelectricPointInnovagen(sequence);\n\t\t}\n\t}\n\n\tprivate double getIsoelectricPointInnovagen(ProteinSequence sequence){\n\t\tdouble currentPH = 7.0;\n\t\tdouble changeSize = 7.0;\n\t\tString sequenceString = sequence.toString();\n\t\tchar nTerminalChar = sequenceString.charAt(0);\n\t\tchar cTerminalChar = sequenceString.charAt(sequenceString.length() - 1);\n\n\t\tMap<AminoAcidCompound, Integer> chargedAA2Count = this.getChargedAACount(sequence);\n\t\tdouble margin;\n\t\tfinal double difference = 0.0001;\n\n\t\twhile(true){\n\t\t\tmargin = this.getNetChargeInnovagen(chargedAA2Count, currentPH, nTerminalChar, cTerminalChar);\n\t\t\t//Within allowed difference\n\t\t\tif(margin <= difference && margin >= -difference) break;\n\t\t\tchangeSize /= 2.0;\n\t\t\tif(margin > 0){\n\t\t\t\tcurrentPH += changeSize;\n\t\t\t}else{\n\t\t\t\tcurrentPH -= changeSize;\n\t\t\t}\n\t\t}\n\t\treturn currentPH;\n\t}\n\n\t/*\n\t *  Pseudo code obtained from email correspondance with ExPASy Helpdesk, Gregoire Rossier\n\t */\n\t//\n\t// Table of pk values :\n\t// Note: the current algorithm does not use the last two columns.\n\t// Each row corresponds to an amino acid starting with Ala. J, O and U are\n\t// inexistant, but here only in order to have the complete alphabet.\n\t//\n\t// Ct Nt Sm Sc Sn\n\t//\n\tprivate final double cPk[][] = {\n\t\t\t{3.55, 7.59, 0.0},  // A\n\t\t\t{3.55, 7.50, 0.0},  // B\n\t\t\t{3.55, 7.50, 9.00}, // C\n//\t\t\t{4.55, 7.50, 4.05}, // D\n//\t\t\t{4.75, 7.70, 4.45}, // E\n\t\t\t{3.55, 7.50, 4.05}, // D\n\t\t\t{3.55, 7.70, 4.45}, // E\n\t\t\t{3.55, 7.50, 0}, // F\n\t\t\t{3.55, 7.50, 0}, // G\n\t\t\t{3.55, 7.50, 5.98}, // H\n\t\t\t{3.55, 7.50, 0.0}, // I\n\t\t\t{0.0, 0.0, 0.0}, // J\n\t\t\t{3.55, 7.50, 10.00}, // K\n\t\t\t{3.55, 7.50, 0.0}, // L\n\t\t\t{3.55, 7.00, 0.0},// M\n\t\t\t{3.55, 7.50, 0.0},// N\n\t\t\t{0.00, 0.00, 0.0},// O\n\t\t\t{3.55, 8.36, 0.0},// P\n\t\t\t{3.55, 7.50, 0.0}, // Q\n\t\t\t{3.55, 7.50, 12.0},// R\n\t\t\t{3.55, 6.93, 0.0},// S\n\t\t\t{3.55, 6.82, 0.0}, // T\n\t\t\t{0.00, 0.00, 0.0}, // U\n\t\t\t{3.55, 7.44, 0.0},// V\n\t\t\t{3.55, 7.50, 0.0},// W\n\t\t\t{3.55, 7.50, 0.0},// X\n\t\t\t{3.55, 7.50, 10.00},// Y\n\t\t\t{3.55, 7.50, 0.0}}; // Z\n\n\tprivate final double PH_MIN = 0.0; /* minimum pH value */\n\tprivate final double PH_MAX = 14.0; /* maximum pH value */\n\tprivate final double MAXLOOP = 2000.0; /* maximum number of iterations */\n\tprivate final double EPSI = 0.0001; /* desired precision */\n\n\tprivate double exp10(double pka){\n\t\treturn Math.pow(10, pka);\n\t}\n\n\tprivate double getIsoelectricPointExpasy(String sequence){\n\t\t//\n\t\t// Compute the amino-acid composition.\n\t\t//\n\t\tint comp[] = new int[26];\n\t\tfor(int i = 0; i < sequence.length(); i++){\n\t\t\tint index = sequence.charAt(i) - 'A';\n\t\t\tif(index < 0 || index >= 26) continue;\n\t\t\tcomp[index]++;\n\t\t}\n\t\t//\n\t\t// Look up N-terminal and C-terminal residue.\n\t\t//\n\t\tint nTermResidue = -1;\n\t\tint index = 0;\n\t\twhile((nTermResidue < 0 || nTermResidue >= 26) && index < 25){\n\t\t\tnTermResidue = sequence.charAt(index++) - 'A';\n\t\t}\n\n\t\tint cTermResidue = -1;\n\t\tindex = 1;\n\t\twhile((cTermResidue < 0 || cTermResidue >= 26) && index < 25){\n\t\t\tcTermResidue = sequence.charAt(sequence.length() - index++) - 'A';\n\t\t}\n\n\t\tdouble phMin = PH_MIN;\n\t\tdouble phMax = PH_MAX;\n\n\t\tdouble phMid = 0.0;\n\t\tdouble charge = 1.0;\n\t\tfor (int i = 0; i < MAXLOOP && (phMax - phMin) > EPSI; i++){\n\t\t\tphMid = phMin + (phMax - phMin) / 2.0;\n\n\t\t\tcharge = getNetChargeExpasy(comp, nTermResidue, cTermResidue, phMid);\n\n\t\t\tif (charge > 0.0) phMin = phMid;\n\t\t\telse phMax = phMid;\n\t\t}\n\t\treturn phMid;\n\t}\n\n\t@Override\n\tpublic double getIsoelectricPoint(ProteinSequence sequence){\n\t\treturn getIsoelectricPoint(sequence, true);\n\t}\n\n\t@Override\n\tpublic double getNetCharge(ProteinSequence sequence) {\n\t\treturn getNetCharge(sequence, true);\n\t}\n\n\t@Override\n\tpublic double getNetCharge(ProteinSequence sequence, boolean useExpasyValues){\n\t\treturn getNetCharge(sequence, true, 7.0);\n\t}\n\n\t@Override\n\tpublic double getNetCharge(ProteinSequence sequence, boolean useExpasyValues, double pHPoint){\n\t\tif(useExpasyValues){\n\t\t\treturn getNetChargeExpasy(sequence.toString().toUpperCase(), pHPoint);\n\t\t}else{\n\t\t\treturn getNetChargeInnovagen(sequence, pHPoint);\n\t\t}\n\t}\n\n\tprivate double getNetChargeExpasy(String sequence, double pHPoint){\n\t\t//\n\t\t// Compute the amino-acid composition.\n\t\t//\n\t\tint comp[] = new int[26];\n\t\tfor(int i = 0; i < sequence.length(); i++){\n\t\t\tint index = sequence.charAt(i) - 'A';\n\t\t\tif(index < 0 || index >= 26) continue;\n\t\t\tcomp[index]++;\n\t\t}\n\t\t//\n\t\t// Look up N-terminal and C-terminal residue.\n\t\t//\n\t\tint nTermResidue = sequence.charAt(0) - 'A';\n\t\tint cTermResidue = sequence.charAt(sequence.length() - 1) - 'A';\n\t\treturn getNetChargeExpasy(comp, nTermResidue, cTermResidue, pHPoint);\n\t}\n\n\tprivate double getNetChargeExpasy(int comp[], int nTermResidue, int cTermResidue, double ph){\n\t\tdouble cter = 0.0;\n\t\tif(cTermResidue >= 0 && cTermResidue < 26) cter = exp10(-cPk[cTermResidue][0]) / (exp10(-cPk[cTermResidue][0]) + exp10(-ph));\n\t\tdouble nter = 0.0;\n\t\tif(nTermResidue >= 0 && nTermResidue < 26) nter = exp10(-ph) / (exp10(-cPk[nTermResidue][1]) + exp10(-ph));\n\n\t\tdouble carg = comp['R' - 'A'] * exp10(-ph) / (exp10(-cPk['R' - 'A'][2]) + exp10(-ph));\n\t\tdouble chis = comp['H' - 'A'] * exp10(-ph) / (exp10(-cPk['H' - 'A'][2]) + exp10(-ph));\n\t\tdouble clys = comp['K' - 'A'] * exp10(-ph) / (exp10(-cPk['K' - 'A'][2]) + exp10(-ph));\n\n\t\tdouble casp = comp['D' - 'A'] * exp10(-cPk['D' - 'A'][2]) / (exp10(-cPk['D' - 'A'][2]) + exp10(-ph));\n\t\tdouble cglu = comp['E' - 'A'] * exp10(-cPk['E' - 'A'][2]) / (exp10(-cPk['E' - 'A'][2]) + exp10(-ph));\n\n\t\tdouble ccys = comp['C' - 'A'] * exp10(-cPk['C' - 'A'][2]) / (exp10(-cPk['C' - 'A'][2]) + exp10(-ph));\n\t\tdouble ctyr = comp['Y' - 'A'] * exp10(-cPk['Y' - 'A'][2]) / (exp10(-cPk['Y' - 'A'][2]) + exp10(-ph));\n\n\t\treturn (carg + clys + chis + nter) - (casp + cglu + ctyr + ccys + cter);\n\t}\n\n\tprivate double getNetChargeInnovagen(ProteinSequence sequence, double pHPoint) {\n\t\tMap<AminoAcidCompound, Integer> chargedAA2Count = this.getChargedAACount(sequence);\n\t\tString sequenceString = sequence.getSequenceAsString();\n\t\treturn getNetChargeInnovagen(chargedAA2Count, pHPoint, sequenceString.charAt(0), sequenceString.charAt(sequenceString.length() - 1));\n\t}\n\n\tprivate double getNetChargeInnovagen(Map<AminoAcidCompound, Integer> chargedAA2Count, double ph, char nTerminalChar, char cTerminalChar){\n\t\t//Constraints.aa2PKa is aleady reinitialized in getChargedAACount hence no need to do it again\n\n\t\t//Lys => K, Arg => R, His => H\n\t\t//Asp => D, Glu => E, Cys => C, Tyr => Y\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\n\t\tdouble nTerminalCharge = 0.0;\n\t\tAminoAcidCompound nTermCompound = aaSet.getCompoundForString(nTerminalChar + \"\");\n\t\tif(Constraints.aa2NTerminalPka.containsKey(nTermCompound)){\n\t\t\tnTerminalCharge = this.getPosCharge(Constraints.aa2NTerminalPka.get(nTermCompound), ph);\n\t\t}\n\n\t\tdouble cTerminalCharge = 0.0;\n\t\tAminoAcidCompound cTermCompound = aaSet.getCompoundForString(cTerminalChar + \"\");\n\t\tif(Constraints.aa2CTerminalPka.containsKey(cTermCompound)){\n\t\t\tcTerminalCharge = this.getNegCharge(Constraints.aa2CTerminalPka.get(cTermCompound), ph);\n\t\t}\n\n\t\tdouble kCharge = chargedAA2Count.get(aaSet.getCompoundForString(\"K\")) * this.getPosCharge(Constraints.aa2PKa.get(aaSet.getCompoundForString(\"K\")), ph);\n\t\tdouble rCharge = chargedAA2Count.get(aaSet.getCompoundForString(\"R\")) * this.getPosCharge(Constraints.aa2PKa.get(aaSet.getCompoundForString(\"R\")), ph);\n\t\tdouble hCharge = chargedAA2Count.get(aaSet.getCompoundForString(\"H\")) * this.getPosCharge(Constraints.aa2PKa.get(aaSet.getCompoundForString(\"H\")), ph);\n\t\tdouble dCharge = chargedAA2Count.get(aaSet.getCompoundForString(\"D\")) * this.getNegCharge(Constraints.aa2PKa.get(aaSet.getCompoundForString(\"D\")), ph);\n\t\tdouble eCharge = chargedAA2Count.get(aaSet.getCompoundForString(\"E\")) * this.getNegCharge(Constraints.aa2PKa.get(aaSet.getCompoundForString(\"E\")), ph);\n\t\tdouble cCharge = chargedAA2Count.get(aaSet.getCompoundForString(\"C\")) * this.getNegCharge(Constraints.aa2PKa.get(aaSet.getCompoundForString(\"C\")), ph);\n\t\tdouble yCharge = chargedAA2Count.get(aaSet.getCompoundForString(\"Y\")) * this.getNegCharge(Constraints.aa2PKa.get(aaSet.getCompoundForString(\"Y\")), ph);\n//\t\tif((kCharge + rCharge + hCharge) == 0.0 && (dCharge + eCharge + cCharge + yCharge) == 0.0){\n//\t\t\treturn 0.0;\n//\t\t}\n\t\treturn (nTerminalCharge + kCharge + rCharge + hCharge) - (dCharge + eCharge + cCharge + yCharge + cTerminalCharge);\n\t}\n\n\tprivate double getPosCharge(double pka, double ph){\n\t\treturn Math.pow(10, pka) / (Math.pow(10, pka) + Math.pow(10, ph));\n\t}\n\n\tprivate double getNegCharge(double pka, double ph){\n\t\treturn Math.pow(10, ph) / (Math.pow(10, pka) + Math.pow(10, ph));\n\t}\n\n\tprivate Map<AminoAcidCompound, Integer> getChargedAACount(ProteinSequence sequence){\n\t\t//Lys => K, Arg => R, His => H\n\t\t//Asp => D, Glu => E, Cys => C, Tyr => Y\n\t\tint numK = 0;\n\t\tint numR = 0;\n\t\tint numH = 0;\n\t\tint numD = 0;\n\t\tint numE = 0;\n\t\tint numC = 0;\n\t\tint numY = 0;\n\t\tchar[] seq = this.getSequence(sequence.getSequenceAsString(), true);\n\t\tfor(char aa:seq){\n\t\t\tswitch(aa){\n\t\t\tcase 'K': numK++; break;\n\t\t\tcase 'R': numR++; break;\n\t\t\tcase 'H': numH++; break;\n\t\t\tcase 'D': numD++; break;\n\t\t\tcase 'E': numE++; break;\n\t\t\tcase 'C': numC++; break;\n\t\t\tcase 'Y': numY++; break;\n\t\t\t}\n\t\t}\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\t\tMap<AminoAcidCompound, Integer> chargedAA2Count = new HashMap<AminoAcidCompound, Integer>();\n\t\tchargedAA2Count.put(aaSet.getCompoundForString(\"K\"), numK);\n\t\tchargedAA2Count.put(aaSet.getCompoundForString(\"R\"), numR);\n\t\tchargedAA2Count.put(aaSet.getCompoundForString(\"H\"), numH);\n\t\tchargedAA2Count.put(aaSet.getCompoundForString(\"D\"), numD);\n\t\tchargedAA2Count.put(aaSet.getCompoundForString(\"E\"), numE);\n\t\tchargedAA2Count.put(aaSet.getCompoundForString(\"C\"), numC);\n\t\tchargedAA2Count.put(aaSet.getCompoundForString(\"Y\"), numY);\n\t\treturn chargedAA2Count;\n\t}\n\n\t@Override\n\tpublic double getEnrichment(ProteinSequence sequence, AminoAcidCompound aminoAcidCode) {\n\t\tdouble counter = 0.0;\n\t\tchar[] seq = this.getSequence(sequence.getSequenceAsString(), true);\n\t\tfor(char aa:seq){\n\t\t\tif(aminoAcidCode.getShortName().equals(aa + \"\")){\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t\treturn counter/sequence.getLength();\n\t}\n\n\t@Override\n\tpublic Map<AminoAcidCompound, Double> getAAComposition(ProteinSequence sequence) {\n\t\tint validLength = 0;\n\t\tMap<AminoAcidCompound, Double> aa2Composition = new HashMap<AminoAcidCompound, Double>();\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\t\tfor(AminoAcidCompound aa:aaSet.getAllCompounds()){\n\t\t\taa2Composition.put(aa, 0.0);\n\t\t}\n\t\tchar[] seq = this.getSequence(sequence.toString(), true);\n\t\tfor(char aa:seq){\n\t\t\tif(PeptideProperties.standardAASet.contains(aa)){\n\t\t\t\tAminoAcidCompound compound = aaSet.getCompoundForString(aa + \"\");\n\t\t\t\taa2Composition.put(compound, aa2Composition.get(compound) + 1.0);\n\t\t\t\tvalidLength++;\n\t\t\t}\n\t\t}\n\t\tif(validLength > 0){\n\t\t\tfor(AminoAcidCompound aa:aaSet.getAllCompounds()){\n\t\t\t\taa2Composition.put(aa, aa2Composition.get(aa) / validLength);\n\t\t\t}\n\t\t}else{\n\t\t\tfor(AminoAcidCompound aa:aaSet.getAllCompounds()){\n\t\t\t\taa2Composition.put(aa, 0.0);\n\t\t\t}\n\t\t}\n\t\treturn aa2Composition;\n\t}\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.aaproperties;\n\nimport org.biojava.nbio.aaproperties.xml.AminoAcidCompositionTable;\nimport org.biojava.nbio.aaproperties.xml.ElementTable;\nimport org.biojava.nbio.aaproperties.xml.MyValidationEventHandler;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Unmarshaller;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * This class contains the actual implementation of IPeptideProperties and is wrapped around by PeptideProperties for ease of use.\n *\n * @author kohchuanhock\n * @version 2011.08.22\n * @since 3.0.2\n * @see IPeptideProperties\n * @see PeptideProperties\n */\npublic class PeptidePropertiesImpl implements IPeptideProperties{\n\n\tprivate final static Logger logger = LoggerFactory.getLogger(PeptidePropertiesImpl.class);\n\n\t/**\n\t * @return the molecular weight of water\n\t */\n\tprivate double getWaterMoleculeWeight(){\n\t\tfinal double hydrogenMW = 1.0079;\n\t\tfinal double hydroxideMW = 17.0073;\n\t\t//H\t1.0079\tOH\t17.0073\n\t\treturn hydrogenMW + hydroxideMW;\n\t}\n\n\tprivate char[] getSequence(String sequence, boolean ignoreCase){\n\t\tif(ignoreCase){\n\t\t\treturn sequence.toUpperCase().toCharArray();\n\t\t}else{\n\t\t\treturn sequence.toCharArray();\n\t\t}\n\t}\n\n\t@Override\n\tpublic double getMolecularWeight(ProteinSequence sequence) {\n\t\tdouble value = 0.0;\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\t\tchar[] seq = getSequence(sequence.toString(), true);//ignore case\n\t\tfor(char aa:seq){\n\t\t\tAminoAcidCompound c = aaSet.getCompoundForString(aa + \"\");\n\t\t\tif(Constraints.aa2MolecularWeight.containsKey(c)){\n\t\t\t\tvalue += Constraints.aa2MolecularWeight.get(c);\n\t\t\t}\n\t\t}\n\t\tif(value == 0)\n\t\t\treturn value;\n\t\telse\n\t\t\treturn value + getWaterMoleculeWeight();\n\t}\n\n\t@Override\n\tpublic double getMolecularWeight(ProteinSequence sequence, File aminoAcidCompositionFile) throws JAXBException, FileNotFoundException {\n\t\tFile elementMassFile = new File(\"./src/main/resources/ElementMass.xml\");\n\t\tif(!elementMassFile.exists()){\n\t\t\tthrow new FileNotFoundException(\"Cannot locate ElementMass.xml. \" +\n\t\t\t\t\t\"Please use getMolecularWeight(ProteinSequence, File, File) to specify ElementMass.xml location.\");\n\t\t}\n\t\treturn getMolecularWeightBasedOnXML(sequence, obtainAminoAcidCompositionTable(elementMassFile, aminoAcidCompositionFile));\n\t}\n\n\t@Override\n\tpublic double getMolecularWeight(ProteinSequence sequence, File elementMassFile, File aminoAcidCompositionFile)\n\t\t\tthrows JAXBException, FileNotFoundException{\n\t\treturn getMolecularWeightBasedOnXML(sequence, obtainAminoAcidCompositionTable(elementMassFile, aminoAcidCompositionFile));\n\t}\n\n\t@Override\n\tpublic double getMolecularWeightBasedOnXML(ProteinSequence sequence, AminoAcidCompositionTable aminoAcidCompositionTable){\n\t\tdouble value = 0.0;\n\t\tchar[] seq = sequence.toString().toCharArray();\n\t\tfor(char aa:seq){\n\t\t\tDouble weight = aminoAcidCompositionTable.getMolecularWeight(aa);\n\t\t\tif(weight != null){\n\t\t\t\tvalue += weight;\n\t\t\t}\n\t\t}\n\t\tif(value == 0.0)\n\t\t\treturn value;\n\t\telse\n\t\t\treturn value + getWaterMoleculeWeight();\n\t}\n\n\t@Override\n\tpublic AminoAcidCompositionTable obtainAminoAcidCompositionTable(File aminoAcidCompositionFile)\n\t\tthrows JAXBException, FileNotFoundException{\n\t\tFile elementMassFile = new File(\"./src/main/resources/ElementMass.xml\");\n\t\tif(!elementMassFile.exists()){\n\t\t\tthrow new FileNotFoundException(\"Cannot locate ElementMass.xml. \" +\n\t\t\t\t\t\"Please use getMolecularWeight(ProteinSequence, File, File) to specify ElementMass.xml location.\");\n\t\t}\n\t\treturn obtainAminoAcidCompositionTable(elementMassFile, aminoAcidCompositionFile);\n\t}\n\n\t@Override\n\tpublic AminoAcidCompositionTable obtainAminoAcidCompositionTable(File elementMassFile, File aminoAcidCompositionFile)\n\t\tthrows JAXBException, FileNotFoundException{\n\t\t//Parse elementMassFile\n\t\tElementTable iTable = new ElementTable();\n\t\t// Get a JAXB Context for the object we created above\n\t\tJAXBContext jc = JAXBContext.newInstance(iTable.getClass());\n\t\tUnmarshaller u = jc.createUnmarshaller();\n\t\tu.setEventHandler(new MyValidationEventHandler());\n\t\tiTable = (ElementTable)u.unmarshal(new FileInputStream(elementMassFile));\n\t\tiTable.populateMaps();\n\n\t\t//Parse aminoAcidCompositionFile\n\t\tAminoAcidCompositionTable aTable = new AminoAcidCompositionTable();\n\t\t// Get a JAXB Context for the object we created above\n\t\tJAXBContext jc2 = JAXBContext.newInstance(aTable.getClass());\n\t\tUnmarshaller u2 = jc2.createUnmarshaller();\n\t\tu2.setEventHandler(new MyValidationEventHandler());\n\t\taTable = (AminoAcidCompositionTable)u2.unmarshal(new FileInputStream(aminoAcidCompositionFile));\n\t\taTable.computeMolecularWeight(iTable);\n\t\treturn aTable;\n\t}\n\n\t@Override\n\tpublic double getExtinctionCoefficient(ProteinSequence sequence, boolean assumeCysReduced) {\n\t\t//Tyr => Y\n\t\t//Trp => W\n\t\t//Cys => C\n\t\t//E(Prot) = Numb(Tyr)*Ext(Tyr) + Numb(Trp)*Ext(Trp) + Numb(Cystine)*Ext(Cystine)\n\t\t//where (for proteins in water measured at 280 nm): Ext(Tyr) = 1490, Ext(Trp) = 5500, Ext(Cystine) = 125;\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\t\tMap<AminoAcidCompound, Integer> extinctAA2Count = this.getExtinctAACount(sequence);\n\n\t\tdouble eProt;\n\t\tif(!assumeCysReduced){\n\t\t\teProt = extinctAA2Count.get(aaSet.getCompoundForString(\"Y\")) *\n\t\t\t\tConstraints.aa2ExtinctionCoefficient.get(aaSet.getCompoundForString(\"Y\")) +\n\t\t\t\textinctAA2Count.get(aaSet.getCompoundForString(\"W\")) *\n\t\t\t\tConstraints.aa2ExtinctionCoefficient.get(aaSet.getCompoundForString(\"W\")) +\n\t\t\t\textinctAA2Count.get(aaSet.getCompoundForString(\"C\")) *\n\t\t\t\tConstraints.aa2ExtinctionCoefficient.get(aaSet.getCompoundForString(\"C\"));\n\t\t}else\n\t\t\teProt = extinctAA2Count.get(aaSet.getCompoundForString(\"Y\")) *\n\t\t\t\tConstraints.aa2ExtinctionCoefficient.get(aaSet.getCompoundForString(\"Y\")) +\n\t\t\t\textinctAA2Count.get(aaSet.getCompoundForString(\"W\")) *\n\t\t\t\tConstraints.aa2ExtinctionCoefficient.get(aaSet.getCompoundForString(\"W\"));\n\n\t\treturn eProt;\n\t}\n\n\t@Override\n\tpublic double getAbsorbance(ProteinSequence sequence, boolean assumeCysReduced){\n\t\t//Absorb(Prot) = E(Prot) / Molecular_weight\n\t\tdouble mw = this.getMolecularWeight(sequence);\n\t\tdouble eProt = this.getExtinctionCoefficient(sequence, assumeCysReduced);\n\t\tif (mw == 0.0) {\n\t\t\tlogger.warn(\"Molecular weight is 0.0, can't divide by 0: setting absorbance to 0.0\");\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn eProt / mw;\n\t}\n\n\tprivate Map<AminoAcidCompound, Integer> getExtinctAACount(ProteinSequence sequence){\n\t\t//Cys => C, Tyr => Y, Trp => W\n\t\tint numW = 0;\n\t\tint smallW = 0;\n\t\tdouble numC = 0;\n\t\tdouble smallC = 0;\n\t\tint numY = 0;\n\t\tint smallY = 0;\n\t\tfor(char aa:sequence.getSequenceAsString().toCharArray()){\n\t\t\tswitch(aa){\n\t\t\tcase 'W': numW++; break;\n\t\t\tcase 'w': smallW++; break;\n\t\t\tcase 'C': numC += 0.5; break;\n\t\t\tcase 'c': smallC += 0.5; break;\n\t\t\tcase 'Y': numY++; break;\n\t\t\tcase 'y': smallY++; break;\n\t\t\t}\n\t\t}\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\t\tMap<AminoAcidCompound, Integer> extinctAA2Count = new HashMap<AminoAcidCompound, Integer>();\n\t\t//Ignore Case is always true\n\t\textinctAA2Count.put(aaSet.getCompoundForString(\"W\"), numW + smallW);\n\t\textinctAA2Count.put(aaSet.getCompoundForString(\"C\"), (int) (numC + smallC));\n\t\textinctAA2Count.put(aaSet.getCompoundForString(\"Y\"), numY + smallY);\n\t\treturn extinctAA2Count;\n\t}\n\n\t@Override\n\tpublic double getInstabilityIndex(ProteinSequence sequence) {\n\t\tdouble sum = 0.0;\n\t\tString s = sequence.getSequenceAsString().toUpperCase();\n\t\tfor(int i = 0; i < sequence.getLength() - 1; i++){\n\t\t\tString dipeptide = s.substring(i, i+2);\n\t\t\tif(Constraints.diAA2Instability.containsKey(dipeptide)){\n\t\t\t\tsum += Constraints.diAA2Instability.get(dipeptide);\n\t\t\t}\n\t\t}\n\t\tint denominator = s.length() - Utils.getNumberOfInvalidChar(s, null, true);\n\n\t\tif (denominator==0) {\n\t\t\tlogger.warn(\"Valid length of sequence is 0, can't divide by 0 to calculate instability index: setting instability index value to 0.0\");\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn sum * 10.0 / denominator;\n\t}\n\n\t@Override\n\tpublic double getApliphaticIndex(ProteinSequence sequence) {\n//\t\tAliphatic index = X(Ala) + a * X(Val) + b * ( X(Ile) + X(Leu) )\n//\t\twhere X(Ala), X(Val), X(Ile), and X(Leu) are mole percent (100 X mole fraction)\n//\t\tof alanine, valine, isoleucine, and leucine.\n//\t\tThe coefficients a and b are the relative volume of valine side chain (a = 2.9)\n//\t\tand of Leu/Ile side chains (b = 3.9) to the side chain of alanine.\n//\t\tAla => A, Val => V, Ile => I, Leu => L\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\t\tMap<AminoAcidCompound, Double> aa2Composition = getAAComposition(sequence);\n\t\tfinal double a = 2.9;\n\t\tfinal double b = 3.9;\n\t\tdouble xAla = aa2Composition.get(aaSet.getCompoundForString(\"A\"));\n\t\tdouble xVal = aa2Composition.get(aaSet.getCompoundForString(\"V\"));\n\t\tdouble xIle = aa2Composition.get(aaSet.getCompoundForString(\"I\"));\n\t\tdouble xLeu = aa2Composition.get(aaSet.getCompoundForString(\"L\"));\n\t\treturn (xAla + (a * xVal) + (b * (xIle + xLeu))) * 100;\n\t}\n\n\t@Override\n\tpublic double getAvgHydropathy(ProteinSequence sequence) {\n\t\tint validLength = 0;\n\t\tdouble total = 0.0;\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\t\tchar[] seq = this.getSequence(sequence.toString(), true);\n\t\tfor(char aa:seq){\n\t\t\tAminoAcidCompound c = aaSet.getCompoundForString(aa + \"\");\n\t\t\tif(Constraints.aa2Hydrophathicity.containsKey(c)){\n\t\t\t\ttotal += Constraints.aa2Hydrophathicity.get(c);\n\t\t\t\tvalidLength++;\n\t\t\t}\n\t\t}\n\t\tif (validLength==0) {\n\t\t\tlogger.warn(\"Valid length of sequence is 0, can't divide by 0 to calculate average hydropathy: setting average hydropathy to 0\");\n\t\t\treturn 0.0;\n\t\t}\n\n\t\treturn total / validLength;\n\t}\n\n\t@Override\n\tpublic double getIsoelectricPoint(ProteinSequence sequence, boolean useExpasyValues) {\n\t\tif(useExpasyValues){\n\t\t\treturn this.getIsoelectricPointExpasy(sequence.toString().toUpperCase());\n\t\t}else{\n\t\t\treturn this.getIsoelectricPointInnovagen(sequence);\n\t\t}\n\t}\n\n\tprivate double getIsoelectricPointInnovagen(ProteinSequence sequence){\n\t\tdouble currentPH = 7.0;\n\t\tdouble changeSize = 7.0;\n\t\tString sequenceString = sequence.toString();\n\t\tchar nTerminalChar = sequenceString.charAt(0);\n\t\tchar cTerminalChar = sequenceString.charAt(sequenceString.length() - 1);\n\n\t\tMap<AminoAcidCompound, Integer> chargedAA2Count = this.getChargedAACount(sequence);\n\t\tdouble margin;\n\t\tfinal double difference = 0.0001;\n\n\t\twhile(true){\n\t\t\tmargin = this.getNetChargeInnovagen(chargedAA2Count, currentPH, nTerminalChar, cTerminalChar);\n\t\t\t//Within allowed difference\n\t\t\tif(margin <= difference && margin >= -difference) break;\n\t\t\tchangeSize /= 2.0;\n\t\t\tif(margin > 0){\n\t\t\t\tcurrentPH += changeSize;\n\t\t\t}else{\n\t\t\t\tcurrentPH -= changeSize;\n\t\t\t}\n\t\t}\n\t\treturn currentPH;\n\t}\n\n\t/*\n\t *  Pseudo code obtained from email correspondance with ExPASy Helpdesk, Gregoire Rossier\n\t */\n\t//\n\t// Table of pk values :\n\t// Note: the current algorithm does not use the last two columns.\n\t// Each row corresponds to an amino acid starting with Ala. J, O and U are\n\t// inexistant, but here only in order to have the complete alphabet.\n\t//\n\t// Ct Nt Sm Sc Sn\n\t//\n\tprivate final double[][] cPk = {\n\t\t\t{3.55, 7.59, 0.0},  // A\n\t\t\t{3.55, 7.50, 0.0},  // B\n\t\t\t{3.55, 7.50, 9.00}, // C\n//\t\t\t{4.55, 7.50, 4.05}, // D\n//\t\t\t{4.75, 7.70, 4.45}, // E\n\t\t\t{3.55, 7.50, 4.05}, // D\n\t\t\t{3.55, 7.70, 4.45}, // E\n\t\t\t{3.55, 7.50, 0}, // F\n\t\t\t{3.55, 7.50, 0}, // G\n\t\t\t{3.55, 7.50, 5.98}, // H\n\t\t\t{3.55, 7.50, 0.0}, // I\n\t\t\t{0.0, 0.0, 0.0}, // J\n\t\t\t{3.55, 7.50, 10.00}, // K\n\t\t\t{3.55, 7.50, 0.0}, // L\n\t\t\t{3.55, 7.00, 0.0},// M\n\t\t\t{3.55, 7.50, 0.0},// N\n\t\t\t{0.00, 0.00, 0.0},// O\n\t\t\t{3.55, 8.36, 0.0},// P\n\t\t\t{3.55, 7.50, 0.0}, // Q\n\t\t\t{3.55, 7.50, 12.0},// R\n\t\t\t{3.55, 6.93, 0.0},// S\n\t\t\t{3.55, 6.82, 0.0}, // T\n\t\t\t{0.00, 0.00, 0.0}, // U\n\t\t\t{3.55, 7.44, 0.0},// V\n\t\t\t{3.55, 7.50, 0.0},// W\n\t\t\t{3.55, 7.50, 0.0},// X\n\t\t\t{3.55, 7.50, 10.00},// Y\n\t\t\t{3.55, 7.50, 0.0}}; // Z\n\n\tprivate final double PH_MIN = 0.0; /* minimum pH value */\n\tprivate final double PH_MAX = 14.0; /* maximum pH value */\n\tprivate final double MAXLOOP = 2000.0; /* maximum number of iterations */\n\tprivate final double EPSI = 0.0001; /* desired precision */\n\n\tprivate double exp10(double pka){\n\t\treturn Math.pow(10, pka);\n\t}\n\n\tprivate double getIsoelectricPointExpasy(String sequence){\n\t\t//\n\t\t// Compute the amino-acid composition.\n\t\t//\n\t\tint[] comp = new int[26];\n\t\tfor(int i = 0; i < sequence.length(); i++){\n\t\t\tint index = sequence.charAt(i) - 'A';\n\t\t\tif(index < 0 || index >= 26) continue;\n\t\t\tcomp[index]++;\n\t\t}\n\t\t//\n\t\t// Look up N-terminal and C-terminal residue.\n\t\t//\n\t\tint nTermResidue = -1;\n\t\tint index = 0;\n\t\twhile((nTermResidue < 0 || nTermResidue >= 26) && index < 25){\n\t\t\tnTermResidue = sequence.charAt(index++) - 'A';\n\t\t}\n\n\t\tint cTermResidue = -1;\n\t\tindex = 1;\n\t\twhile((cTermResidue < 0 || cTermResidue >= 26) && index < 25){\n\t\t\tcTermResidue = sequence.charAt(sequence.length() - index++) - 'A';\n\t\t}\n\n\t\tdouble phMin = PH_MIN;\n\t\tdouble phMax = PH_MAX;\n\n\t\tdouble phMid = 0.0;\n\t\tdouble charge = 1.0;\n\t\tfor (int i = 0; i < MAXLOOP && (phMax - phMin) > EPSI; i++){\n\t\t\tphMid = phMin + (phMax - phMin) / 2.0;\n\n\t\t\tcharge = getNetChargeExpasy(comp, nTermResidue, cTermResidue, phMid);\n\n\t\t\tif (charge > 0.0) phMin = phMid;\n\t\t\telse phMax = phMid;\n\t\t}\n\t\treturn phMid;\n\t}\n\n\t@Override\n\tpublic double getIsoelectricPoint(ProteinSequence sequence){\n\t\treturn getIsoelectricPoint(sequence, true);\n\t}\n\n\t@Override\n\tpublic double getNetCharge(ProteinSequence sequence) {\n\t\treturn getNetCharge(sequence, true);\n\t}\n\n\t@Override\n\tpublic double getNetCharge(ProteinSequence sequence, boolean useExpasyValues){\n\t\treturn getNetCharge(sequence, true, 7.0);\n\t}\n\n\t@Override\n\tpublic double getNetCharge(ProteinSequence sequence, boolean useExpasyValues, double pHPoint){\n\t\tif(useExpasyValues){\n\t\t\treturn getNetChargeExpasy(sequence.toString().toUpperCase(), pHPoint);\n\t\t}else{\n\t\t\treturn getNetChargeInnovagen(sequence, pHPoint);\n\t\t}\n\t}\n\n\tprivate double getNetChargeExpasy(String sequence, double pHPoint){\n\t\t//\n\t\t// Compute the amino-acid composition.\n\t\t//\n\t\tint[] comp = new int[26];\n\t\tfor(int i = 0; i < sequence.length(); i++){\n\t\t\tint index = sequence.charAt(i) - 'A';\n\t\t\tif(index < 0 || index >= 26) continue;\n\t\t\tcomp[index]++;\n\t\t}\n\t\t//\n\t\t// Look up N-terminal and C-terminal residue.\n\t\t//\n\t\tint nTermResidue = sequence.charAt(0) - 'A';\n\t\tint cTermResidue = sequence.charAt(sequence.length() - 1) - 'A';\n\t\treturn getNetChargeExpasy(comp, nTermResidue, cTermResidue, pHPoint);\n\t}\n\n\tprivate double getNetChargeExpasy(int[] comp, int nTermResidue, int cTermResidue, double ph){\n\t\tdouble cter = 0.0;\n\t\tif(cTermResidue >= 0 && cTermResidue < 26) cter = exp10(-cPk[cTermResidue][0]) / (exp10(-cPk[cTermResidue][0]) + exp10(-ph));\n\t\tdouble nter = 0.0;\n\t\tif(nTermResidue >= 0 && nTermResidue < 26) nter = exp10(-ph) / (exp10(-cPk[nTermResidue][1]) + exp10(-ph));\n\n\t\tdouble carg = comp['R' - 'A'] * exp10(-ph) / (exp10(-cPk['R' - 'A'][2]) + exp10(-ph));\n\t\tdouble chis = comp['H' - 'A'] * exp10(-ph) / (exp10(-cPk['H' - 'A'][2]) + exp10(-ph));\n\t\tdouble clys = comp['K' - 'A'] * exp10(-ph) / (exp10(-cPk['K' - 'A'][2]) + exp10(-ph));\n\n\t\tdouble casp = comp['D' - 'A'] * exp10(-cPk['D' - 'A'][2]) / (exp10(-cPk['D' - 'A'][2]) + exp10(-ph));\n\t\tdouble cglu = comp['E' - 'A'] * exp10(-cPk['E' - 'A'][2]) / (exp10(-cPk['E' - 'A'][2]) + exp10(-ph));\n\n\t\tdouble ccys = comp['C' - 'A'] * exp10(-cPk['C' - 'A'][2]) / (exp10(-cPk['C' - 'A'][2]) + exp10(-ph));\n\t\tdouble ctyr = comp['Y' - 'A'] * exp10(-cPk['Y' - 'A'][2]) / (exp10(-cPk['Y' - 'A'][2]) + exp10(-ph));\n\n\t\treturn (carg + clys + chis + nter) - (casp + cglu + ctyr + ccys + cter);\n\t}\n\n\tprivate double getNetChargeInnovagen(ProteinSequence sequence, double pHPoint) {\n\t\tMap<AminoAcidCompound, Integer> chargedAA2Count = this.getChargedAACount(sequence);\n\t\tString sequenceString = sequence.getSequenceAsString();\n\t\treturn getNetChargeInnovagen(chargedAA2Count, pHPoint, sequenceString.charAt(0), sequenceString.charAt(sequenceString.length() - 1));\n\t}\n\n\tprivate double getNetChargeInnovagen(Map<AminoAcidCompound, Integer> chargedAA2Count, double ph, char nTerminalChar, char cTerminalChar){\n\t\t//Constraints.aa2PKa is aleady reinitialized in getChargedAACount hence no need to do it again\n\n\t\t//Lys => K, Arg => R, His => H\n\t\t//Asp => D, Glu => E, Cys => C, Tyr => Y\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\n\t\tdouble nTerminalCharge = 0.0;\n\t\tAminoAcidCompound nTermCompound = aaSet.getCompoundForString(nTerminalChar + \"\");\n\t\tif(Constraints.aa2NTerminalPka.containsKey(nTermCompound)){\n\t\t\tnTerminalCharge = this.getPosCharge(Constraints.aa2NTerminalPka.get(nTermCompound), ph);\n\t\t}\n\n\t\tdouble cTerminalCharge = 0.0;\n\t\tAminoAcidCompound cTermCompound = aaSet.getCompoundForString(cTerminalChar + \"\");\n\t\tif(Constraints.aa2CTerminalPka.containsKey(cTermCompound)){\n\t\t\tcTerminalCharge = this.getNegCharge(Constraints.aa2CTerminalPka.get(cTermCompound), ph);\n\t\t}\n\n\t\tdouble kCharge = chargedAA2Count.get(aaSet.getCompoundForString(\"K\")) * this.getPosCharge(Constraints.aa2PKa.get(aaSet.getCompoundForString(\"K\")), ph);\n\t\tdouble rCharge = chargedAA2Count.get(aaSet.getCompoundForString(\"R\")) * this.getPosCharge(Constraints.aa2PKa.get(aaSet.getCompoundForString(\"R\")), ph);\n\t\tdouble hCharge = chargedAA2Count.get(aaSet.getCompoundForString(\"H\")) * this.getPosCharge(Constraints.aa2PKa.get(aaSet.getCompoundForString(\"H\")), ph);\n\t\tdouble dCharge = chargedAA2Count.get(aaSet.getCompoundForString(\"D\")) * this.getNegCharge(Constraints.aa2PKa.get(aaSet.getCompoundForString(\"D\")), ph);\n\t\tdouble eCharge = chargedAA2Count.get(aaSet.getCompoundForString(\"E\")) * this.getNegCharge(Constraints.aa2PKa.get(aaSet.getCompoundForString(\"E\")), ph);\n\t\tdouble cCharge = chargedAA2Count.get(aaSet.getCompoundForString(\"C\")) * this.getNegCharge(Constraints.aa2PKa.get(aaSet.getCompoundForString(\"C\")), ph);\n\t\tdouble yCharge = chargedAA2Count.get(aaSet.getCompoundForString(\"Y\")) * this.getNegCharge(Constraints.aa2PKa.get(aaSet.getCompoundForString(\"Y\")), ph);\n//\t\tif((kCharge + rCharge + hCharge) == 0.0 && (dCharge + eCharge + cCharge + yCharge) == 0.0){\n//\t\t\treturn 0.0;\n//\t\t}\n\t\treturn (nTerminalCharge + kCharge + rCharge + hCharge) - (dCharge + eCharge + cCharge + yCharge + cTerminalCharge);\n\t}\n\n\tprivate double getPosCharge(double pka, double ph){\n\t\treturn Math.pow(10, pka) / (Math.pow(10, pka) + Math.pow(10, ph));\n\t}\n\n\tprivate double getNegCharge(double pka, double ph){\n\t\treturn Math.pow(10, ph) / (Math.pow(10, pka) + Math.pow(10, ph));\n\t}\n\n\tprivate Map<AminoAcidCompound, Integer> getChargedAACount(ProteinSequence sequence){\n\t\t//Lys => K, Arg => R, His => H\n\t\t//Asp => D, Glu => E, Cys => C, Tyr => Y\n\t\tint numK = 0;\n\t\tint numR = 0;\n\t\tint numH = 0;\n\t\tint numD = 0;\n\t\tint numE = 0;\n\t\tint numC = 0;\n\t\tint numY = 0;\n\t\tchar[] seq = this.getSequence(sequence.getSequenceAsString(), true);\n\t\tfor(char aa:seq){\n\t\t\tswitch(aa){\n\t\t\tcase 'K': numK++; break;\n\t\t\tcase 'R': numR++; break;\n\t\t\tcase 'H': numH++; break;\n\t\t\tcase 'D': numD++; break;\n\t\t\tcase 'E': numE++; break;\n\t\t\tcase 'C': numC++; break;\n\t\t\tcase 'Y': numY++; break;\n\t\t\t}\n\t\t}\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\t\tMap<AminoAcidCompound, Integer> chargedAA2Count = new HashMap<AminoAcidCompound, Integer>();\n\t\tchargedAA2Count.put(aaSet.getCompoundForString(\"K\"), numK);\n\t\tchargedAA2Count.put(aaSet.getCompoundForString(\"R\"), numR);\n\t\tchargedAA2Count.put(aaSet.getCompoundForString(\"H\"), numH);\n\t\tchargedAA2Count.put(aaSet.getCompoundForString(\"D\"), numD);\n\t\tchargedAA2Count.put(aaSet.getCompoundForString(\"E\"), numE);\n\t\tchargedAA2Count.put(aaSet.getCompoundForString(\"C\"), numC);\n\t\tchargedAA2Count.put(aaSet.getCompoundForString(\"Y\"), numY);\n\t\treturn chargedAA2Count;\n\t}\n\n\t@Override\n\tpublic double getEnrichment(ProteinSequence sequence, AminoAcidCompound aminoAcidCode) {\n\t\tdouble counter = 0.0;\n\t\tchar[] seq = this.getSequence(sequence.getSequenceAsString(), true);\n\t\tfor(char aa:seq){\n\t\t\tif(aminoAcidCode.getShortName().equals(aa + \"\")){\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t\treturn counter/sequence.getLength();\n\t}\n\n\t@Override\n\tpublic Map<AminoAcidCompound, Double> getAAComposition(ProteinSequence sequence) {\n\t\tint validLength = 0;\n\t\tMap<AminoAcidCompound, Double> aa2Composition = new HashMap<AminoAcidCompound, Double>();\n\t\tAminoAcidCompoundSet aaSet = new AminoAcidCompoundSet();\n\t\tfor(AminoAcidCompound aa:aaSet.getAllCompounds()){\n\t\t\taa2Composition.put(aa, 0.0);\n\t\t}\n\t\tchar[] seq = this.getSequence(sequence.toString(), true);\n\t\tfor(char aa:seq){\n\t\t\tif(PeptideProperties.standardAASet.contains(aa)){\n\t\t\t\tAminoAcidCompound compound = aaSet.getCompoundForString(aa + \"\");\n\t\t\t\taa2Composition.put(compound, aa2Composition.get(compound) + 1.0);\n\t\t\t\tvalidLength++;\n\t\t\t}\n\t\t}\n\t\tif(validLength > 0){\n\t\t\tfor(AminoAcidCompound aa:aaSet.getAllCompounds()){\n\t\t\t\taa2Composition.put(aa, aa2Composition.get(aa) / validLength);\n\t\t\t}\n\t\t}else{\n\t\t\tfor(AminoAcidCompound aa:aaSet.getAllCompounds()){\n\t\t\t\taa2Composition.put(aa, 0.0);\n\t\t\t}\n\t\t}\n\t\treturn aa2Composition;\n\t}\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.aaproperties;\n\nimport org.biojava.nbio.aaproperties.PeptideProperties;\nimport org.biojava.nbio.aaproperties.Utils;\nimport org.biojava.nbio.aaproperties.xml.AminoAcidCompositionTable;\nimport org.junit.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.xml.bind.JAXBException;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Map;\n\nimport static org.junit.Assert.*;\n\npublic class PeptidePropertiesImplTest {\n\n\tprivate final static Logger logger = LoggerFactory.getLogger(PeptidePropertiesImplTest.class);\n\n\tprivate static final double delta = 0.00001;\n\n\t/**\n\t * Test input\n\t */\n\tprivate final String sequence = \"MTADGPCRELLCQLRAAVRHRWWC1\";\n\tprivate final String fullInvalidSequence = \"3176412372301230183--2310\";\n\n\t@Test\n\tpublic void testAAComposition() {\n\t\t//'W', 'C', 'M', 'H', 'Y', 'F', 'Q', 'N', 'I', 'R', 'D', 'P', 'T', 'K', 'E', 'V', 'S', 'G', 'A', 'L'\n\t\tMap<String, Double> composition = PeptideProperties.getAACompositionString(sequence);\n\t\tint sequenceLength = sequence.length() - Utils.getNumberOfInvalidChar(sequence, null, true);\n\t\tassertEquals(2.0/sequenceLength,composition.get(\"W\"), delta);\n\t\tassertEquals(3.0/sequenceLength,composition.get(\"C\"), delta);\n\t\tassertEquals(1.0/sequenceLength,composition.get(\"M\"), delta);\n\t\tassertEquals(1.0/sequenceLength,composition.get(\"H\"), delta);\n\t\tassertEquals(0.0/sequenceLength,composition.get(\"Y\"), delta);\n\t\tassertEquals(0.0/sequenceLength,composition.get(\"F\"), delta);\n\t\tassertEquals(1.0/sequenceLength,composition.get(\"Q\"), delta);\n\t\tassertEquals(0.0/sequenceLength,composition.get(\"N\"), delta);\n\t\tassertEquals(0.0/sequenceLength,composition.get(\"I\"), delta);\n\t\tassertEquals(4.0/sequenceLength,composition.get(\"R\"), delta);\n\t\tassertEquals(1.0/sequenceLength,composition.get(\"D\"), delta);\n\t\tassertEquals(1.0/sequenceLength,composition.get(\"P\"), delta);\n\t\tassertEquals(1.0/sequenceLength,composition.get(\"T\"), delta);\n\t\tassertEquals(0.0/sequenceLength,composition.get(\"K\"), delta);\n\t\tassertEquals(1.0/sequenceLength,composition.get(\"E\"), delta);\n\t\tassertEquals(1.0/sequenceLength,composition.get(\"V\"), delta);\n\t\tassertEquals(0.0/sequenceLength,composition.get(\"S\"), delta);\n\t\tassertEquals(1.0/sequenceLength,composition.get(\"G\"), delta);\n\t\tassertEquals(3.0/sequenceLength,composition.get(\"A\"), delta);\n\t\tassertEquals(3.0/sequenceLength,composition.get(\"L\"), delta);\n\n\t\tMap<String, Double> iComposition = PeptideProperties.getAACompositionString(fullInvalidSequence);\n\t\tassertEquals(0.0,iComposition.get(\"W\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"C\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"M\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"H\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"Y\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"F\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"Q\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"N\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"I\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"R\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"D\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"P\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"T\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"K\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"E\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"V\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"S\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"G\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"A\"), delta);\n\t\tassertEquals(0.0,iComposition.get(\"L\"), delta);\n\n\t\t//Null would be returned for invalid character\n\t\tassertNotSame(0d, composition.get(\"Z\"));\n\t\tassertNull(composition.get(null));\n\t\tassertNull(composition.get(\"\"));\n\t\tassertNull(composition.get(\"1\"));\n\t}\n\n\t@Test()\n\tpublic void testEnrichment() {\n\n\t\t//'W', 'C', 'M', 'H', 'Y', 'F', 'Q', 'N', 'I', 'R', 'D', 'P', 'T', 'K', 'E', 'V', 'S', 'G', 'A', 'L'\n\t\tint sequenceLength = sequence.length();\n\t\tassertEquals(2.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"W\"), delta);\n\t\tassertEquals(3.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"C\"), delta);\n\t\tassertEquals(1.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"M\"), delta);\n\t\tassertEquals(1.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"H\"), delta);\n\t\tassertEquals(0.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"Y\"), delta);\n\t\tassertEquals(0.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"F\"), delta);\n\t\tassertEquals(1.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"Q\"), delta);\n\t\tassertEquals(0.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"N\"), delta);\n\t\tassertEquals(0.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"I\"), delta);\n\t\tassertEquals(4.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"R\"), delta);\n\t\tassertEquals(1.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"D\"), delta);\n\t\tassertEquals(1.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"P\"), delta);\n\t\tassertEquals(1.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"T\"), delta);\n\t\tassertEquals(0.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"K\"), delta);\n\t\tassertEquals(1.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"E\"), delta);\n\t\tassertEquals(1.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"V\"), delta);\n\t\tassertEquals(0.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"S\"), delta);\n\t\tassertEquals(1.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"G\"), delta);\n\t\tassertEquals(3.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"A\"), delta);\n\t\tassertEquals(3.0/sequenceLength, PeptideProperties.getEnrichment(sequence, \"L\"), delta);\n\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"W\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"C\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"M\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"H\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"Y\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"F\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"Q\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"N\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"I\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"R\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"D\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"P\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"T\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"K\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"E\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"V\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"S\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"G\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"A\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(fullInvalidSequence, \"L\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(sequence, \"X\"), delta);\n\t}\n\n\t@Test (expected = NullPointerException.class)\n\tpublic void testEnrichmentNull(){\n\t\tassertEquals(0.0, PeptideProperties.getEnrichment(sequence, \"\"), delta);\n\t\tassertNull(PeptideProperties.getEnrichment(sequence, \"1\"));\n\t}\n\n\t@Test\n\tpublic void testMolecularWeight(){\n\t\t//http://www.innovagen.se/custom-peptide-synthesis/peptide-property-calculator/peptide-property-calculator.asp\n\t\t//http://au.expasy.org/cgi-bin/protparam\n\t\t//2872.4 is the value computed by the above two web tools\n\t\tassertEquals(2872.4, Utils.roundToDecimals(PeptideProperties.getMolecularWeight(sequence), 1), delta);\n\t\tassertEquals(0.0, PeptideProperties.getMolecularWeight(\"Z\"), delta);\n\t\tassertEquals(0.0, PeptideProperties.getMolecularWeight(\"1\"), delta);\n\n\t\tassertEquals(0.0, PeptideProperties.getMolecularWeight(fullInvalidSequence), delta);\n\t}\n\n\t@Test\n\tpublic void testMolecularWeightXML() throws FileNotFoundException, JAXBException{\n\t\tFile elementMassFile = new File(\"./src/main/resources/ElementMass.xml\");\n\t\tFile aminoAcidCompositionFile = new File(\"./src/main/resources/AminoAcidComposition.xml\");\n\n\t\tassertEquals(\n\t\t\t\tPeptideProperties.getMolecularWeight(\"A\", elementMassFile, aminoAcidCompositionFile)\n\t\t\t\t\t\t* 5.0 -  4 * (17.0073 + 1.0079),\n\t\t\t\tPeptideProperties.getMolecularWeight(\"AAAAA\", elementMassFile, aminoAcidCompositionFile),\n\t\t\t\tdelta);\n\t}\n\n\t@Test\n\tpublic void testMolecularWeightXMLSingleFile() throws FileNotFoundException, JAXBException{\n\t\tFile aminoAcidCompositionFile = new File(\"./src/main/resources/AminoAcidComposition.xml\");\n\n\t\tassertEquals(\n\t\t\t\tPeptideProperties.getMolecularWeight(\"A\", aminoAcidCompositionFile) * 5.0 -  4 * (17.0073 + 1.0079),\n\t\t\t\tPeptideProperties.getMolecularWeight(\"AAAAA\", aminoAcidCompositionFile),\n\t\t\t\tdelta);\n\t}\n\n\t@Test\n\tpublic void testMolecularWeightBasedOnAminoAcidCompositionTable() throws Exception{\n\t\tFile elementMassFile = new File(\"./src/main/resources/ElementMass.xml\");\n\t\tFile aminoAcidCompositionFile = new File(\"./src/main/resources/AminoAcidComposition.xml\");\n\t\tAminoAcidCompositionTable table = PeptideProperties.obtainAminoAcidCompositionTable(elementMassFile, aminoAcidCompositionFile);\n\n\t\tassertEquals(\n\t\t\t\tPeptideProperties.getMolecularWeightBasedOnXML(\"A\", table) * 5.0 -  4 * (17.0073 + 1.0079),\n\t\t\t\tPeptideProperties.getMolecularWeightBasedOnXML(\"AAAAA\", table),\n\t\t\t\tdelta);\n\t}\n\n\t@Test (expected = NullPointerException.class)\n\tpublic void testMolecularWeightXMLNull() throws FileNotFoundException, JAXBException{\n\t\tPeptideProperties.getMolecularWeight(sequence, null, null);\n\t}\n\n\t@Test\n\tpublic void testExtinctionCoefficient(){\n\t\t//http://au.expasy.org/cgi-bin/protparam\n\t\tassertEquals(11125.0, PeptideProperties.getExtinctionCoefficient(sequence, false), delta);\n\t\tassertEquals(11000.0, PeptideProperties.getExtinctionCoefficient(sequence, true), delta);\n\n\t\tassertEquals(0.0, PeptideProperties.getExtinctionCoefficient(fullInvalidSequence, true), delta);\n\t\tassertEquals(0.0, PeptideProperties.getExtinctionCoefficient(fullInvalidSequence, false), delta);\n\t}\n\n\t@Test (expected = NullPointerException.class)\n\tpublic void testExtinctionCoefficientNull(){\n\t\tassertEquals(11000.0, PeptideProperties.getExtinctionCoefficient(null, true), delta);\n\t}\n\n\t@Test\n\tpublic void testAbsorbance(){\n\t\t//http://au.expasy.org/cgi-bin/protparam\n\t\tassertEquals(3.830, PeptideProperties.getAbsorbance(sequence, true), 0.001);\n\t\tassertEquals(3.873, PeptideProperties.getAbsorbance(sequence, false), 0.001);\n\n\t\tassertEquals(0.0, PeptideProperties.getAbsorbance(fullInvalidSequence, true), 0.001);\n\t\tassertEquals(0.0, PeptideProperties.getAbsorbance(fullInvalidSequence, false), 0.001);\n\t}\n\n\t@Test (expected = NullPointerException.class)\n\tpublic void testAbsorbanceNull(){\n\t\tassertEquals(3.830, PeptideProperties.getAbsorbance(null, false), delta);\n\t}\n\n\n\t@Test\n\tpublic void testInstabilityIndex(){\n\t\t//http://au.expasy.org/cgi-bin/protparam\n\t\tassertEquals(38.48, PeptideProperties.getInstabilityIndex(sequence), 0.01);\n\t\tassertEquals(0.0, PeptideProperties.getInstabilityIndex(fullInvalidSequence), 0.01);\n\t}\n\n\t@Test (expected = NullPointerException.class)\n\tpublic void testInstabilityIndexNull(){\n\t\tassertEquals(38.48, PeptideProperties.getInstabilityIndex(null), delta);\n\t}\n\n\t@Test\n\tpublic void testApliphaticIndex(){\n\t\t//http://au.expasy.org/cgi-bin/protparam\n\t\tassertEquals(73.33, PeptideProperties.getApliphaticIndex(sequence), 0.01);\n\t\tassertEquals(0.0, PeptideProperties.getApliphaticIndex(fullInvalidSequence), 0.01);\n\t}\n\n\t@Test (expected = NullPointerException.class)\n\tpublic void testApliphaticIndexNull(){\n\t\tassertEquals(73.33, PeptideProperties.getApliphaticIndex(null), 0.01);\n\t}\n\n\t@Test\n\tpublic void testAverageHydropathy(){\n\t\t//http://au.expasy.org/cgi-bin/protparam\n\t\tassertEquals(-0.242, PeptideProperties.getAvgHydropathy(sequence), 0.001);\n\t\tassertEquals(0.0, PeptideProperties.getAvgHydropathy(fullInvalidSequence), 0.001);\n\t}\n\n\t@Test (expected = NullPointerException.class)\n\tpublic void testAverageHydropathyNull(){\n\t\tassertEquals(-0.242, PeptideProperties.getAvgHydropathy(null), 0.001);\n\t}\n\n\t@Test\n\tpublic void testIsoelectricPointInnovagen(){\n\t\t/*\n\t\t * Test for Innovagen\n\t\t */\n\t\t//http://www.innovagen.se/custom-peptide-synthesis/peptide-property-calculator/peptide-property-calculator.asp\n\t\tassertEquals(9.01, PeptideProperties.getIsoelectricPoint(sequence, false), 0.01);\n\t\tassertEquals(7.00, PeptideProperties.getIsoelectricPoint(fullInvalidSequence, false), 0.01);\n\n\t\tassertEquals(2.70, PeptideProperties.getIsoelectricPoint(\"ACCACAAADADADACA\", false), 0.01);\n\t}\n\n\t@Test\n\tpublic void testIsoelectricPointExpasy(){\n\t\t/*\n\t\t * Test for Expasy\n\t\t */\n\t\tassertEquals(3.42, PeptideProperties.getIsoelectricPoint(\"ACCACAAADADADACA\"), 0.01);\n\t\tassertEquals(3.42, PeptideProperties.getIsoelectricPoint(\"ACCACAAADADADACM\"), 0.01);\n\t\t//\n\t\tassertEquals(3.37, PeptideProperties.getIsoelectricPoint(\"ECCACAAADADADACS\", true), 0.01);\n\n\n\t\tassertEquals(3.24, PeptideProperties.getIsoelectricPoint(\"ADCCACAAADADADACDAAAAAAAAAAAA\", true), 0.01);\n\n\t\t//3.32 at Expasy\n\t\tassertEquals(3.32, PeptideProperties.getIsoelectricPoint(\"DCCACAAADADADACS\", true), 0.01);\n\n\t\tassertEquals(3.17, PeptideProperties.getIsoelectricPoint(\"DCCACAAADADADACDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD\", true), 0.01);\n\t\tassertEquals(3.37, PeptideProperties.getIsoelectricPoint(\"ACCACAAADADADACE\", true), 0.01);\n\t\tassertEquals(3.32, PeptideProperties.getIsoelectricPoint(\"ACCACAAADADADACAAAAAAAAAAAAAAD\", true), 0.01);\n\t\tassertEquals(3.28, PeptideProperties.getIsoelectricPoint(\"DCCACAAADADADACE\", true), 0.01);\n\n\t\tassertEquals(8.71, PeptideProperties.getIsoelectricPoint(\"MTADGPCRELLCQLRAAVRHRWWC\", true), 0.01);\n\t\tassertEquals(8.71, PeptideProperties.getIsoelectricPoint(sequence, true), 0.01);\n\t\tassertEquals(0.0, PeptideProperties.getIsoelectricPoint(fullInvalidSequence, true), 0.01);\n\t}\n\n\t@Test (expected = NullPointerException.class)\n\tpublic void testIsoelectricPointNull(){\n\t\tassertEquals(8.6, PeptideProperties.getIsoelectricPoint(null), 0.1);\n\t}\n\n\t@Test\n\tpublic void testNetCharge(){\n\t\t/*\n\t\t * Test for Innovagen\n\t\t */\n\t\t//http://www.innovagen.se/custom-peptide-synthesis/peptide-property-calculator/peptide-property-calculator.asp\n\t\tassertEquals(2.9, PeptideProperties.getNetCharge(sequence, false), 0.1);\n\t\tassertEquals(0.0, PeptideProperties.getNetCharge(fullInvalidSequence, false), 0.1);\n\n\t\tassertEquals(-3.2, PeptideProperties.getNetCharge(\"ACCACAAADADADACA\", false), 0.1);\n\t\t/*\n\t\t * Did not test for Expasy because in their website, net charge is not given.\n\t\t * However, since Isoelectric point is given which rely on getNetCharge values therefore,\n\t\t * \twe infer that if getIsoelectricPoint is correct, getNetCharge would be correct for Expasy.\n\t\t */\n\n\n\t\t/*\n\t\t * Provided by Steve Darnell to compare the difference between Innovagen and Expasy\n\t\t */\n\t\tString[] alpha = {\"A\",/*\"B\",*/\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",/*\"J\",*/\n\t\t\t\t\"K\",\"L\",\"M\",\"N\",/*\"O\",*/\"P\",\"Q\",\"R\",\"S\",\"T\",\n\t\t\t\t/*\"U\",*/\"V\",\"W\",/*\"X\",*/\"Y\"/*,\"Z\"*/};\n\t\tfor (String aa : alpha) {\n\t\t\tString p = String.format(\"AA%sAA\", aa);\n\t\t\tlogger.debug(p);\n\t\t\tlogger.debug(\"pH\\tInnovagen\\tExpasy\\tdiff\");\n\t\t\tfor ( int i = 1; i < 15; i++) {\n\t\t\t\tdouble phPoint = (new Double(i)).doubleValue();\n\t\t\t\tdouble chrgInnovagen = PeptideProperties.getNetCharge(p,false,phPoint);\n\t\t\t\tdouble chrgExpasy = PeptideProperties.getNetCharge(p,true,phPoint);\n\t\t\t\tlogger.debug(String.format(\"%2.1f\\t%2.2f\\t%2.2f\\t%2.2f\", phPoint, chrgInnovagen,\n\t\t\t\t\t\tchrgExpasy, chrgInnovagen - chrgExpasy));\n\t\t\t}\n\t\t}\n\t}\n\n\t@Test (expected = NullPointerException.class)\n\tpublic void testNetChargeNull(){\n\t\tassertEquals(8.6, PeptideProperties.getNetCharge(null), delta);\n\t}\n}\n","changedTest":"","commitMessage":"squid:S1197 - Array designators should be on the type, not the variable\n","test_commitMessage":"","allZero":false}