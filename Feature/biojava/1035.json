{"repository":"biojava","prod_path":"biojava-core/src/main/java/org/biojava/nbio/core/sequence/io/FastaWriter.java","test_path":"biojava-core/src/test/java/org/biojava/nbio/core/sequence/io/FastaWriterTest.java","prod_time":"2021-11-16 05:48:06","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":11,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":1,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"f9a0ea4c2f109c3059611f1e7147962984293b7e","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 01-21-2010\n */\npackage org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.template.FastaHeaderFormatInterface;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedOutputStream;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\n\n/**\n * The FastaWriter writes a collection of sequences to an outputStream. FastaWriterHelper should be\n * used to write out sequences. Each sequence loaded from a fasta file retains the original Fasta header\n * and that is used when writing to the stream. This behavior can be overwritten by implementing\n * a custom FastaHeaderFormatInterface.\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class FastaWriter<S extends Sequence<?>, C extends Compound> {\n\n\tprivate final static Logger logger = LoggerFactory.getLogger(FastaWriter.class);\n\n\tOutputStream os;\n\tCollection<S> sequences;\n\tFastaHeaderFormatInterface<S, C> headerFormat;\n\tprivate int lineLength = 60;\n\tbyte[] lineSep = System.getProperty(\"line.separator\").getBytes();\n/**\n * Use default line length of 60\n * @param os\n * @param sequences\n * @param headerFormat\n */\n\tpublic FastaWriter(OutputStream os, Collection<S> sequences, FastaHeaderFormatInterface<S, C> headerFormat) {\n\n\t\tthis.os = os;\n\t\tthis.sequences = sequences;\n\t\tthis.headerFormat = headerFormat;\n\t}\n\n/**\n * Set custom lineLength\n * @param os\n * @param sequences\n * @param headerFormat\n * @param lineLength\n */\n\n\tpublic FastaWriter(OutputStream os, Collection<S> sequences, FastaHeaderFormatInterface<S, C> headerFormat, int lineLength) {\n\t\tthis.os = os;\n\t\tthis.sequences = sequences;\n\t\tthis.headerFormat = headerFormat;\n\t\tthis.lineLength = lineLength;\n\t}\n\n\t/**\n\t * Allow an override of operating system line separator for programs that needs a specific CRLF or CR or LF option\n\t * @param lineSeparator\n\t */\n\tpublic void setLineSeparator(String lineSeparator){\n\t\tlineSep = lineSeparator.getBytes();\n\t}\n\n\tpublic void process() throws IOException {\n\t   // boolean closeit = false;\n\n\n\n\t\tfor (S sequence : sequences) {\n\t\t\tString header = headerFormat.getHeader(sequence);\n\t\t\tos.write('>');\n\t\t\tos.write(header.getBytes());\n\t\t\tos.write(lineSep);\n\n\t\t\tint compoundCount = 0;\n\t\t\tString seq = \"\";\n\n\t\t\tseq = sequence.getSequenceAsString();\n\n\t\t\tfor (int i = 0; i < seq.length(); i++) {\n\t\t\t\tos.write(seq.charAt(i));\n\t\t\t\tcompoundCount++;\n\t\t\t\tif (compoundCount == lineLength) {\n\t\t\t\t\tos.write(lineSep);\n\t\t\t\t\tcompoundCount = 0;\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t//If we had sequence which was a reciprocal of line length\n\t\t\t//then don't write the line terminator as this has already written\n\t\t\t//it\n\t\t\tif ((sequence.getLength() % getLineLength()) != 0) {\n\t\t\t\tos.write(lineSep);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tFileInputStream is = new FileInputStream(\"/Users/Scooter/scripps/dyadic/c1-454Scaffolds.faa\");\n\n\n\t\t\tFastaReader<ProteinSequence, AminoAcidCompound> fastaReader = new FastaReader<ProteinSequence, AminoAcidCompound>(is, new GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>(), new ProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet()));\n\t\t\tLinkedHashMap<String, ProteinSequence> proteinSequences = fastaReader.process();\n\t\t\tis.close();\n\n\n\t\t  //  logger.debug(proteinSequences);\n\n\t\t\tFileOutputStream fileOutputStream = new FileOutputStream(\"/Users/Scooter/scripps/dyadic/c1-454Scaffolds_temp.faa\");\n\n\t\t\tBufferedOutputStream bo = new BufferedOutputStream(fileOutputStream);\n\t\t\tlong start = System.currentTimeMillis();\n\t\t\tFastaWriter<ProteinSequence, AminoAcidCompound> fastaWriter = new FastaWriter<ProteinSequence, AminoAcidCompound>(bo, proteinSequences.values(), new GenericFastaHeaderFormat<ProteinSequence, AminoAcidCompound>());\n\t\t\tfastaWriter.process();\n\t\t\tbo.close();\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tlogger.info(\"Took {} seconds\", (end - start));\n\n\t\t\tfileOutputStream.close();\n\n\n\t\t} catch (IOException e) {\n\t\t\tlogger.warn(\"Exception: \", e);\n\t\t}\n\t}\n\n\t/**\n\t * @return the lineLength\n\t */\n\tpublic int getLineLength() {\n\t\treturn lineLength;\n\t}\n\n\t/**\n\t * @param lineLength the lineLength to set\n\t */\n\tpublic void setLineLength(int lineLength) {\n\t\tthis.lineLength = lineLength;\n\t}\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 01-21-2010\n */\npackage org.biojava.nbio.core.sequence.io;\n\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.template.FastaHeaderFormatInterface;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedOutputStream;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\n\n/**\n * The FastaWriter writes a collection of sequences to an outputStream. FastaWriterHelper should be\n * used to write out sequences. Each sequence loaded from a fasta file retains the original Fasta header\n * and that is used when writing to the stream. This behavior can be overwritten by implementing\n * a custom FastaHeaderFormatInterface.\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\npublic class FastaWriter<S extends Sequence<?>, C extends Compound> {\n\n\tprivate final static Logger logger = LoggerFactory.getLogger(FastaWriter.class);\n\n\tOutputStream os;\n\tCollection<S> sequences;\n\tFastaHeaderFormatInterface<S, C> headerFormat;\n\tprivate int lineLength = 60;\n\tbyte[] lineSep = System.getProperty(\"line.separator\").getBytes();\n/**\n * Use default line length of 60\n * @param os\n * @param sequences\n * @param headerFormat\n */\n\tpublic FastaWriter(OutputStream os, Collection<S> sequences, FastaHeaderFormatInterface<S, C> headerFormat) {\n\n\t\tthis.os = os;\n\t\tthis.sequences = sequences;\n\t\tthis.headerFormat = headerFormat;\n\t}\n\n/**\n * Set custom lineLength\n * @param os\n * @param sequences\n * @param headerFormat\n * @param lineLength\n */\n\n\tpublic FastaWriter(OutputStream os, Collection<S> sequences, FastaHeaderFormatInterface<S, C> headerFormat, int lineLength) {\n\t\tthis.os = os;\n\t\tthis.sequences = sequences;\n\t\tthis.headerFormat = headerFormat;\n\t\tthis.lineLength = lineLength;\n\t}\n\n\t/**\n\t * Allow an override of operating system line separator for programs that needs a specific CRLF or CR or LF option\n\t * @param lineSeparator\n\t */\n\tpublic void setLineSeparator(String lineSeparator){\n\t\tlineSep = lineSeparator.getBytes();\n\t}\n\n\tpublic void process() throws IOException {\n\t   // boolean closeit = false;\n\n\n\n\t\tfor (S sequence : sequences) {\n\t\t\tString header = headerFormat.getHeader(sequence);\n\t\t\tos.write('>');\n\t\t\tos.write(header.getBytes());\n\t\t\tos.write(lineSep);\n\n\t\t\tint compoundCount = 0;\n\t\t\tString seq = \"\";\n\n\t\t\tseq = sequence.getSequenceAsString();\n\n\t\t\tfor (int i = 0; i < seq.length(); i++) {\n\t\t\t\tos.write(seq.charAt(i));\n\t\t\t\tcompoundCount++;\n\t\t\t\tif (compoundCount == lineLength) {\n\t\t\t\t\tos.write(lineSep);\n\t\t\t\t\tcompoundCount = 0;\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t//If we had sequence which was a reciprocal of line length\n\t\t\t//then don't write the line terminator as this has already written\n\t\t\t//it\n\t\t\tif ((sequence.getLength() % getLineLength()) != 0) {\n\t\t\t\tos.write(lineSep);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * @return the lineLength\n\t */\n\tpublic int getLineLength() {\n\t\treturn lineLength;\n\t}\n\n\t/**\n\t * @param lineLength the lineLength to set\n\t */\n\tpublic void setLineLength(int lineLength) {\n\t\tthis.lineLength = lineLength;\n\t}\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.sequence.io;\n\n\nimport org.biojava.nbio.core.sequence.AccessionID;\nimport org.biojava.nbio.core.sequence.DNASequence;\nimport org.junit.Test;\n\nimport java.io.ByteArrayOutputStream;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\n\npublic class FastaWriterTest {\n\n\t@Test\n\tpublic void writeBasicFasta() throws Exception {\n\t\tString id         = \"Example\";\n\t\tString dnaLineOne = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n\t\tString dnaLineTwo = \"T\";\n\n\t\tDNASequence s = new DNASequence(dnaLineOne+dnaLineTwo);\n\t\ts.setAccession(new AccessionID(id));\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tFastaWriterHelper.writeSequence(baos, s);\n\n\t\tString actual = new String(baos.toByteArray());\n\t\tString expected = String.format(\">%s%n%s%n%s%n\", id, dnaLineOne, dnaLineTwo);\n\n\t\tassertThat(\"Writer not as expected\", actual, is(expected));\n\t}\n\n\t@Test\n\tpublic void writeFastaEqualToLineLength() throws Exception {\n\t\tString id  = \"Example\";\n\t\tString dna = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT\";\n\n\t\tDNASequence s = new DNASequence(dna);\n\t\ts.setAccession(new AccessionID(id));\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tFastaWriterHelper.writeSequence(baos, s);\n\n\t\tString actual = new String(baos.toByteArray());\n\t\tString expected = String.format(\">%s%n%s%n\", id, dna);\n\n\t\tassertThat(\"Writer not as expected\", actual, is(expected));\n\t}\n\n}\n","changedTest":"","commitMessage":"remove FastaWriter main\n","test_commitMessage":"","allZero":false}