{"repository":"biojava","prod_path":"biojava3-alignment/src/main/java/org/biojava3/alignment/FractionalSimilarityScorer.java","test_path":"biojava3-alignment/src/test/java/org/biojava3/alignment/FractionalSimilarityScorerTest.java","prod_time":"2010-07-22 20:31:34","test_time":"2010-07-27 13:26:45","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":1,"add_condition_line":0,"add_field_line":0,"add_import_line":1,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":1,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"06022b018b30e0eee2018594513bcc7aa7b979c0","test_commitID":"0118cdbd110bbd3b2355c465bb633dbc150cb032","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 21, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport org.biojava3.alignment.template.AlignedSequence;\nimport org.biojava3.alignment.template.PairwiseSequenceAligner;\nimport org.biojava3.alignment.template.PairwiseSequenceScorer;\nimport org.biojava3.alignment.template.SequencePair;\nimport org.biojava3.core.sequence.template.Compound;\nimport org.biojava3.core.sequence.template.Sequence;\n\n/**\n * Implements an algorithm which computes a score for a sequence alignment pair.  The reported score is the number of\n * alignment columns which have similar {@link Compound}s.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} of the alignment pair is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class FractionalSimilarityScorer<S extends Sequence<C>, C extends Compound>\n        implements PairwiseSequenceScorer<S, C> {\n\n    private PairwiseSequenceAligner<S, C> aligner;\n    private SequencePair<S, C> pair;\n    private int max, score;\n\n    /**\n     * Creates a fractional similarity scorer for a pair of sequences aligned by the given pairwise sequence aligner.\n     *\n     * @param aligner a pairwise sequence aligner\n     */\n    public FractionalSimilarityScorer(PairwiseSequenceAligner<S, C> aligner) {\n        this.aligner = aligner;\n    }\n\n    /**\n     * Creates a fractional similarity scorer for an aligned pair of sequences.\n     *\n     * @param pair an aligned pair of sequences\n     */\n    public FractionalSimilarityScorer(SequencePair<S, C> pair) {\n        set(pair);\n    }\n\n    @Override\n    public SequencePair<S, C> getPair() {\n        if (pair == null && aligner != null) {\n            set(aligner.getPair());\n        }\n        return pair;\n    }\n\n    @Override\n    public int getMaxScore() {\n        if (pair == null && aligner != null) {\n            set(aligner.getPair());\n        }\n        return max;\n    }\n\n    @Override\n    public int getMinScore() {\n        return 0;\n    }\n\n    @Override\n    public int getScore() {\n        if (pair == null && aligner != null) {\n            set(aligner.getPair());\n        }\n        return score;\n    }\n\n    // helper method for initialization\n    private void set(SequencePair<S, C> pair) {\n        this.pair = pair;\n        max = pair.getLength();\n        score = pair.getNumSimilars();\n    }\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 21, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport org.biojava3.alignment.template.AbstractScorer;\nimport org.biojava3.alignment.template.AlignedSequence;\nimport org.biojava3.alignment.template.PairwiseSequenceAligner;\nimport org.biojava3.alignment.template.PairwiseSequenceScorer;\nimport org.biojava3.alignment.template.SequencePair;\nimport org.biojava3.core.sequence.template.Compound;\nimport org.biojava3.core.sequence.template.Sequence;\n\n/**\n * Implements an algorithm which computes a score for a sequence alignment pair.  The reported score is the number of\n * alignment columns which have similar {@link Compound}s.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} of the alignment pair is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class FractionalSimilarityScorer<S extends Sequence<C>, C extends Compound> extends AbstractScorer\n        implements PairwiseSequenceScorer<S, C> {\n\n    private PairwiseSequenceAligner<S, C> aligner;\n    private SequencePair<S, C> pair;\n    private int max, score;\n\n    /**\n     * Creates a fractional similarity scorer for a pair of sequences aligned by the given pairwise sequence aligner.\n     *\n     * @param aligner a pairwise sequence aligner\n     */\n    public FractionalSimilarityScorer(PairwiseSequenceAligner<S, C> aligner) {\n        this.aligner = aligner;\n    }\n\n    /**\n     * Creates a fractional similarity scorer for an aligned pair of sequences.\n     *\n     * @param pair an aligned pair of sequences\n     */\n    public FractionalSimilarityScorer(SequencePair<S, C> pair) {\n        set(pair);\n    }\n\n    @Override\n    public SequencePair<S, C> getPair() {\n        if (pair == null && aligner != null) {\n            set(aligner.getPair());\n        }\n        return pair;\n    }\n\n    @Override\n    public int getMaxScore() {\n        if (pair == null && aligner != null) {\n            set(aligner.getPair());\n        }\n        return max;\n    }\n\n    @Override\n    public int getMinScore() {\n        return 0;\n    }\n\n    @Override\n    public int getScore() {\n        if (pair == null && aligner != null) {\n            set(aligner.getPair());\n        }\n        return score;\n    }\n\n    // helper method for initialization\n    private void set(SequencePair<S, C> pair) {\n        this.pair = pair;\n        max = pair.getLength();\n        score = pair.getNumSimilars();\n    }\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Jun 30, 2010\n * Author: Mark \n *\n */\n\npackage org.biojava3.alignment;\n\nimport static org.junit.Assert.*;\n\nimport org.biojava3.alignment.template.GapPenalty;\nimport org.biojava3.alignment.template.PairwiseSequenceScorer;\nimport org.biojava3.alignment.template.SubstitutionMatrix;\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class FractionalSimilarityScorerTest {\n\n    private ProteinSequence query, target;\n    private GapPenalty gaps;\n    private SubstitutionMatrix<AminoAcidCompound> blosum62;\n    private NeedlemanWunsch<ProteinSequence, AminoAcidCompound> alignment, self;\n    private PairwiseSequenceScorer<ProteinSequence, AminoAcidCompound> scorer1, scorer2;\n\n    @Before\n    public void setup() {\n        query = new ProteinSequence(\"ARXB\");\n        target = new ProteinSequence(\"RADG\");\n        gaps = new SimpleGapPenalty((short) 2, (short) 1);\n        blosum62 = new SimpleSubstitutionMatrix<AminoAcidCompound>();\n        alignment = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, target, gaps, blosum62);\n        self = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, query, gaps, blosum62);\n        scorer1 = new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(alignment);\n        scorer2 = new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(self);\n    }\n\n    @Test\n    public void testFractionalSimilarityScorerPairwiseSequenceAlignerOfSC() {\n        assertNotNull(new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(alignment));\n    }\n\n    @Test\n    public void testFractionalSimilarityScorerSequencePairOfSC() {\n        assertNotNull(new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(alignment.getPair()));\n    }\n\n    @Test\n    public void testGetPair() {\n        assertEquals(scorer1.getPair(), alignment.getPair());\n        assertEquals(scorer2.getPair(), self.getPair());\n    }\n\n    @Test\n    public void testGetMaxScore() {\n        assertEquals(scorer1.getMaxScore(), 5);\n        assertEquals(scorer2.getMaxScore(), 4);\n    }\n\n    @Test\n    public void testGetMinScore() {\n        assertEquals(scorer1.getMinScore(), 0);\n        assertEquals(scorer2.getMinScore(), 0);\n    }\n\n    @Test\n    public void testGetScore() {\n        assertEquals(scorer1.getScore(), 2);\n        assertEquals(scorer2.getScore(), 3);\n    }\n\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Jun 30, 2010\n * Author: Mark \n *\n */\n\npackage org.biojava3.alignment;\n\nimport static org.junit.Assert.*;\n\nimport org.biojava3.alignment.template.GapPenalty;\nimport org.biojava3.alignment.template.PairwiseSequenceScorer;\nimport org.biojava3.alignment.template.SubstitutionMatrix;\nimport org.biojava3.core.sequence.ProteinSequence;\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class FractionalSimilarityScorerTest {\n\n    private ProteinSequence query, target;\n    private GapPenalty gaps;\n    private SubstitutionMatrix<AminoAcidCompound> blosum62;\n    private NeedlemanWunsch<ProteinSequence, AminoAcidCompound> alignment, self;\n    private PairwiseSequenceScorer<ProteinSequence, AminoAcidCompound> scorer1, scorer2;\n\n    @Before\n    public void setup() {\n        query = new ProteinSequence(\"ARXB\");\n        target = new ProteinSequence(\"RADG\");\n        gaps = new SimpleGapPenalty((short) 2, (short) 1);\n        blosum62 = SubstitutionMatrixHelper.getBlosum62();\n        alignment = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, target, gaps, blosum62);\n        self = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, query, gaps, blosum62);\n        scorer1 = new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(alignment);\n        scorer2 = new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(self);\n    }\n\n    @Test\n    public void testFractionalSimilarityScorerPairwiseSequenceAlignerOfSC() {\n        assertNotNull(new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(alignment));\n    }\n\n    @Test\n    public void testFractionalSimilarityScorerSequencePairOfSC() {\n        assertNotNull(new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(alignment.getPair()));\n    }\n\n    @Test\n    public void testGetPair() {\n        assertEquals(scorer1.getPair(), alignment.getPair());\n        assertEquals(scorer2.getPair(), self.getPair());\n    }\n\n    @Test\n    public void testGetMaxScore() {\n        assertEquals(scorer1.getMaxScore(), 5);\n        assertEquals(scorer2.getMaxScore(), 4);\n    }\n\n    @Test\n    public void testGetMinScore() {\n        assertEquals(scorer1.getMinScore(), 0);\n        assertEquals(scorer2.getMinScore(), 0);\n    }\n\n    @Test\n    public void testGetScore() {\n        assertEquals(scorer1.getScore(), 2);\n        assertEquals(scorer2.getScore(), 3);\n    }\n\n}\n","commitMessage":"added distance and similarity methods to Scorer interface\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8137 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"updated tests to use SubstitutionMatrixHelper\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8144 7c6358e6-4a41-0410-a743-a5b2a554c398\n","allZero":false}