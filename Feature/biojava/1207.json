{"repository":"biojava","prod_path":"biojava3-alignment/src/main/java/org/biojava3/alignment/SimpleSubstitutionMatrix.java","test_path":"biojava3-alignment/src/test/java/org/biojava3/alignment/SimpleSubstitutionMatrixTest.java","prod_time":"2010-06-16 00:48:55","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":3,"add_classname_line":0,"add_condition_line":1,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":1,"del_call_line":3,"del_classname_line":0,"del_condition_line":1,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":1,"del_return_line":1,"label":"NEGATIVE","prod_commitID":"4a07e7e8904ebd8832876dfcb7212a1246fa6505","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 9, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\nimport org.biojava3.alignment.template.SubstitutionMatrix;\nimport org.biojava3.core.sequence.template.Compound;\nimport org.biojava3.core.sequence.template.CompoundSet;\n\n/**\n * Implements a data structure which holds the score (penalty or bonus) given during alignment for the exchange of one\n * {@link Compound} in a sequence for another.\n *\n * @author Mark Chapman\n * @param <C> each element of the matrix corresponds to a pair of {@link Compound}s of type C\n */\npublic class SimpleSubstitutionMatrix<C extends Compound> implements SubstitutionMatrix<C> {\n\n    private static final String comment = \"#\";\n    private static final String newLine = System.getProperty(\"line.separator\");\n\n    private CompoundSet<C> compoundSet;\n    private String description, name;\n    private short[][] matrix;\n    private short max, min;\n    private List<C> rows, cols;\n\n    /**\n     * Creates a substitution matrix using the defaults.\n     *\n     * @throws ClassCastException if {@link Compound} type of default compound set differs from type parameter C\n     * @throws IllegalStateException if default SimpleSubstitutionMatrix has not been set\n     */\n    @SuppressWarnings(\"unchecked\") // explained possible ClassCastException\n    public SimpleSubstitutionMatrix() {\n        this((SimpleSubstitutionMatrix<C>) Default.getInstance());\n    }\n\n    /**\n     * Creates a copy of the given substitution matrix.\n     *\n     * @param original substitution matrix to copy\n     */\n    public SimpleSubstitutionMatrix(SubstitutionMatrix<C> original) {\n        this(original.getCompoundSet(), original.toString(), original.getName());\n    }\n\n    /**\n     * Creates a substitution matrix by reading in a file.\n     *\n     * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n     * @param fileInput file parsed for a substitution matrix\n     * @throws FileNotFoundException if fileInput parameter cannot be read\n     */\n    public SimpleSubstitutionMatrix(CompoundSet<C> compoundSet, File fileInput) throws FileNotFoundException {\n        this(compoundSet, new BufferedReader(new FileReader(fileInput)), fileInput.getName());\n    }\n\n    /**\n     * Creates a substitution matrix by parsing some input.\n     *\n     * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n     * @param input input parsed for a substitution matrix\n     * @param name the name (short description) of this matrix\n     */\n    public SimpleSubstitutionMatrix(CompoundSet<C> compoundSet, Reader input, String name) {\n        this(compoundSet, new Scanner(input), name);\n    }\n\n    /**\n     * Creates a substitution matrix by parsing a String.\n     *\n     * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n     * @param matrixInput String parsed for a substitution matrix\n     * @param name the name (short description) of this matrix\n     */\n    public SimpleSubstitutionMatrix(CompoundSet<C> compoundSet, String matrixInput, String name) {\n        this(compoundSet, new Scanner(matrixInput), name);\n    }\n\n    /**\n     * Creates an identity substitution matrix from match and replace values.\n     *\n     * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n     * @param match matrix value used for equivalent {@link Compound}s\n     * @param replace matrix value used for differing {@link Compound}s\n     */\n    public SimpleSubstitutionMatrix(CompoundSet<C> compoundSet, short match, short replace) {\n        this.compoundSet = compoundSet;\n        description = \"Identity matrix. All replaces and all matches are treated equally.\";\n        name = \"IDENTITY_\" + match + \"_\" + replace;\n        max = (match > replace) ? match : replace;\n        min = (match < replace) ? match : replace;\n        rows = cols = compoundSet.getAllCompounds();\n        matrix = new short[rows.size()][cols.size()];\n        for (int r = 0; r < rows.size(); r++) {\n            for (int c = 0; c < cols.size(); c++) {\n                try {\n                    matrix[r][c] = (compoundSet.compoundsEquivalent(rows.get(r), cols.get(c))) ? match : replace;\n                } catch (UnsupportedOperationException e) {\n                    matrix[r][c] = (r == c) ? match : replace;\n                }\n            }\n        }\n    }\n\n    // helper constructor that creates a substitution matrix by parsing input\n    private SimpleSubstitutionMatrix(CompoundSet<C> compoundSet, Scanner input, String name) {\n        this.compoundSet = compoundSet;\n        this.name = name;\n        max = Short.MIN_VALUE;\n        min = Short.MAX_VALUE;\n        rows = new ArrayList<C>();\n        cols = new ArrayList<C>();\n        StringBuilder descriptionIn = new StringBuilder();\n        List<short[]> matrixIn = new ArrayList<short[]>();\n        while(input.hasNextLine()) {\n            String line = input.nextLine();\n            if (line.startsWith(comment)) {\n                descriptionIn.append(line + newLine);\n            } else if (!line.trim().isEmpty()) {\n                StringTokenizer st = new StringTokenizer(line);\n                if (cols.isEmpty()) {\n                    while (st.hasMoreTokens()) {\n                        cols.add(compoundSet.getCompoundForString(st.nextToken()));\n                    }\n                } else {\n                    rows.add(compoundSet.getCompoundForString(st.nextToken()));\n                    short[] row = new short[cols.size()];\n                    for (int i = 0; i < row.length && st.hasMoreTokens(); i++) {\n                        row[i] = Short.parseShort(st.nextToken());\n                        max = (max > row[i]) ? max : row[i];\n                        min = (min < row[i]) ? min : row[i];\n                    }\n                    matrixIn.add(row);\n                }\n            }\n        }\n        input.close();\n        description = descriptionIn.toString();\n        matrix = new short[rows.size()][cols.size()];\n        for (int i = 0; i < rows.size(); i++) {\n            matrix[i] = matrixIn.get(i);\n        }\n    }\n\n    @Override\n    public CompoundSet<C> getCompoundSet() {\n        return compoundSet;\n    }\n\n    @Override\n    public String getDescription() {\n        return description;\n    }\n\n    @Override\n    public short[][] getMatrix() {\n        short[][] copy = new short[matrix.length][matrix[0].length];\n        for (int i = 0; i < copy.length; i++) {\n            copy[i] = Arrays.copyOf(matrix[i], matrix[i].length);\n        }\n        return copy;\n    }\n\n    @Override\n    public String getMatrixAsString() {\n        StringBuilder s = new StringBuilder();\n        int lengthCompound = compoundSet.getMaxSingleCompoundStringLength(),\n                lengthRest = getMax(Short.toString(min).length(), Short.toString(max).length(), lengthCompound) + 1;\n        String padCompound = \"%\" + Integer.toString(lengthCompound) + \"s\",\n                padRest = \"%\" + Integer.toString(lengthRest);\n        for (int i = 0; i < lengthCompound; i++) {\n            s.append(\" \");\n        }\n        for (C col : cols) {\n            s.append(String.format(padRest + \"s\", compoundSet.getStringForCompound(col)));\n        }\n        s.append(newLine);\n        for (C row : rows) {\n            s.append(String.format(padCompound, compoundSet.getStringForCompound(row)));\n            for (C col : cols) {\n                s.append(String.format(padRest + \"d\", getValue(row, col)));\n            }\n            s.append(newLine);\n        }\n        return s.toString();\n    }\n\n    @Override\n    public short getMaxValue() {\n        return max;\n    }\n\n    @Override\n    public short getMinValue() {\n        return min;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public short getValue(C from, C to) {\n        int row = rows.indexOf(from), col = cols.indexOf(to);\n        if (row == -1 || col == -1) {\n            row = cols.indexOf(from);\n            col = rows.indexOf(to);\n            if (row == -1 || col == -1) {\n                return min;\n            }\n        }\n        return matrix[row][col];\n    }\n\n    @Override\n    public SubstitutionMatrix<C> normalizeMatrix(short scale) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    @Override\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    @Override\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * Returns in a format similar to the standard NCBI files.\n     */\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        StringTokenizer st = new StringTokenizer(description, \"\\n\\r\");\n        while (st.hasMoreTokens()) {\n            String line = st.nextToken();\n            if (!line.startsWith(comment))\n                s.append(comment);\n            s.append(line + newLine);\n        }\n        s.append(getMatrixAsString());\n        return s.toString();\n    }\n\n    // helper method that returns the maximum of three int's\n    private static int getMax(int i1, int i2, int i3) {\n        return i1 > i2 ? (i1 > i3 ? i1 : i3) : (i2 > i3 ? i2 : i3);\n    }\n\n    /**\n     * Stores the default values for the substitution matrices.\n     */\n    public static class Default {\n\n        private static SubstitutionMatrix<?> instance;\n\n        /**\n         * Returns the current default substitution matrix.\n         *\n         * @return the current default substitution matrix\n         * @throws IllegalStateException if default SimpleSubstitutionMatrix has not been set\n         */\n        public static SubstitutionMatrix<?> getInstance() {\n            if (instance == null) {\n                throw new IllegalStateException(\"Default SimpleSubstitutionMatrix has not been set.\");\n            }\n            return instance;\n        }\n\n        /**\n         * Sets the default as a copy of the given substitution matrix.\n         *\n         * @param <C> each element of the matrix corresponds to a pair of {@link Compound}s of type C\n         * @param original substitution matrix to copy\n         */\n        public static <C extends Compound> void set(SubstitutionMatrix<C> original) {\n            instance = new SimpleSubstitutionMatrix<C>(original);\n        }\n\n        /**\n         * Sets the default substitution matrix by reading in a file.\n         *\n         * @param <C> each element of the matrix corresponds to a pair of {@link Compound}s of type C\n         * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n         * @param fileInput file parsed for a substitution matrix\n         * @throws FileNotFoundException if fileInput parameter cannot be read\n         */\n        public static <C extends Compound> void set(CompoundSet<C> compoundSet, File fileInput)\n                throws FileNotFoundException {\n            instance = new SimpleSubstitutionMatrix<C>(compoundSet, fileInput);\n        }\n\n        /**\n         * Sets the default substitution matrix by parsing some input.\n         *\n         * @param <C> each element of the matrix corresponds to a pair of {@link Compound}s of type C\n         * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n         * @param input input parsed for a substitution matrix\n         * @param name the name (short description) of this matrix\n         */\n        public static <C extends Compound> void set(CompoundSet<C> compoundSet, Reader input, String name) {\n            instance = new SimpleSubstitutionMatrix<C>(compoundSet, input, name);\n        }\n\n        /**\n         * Sets the default substitution matrix from a String.\n         *\n         * @param <C> each element of the matrix corresponds to a pair of {@link Compound}s of type C\n         * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n         * @param matrixInput file parsed for a substitution matrix\n         * @param name the name (short description) of this matrix\n         */\n        public static <C extends Compound> void set(CompoundSet<C> compoundSet, String matrixInput, String name) {\n            instance = new SimpleSubstitutionMatrix<C>(compoundSet, matrixInput, name);\n        }\n\n        /**\n         * Sets the default to an identity substitution matrix from match and replace values.\n         *\n         * @param <C> each element of the matrix corresponds to a pair of {@link Compound}s of type C\n         * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n         * @param match matrix value used for equivalent {@link Compound}s\n         * @param replace matrix value used for differing {@link Compound}s\n         */\n        public static <C extends Compound> void set(CompoundSet<C> compoundSet, short match, short replace) {\n            instance = new SimpleSubstitutionMatrix<C>(compoundSet, match, replace);\n        }\n\n    }\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 9, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\nimport org.biojava3.alignment.template.SubstitutionMatrix;\nimport org.biojava3.core.sequence.template.Compound;\nimport org.biojava3.core.sequence.template.CompoundSet;\n\n/**\n * Implements a data structure which holds the score (penalty or bonus) given during alignment for the exchange of one\n * {@link Compound} in a sequence for another.\n *\n * @author Mark Chapman\n * @param <C> each element of the matrix corresponds to a pair of {@link Compound}s of type C\n */\npublic class SimpleSubstitutionMatrix<C extends Compound> implements SubstitutionMatrix<C> {\n\n    private static final String comment = \"#\";\n    private static final String newLine = System.getProperty(\"line.separator\");\n\n    private CompoundSet<C> compoundSet;\n    private String description, name;\n    private short[][] matrix;\n    private short max, min;\n    private List<C> rows, cols;\n\n    /**\n     * Creates a substitution matrix using the defaults.\n     *\n     * @throws ClassCastException if {@link Compound} type of default compound set differs from type parameter C\n     * @throws IllegalStateException if default SimpleSubstitutionMatrix has not been set\n     */\n    // @SuppressWarnings(\"unchecked\") // explained possible ClassCastException\n    public SimpleSubstitutionMatrix() {\n        // TODO proper type checking\n        this((SimpleSubstitutionMatrix<C>) Default.getInstance());\n    }\n\n    /**\n     * Creates a copy of the given substitution matrix.\n     *\n     * @param original substitution matrix to copy\n     */\n    public SimpleSubstitutionMatrix(SubstitutionMatrix<C> original) {\n        this(original.getCompoundSet(), original.toString(), original.getName());\n    }\n\n    /**\n     * Creates a substitution matrix by reading in a file.\n     *\n     * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n     * @param fileInput file parsed for a substitution matrix\n     * @throws FileNotFoundException if fileInput parameter cannot be read\n     */\n    public SimpleSubstitutionMatrix(CompoundSet<C> compoundSet, File fileInput) throws FileNotFoundException {\n        this(compoundSet, new BufferedReader(new FileReader(fileInput)), fileInput.getName());\n    }\n\n    /**\n     * Creates a substitution matrix by parsing some input.\n     *\n     * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n     * @param input input parsed for a substitution matrix\n     * @param name the name (short description) of this matrix\n     */\n    public SimpleSubstitutionMatrix(CompoundSet<C> compoundSet, Reader input, String name) {\n        this(compoundSet, new Scanner(input), name);\n    }\n\n    /**\n     * Creates a substitution matrix by parsing a String.\n     *\n     * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n     * @param matrixInput String parsed for a substitution matrix\n     * @param name the name (short description) of this matrix\n     */\n    public SimpleSubstitutionMatrix(CompoundSet<C> compoundSet, String matrixInput, String name) {\n        this(compoundSet, new Scanner(matrixInput), name);\n    }\n\n    /**\n     * Creates an identity substitution matrix from match and replace values.\n     *\n     * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n     * @param match matrix value used for equivalent {@link Compound}s\n     * @param replace matrix value used for differing {@link Compound}s\n     */\n    public SimpleSubstitutionMatrix(CompoundSet<C> compoundSet, short match, short replace) {\n        this.compoundSet = compoundSet;\n        description = \"Identity matrix. All replaces and all matches are treated equally.\";\n        name = \"IDENTITY_\" + match + \"_\" + replace;\n        max = (match > replace) ? match : replace;\n        min = (match < replace) ? match : replace;\n        rows = cols = compoundSet.getAllCompounds();\n        matrix = new short[rows.size()][cols.size()];\n        for (int r = 0; r < rows.size(); r++) {\n            for (int c = 0; c < cols.size(); c++) {\n                try {\n                    matrix[r][c] = (compoundSet.compoundsEquivalent(rows.get(r), cols.get(c))) ? match : replace;\n                } catch (UnsupportedOperationException e) {\n                    matrix[r][c] = (r == c) ? match : replace;\n                }\n            }\n        }\n    }\n\n    // helper constructor that creates a substitution matrix by parsing input\n    private SimpleSubstitutionMatrix(CompoundSet<C> compoundSet, Scanner input, String name) {\n        this.compoundSet = compoundSet;\n        this.name = name;\n        max = Short.MIN_VALUE;\n        min = Short.MAX_VALUE;\n        rows = new ArrayList<C>();\n        cols = new ArrayList<C>();\n        StringBuilder descriptionIn = new StringBuilder();\n        List<short[]> matrixIn = new ArrayList<short[]>();\n        while(input.hasNextLine()) {\n            String line = input.nextLine();\n            if (line.startsWith(comment)) {\n                descriptionIn.append(line + newLine);\n            } else if (!line.trim().isEmpty()) {\n                StringTokenizer st = new StringTokenizer(line);\n                if (cols.isEmpty()) {\n                    while (st.hasMoreTokens()) {\n                        cols.add(compoundSet.getCompoundForString(st.nextToken()));\n                    }\n                } else {\n                    rows.add(compoundSet.getCompoundForString(st.nextToken()));\n                    short[] row = new short[cols.size()];\n                    for (int i = 0; i < row.length && st.hasMoreTokens(); i++) {\n                        row[i] = Short.parseShort(st.nextToken());\n                        max = (max > row[i]) ? max : row[i];\n                        min = (min < row[i]) ? min : row[i];\n                    }\n                    matrixIn.add(row);\n                }\n            }\n        }\n        input.close();\n        description = descriptionIn.toString();\n        matrix = new short[rows.size()][cols.size()];\n        for (int i = 0; i < rows.size(); i++) {\n            matrix[i] = matrixIn.get(i);\n        }\n    }\n\n    @Override\n    public CompoundSet<C> getCompoundSet() {\n        return compoundSet;\n    }\n\n    @Override\n    public String getDescription() {\n        return description;\n    }\n\n    @Override\n    public short[][] getMatrix() {\n        short[][] copy = new short[matrix.length][matrix[0].length];\n        for (int i = 0; i < copy.length; i++) {\n            copy[i] = Arrays.copyOf(matrix[i], matrix[i].length);\n        }\n        return copy;\n    }\n\n    @Override\n    public String getMatrixAsString() {\n        StringBuilder s = new StringBuilder();\n        int lengthCompound = compoundSet.getMaxSingleCompoundStringLength(), lengthRest =\n                Math.max(Math.max(Short.toString(min).length(), Short.toString(max).length()), lengthCompound) + 1;\n        String padCompound = \"%\" + Integer.toString(lengthCompound) + \"s\",\n                padRest = \"%\" + Integer.toString(lengthRest);\n        for (int i = 0; i < lengthCompound; i++) {\n            s.append(\" \");\n        }\n        for (C col : cols) {\n            s.append(String.format(padRest + \"s\", compoundSet.getStringForCompound(col)));\n        }\n        s.append(newLine);\n        for (C row : rows) {\n            s.append(String.format(padCompound, compoundSet.getStringForCompound(row)));\n            for (C col : cols) {\n                s.append(String.format(padRest + \"d\", getValue(row, col)));\n            }\n            s.append(newLine);\n        }\n        return s.toString();\n    }\n\n    @Override\n    public short getMaxValue() {\n        return max;\n    }\n\n    @Override\n    public short getMinValue() {\n        return min;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public short getValue(C from, C to) {\n        int row = rows.indexOf(from), col = cols.indexOf(to);\n        if (row == -1 || col == -1) {\n            row = cols.indexOf(from);\n            col = rows.indexOf(to);\n            if (row == -1 || col == -1) {\n                return min;\n            }\n        }\n        return matrix[row][col];\n    }\n\n    @Override\n    public SubstitutionMatrix<C> normalizeMatrix(short scale) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    @Override\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    @Override\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * Returns in a format similar to the standard NCBI files.\n     */\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        StringTokenizer st = new StringTokenizer(description, \"\\n\\r\");\n        while (st.hasMoreTokens()) {\n            String line = st.nextToken();\n            if (!line.startsWith(comment)) {\n                s.append(comment);\n            }\n            s.append(line + newLine);\n        }\n        s.append(getMatrixAsString());\n        return s.toString();\n    }\n\n    /**\n     * Stores the default values for the substitution matrices.\n     */\n    public static class Default {\n\n        private static SubstitutionMatrix<?> instance;\n\n        /**\n         * Returns the current default substitution matrix.\n         *\n         * @return the current default substitution matrix\n         * @throws IllegalStateException if default SimpleSubstitutionMatrix has not been set\n         */\n        public static SubstitutionMatrix<?> getInstance() {\n            if (instance == null) {\n                throw new IllegalStateException(\"Default SimpleSubstitutionMatrix has not been set.\");\n            }\n            return instance;\n        }\n\n        /**\n         * Sets the default as a copy of the given substitution matrix.\n         *\n         * @param <C> each element of the matrix corresponds to a pair of {@link Compound}s of type C\n         * @param original substitution matrix to copy\n         */\n        public static <C extends Compound> void set(SubstitutionMatrix<C> original) {\n            instance = new SimpleSubstitutionMatrix<C>(original);\n        }\n\n        /**\n         * Sets the default substitution matrix by reading in a file.\n         *\n         * @param <C> each element of the matrix corresponds to a pair of {@link Compound}s of type C\n         * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n         * @param fileInput file parsed for a substitution matrix\n         * @throws FileNotFoundException if fileInput parameter cannot be read\n         */\n        public static <C extends Compound> void set(CompoundSet<C> compoundSet, File fileInput)\n                throws FileNotFoundException {\n            instance = new SimpleSubstitutionMatrix<C>(compoundSet, fileInput);\n        }\n\n        /**\n         * Sets the default substitution matrix by parsing some input.\n         *\n         * @param <C> each element of the matrix corresponds to a pair of {@link Compound}s of type C\n         * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n         * @param input input parsed for a substitution matrix\n         * @param name the name (short description) of this matrix\n         */\n        public static <C extends Compound> void set(CompoundSet<C> compoundSet, Reader input, String name) {\n            instance = new SimpleSubstitutionMatrix<C>(compoundSet, input, name);\n        }\n\n        /**\n         * Sets the default substitution matrix from a String.\n         *\n         * @param <C> each element of the matrix corresponds to a pair of {@link Compound}s of type C\n         * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n         * @param matrixInput file parsed for a substitution matrix\n         * @param name the name (short description) of this matrix\n         */\n        public static <C extends Compound> void set(CompoundSet<C> compoundSet, String matrixInput, String name) {\n            instance = new SimpleSubstitutionMatrix<C>(compoundSet, matrixInput, name);\n        }\n\n        /**\n         * Sets the default to an identity substitution matrix from match and replace values.\n         *\n         * @param <C> each element of the matrix corresponds to a pair of {@link Compound}s of type C\n         * @param compoundSet the {@link CompoundSet} on which the matrix is defined\n         * @param match matrix value used for equivalent {@link Compound}s\n         * @param replace matrix value used for differing {@link Compound}s\n         */\n        public static <C extends Compound> void set(CompoundSet<C> compoundSet, short match, short replace) {\n            instance = new SimpleSubstitutionMatrix<C>(compoundSet, match, replace);\n        }\n\n    }\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Jun 10, 2010\n * Author: Mark \n *\n */\n\npackage org.biojava3.alignment;\n\nimport static org.junit.Assert.*;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.InputStreamReader;\n\nimport org.biojava3.core.sequence.compound.AminoAcidCompound;\nimport org.biojava3.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava3.core.sequence.compound.CodonCompound;\nimport org.biojava3.core.sequence.compound.DNACompoundSet;\nimport org.biojava3.core.sequence.compound.NucleotideCompound;\nimport org.biojava3.core.sequence.template.CompoundSet;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\npublic class SimpleSubstitutionMatrixTest {\n\n    @Test(expected=FileNotFoundException.class)\n    public void testSimpleSubstitutionMatrixNotFound() throws FileNotFoundException {\n        new SimpleSubstitutionMatrix<AminoAcidCompound>(new AminoAcidCompoundSet(), new File(\"blosum63.txt\"));\n    }\n\n    @Test(expected=IllegalStateException.class)\n    public void testSimpleSubstitutionMatrixNull() {\n        new SimpleSubstitutionMatrix<AminoAcidCompound>();\n    }\n\n    @Ignore\n    @Test(expected=ClassCastException.class)\n    public void testSimpleSubstitutionMatrixWrong() {\n        SimpleSubstitutionMatrix.Default.set(new AminoAcidCompoundSet(), new InputStreamReader(\n                SimpleSubstitutionMatrix.class.getResourceAsStream(\"/blosum62.txt\") ), \"blosum62\");\n        new SimpleSubstitutionMatrix<CodonCompound>();\n        // TODO why does this not cause ClassCastException? loses typing at runtime?\n    }\n\n    @Test()\n    public void testSimpleSubstitutionMatrix() throws FileNotFoundException {\n        CompoundSet<AminoAcidCompound> compoundSet = new AminoAcidCompoundSet();\n        SimpleSubstitutionMatrix.Default.set(compoundSet, new InputStreamReader(\n                SimpleSubstitutionMatrix.class.getResourceAsStream(\"/blosum62.txt\") ), \"blosum62\");\n        SimpleSubstitutionMatrix<AminoAcidCompound> matrix = new SimpleSubstitutionMatrix<AminoAcidCompound>();\n        assertEquals(matrix.getCompoundSet(), compoundSet);\n        assertEquals(matrix.getName(), \"blosum62\");\n        assertEquals(matrix.getMaxValue(), 11);\n        assertEquals(matrix.getMinValue(), -4);\n    }\n\n    @Test\n    public void testSimpleSubstitutionMatrixSubstitutionMatrixOfC() {\n        SimpleSubstitutionMatrix<AminoAcidCompound> matrix1 =\n                new SimpleSubstitutionMatrix<AminoAcidCompound>(new AminoAcidCompoundSet(), new InputStreamReader(\n                SimpleSubstitutionMatrix.class.getResourceAsStream(\"/blosum62.txt\") ), \"blosum62\"),\n                matrix2 = new SimpleSubstitutionMatrix<AminoAcidCompound>(matrix1);\n        assertEquals(matrix2.getCompoundSet(), matrix1.getCompoundSet());\n        assertEquals(matrix2.getName(), \"blosum62\");\n        assertEquals(matrix2.getMaxValue(), 11);\n        assertEquals(matrix2.getMinValue(), -4);\n    }\n\n    @Test\n    public void testSimpleSubstitutionMatrixCompoundSetOfCStringString() {\n        SimpleSubstitutionMatrix<NucleotideCompound> matrix = new SimpleSubstitutionMatrix<NucleotideCompound>(\n                new DNACompoundSet(), \"# Test\\nA C G T\\nA 5 0 0 0\\nC 0 5 0 0\\nG 0 0 5 0\\nT 0 0 0 1\\n\", \"SimpleDNA\");\n        assertEquals(matrix.getMatrixAsString().substring(2,9), \"A C G T\");\n    }\n\n    @Test\n    public void testSimpleSubstitutionMatrixCompoundSetOfCShortShort() {\n        SimpleSubstitutionMatrix<AminoAcidCompound> matrix =\n                new SimpleSubstitutionMatrix<AminoAcidCompound>(new AminoAcidCompoundSet(), (short) 5, (short) 1);\n        assertEquals(matrix.getName(), \"IDENTITY_5_1\");\n    }\n\n    @Test\n    public void testSetDescription() {\n        SimpleSubstitutionMatrix<AminoAcidCompound> matrix =\n                new SimpleSubstitutionMatrix<AminoAcidCompound>(new AminoAcidCompoundSet(), new InputStreamReader(\n                SimpleSubstitutionMatrix.class.getResourceAsStream(\"/blosum62.txt\") ), \"blosum62\");\n        assertEquals(matrix.getDescription().substring(0, 2), \"# \");\n        matrix.setDescription(\"blah\");\n        assertEquals(matrix.getDescription().substring(0, 2), \"bl\");\n    }\n\n    @Test\n    public void testSetName() {\n        SimpleSubstitutionMatrix<AminoAcidCompound> matrix =\n                new SimpleSubstitutionMatrix<AminoAcidCompound>(new AminoAcidCompoundSet(), new InputStreamReader(\n                SimpleSubstitutionMatrix.class.getResourceAsStream(\"/blosum62.txt\") ), \"blosum62\");\n        assertEquals(matrix.getName(), \"blosum62\");\n        matrix.setName(\"blah\");\n        assertEquals(matrix.getName(), \"blah\");\n    }\n\n    @Test\n    public void testToString() {\n        SimpleSubstitutionMatrix<NucleotideCompound> matrix = new SimpleSubstitutionMatrix<NucleotideCompound>(\n                new DNACompoundSet(), \"# Test\\nA C  G T\\nA 5  0 0 0\\nC 0 5 0 0 \\nG 0 0 5 0\\n T 0 0 0 1\\n\", \"DNAtest\");\n        assertEquals(matrix.toString().substring(0,6), \"# Test\");\n        String nl = System.getProperty(\"line.separator\");\n        assertEquals(matrix.toString(), \"# Test\" + nl + \"  A C G T\" + nl + \"A 5 0 0 0\" + nl + \"C 0 5 0 0\" + nl +\n                \"G 0 0 5 0\" + nl + \"T 0 0 0 1\" + nl);\n    }\n\n}\n","changedTest":"","commitMessage":"updates\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@7960 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"","allZero":false}