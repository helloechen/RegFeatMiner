{"repository":"biojava","prod_path":"biojava3-structure/src/main/java/org/biojava/bio/structure/scop/BerkeleyScopInstallation.java","test_path":"biojava3-structure/src/test/java/org/biojava/bio/structure/scop/BerkeleyScopInstallationTest.java","prod_time":"2013-11-19 09:20:23","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":3,"add_classname_line":0,"add_condition_line":0,"add_field_line":1,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":3,"del_classname_line":0,"del_condition_line":0,"del_field_line":1,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"7c909fcba403ab8b5441264c2ade06560dc4d750","test_commitID":"","isfound":"not found test change","originPro":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Oct 12, 2011\n * Created by Andreas Prlic\n *\n * @since 3.0.2\n */\npackage org.biojava.bio.structure.scop;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * The Structural Classification of Proteins at Berkeley Lab and UC Berkeley (<a href=\"http://scop.berkeley.edu/\">http://scop.berkeley.edu/</a>).\n */\npublic class BerkeleyScopInstallation extends ScopInstallation {\n\n\n\tString defaultBerkeleyDownloadURL = \"http://scop.berkeley.edu/downloads/parse/\";\n\tString defaultBerkeleyScopVersion=\"2.0.3\";\n\n\t/**\n\t * A map from SCOP version names which the Berkeley server offers as a download to an array of equivalent deprecated SCOP version names.\n\t */\n\tpublic static final Map<String,String[]> EQUIVALENT_VERSIONS = new HashMap<String,String[]>();\n\n\tstatic {\n\t\tEQUIVALENT_VERSIONS.put(\"2.0.1\", new String[] {\"1.75A\"});\n\t\tEQUIVALENT_VERSIONS.put(\"2.0.2\", new String[] {\"1.75B\"});\n\t\tEQUIVALENT_VERSIONS.put(\"2.0.3\", new String[] {\"1.75C\"});\n\t}\n\n\n\tpublic BerkeleyScopInstallation() {\n\t\tsuper();\n\t\tsetScopVersion(defaultBerkeleyScopVersion);\n\t\tsetScopDownloadURL(defaultBerkeleyDownloadURL);\n\t}\n\n\tprivate String getFilename(String fileType) {\n\t\tString version = scopVersion;\n\t\tfor (Map.Entry<String, String[]> entry : EQUIVALENT_VERSIONS.entrySet()) {\n\t\t\tfor (String vr : entry.getValue()) {\n\t\t\t\tif (scopVersion.equals(vr)) {\n\t\t\t\t\tversion = entry.getKey();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tString[] parts = version.split(\"\\\\.\");\n\t\tif (Integer.parseInt(parts[0]) == 1) {\n\t\t\treturn \"dir.\" + fileType + \".scop.\" + version + \".txt\";\n\t\t} else {\n\t\t\treturn \"dir.\" + fileType + \".scope.\" + version + \"-stable.txt\";\n\t\t}\n\t}\n\n\n\tprotected void downloadClaFile() throws IOException {\n\t\tString filename = getFilename(\"cla\");\n\t\tURL url = new URL(scopDownloadURL + filename);\n\t\tdownloadFileFromRemote(url, new File(filename));\n\t}\n\n\tprotected void downloadDesFile() throws IOException {\n\t\tString filename = getFilename(\"des\");\n\t\tURL url = new URL(scopDownloadURL + filename);\n\t\tdownloadFileFromRemote(url, new File(filename));\n\t}\n\n\tprotected void downloadHieFile() throws IOException {\n\t\tString filename = getFilename(\"hie\");\n\t\tURL url = new URL(scopDownloadURL + filename);\n\t\tdownloadFileFromRemote(url, new File(filename));\n\t}\n\t\n\tprotected void downloadComFile() throws IOException {\n\t\tString filename = getFilename(\"com\");\n\t\tURL url = new URL(scopDownloadURL + filename);\n\t\tdownloadFileFromRemote(url, new File(filename));\n\t}\n\n}\n","changedPro":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Oct 12, 2011\n * Created by Andreas Prlic\n *\n * @since 3.0.2\n */\npackage org.biojava.bio.structure.scop;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * The Structural Classification of Proteins at Berkeley Lab and UC Berkeley (<a href=\"http://scop.berkeley.edu/\">http://scop.berkeley.edu/</a>).\n */\npublic class BerkeleyScopInstallation extends ScopInstallation {\n\n\n\tString defaultBerkeleyDownloadURL = \"http://scop.berkeley.edu/downloads/parse/\";\n\tString defaultBerkeleyScopVersion=\"2.03\";\n\n\t/**\n\t * A map from SCOP version names which the Berkeley server offers as a download to an array of equivalent deprecated SCOP version names.\n\t */\n\tpublic static final Map<String,String[]> EQUIVALENT_VERSIONS = new HashMap<String,String[]>();\n\n\tstatic {\n\t\tEQUIVALENT_VERSIONS.put(\"2.01\", new String[] {\"1.75A\"});\n\t\tEQUIVALENT_VERSIONS.put(\"2.02\", new String[] {\"1.75B\"});\n\t\tEQUIVALENT_VERSIONS.put(\"2.03\", new String[] {\"1.75C\"});\n\t}\n\n\n\tpublic BerkeleyScopInstallation() {\n\t\tsuper();\n\t\tsetScopVersion(defaultBerkeleyScopVersion);\n\t\tsetScopDownloadURL(defaultBerkeleyDownloadURL);\n\t}\n\n\tprivate String getFilename(String fileType) {\n\t\tString version = scopVersion;\n\t\tfor (Map.Entry<String, String[]> entry : EQUIVALENT_VERSIONS.entrySet()) {\n\t\t\tfor (String vr : entry.getValue()) {\n\t\t\t\tif (scopVersion.equals(vr)) {\n\t\t\t\t\tversion = entry.getKey();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tString[] parts = version.split(\"\\\\.\");\n\t\t// they changed the filename schemes!\n\t\tif (Integer.parseInt(parts[0]) == 1) {\n\t\t\treturn \"dir.\" + fileType + \".scop.\" + version + \".txt\";\n\t\t} else {\n\t\t\treturn \"dir.\" + fileType + \".scope.\" + version + \"-stable.txt\";\n\t\t}\n\t}\n\n\n\tprotected void downloadClaFile() throws IOException {\n\t\tString filename = getFilename(\"cla\");\n\t\tURL url = new URL(scopDownloadURL + filename);\n\t\tdownloadFileFromRemote(url, new File(filename));\n\t}\n\n\tprotected void downloadDesFile() throws IOException {\n\t\tString filename = getFilename(\"des\");\n\t\tURL url = new URL(scopDownloadURL + filename);\n\t\tdownloadFileFromRemote(url, new File(filename));\n\t}\n\n\tprotected void downloadHieFile() throws IOException {\n\t\tString filename = getFilename(\"hie\");\n\t\tURL url = new URL(scopDownloadURL + filename);\n\t\tdownloadFileFromRemote(url, new File(filename));\n\t}\n\t\n\tprotected void downloadComFile() throws IOException {\n\t\tString filename = getFilename(\"com\");\n\t\tURL url = new URL(scopDownloadURL + filename);\n\t\tdownloadFileFromRemote(url, new File(filename));\n\t}\n\n}\n","originTest":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.bio.structure.scop;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameters;\n\n/**\n * Tests {@link BerkeleyScopInstallation}.\n * @author dmyerstu\n * @since 3.0.6\n */\n@RunWith(Parameterized.class)\npublic class BerkeleyScopInstallationTest extends ScopDatabaseTest {\n\n\tpublic BerkeleyScopInstallationTest(String tag,ScopDatabase scop) {\n\t\tsuper(tag,scop);\n\t}\n\t@Parameters(name=\"{0}\")\n\tpublic static Collection<Object[]> availableDatabases() {\n\t\tArrayList<Object[]> databases = new ArrayList<Object[]>();\n\t\tScopInstallation scop;\n\n\t\tfor(String version : new String[] {\n\t\t\t\t//ScopFactory.LATEST_VERSION,\n\t\t\t\t//ScopFactory.VERSION_1_75A,\n\t\t\t\t//ScopFactory.VERSION_1_75B,\n\t\t\t\tScopFactory.VERSION_1_75,\n\t\t\t\tScopFactory.VERSION_1_73,\n\t\t}) {\n\t\t\tscop = new BerkeleyScopInstallation();\n\t\t\tscop.setScopVersion(version);\n\t\t\tdatabases.add(new Object[] {version, scop});\n\t\t}\n\t\treturn databases;\n\t}\n}","changedTest":"","commitMessage":"Continued fix of issue #70. Corrected new version numbers: \"2.03\", not \"2.0.3\". Also, have VERSION1_75C point to \"2.03\", etc.\n","test_commitMessage":"","allZero":false}