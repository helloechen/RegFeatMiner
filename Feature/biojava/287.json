{"repository":"biojava","prod_path":"biojava-sequencing/src/main/java/org/biojava3/sequencing/io/fastq/AbstractFastqWriter.java","test_path":"biojava-sequencing/src/test/java/org/biojava3/sequencing/io/fastq/AbstractFastqWriterTest.java","prod_time":"2015-01-30 06:34:57","test_time":"2015-01-30 06:34:57","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":1,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":7,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"ac224492a348dfb69e069ccff4ae03b0c5d2087c","test_commitID":"ac224492a348dfb69e069ccff4ae03b0c5d2087c","isfound":"found test change","originPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava3.sequencing.io.fastq;\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.Writer;\r\n\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * Abstract writer implementation for FASTQ formatted sequences.\r\n *\r\n * @since 3.0.3\r\n */\r\nabstract class AbstractFastqWriter\r\n    implements FastqWriter\r\n{\r\n\r\n    /**\r\n     * Validate the specified FASTQ formatted sequence for writing.\r\n     *\r\n     * @param fastq FASTQ formatted sequence to validate, will not be null\r\n     * @throws IOException if the specified FASTQ formatted sequence is not valid for writing\r\n     */\r\n    protected abstract void validate(final Fastq fastq) throws IOException;\r\n\r\n    @Override\r\n    public final <T extends Appendable> T append(final T appendable, final Fastq... fastq) throws IOException\r\n    {\r\n        return append(appendable, Arrays.asList(fastq));\r\n    }\r\n\r\n    @Override\r\n    public final <T extends Appendable> T append(final T appendable, final Iterable<Fastq> fastq) throws IOException\r\n    {\r\n        if (appendable == null)\r\n        {\r\n            throw new IllegalArgumentException(\"appendable must not be null\");\r\n        }\r\n        if (fastq == null)\r\n        {\r\n            throw new IllegalArgumentException(\"fastq must not be null\");\r\n        }\r\n        for (Fastq f : fastq)\r\n        {\r\n            validate(f);\r\n            if (f != null)\r\n            {\r\n                appendable.append(\"@\");\r\n                appendable.append(f.getDescription());\r\n                appendable.append(\"\\n\");\r\n                appendable.append(f.getSequence());\r\n                appendable.append(\"\\n\");\r\n                appendable.append(\"+\\n\");\r\n                appendable.append(f.getQuality());\r\n                appendable.append(\"\\n\");\r\n            }\r\n        }\r\n        return appendable;\r\n    }\r\n\r\n    @Override\r\n    public final void write(final File file, final Fastq... fastq) throws IOException\r\n    {\r\n        write(file, Arrays.asList(fastq));\r\n    }\r\n\r\n    @Override\r\n    public final void write(final File file, final Iterable<Fastq> fastq) throws IOException\r\n    {\r\n        if (file == null)\r\n        {\r\n            throw new IllegalArgumentException(\"file must not be null\");\r\n        }\r\n        if (fastq == null)\r\n        {\r\n            throw new IllegalArgumentException(\"fastq must not be null\");\r\n        }\r\n        Writer writer = null;\r\n        try\r\n        {\r\n            writer = new BufferedWriter(new FileWriter(file));\r\n            append(writer, fastq);\r\n        }\r\n        finally\r\n        {\r\n            if (writer != null)\r\n            {\r\n                try\r\n                {\r\n                    writer.close();\r\n                }\r\n                catch (IOException e)\r\n                {\r\n                    // ignore\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public final void write(final OutputStream outputStream, final Fastq... fastq) throws IOException\r\n    {\r\n        write(outputStream, Arrays.asList(fastq));\r\n    }\r\n\r\n    @Override\r\n    public final void write(final OutputStream outputStream, final Iterable<Fastq> fastq) throws IOException\r\n    {\r\n        if (outputStream == null)\r\n        {\r\n            throw new IllegalArgumentException(\"outputStream must not be null\");\r\n        }\r\n        if (fastq == null)\r\n        {\r\n            throw new IllegalArgumentException(\"fastq must not be null\");\r\n        }\r\n        Writer writer = null;\r\n        try\r\n        {\r\n            writer = new BufferedWriter(new OutputStreamWriter(outputStream));\r\n            append(writer, fastq);\r\n        }\r\n        finally\r\n        {\r\n            if (writer != null)\r\n            {\r\n                try\r\n                {\r\n                    writer.flush();\r\n                }\r\n                catch (IOException e)\r\n                {\r\n                    // ignore\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","changedPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava3.sequencing.io.fastq;\r\n\r\nimport java.io.*;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n * Abstract writer implementation for FASTQ formatted sequences.\r\n *\r\n * @since 3.0.3\r\n */\r\nabstract class AbstractFastqWriter\r\n    implements FastqWriter\r\n{\r\n\r\n    /**\r\n     * Validate the specified FASTQ formatted sequence for writing.\r\n     *\r\n     * @param fastq FASTQ formatted sequence to validate, will not be null\r\n     * @throws IOException if the specified FASTQ formatted sequence is not valid for writing\r\n     */\r\n    protected abstract void validate(final Fastq fastq) throws IOException;\r\n\r\n    @Override\r\n    public final <T extends Appendable> T append(final T appendable, final Fastq... fastq) throws IOException\r\n    {\r\n        return append(appendable, Arrays.asList(fastq));\r\n    }\r\n\r\n    @Override\r\n    public final <T extends Appendable> T append(final T appendable, final Iterable<Fastq> fastq) throws IOException\r\n    {\r\n        if (appendable == null)\r\n        {\r\n            throw new IllegalArgumentException(\"appendable must not be null\");\r\n        }\r\n        if (fastq == null)\r\n        {\r\n            throw new IllegalArgumentException(\"fastq must not be null\");\r\n        }\r\n        for (Fastq f : fastq)\r\n        {\r\n            validate(f);\r\n            if (f != null)\r\n            {\r\n                appendable.append(\"@\");\r\n                appendable.append(f.getDescription());\r\n                appendable.append(\"\\n\");\r\n                appendable.append(f.getSequence());\r\n                appendable.append(\"\\n\");\r\n                appendable.append(\"+\\n\");\r\n                appendable.append(f.getQuality());\r\n                appendable.append(\"\\n\");\r\n            }\r\n        }\r\n        return appendable;\r\n    }\r\n\r\n    @Override\r\n    public final void write(final File file, final Fastq... fastq) throws IOException\r\n    {\r\n        write(file, Arrays.asList(fastq));\r\n    }\r\n\r\n    @Override\r\n    public final void write(final File file, final Iterable<Fastq> fastq) throws IOException\r\n    {\r\n        if (file == null)\r\n        {\r\n            throw new IllegalArgumentException(\"file must not be null\");\r\n        }\r\n        if (fastq == null)\r\n        {\r\n            throw new IllegalArgumentException(\"fastq must not be null\");\r\n        }\r\n        Writer writer = null;\r\n        try\r\n        {\r\n            writer = new BufferedWriter(new FileWriter(file));\r\n            append(writer, fastq);\r\n        }\r\n        finally\r\n        {\r\n            if (writer != null)\r\n            {\r\n                try\r\n                {\r\n                    writer.close();\r\n                }\r\n                catch (IOException e)\r\n                {\r\n                    // ignore\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public final void write(final OutputStream outputStream, final Fastq... fastq) throws IOException\r\n    {\r\n        write(outputStream, Arrays.asList(fastq));\r\n    }\r\n\r\n    @Override\r\n    public final void write(final OutputStream outputStream, final Iterable<Fastq> fastq) throws IOException\r\n    {\r\n        if (outputStream == null)\r\n        {\r\n            throw new IllegalArgumentException(\"outputStream must not be null\");\r\n        }\r\n        if (fastq == null)\r\n        {\r\n            throw new IllegalArgumentException(\"fastq must not be null\");\r\n        }\r\n        Writer writer = null;\r\n        try\r\n        {\r\n            writer = new BufferedWriter(new OutputStreamWriter(outputStream));\r\n            append(writer, fastq);\r\n        }\r\n        finally\r\n        {\r\n            if (writer != null)\r\n            {\r\n                try\r\n                {\r\n                    writer.flush();\r\n                }\r\n                catch (IOException e)\r\n                {\r\n                    // ignore\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","originTest":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava3.sequencing.io.fastq;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.OutputStream;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport junit.framework.TestCase;\r\n\r\n/**\r\n * Abstract unit test for implementations of FastqWriter.\r\n */\r\npublic abstract class AbstractFastqWriterTest\r\n    extends TestCase\r\n{\r\n\r\n    /**\r\n     * Create and return a new FASTQ formatted sequence suitable for testing.\r\n     *\r\n     * @return a new FASTQ formatted sequence suitable for testing.\r\n     */\r\n    protected abstract Fastq createFastq();\r\n\r\n    /**\r\n     * Create and return a new instance of an implementation of FastqWriter to test.\r\n     *\r\n     * @return a new instance of an implementation of FastqWriter to test\r\n     */\r\n    protected abstract FastqWriter createFastqWriter();\r\n\r\n    public void testCreateFastq()\r\n    {\r\n        Fastq fastq = createFastq();\r\n        assertNotNull(fastq);\r\n    }\r\n\r\n    public void testCreateFastqWriter()\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        assertNotNull(writer);\r\n    }\r\n\r\n    public void testAppendVararg() throws Exception\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        Appendable appendable = new StringBuilder();\r\n        Fastq fastq0 = createFastq();\r\n        Fastq fastq1 = createFastq();\r\n        Fastq fastq2 = createFastq();\r\n        assertSame(appendable, writer.append(appendable, fastq0));\r\n        assertSame(appendable, writer.append(appendable, fastq0, fastq1));\r\n        assertSame(appendable, writer.append(appendable, fastq0, fastq1, fastq2));\r\n        assertSame(appendable, writer.append(appendable, fastq0, fastq1, fastq2, null));\r\n        assertSame(appendable, writer.append(appendable, (Fastq) null));\r\n\r\n        try\r\n        {\r\n            writer.append((Appendable) null, fastq0);\r\n            fail(\"append(null,) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testAppendIterable() throws Exception\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        Appendable appendable = new StringBuilder();\r\n        Fastq fastq0 = createFastq();\r\n        Fastq fastq1 = createFastq();\r\n        Fastq fastq2 = createFastq();\r\n        List<Fastq> list = new ArrayList<Fastq>();\r\n        assertSame(appendable, writer.append(appendable, list));\r\n        list.add(fastq0);\r\n        assertSame(appendable, writer.append(appendable, list));\r\n        list.add(fastq1);\r\n        assertSame(appendable, writer.append(appendable, list));\r\n        list.add(fastq2);\r\n        assertSame(appendable, writer.append(appendable, list));\r\n        list.add(null);\r\n        assertSame(appendable, writer.append(appendable, list));\r\n\r\n        try\r\n        {\r\n            writer.append((Appendable) null, list);\r\n            fail(\"append(null,) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n        try\r\n        {\r\n            writer.append(appendable, (Iterable<Fastq>) null);\r\n            fail(\"append(,null) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testWriteFileVararg() throws Exception\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        Fastq fastq0 = createFastq();\r\n        Fastq fastq1 = createFastq();\r\n        Fastq fastq2 = createFastq();\r\n        File file0 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file0, fastq0);\r\n        File file1 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file1, fastq0, fastq1);\r\n        File file2 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file2, fastq0, fastq1, fastq2);\r\n        File file3 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file3, fastq0, fastq1, fastq2, null);\r\n        File file4 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file4, (Fastq) null);\r\n\r\n        try\r\n        {\r\n            writer.write((File) null, fastq0);\r\n            fail(\"append(null,) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testWriteFileIterable() throws Exception\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        Fastq fastq0 = createFastq();\r\n        Fastq fastq1 = createFastq();\r\n        Fastq fastq2 = createFastq();\r\n        List<Fastq> list = new ArrayList<Fastq>();\r\n        File file0 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file0, list);\r\n\r\n        list.add(fastq0);\r\n        File file1 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file1, list);\r\n\r\n        list.add(fastq1);\r\n        File file2 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file2, list);\r\n\r\n        list.add(fastq2);\r\n        File file3 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file3, list);\r\n\r\n        list.add(null);\r\n        File file4 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file4, list);\r\n\r\n        File file5 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n\r\n        try\r\n        {\r\n            writer.write((File) null, fastq0);\r\n            fail(\"append(null,) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n        try\r\n        {\r\n            writer.write(file5, (Iterable<Fastq>) null);\r\n            fail(\"append(,null) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testWriteOutputStreamVararg() throws Exception\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        Fastq fastq0 = createFastq();\r\n        Fastq fastq1 = createFastq();\r\n        Fastq fastq2 = createFastq();\r\n        OutputStream outputStream = new ByteArrayOutputStream();\r\n        writer.write(outputStream, fastq0);\r\n        writer.write(outputStream, fastq0, fastq1);\r\n        writer.write(outputStream, fastq0, fastq1, fastq2);\r\n        writer.write(outputStream, fastq0, fastq1, fastq2, null);\r\n        writer.write(outputStream, (Fastq) null);\r\n\r\n        try\r\n        {\r\n            writer.write((OutputStream) null, fastq0);\r\n            fail(\"append(null,) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testWriteOutputStreamIterable() throws Exception\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        Fastq fastq0 = createFastq();\r\n        Fastq fastq1 = createFastq();\r\n        Fastq fastq2 = createFastq();\r\n        OutputStream outputStream = new ByteArrayOutputStream();\r\n        List<Fastq> list = new ArrayList<Fastq>();\r\n        writer.write(outputStream, list);\r\n        list.add(fastq0);\r\n        writer.write(outputStream, list);\r\n        list.add(fastq1);\r\n        writer.write(outputStream, list);\r\n        list.add(fastq2);\r\n        writer.write(outputStream, list);\r\n        list.add(null);\r\n        writer.write(outputStream, list);\r\n\r\n        try\r\n        {\r\n            writer.write((OutputStream) null, fastq0);\r\n            fail(\"append(null,) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n        try\r\n        {\r\n            writer.write(outputStream, (Iterable<Fastq>) null);\r\n            fail(\"append(,null) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n}","changedTest":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava3.sequencing.io.fastq;\r\n\r\nimport junit.framework.TestCase;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.OutputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * Abstract unit test for implementations of FastqWriter.\r\n */\r\npublic abstract class AbstractFastqWriterTest\r\n    extends TestCase\r\n{\r\n\r\n    /**\r\n     * Create and return a new FASTQ formatted sequence suitable for testing.\r\n     *\r\n     * @return a new FASTQ formatted sequence suitable for testing.\r\n     */\r\n    protected abstract Fastq createFastq();\r\n\r\n    /**\r\n     * Create and return a new instance of an implementation of FastqWriter to test.\r\n     *\r\n     * @return a new instance of an implementation of FastqWriter to test\r\n     */\r\n    protected abstract FastqWriter createFastqWriter();\r\n\r\n    public void testCreateFastq()\r\n    {\r\n        Fastq fastq = createFastq();\r\n        assertNotNull(fastq);\r\n    }\r\n\r\n    public void testCreateFastqWriter()\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        assertNotNull(writer);\r\n    }\r\n\r\n    public void testAppendVararg() throws Exception\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        Appendable appendable = new StringBuilder();\r\n        Fastq fastq0 = createFastq();\r\n        Fastq fastq1 = createFastq();\r\n        Fastq fastq2 = createFastq();\r\n        assertSame(appendable, writer.append(appendable, fastq0));\r\n        assertSame(appendable, writer.append(appendable, fastq0, fastq1));\r\n        assertSame(appendable, writer.append(appendable, fastq0, fastq1, fastq2));\r\n        assertSame(appendable, writer.append(appendable, fastq0, fastq1, fastq2, null));\r\n        assertSame(appendable, writer.append(appendable, (Fastq) null));\r\n\r\n        try\r\n        {\r\n            writer.append((Appendable) null, fastq0);\r\n            fail(\"append(null,) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testAppendIterable() throws Exception\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        Appendable appendable = new StringBuilder();\r\n        Fastq fastq0 = createFastq();\r\n        Fastq fastq1 = createFastq();\r\n        Fastq fastq2 = createFastq();\r\n        List<Fastq> list = new ArrayList<Fastq>();\r\n        assertSame(appendable, writer.append(appendable, list));\r\n        list.add(fastq0);\r\n        assertSame(appendable, writer.append(appendable, list));\r\n        list.add(fastq1);\r\n        assertSame(appendable, writer.append(appendable, list));\r\n        list.add(fastq2);\r\n        assertSame(appendable, writer.append(appendable, list));\r\n        list.add(null);\r\n        assertSame(appendable, writer.append(appendable, list));\r\n\r\n        try\r\n        {\r\n            writer.append((Appendable) null, list);\r\n            fail(\"append(null,) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n        try\r\n        {\r\n            writer.append(appendable, (Iterable<Fastq>) null);\r\n            fail(\"append(,null) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testWriteFileVararg() throws Exception\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        Fastq fastq0 = createFastq();\r\n        Fastq fastq1 = createFastq();\r\n        Fastq fastq2 = createFastq();\r\n        File file0 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file0, fastq0);\r\n        File file1 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file1, fastq0, fastq1);\r\n        File file2 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file2, fastq0, fastq1, fastq2);\r\n        File file3 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file3, fastq0, fastq1, fastq2, null);\r\n        File file4 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file4, (Fastq) null);\r\n\r\n        try\r\n        {\r\n            writer.write((File) null, fastq0);\r\n            fail(\"append(null,) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testWriteFileIterable() throws Exception\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        Fastq fastq0 = createFastq();\r\n        Fastq fastq1 = createFastq();\r\n        Fastq fastq2 = createFastq();\r\n        List<Fastq> list = new ArrayList<Fastq>();\r\n        File file0 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file0, list);\r\n\r\n        list.add(fastq0);\r\n        File file1 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file1, list);\r\n\r\n        list.add(fastq1);\r\n        File file2 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file2, list);\r\n\r\n        list.add(fastq2);\r\n        File file3 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file3, list);\r\n\r\n        list.add(null);\r\n        File file4 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n        writer.write(file4, list);\r\n\r\n        File file5 = File.createTempFile(\"abstractFastqWriterTest\", null);\r\n\r\n        try\r\n        {\r\n            writer.write((File) null, fastq0);\r\n            fail(\"append(null,) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n        try\r\n        {\r\n            writer.write(file5, (Iterable<Fastq>) null);\r\n            fail(\"append(,null) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testWriteOutputStreamVararg() throws Exception\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        Fastq fastq0 = createFastq();\r\n        Fastq fastq1 = createFastq();\r\n        Fastq fastq2 = createFastq();\r\n        OutputStream outputStream = new ByteArrayOutputStream();\r\n        writer.write(outputStream, fastq0);\r\n        writer.write(outputStream, fastq0, fastq1);\r\n        writer.write(outputStream, fastq0, fastq1, fastq2);\r\n        writer.write(outputStream, fastq0, fastq1, fastq2, null);\r\n        writer.write(outputStream, (Fastq) null);\r\n\r\n        try\r\n        {\r\n            writer.write((OutputStream) null, fastq0);\r\n            fail(\"append(null,) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testWriteOutputStreamIterable() throws Exception\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        Fastq fastq0 = createFastq();\r\n        Fastq fastq1 = createFastq();\r\n        Fastq fastq2 = createFastq();\r\n        OutputStream outputStream = new ByteArrayOutputStream();\r\n        List<Fastq> list = new ArrayList<Fastq>();\r\n        writer.write(outputStream, list);\r\n        list.add(fastq0);\r\n        writer.write(outputStream, list);\r\n        list.add(fastq1);\r\n        writer.write(outputStream, list);\r\n        list.add(fastq2);\r\n        writer.write(outputStream, list);\r\n        list.add(null);\r\n        writer.write(outputStream, list);\r\n\r\n        try\r\n        {\r\n            writer.write((OutputStream) null, fastq0);\r\n            fail(\"append(null,) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n        try\r\n        {\r\n            writer.write(outputStream, (Iterable<Fastq>) null);\r\n            fail(\"append(,null) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n}","commitMessage":"Ran Optimize Imports across the whole project.\n","test_commitMessage":"Ran Optimize Imports across the whole project.\n","allZero":false}