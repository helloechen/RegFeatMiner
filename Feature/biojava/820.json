{"repository":"biojava","prod_path":"biojava-core/src/main/java/org/biojava/nbio/core/sequence/io/embl/EmblParser.java","test_path":"biojava-core/src/test/java/org/biojava/nbio/core/sequence/io/embl/EmblParserTest.java","prod_time":"2017-10-19 20:10:27","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":14,"add_classname_line":0,"add_condition_line":12,"add_field_line":2,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":2,"add_return_line":0,"del_annotation_line":0,"del_call_line":4,"del_classname_line":0,"del_condition_line":3,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":1,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"fc23c956d0316003239b679c9ff2c78366070bc1","test_commitID":"","isfound":"not found test change","originPro":"package org.biojava.nbio.core.sequence.io.embl;\n\n\nimport java.io.*;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class EmblParser {\n\n    private File file;\n    private EmblId emblId = new EmblId();\n    private EmblReference emblReference = new EmblReference();\n    private List<String> accessionNumber = new LinkedList<>();\n    private String ProjectIdentifier;\n    private String OrGanelle;\n    private String createdDate;\n    private String lastUpdatedDate;\n    private String sequenceDescription;\n    private List<String> keyword = new LinkedList<>();\n    private String organismSpecies;\n    private String organismClassification;\n    private String databaseCrossReference;\n    private String assemblyHeader;\n    private String assemblyInformation;\n    private String CON;\n    private String sequenceHeader;\n    private StringBuilder sequence;\n\n    public EmblId getEmblId() {\n        return emblId;\n    }\n\n    public EmblReference getEmblReference() {\n        return emblReference;\n    }\n\n    public List<String> getAccessionNumber() {\n        return accessionNumber;\n    }\n\n    public String getProjectIdentifier() {\n        return ProjectIdentifier;\n    }\n\n    public String getCreatedDate() {\n        return createdDate;\n    }\n\n    public String getLastUpdatedDate() {\n        return lastUpdatedDate;\n    }\n\n    public String getSequenceDescription() {\n        return sequenceDescription;\n    }\n\n    public List<String> getKeyword() {\n        return keyword;\n    }\n\n    public String getOrganismSpecies() {\n        return organismSpecies;\n    }\n\n    public String getOrganismClassification() {\n        return organismClassification;\n    }\n\n\n    public String getDatabaseCrossReference() {\n        return databaseCrossReference;\n    }\n\n    public String getAssemblyHeader() {\n        return assemblyHeader;\n    }\n\n\n    public String getAssemblyInformation() {\n        return assemblyInformation;\n    }\n\n\n    public String getCON() {\n        return CON;\n    }\n\n\n    public String getSequenceHeader() {\n        return sequenceHeader;\n    }\n\n\n    public StringBuilder getSequence() {\n        return sequence;\n    }\n\n\n    public EmblParser(File file) {\n        setFile(file);\n    }\n\n    public void setFile(File file) {\n        if (file == null)\n            throw new NullPointerException(\"file can't be null\");\n        this.file = file;\n    }\n\n    public void parse() {\n        try (FileReader fileReader = new FileReader(file)) {\n            String line = \"\";\n            String lineIdentifier;\n            String lineInfo;\n            try (BufferedReader bufferedReader = new BufferedReader(fileReader)) {\n                while (bufferedReader.readLine() != null)\n                    line = bufferedReader.readLine();\n                lineInfo = line.substring(2);\n                lineIdentifier = line.substring(0, 2);\n                if (lineIdentifier.equals(\"ID\"))\n                    populateID(line);\n                else if (lineIdentifier.equals(\"AC\"))\n                    populateAccessionNumber(line);\n                else if (lineIdentifier.equals(\"DT\") && line.contains(\"Created\"))\n                    createdDate = lineInfo;\n                else if (lineIdentifier.equals(\"DT\") && line.contains(\"updated\"))\n                    lastUpdatedDate = lineInfo;\n                else if (lineIdentifier.equals(\"DE\"))\n                    sequenceDescription = lineInfo;\n                else if (lineIdentifier.equals(\"KW\"))\n                    keyword.add(lineInfo);\n                else if (lineIdentifier.equals(\"OS\"))\n                    organismSpecies = lineInfo;\n                else if (lineIdentifier.equals(\"OC\"))\n                    organismClassification = lineInfo;\n                else if (lineIdentifier.equals(\"OG\"))\n                    OrGanelle = lineInfo;\n                else if (lineIdentifier.equals(\"RN\") || lineIdentifier.equals(\"RP\") || lineIdentifier.equals(\"RX\")\n                        || lineIdentifier.equals(\"RG\") || lineIdentifier.equals(\"RA\")\n                        || lineIdentifier.equals(\"RT\") || lineIdentifier.equals(\"RL\"))\n                    emblReferencePopulating(lineIdentifier, lineInfo);\n\n\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void emblReferencePopulating(String lineIdentifier, String lineInfo) {\n        if (lineIdentifier.equals(\"RN\"))\n            emblReference.setReferenceNumber(lineInfo);\n        else if (lineIdentifier.equals(\"RP\"))\n            emblReference.setReferencePosition(lineInfo);\n        else if (lineIdentifier.equals(\"RX\"))\n            emblReference.setReferenceCrossReference(lineInfo);\n        else if (lineIdentifier.equals(\"RG\"))\n            emblReference.setReferenceGroup(lineInfo);\n        else if (lineIdentifier.equals(\"RA\"))\n            emblReference.setReferenceAuthor(lineInfo);\n        else if (lineIdentifier.equals(\"RT\"))\n            emblReference.setReferenceTitle(lineInfo);\n        else if (lineIdentifier.equals(\"RL\"))\n            emblReference.setReferenceLocation(lineInfo);\n    }\n\n    private void populateAccessionNumber(String line) {\n        accessionNumber.add(line);\n    }\n\n    private void populateID(String line) {\n        line.replace(\",\", \"\");\n        String[] strings = line.split(\" \");\n        emblId.setPrimaryAccession(strings[1]);\n        emblId.setSequenceVersion(strings[2]);\n        emblId.setTopology(strings[3]);\n        emblId.setMoleculeType(strings[4]);\n        emblId.setDataClass(strings[5]);\n        emblId.setTaxonomicDivision(strings[6]);\n        emblId.setSequenceLength(strings[7]);\n    }\n\n\n}\n","changedPro":"package org.biojava.nbio.core.sequence.io.embl;\n\n\nimport java.io.*;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class EmblParser {\n\n    private File file;\n    private EmblId emblId = new EmblId();\n    private EmblReference emblReference = new EmblReference();\n    private List<String> accessionNumber = new LinkedList<>();\n    private String ProjectIdentifier;\n    private String OrGanelle;\n    private String createdDate;\n    private String featureHeader;\n    private String featureTable;\n    private String lastUpdatedDate;\n    private String sequenceDescription;\n    private List<String> keyword = new LinkedList<>();\n    private String organismSpecies;\n    private String organismClassification;\n    private String databaseCrossReference;\n    private String assemblyHeader;\n    private String assemblyInformation;\n    private String CON;\n    private String sequenceHeader;\n    private StringBuilder sequence;\n\n    public EmblId getEmblId() {\n        return emblId;\n    }\n\n    public EmblReference getEmblReference() {\n        return emblReference;\n    }\n\n    public List<String> getAccessionNumber() {\n        return accessionNumber;\n    }\n\n    public String getProjectIdentifier() {\n        return ProjectIdentifier;\n    }\n\n    public String getCreatedDate() {\n        return createdDate;\n    }\n\n    public String getLastUpdatedDate() {\n        return lastUpdatedDate;\n    }\n\n    public String getSequenceDescription() {\n        return sequenceDescription;\n    }\n\n    public List<String> getKeyword() {\n        return keyword;\n    }\n\n    public String getOrganismSpecies() {\n        return organismSpecies;\n    }\n\n    public String getOrganismClassification() {\n        return organismClassification;\n    }\n\n\n    public String getDatabaseCrossReference() {\n        return databaseCrossReference;\n    }\n\n    public String getAssemblyHeader() {\n        return assemblyHeader;\n    }\n\n\n    public String getAssemblyInformation() {\n        return assemblyInformation;\n    }\n\n\n    public String getCON() {\n        return CON;\n    }\n\n\n    public String getSequenceHeader() {\n        return sequenceHeader;\n    }\n\n\n    public StringBuilder getSequence() {\n        return sequence;\n    }\n\n\n    public EmblParser(File file) {\n        setFile(file);\n    }\n\n    public void setFile(File file) {\n        if (file == null)\n            throw new NullPointerException(\"file can't be null\");\n        this.file = file;\n    }\n\n    public void parse() {\n        try (FileReader fileReader = new FileReader(file)) {\n            String line = \"\";\n            String lineIdentifier;\n            String lineInfo;\n            try (BufferedReader bufferedReader = new BufferedReader(fileReader)) {\n                while (bufferedReader.readLine() != null)\n                    line = bufferedReader.readLine();\n                lineInfo = line.substring(2);\n                lineIdentifier = line.substring(0, 2);\n                if (lineIdentifier.equals(\"ID\"))\n                    populateID(line);\n                else if (lineIdentifier.equals(\"AC\"))\n                    populateAccessionNumber(line);\n                else if (lineIdentifier.equals(\"DT\") && line.contains(\"Created\"))\n                    createdDate = lineInfo;\n                else if (lineIdentifier.equals(\"DT\") && line.contains(\"updated\"))\n                    lastUpdatedDate = lineInfo;\n                else if (lineIdentifier.equals(\"DE\"))\n                    sequenceDescription = lineInfo;\n                else if (lineIdentifier.equals(\"KW\"))\n                    keyword.add(lineInfo);\n                else if (lineIdentifier.equals(\"OS\"))\n                    organismSpecies = lineInfo;\n                else if (lineIdentifier.equals(\"OC\"))\n                    organismClassification = lineInfo;\n                else if (lineIdentifier.equals(\"OG\"))\n                    OrGanelle = lineInfo;\n                else if (lineIdentifier.equals(\"RN\") || lineIdentifier.equals(\"RP\")\n                        || lineIdentifier.equals(\"RX\") || lineIdentifier.equals(\"RG\")\n                        || lineIdentifier.equals(\"RA\") || lineIdentifier.equals(\"RT\")\n                        || lineIdentifier.equals(\"RL\"))\n                    populateEmblReference(lineIdentifier, lineInfo);\n                else if (lineIdentifier.equals(\"DR\"))\n                    databaseCrossReference = lineInfo;\n                else if (lineIdentifier.equals(\"AH\"))\n                    assemblyHeader = lineInfo;\n                else if (lineIdentifier.equals(\"AS\"))\n                    assemblyInformation = lineInfo;\n                else if (lineIdentifier.equals(\"CO\"))\n                    CON = lineInfo;\n                else if (lineIdentifier.equals(\"FH\"))\n                    featureHeader = lineInfo;\n                else if (lineIdentifier.equals(\"FT\"))\n                    featureTable = lineInfo;\n                else if (lineIdentifier.equals(\"SQ\"))\n                    sequenceHeader = lineInfo;\n                else if (lineIdentifier.equals(\"  \"))\n                    populateSequence(line);\n\n\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void populateSequence(String line) {\n\n    }\n\n    private void populateEmblReference(String lineIdentifier, String lineInfo) {\n        if (lineIdentifier.equals(\"RN\"))\n            emblReference.setReferenceNumber(lineInfo);\n        else if (lineIdentifier.equals(\"RP\"))\n            emblReference.setReferencePosition(lineInfo);\n        else if (lineIdentifier.equals(\"RX\"))\n            emblReference.setReferenceCrossReference(lineInfo);\n        else if (lineIdentifier.equals(\"RG\"))\n            emblReference.setReferenceGroup(lineInfo);\n        else if (lineIdentifier.equals(\"RA\"))\n            emblReference.setReferenceAuthor(lineInfo);\n        else if (lineIdentifier.equals(\"RT\"))\n            emblReference.setReferenceTitle(lineInfo);\n        else if (lineIdentifier.equals(\"RL\"))\n            emblReference.setReferenceLocation(lineInfo);\n    }\n\n    private void populateAccessionNumber(String line) {\n        accessionNumber.add(line);\n    }\n\n    private void populateID(String line) {\n        line.replace(\",\", \"\");\n        String[] strings = line.split(\" \");\n        emblId.setPrimaryAccession(strings[1]);\n        emblId.setSequenceVersion(strings[2]);\n        emblId.setTopology(strings[3]);\n        emblId.setMoleculeType(strings[4]);\n        emblId.setDataClass(strings[5]);\n        emblId.setTaxonomicDivision(strings[6]);\n        emblId.setSequenceLength(strings[7]);\n    }\n\n\n}\n","originTest":"package org.biojava.nbio.core.sequence.io.embl;\n\nimport org.junit.Test;\n\nimport java.io.File;\n\npublic class EmblParserTest {\n\n    @Test(expected = NullPointerException.class)\n    public void givenNullFileParameterWhenCreateEmblParserThenthrowException(){\n        File file = null;\n        EmblParser emblParser = new EmblParser(file);\n    }\n\n    @Test\n    public void test(){\n        File file = new File(\"/home/pslpt219/Desktop/Homo.dat\");\n        EmblParser emblParser = new EmblParser(file);\n        emblParser.parse();\n    }\n\n\n}\n","changedTest":"","commitMessage":"t\n","test_commitMessage":"","allZero":false}