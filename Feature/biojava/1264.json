{"repository":"biojava","prod_path":"biojava3-protmod/src/main/java/org/biojava3/protmod/parser/ProteinModificationParser.java","test_path":"biojava3-protmod/src/test/java/org/biojava3/protmod/parser/ProteinModificationParserTest.java","prod_time":"2010-07-31 13:17:50","test_time":"2010-07-31 13:17:50","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":2,"add_packageid_line":0,"add_parameter_line":2,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":2,"del_packageid_line":0,"del_parameter_line":3,"del_return_line":0,"label":"POSITIVE","prod_commitID":"9172df57065c317573c234bb487d183fb95fe5bf","test_commitID":"9172df57065c317573c234bb487d183fb95fe5bf","isfound":"found test change","originPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n * Created on Jun 6, 2010\r\n * Author: Jianjiong Gao \r\n *\r\n */\r\n\r\npackage org.biojava3.protmod.parser;\r\n\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\nimport org.biojava.bio.structure.Atom;\r\nimport org.biojava.bio.structure.Group;\r\nimport org.biojava.bio.structure.Structure;\r\n\r\nimport org.biojava3.protmod.ModifiedCompound;\r\nimport org.biojava3.protmod.ProteinModification;\r\n\r\n/**\r\n * Identify protein modifications in a 3-d structure.\r\n * \r\n * @author Jianjiong Gao\r\n * @since 3.0\r\n */\r\npublic interface ProteinModificationParser {\r\n\t/**\r\n\t * Parse modifications in a structure.\r\n\t * @param structure query {@link Structure}.\r\n\t * @param potentialModifications query {@link ProteinModification}s.\r\n\t * @param modelnr model number.\r\n\t */\r\n\tpublic void parse(Structure structure, \r\n\t\t\tSet<ProteinModification> potentialModifications,\r\n\t\t\tint modelnr);\r\n\t\r\n\t/**\r\n\t * \r\n\t * @return a list of identified {@link ModifiedCompound}s from\r\n\t *  the last parse result.\r\n\t */\r\n\tpublic List<ModifiedCompound> getIdentifiedModifiedCompound();\r\n\t\r\n\t/**\r\n\t * \r\n\t * @return a list of modified residues that were not covered by\r\n\t *  the identified {@link ModifiedCompound}s from the last parse \r\n\t *  result.\r\n\t */\r\n\tpublic List<Group> getUnidentifiableModifiedResidues();\r\n\t\r\n\t/**\r\n\t * \r\n\t * @return a list of atom pairs, which represent the \r\n\t *  atom bonds that were not covered by the identified \r\n\t *  {@link ModifiedCompound}s from the last parse result.\r\n\t *  Each element of the list is a array containing two atoms.\r\n\t */\r\n\tpublic List<Atom[]> getUnidentifiableAtomLinkages();\r\n}\r\n","changedPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n * Created on Jun 6, 2010\r\n * Author: Jianjiong Gao \r\n *\r\n */\r\n\r\npackage org.biojava3.protmod.parser;\r\n\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\nimport org.biojava.bio.structure.PDBResidueNumber;\r\nimport org.biojava.bio.structure.Structure;\r\n\r\nimport org.biojava3.protmod.ModifiedCompound;\r\nimport org.biojava3.protmod.PDBAtom;\r\nimport org.biojava3.protmod.ProteinModification;\r\n\r\n/**\r\n * Identify protein modifications in a 3-d structure.\r\n * \r\n * @author Jianjiong Gao\r\n * @since 3.0\r\n */\r\npublic interface ProteinModificationParser {\r\n\t/**\r\n\t * Parse modifications in a structure.\r\n\t * @param structure query {@link Structure}.\r\n\t * @param potentialModifications query {@link ProteinModification}s.\r\n\t */\r\n\tpublic void parse(Structure structure, Set<ProteinModification> potentialModifications);\r\n\t\r\n\t/**\r\n\t * \r\n\t * @return a list of identified {@link ModifiedCompound}s from\r\n\t *  the last parse result.\r\n\t */\r\n\tpublic List<ModifiedCompound> getIdentifiedModifiedCompound();\r\n\t\r\n\t/**\r\n\t * \r\n\t * @param recordUnidentifiableAtomLinkages true if choosing to record unidentifiable\r\n\t *  atoms; false, otherwise.\r\n\t * @see #getUnidentifiableModifiedResidues\r\n\t * @see #getUnidentifiableAtomLinkages\r\n\t */\r\n\tpublic void setRecordUnidentifiableCompounds(boolean recordUnidentifiableModifiedCompounds);\r\n\t\r\n\t/**\r\n\t * \r\n\t * @return a list of modified residues that were not covered by\r\n\t *  the identified ModifiedCompounds from the last parse \r\n\t *  result.\r\n\t *  @see #setRecordUnidentifiableCompounds\r\n\t *  @see #getIdentifiedModifiedCompound\r\n\t */\r\n\tpublic List<PDBResidueNumber> getUnidentifiableModifiedResidues();\r\n\t\r\n\t/**\r\n\t * \r\n\t * @return a list of atom pairs, which represent the \r\n\t *  atom bonds that were not covered by the identified \r\n\t *  {@link ModifiedCompound}s from the last parse result.\r\n\t *  Each element of the list is a array containing two atoms.\r\n\t * @see PDBAtom\r\n\t * @see #setRecordUnidentifiableCompounds\r\n\t */\r\n\tpublic List<PDBAtom[]> getUnidentifiableAtomLinkages();\r\n}\r\n","originTest":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n * Created on Jun 8, 2010\r\n * Author: Jianjiong Gao \r\n *\r\n */\r\n\r\npackage org.biojava3.protmod.parser;\r\n\r\nimport java.io.IOException;\r\n\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\nimport junit.framework.TestCase;\r\n\r\nimport org.biojava.bio.structure.Atom;\r\nimport org.biojava.bio.structure.Calc;\r\nimport org.biojava.bio.structure.Chain;\r\nimport org.biojava.bio.structure.Group;\r\nimport org.biojava.bio.structure.Structure;\r\nimport org.biojava.bio.structure.StructureException;\r\n\r\nimport org.biojava3.protmod.ModificationCategory;\r\nimport org.biojava3.protmod.ModifiedCompound;\r\nimport org.biojava3.protmod.ProteinModification;\r\nimport org.biojava3.protmod.TmpAtomCache;\r\n\r\n/**\r\n * \r\n * @author Jianjiong Gao\r\n * @since 3.0\r\n */\r\npublic class ProteinModificationParserTest extends TestCase {\r\n\t\r\n\tpublic void testMultiParser(){\r\n\t\tString[][] names = new String[][] {\r\n\t\t\t\t// Attachments\r\n\t\t\t\t{\"3HN3\", \"AA0151\"}, // NAG\r\n\t\t\t\t{\"1CPO\", \"AA0406\"}, // XYS\r\n\t\t\t\t{\"1AL2\", \"AA0059\"}, // MYR\r\n\t\t\t\t{\"1L9H\", \"AA0106\"}, // PLM\r\n\t\t\t\t{\"1BDO\", \"AA0117\"}, // BTN\r\n\t\t\t\t//{\"2IQD\", \"AA0118\"}, // no successful test case for LPA\r\n\t\t\t\t{\"1AT9\", \"AA0120\"}, // RET\r\n\t\t\t\t//{\"1DJP\", \"AA0121\"}, // DO2, (bond length error 3.0)\r\n\t\t\t\t{\"1ALL\", \"AA0131\"}, // CYC\r\n\t\t\t\t{\"1B8D\", \"AA0132\"}, // PEB\r\n\t\t\t\t{\"1OGP\", \"AA0142\"}, // MTQ\r\n\t\t\t\t{\"1EL5\", \"AA0143\"}, // FAD on CYS\r\n\t\t\t\t{\"1W1O\", \"AA0144\"}, // FAD on HIS\r\n\t\t\t\t{\"1DII\", \"AA0145\"}, // FAD on TYR\r\n\t\t\t\t{\"2KJS\", \"AA0150\"}, // PNS\r\n\t\t\t\t{\"1D7E\", \"AA0207\"}, // HC4\r\n\t\t\t\t{\"2TMD\", \"AA0220\"}, // FMN\r\n\t\t\t\t{\"1VAO\", \"AA0221\"}, // FAD on HIS\r\n\t\t\t\t{\"1PDA\", \"AA0252\"}, // DPM\r\n\t\t\t\t{\"2J96\", \"AA0258\"}, // PVN\r\n\t\t\t\t{\"2HIL\", \"AA0264\"}, // OPE\r\n\t\t\t\t//{\"1RTX\", \"AA0329\"}, // HEM, (bond length error 3.0, much closer to FE)\r\n\t\t\t\t{\"1FEH\", \"AA0334\"}, // HC1\r\n\t\t\t\t//{\"2Z6D\", \"AA0351\"}, // FMN, (bond length error 2.0)\r\n\t\t\t\t{\"1N63\", \"AA0355\"}, // CYS-CUN-MCN\r\n\t\t\t\t{\"1HXQ\", \"AA0372\"}, // U5P on HIS\r\n\t\t\t\t{\"1QI9\", \"AA0395\"}, // VO4 on HIS\r\n\t\t\t\t{\"1XG0\", \"AA0428\"}, // DBV on CYS\r\n\t\t\t\t//{\"1E9W\", \"AA0447\"}, // TSI on ILE, error when reading\r\n\t\t\t\t{\"2HIL\", \"AA0497\"}, // OPE on SER\r\n\t\t\t\t{\"3I3L\", \"AA0522\"}, // FAD on ASP\r\n\t\t\t\t{\"1MCC\", \"AA0045\"}, // ACE on GLU\r\n\t\t\t\t{\"5CPV\", \"AA0041\"}, // ACE on ALA\r\n\t\t\t\t{\"1BBR\", \"AA0042\"}, // ACE on ASP\r\n\t\t\t\t{\"1AL1\", \"AA0044\"}, // ACE on GLU\r\n\t\t\t\t{\"1SEM\", \"AA0050\"}, // ACE on PRO\r\n\t\t\t\t{\"1PVB\", \"AA0051\"}, // ACE on SER\r\n\t\t\t\t{\"1ZNF\", \"AA0053\"}, // ACE on THR\r\n\t\t\t\t{\"1SCY\", \"AA0089\"}, // NH2 on HIS\r\n\t\t\t\t\r\n\t\t\t\t// Modified resdiues\r\n\t\t\t\t{\"3MVJ\", \"AA0037\"}, // SEP\r\n\t\t\t\t{\"3MVJ\", \"AA0038\"}, // TPO\r\n\t\t\t\t{\"1KZU\", \"AA0021\"}, // FME\r\n\t\t\t\t{\"1AA6\", \"AA0022\"}, // CSE\r\n\t\t\t\t{\"1NT0\", \"AA0026\"}, // AHB\r\n\t\t\t\t{\"1ERM\", \"AA0027\"}, // BHD\r\n\t\t\t\t{\"1QGW\", \"AA0028\"}, // LYZ\r\n\t\t\t\t{\"2G66\", \"AA0029\"}, // HY3\r\n\t\t\t\t{\"2G66\", \"AA0030\"}, // HYP\r\n\t\t\t\t{\"1A39\", \"AA0031\"}, // PCA\r\n\t\t\t\t{\"1AG7\", \"AA0032\"}, // CGU\r\n\t\t\t\t{\"1D5W\", \"AA0033\"}, // PHD\r\n\t\t\t\t{\"1H9C\", \"AA0034\"}, // CSP\r\n\t\t\t\t{\"1EUD\", \"AA0035\"}, // NEP\r\n\t\t\t\t{\"1NSQ\", \"AA0036\"}, // HIP\r\n\t\t\t\t{\"3LXN\", \"AA0039\"}, // PTR\r\n\t\t\t\t{\"1ZM2\", \"AA0040\"}, // DDE\r\n\t\t\t\t{\"1E0Z\", \"AA0055\"}, // ALY\r\n\t\t\t\t{\"1DM3\", \"AA0056\"}, // SCY\r\n\t\t\t\t{\"2NPP\", \"AA0061\"}, // MAA\r\n\t\t\t\t{\"1GK8\", \"AA0064\"}, // MME\r\n\t\t\t\t{\"1DOJ\", \"AA0065\"}, // MEA\r\n\t\t\t\t{\"1DOJ\", \"AA0172\"}, // TYS\r\n\t\t\t\t{\"1G42\", \"AA0067\"}, // 2MR\r\n\t\t\t\t{\"2B2U\", \"AA0068\"}, // DA2\r\n\t\t\t\t{\"2B2U\", \"AA0074\"}, // M3L\r\n\t\t\t\t{\"1ALL\", \"AA0070\"}, // MEN\r\n\t\t\t\t{\"3FMY\", \"AA0071\"}, // MEQ\r\n\t\t\t\t{\"1E6Y\", \"AA0073\"}, // MHS\r\n\t\t\t\t{\"1E6Y\", \"AA0272\"}, // AGM\r\n\t\t\t\t{\"1IV8\", \"AA0075\"}, // MLY\r\n\t\t\t\t{\"1IV8\", \"AA0076\"}, // MLZ\r\n\t\t\t\t{\"1ZTO\", \"AA0082\"}, // AAR\r\n\t\t\t\t{\"1D7T\", \"AA0085\"}, // CY3\r\n\t\t\t\t{\"1D5M\", \"AA0091\"}, // CLE\r\n\t\t\t\t// {\"1XAE\", \"AA0094\"}, // NFA, C-terminal modification, but occurs in non-terminal residue\r\n\t\t\t\t{\"2H9E\", \"AA0095\"}, // LPD\r\n\t\t\t\t//{\"2BF9\", \"AA0099\"}, // TYC, error reading PDB file\r\n\t\t\t\t{\"1YYL\", \"AA0100\"}, // VLM\r\n\t\t\t\t{\"1AEX\", \"AA0101\"}, // SCH\r\n\t\t\t\t{\"1OMW\", \"AA0105\"}, // CMT\r\n\t\t\t\t{\"2C0J\", \"AA0106\"}, // P1L\r\n\t\t\t\t{\"1AA1\", \"AA0114\"}, // KCX\r\n\t\t\t\t{\"1O5K\", \"AA0115\"}, // MCL\r\n\t\t\t\t{\"1A8I\", \"AA0119\"}, // LLP\r\n\t\t\t\t{\"2J4Y\", \"AA0120\"}, // LYR\r\n\t\t\t\t//PVL not exist in PDB\r\n\t\t\t\t{\"1A2V\", \"AA0147\"}, // TPQ\r\n\t\t\t\t{\"1JJU\", \"AA0148\"}, // TRQ\r\n\t\t\t\t{\"1WCT\", \"AA0155\"}, // GTH\r\n\t\t\t\t{\"1A2C\", \"AA0172\"}, // TYS\r\n\t\t\t\t{\"1WCT\", \"AA0179\"}, // BTR\r\n\t\t\t\t{\"1AUK\", \"AA0185\"}, // FGL\r\n\t\t\t\t{\"148L\", \"AA0191\"}, // DAL\r\n\t\t\t\t{\"1C4B\", \"AA0192\"}, // DIL\r\n\t\t\t\t{\"1T5M\", \"AA0196\"}, // DSG\r\n\t\t\t\t{\"1CZQ\", \"AA0198\"}, // DTR\r\n\t\t\t\t{\"2JUE\", \"AA0199\"}, // DTH\r\n\t\t\t\t{\"1A7Y\", \"AA0200\"}, // DVA\r\n\t\t\t\t{\"1CXP\", \"AA0205\"}, // CSO\r\n\t\t\t\t{\"1F8W\", \"AA0205\"}, // CSX\r\n\t\t\t\t{\"1FFV\", \"AA0215\"}, // ARO\r\n\t\t\t\t{\"1CKN\", \"AA0228\"}, // GPL\r\n\t\t\t\t{\"1BUW\", \"AA0230\"}, // SNC\r\n\t\t\t\t{\"1CZI\", \"AA0234\"}, // SMC\r\n\t\t\t\t{\"1E93\", \"AA0251\"}, // OMT\r\n\t\t\t\t{\"1ACD\", \"AA0262\"}, // CSD\r\n\t\t\t\t{\"1C0T\", \"AA0262\"}, // CSW\r\n\t\t\t\t{\"1E6Y\", \"AA0265\"}, // GL3\r\n\t\t\t\t{\"1BI0\", \"AA0269\"}, // CSS\r\n\t\t\t\t{\"1E6Y\", \"AA0272\"}, // AGM\r\n\t\t\t\t{\"1HBM\", \"AA0273\"}, // MGN\r\n\t\t\t\t{\"1FFU\", \"AA0277\"}, // CSZ\r\n\t\t\t\t{\"3H5R\", \"AA0302\"}, // SNN, note: SNN is not at C-terminal in some structures, e.g. 3I4W\r\n\t\t\t\t{\"1JQ7\", \"AA0311\"}, // DMH\r\n\t\t\t\t{\"1J6Z\", \"AA0317\"}, // HIC\r\n\t\t\t\t{\"1B80\", \"AA0322\"}, // HTR\r\n\t\t\t\t{\"1CWM\", \"AA0336\"}, // IML\r\n\t\t\t\t{\"1BCK\", \"AA0337\"}, // MLE\r\n\t\t\t\t{\"1EA7\", \"AA0361\"}, // OSE\r\n\t\t\t\t{\"1TYS\", \"AA0363\"}, // CXM\r\n\t\t\t\t{\"1EBV\", \"AA0364\"}, // OAS\r\n\t\t\t\t{\"2VZK\", \"AA0423\"}, // TH5\r\n\t\t\t\t{\"2IU4\", \"AA0431\"}, // HIQ\r\n\t\t\t\t{\"1Y9A\", \"AA0432\"}, // OHS\r\n\t\t\t\t{\"2IUW\", \"AA0444\"}, // LED\r\n\t\t\t\t{\"1K83\", \"AA0449\"}, // ILX\r\n\t\t\t\t{\"2VH3\", \"AA0458\"}, // FGL\r\n\t\t\t\t{\"2AOC\", \"AA0464\"}, // OLT\r\n\t\t\t\t{\"1DSR\", \"AA0478\"}, // AHB\r\n\t\t\t\t{\"1AIQ\", \"AA0493\"}, // CXM\r\n\t\t\t\t{\"1CF0\", \"AA0509\"}, // IYR\r\n\t\t\t\t{\"1CTP\", \"AA0510\"}, // TYI\r\n\t\t\t\t{\"3L4M\", \"AA0520\"}, // 0AF\r\n\t\t\t\t{\"4ECA\", \"AA0525\"}, // AEI\r\n\r\n\t\t\t\t// Cross link\r\n\t\t\t\t{\"3M6S\", \"AA0025\"}, // Disulfide bond\r\n\t\t\t\t{\"1A6L\", \"AA0139\"}, // F3S\r\n\t\t\t\t{\"1A70\", \"AA0137\"}, // FES\r\n\t\t\t\t{\"1RPB\", \"AA0216\"}, // Isopeptide (Cys - ASP)\r\n\t\t\t\t{\"3B2M\", \"AA0294\"}, // isopeptide (Lys - Asn)\r\n\t\t\t\t{\"1CAD\", \"AA0136\"}, // FE and 4 Cys, cross-link4\r\n\t\t\t\t{\"1FP4\", \"AA0141\"}, // CFM, HCA, CYS, HIS\r\n\t\t\t\t{\"1M1N\", \"AA0141\"}, // CFN, HCA, CYS, HIS\r\n\t\t\t\t//{\"1G21\", \"AA0141\"}, // CFM, HCA, CYS, HIS, (bond length error 0.5)\r\n\t\t\t\t//{\"1M34\", \"AA0141\"}, // CFM, HCA, CYS, HIS, (bond length error 1.0)\r\n\t\t\t\t{\"1G7K\", \"AA0183\"}, // CRQ, cross-link1\r\n\t\t\t\t{\"1EMA\", \"AA0183\"}, // CRO, cross-link1\r\n\t\t\t\t//{\"1GGE\", \"AA0250\"}, // HIS-TYR, cross-link2, (bond length error 0.6)\r\n\t\t\t\t{\"2JE3\", \"AA0271\"}, // HEC, CYS, CYS, LYS\r\n\t\t\t\t//{\"1MHL\", \"AA0280\"}, // not work for HEM\r\n\t\t\t\t//{\"1MYP\", \"AA0280\"}, // not work for HEM\r\n\t\t\t\t//{\"3HML\", \"AA0283\"}, // PQQ, GLU, TYR, (bond length error 2)\r\n\t\t\t\t{\"1FWX\", \"AA0298\"}, // CU4\r\n\t\t\t\t{\"1QNI\", \"AA0298\"}, // CU4\r\n\t\t\t\t{\"2IWF\", \"AA0298\"}, // CU4\r\n\t\t\t\t{\"2IWK\", \"AA0298\"}, // CU4\r\n\t\t\t\t//{\"1G20\", \"AA0300\"}, // CLF (bond length error 20)\r\n\t\t\t\t{\"1SU6\", \"AA0310\"}, // NFS, 5 CYS, HIS\r\n\t\t\t\t{\"1SU7\", \"AA0310\"}, // NFS, 5 CYS, HIS (looks like 6 CYS are linked)\r\n\t\t\t\t//{\"1JJU\", \"AA0313\"}, // CYS-TRP, (bond length error 3)\r\n\t\t\t\t{\"1JJU\", \"AA0314\"}, // CYS-ASP\r\n\t\t\t\t{\"1JJU\", \"AA0315\"}, // CYS-GLU\r\n\t\t\t\t//{\"1AJ1\", \"AA0330\"}, // CYS-THR, could not find.\r\n\t\t\t\t{\"1PXQ\", \"AA0340\"}, // CYS-PHE\r\n\t\t\t\t{\"1PXQ\", \"AA0342\"}, // CYS-THR\r\n\t\t\t\t{\"1ITK\", \"AA0348\"}, // MET-TYR-TRP\r\n\t\t\t\t//{\"1R30\", \"AA0356\"}, // 3 CYS-SF4-SAM (bond length error 0.6)\r\n\t\t\t\t{\"1R30\", \"AA0357\"}, // 3 CYS-FES-ARG\r\n\t\t\t\t// {\"1S5L\", \"AA0366\"}, // 2 ASP-3 GLU-HIT-OEC (bond length error 6)\r\n\t\t\t\t{\"1NGK\", \"AA0368\"}, //TYR-TYR\r\n\t\t\t\t{\"1YZW\", \"AA0378\"}, // CRU\r\n\t\t\t\t{\"1XQM\", \"AA0379\"}, // CH6\r\n\t\t\t\t{\"1UIS\", \"AA0379\"}, // NRQ\r\n\t\t\t\t{\"2OJK\", \"AA0380\"}, // NYG\r\n\t\t\t\t{\"2A46\", \"AA0381\"}, // CR7\r\n\t\t\t\t{\"1YZW\", \"AA0183\"}, // CRU\r\n\t\t\t\t{\"1XQM\", \"AA0183\"}, // CH6\r\n\t\t\t\t{\"1UIS\", \"AA0183\"}, // NRQ\r\n\t\t\t\t{\"2OJK\", \"AA0183\"}, // NYG\r\n\t\t\t\t{\"2A46\", \"AA0183\"}, // CR7\r\n\t\t\t\t{\"2AXR\", \"AA0436\"}, // CYS-FAD-HIS\r\n\t\t\t\t{\"2QH7\", \"AA0438\"}, // 3 CYS-FES-HIS\r\n\t\t\t\t//{\"2VUM\", \"AA0451\"}, // CYS-TRP (bond length error 2)\r\n\t\t\t\t{\"3EE4\", \"AA0490\"}, // VAL-TYR\r\n\t\t\t\t{\"3H8L\", \"AA0513\"}, // CYS-S3H-CYS\r\n\t\t};\r\n\t\t\r\n\t\tfor ( String[] name : names){\r\n\t\t\t//System.out.println(\"===\\n\"+name[0]);\r\n\t\t\ttry {\r\n//\t\t\t\tString result = \r\n//\t\t\t\t\tparserTest(name[0], null); \r\n\t\t\t\t\tparserTest(name[0], name[1]);\r\n//\t\t\t\tSystem.out.println(result);\r\n\t\t\t} catch (Exception e){\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t\tfail(e.getMessage());\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\r\n\tprivate String parserTest(String pdbId, String residId) throws IOException, StructureException {\t\t\r\n\t\tStructure struc = TmpAtomCache.cache.getStructure(pdbId);\r\n\r\n\t\tDefaultProteinModificationParser parser = new DefaultProteinModificationParser();\r\n\t\tparser.setRecordUnidentifiableCompounds(true);\r\n//\t\tparser.setbondLengthTolerance(2);\r\n\t\t\r\n\t\tSet<ProteinModification> mods;\r\n\t\tif (residId==null) {\r\n\t\t\tmods = ProteinModification.allModifications();\r\n\t\t} else {\r\n\t\t\tmods = ProteinModification.getByResidId(residId);\r\n\t\t}\r\n\t\t\r\n\t\tassertFalse(mods.isEmpty());\r\n\t\t\r\n\t\tStringBuilder sb = new StringBuilder();\r\n\r\n\t\tint nrmodel = struc.nrModels();\r\n\t\tfor (int modelnr=0; modelnr<nrmodel; modelnr++) {\r\n\t\t\tsb.append(\"Model \"+(modelnr+1)+\"\\n\");\r\n\r\n\t\t\tparser.parse(struc, mods, modelnr);\r\n\t\t\tList<ModifiedCompound> mcs = parser.getIdentifiedModifiedCompound();\r\n\r\n\t\t\tassertFalse(pdbId + \" \" + residId +\" is not false\" , mcs.isEmpty());\r\n\t\t\t\r\n\t\t\tint i=0;\r\n\t\t\tfor (ModifiedCompound mc : mcs) {\r\n\t\t\t\tsb.append(\"Modification #\"+(++i)+\":\"+\"\\n\");\r\n\t\t\t\tsb.append(printModification(mc));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tList<Group> unidentifiedModifiedResidues = parser.getUnidentifiableModifiedResidues();\r\n\t\t\ti = 0;\r\n\t\t\tfor (Group group : unidentifiedModifiedResidues) {\r\n\t\t\t\tsb.append(\"Unidenfied modified residue #\"+(++i)+\":\"+\"\\n\");\r\n\t\t\t\tsb.append(\"\\t\"+group.getPDBName()+\"\\t\"+group.getParent().getName()+\"\\t\"+group.getPDBCode()+\"\\n\");\r\n\t\t\t}\r\n\r\n\t\t\tList<Atom[]> unidentifiedLinkages = parser.getUnidentifiableAtomLinkages();\r\n\t\t\ti = 0;\r\n\t\t\tfor (Atom[] atoms : unidentifiedLinkages) {\r\n\t\t\t\tsb.append(\"Unidenfied linkage #\"+(++i)+\":\"+\"\\n\");\r\n\t\t\t\tsb.append(printLinkage(atoms));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn sb.toString();\r\n\t}\r\n\t\r\n\tprivate String printModification(ModifiedCompound mc){\r\n\t\tProteinModification mod = mc.getModification();\r\n\t\tModificationCategory cat = mod.getCategory();\r\n\t\t\r\n\t\tStringBuilder sb = new StringBuilder();\r\n\t\tsb.append(cat.label()+\": \"+mod.getId()+\"\\n\");\r\n\t\t\r\n\t\tList<Atom[]> atomLinkages = mc.getAtomLinkages();\r\n\t\tif (atomLinkages.isEmpty()) {\r\n\t\t\tGroup g = mc.getGroups().iterator().next();\r\n\t\t\tChain chain = g.getParent();\r\n\t\t\tsb.append(\"\\t\"+g.getPDBName()+\"\\t\"+chain.getName()+\"\\t\"+g.getPDBCode()+\"\\n\");\r\n\t\t} else {\r\n\t\t\tfor (Atom[] atoms : atomLinkages) {\r\n\t\t\t\tsb.append(printLinkage(atoms));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn sb.toString();\r\n\t}\r\n\t\r\n\tprivate String printLinkage(Atom[] atoms) {\r\n\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\r\n\t\tGroup group = atoms[0].getParent();\r\n\t\tChain chain = group.getParent();\r\n\t\tsb.append(\"\\t\"+group.getPDBName()+\"\\t\"+chain.getName()+\"\\t\"\r\n\t\t\t\t+group.getPDBCode()+\"\\t\"+atoms[0].getName()+\"\\n\");\r\n\r\n\t\tgroup = atoms[1].getParent();\r\n\t\tassertEquals(chain, group.getParent());\r\n\t\tsb.append(\"\\t\"+group.getPDBName()+\"\\t\"+chain.getName()+\"\\t\"\r\n\t\t\t\t+group.getPDBCode()+\"\\t\"+atoms[1].getName()+\"\\n\");\r\n\r\n\t\ttry {\r\n\t\t\tsb.append(\"\\t\"+Calc.getDistance(atoms[0], atoms[1])+\"\\n\");\r\n\t\t} catch (StructureException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\treturn sb.toString();\r\n\t}\r\n}\r\n","changedTest":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n * Created on Jun 8, 2010\r\n * Author: Jianjiong Gao \r\n *\r\n */\r\n\r\npackage org.biojava3.protmod.parser;\r\n\r\nimport java.io.IOException;\r\n\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\nimport junit.framework.TestCase;\r\n\r\nimport org.biojava.bio.structure.Atom;\r\nimport org.biojava.bio.structure.Calc;\r\nimport org.biojava.bio.structure.Chain;\r\nimport org.biojava.bio.structure.Group;\r\nimport org.biojava.bio.structure.PDBResidueNumber;\r\nimport org.biojava.bio.structure.Structure;\r\nimport org.biojava.bio.structure.StructureException;\r\nimport org.biojava.bio.structure.StructureTools;\r\n\r\nimport org.biojava3.protmod.PDBAtom;\r\nimport org.biojava3.protmod.ModificationCategory;\r\nimport org.biojava3.protmod.ModifiedCompound;\r\nimport org.biojava3.protmod.ProteinModification;\r\nimport org.biojava3.protmod.TmpAtomCache;\r\n\r\n/**\r\n * \r\n * @author Jianjiong Gao\r\n * @since 3.0\r\n */\r\npublic class ProteinModificationParserTest extends TestCase {\r\n\t\r\n\tpublic void testMultiParser(){\r\n\t\tString[][] names = new String[][] {\r\n\t\t\t\t// Attachments\r\n\t\t\t\t{\"3HN3\", \"AA0151\"}, // NAG\r\n\t\t\t\t{\"1CPO\", \"AA0406\"}, // XYS\r\n\t\t\t\t{\"1AL2\", \"AA0059\"}, // MYR\r\n\t\t\t\t{\"1L9H\", \"AA0106\"}, // PLM\r\n\t\t\t\t{\"1BDO\", \"AA0117\"}, // BTN\r\n\t\t\t\t//{\"2IQD\", \"AA0118\"}, // no successful test case for LPA\r\n\t\t\t\t{\"1AT9\", \"AA0120\"}, // RET\r\n\t\t\t\t//{\"1DJP\", \"AA0121\"}, // DO2, (bond length error 3.0)\r\n\t\t\t\t{\"1ALL\", \"AA0131\"}, // CYC\r\n\t\t\t\t{\"1B8D\", \"AA0132\"}, // PEB\r\n\t\t\t\t{\"1OGP\", \"AA0142\"}, // MTQ\r\n\t\t\t\t{\"1EL5\", \"AA0143\"}, // FAD on CYS\r\n\t\t\t\t{\"1W1O\", \"AA0144\"}, // FAD on HIS\r\n\t\t\t\t{\"1DII\", \"AA0145\"}, // FAD on TYR\r\n\t\t\t\t{\"2KJS\", \"AA0150\"}, // PNS\r\n\t\t\t\t{\"1D7E\", \"AA0207\"}, // HC4\r\n\t\t\t\t{\"2TMD\", \"AA0220\"}, // FMN\r\n\t\t\t\t{\"1VAO\", \"AA0221\"}, // FAD on HIS\r\n\t\t\t\t{\"1PDA\", \"AA0252\"}, // DPM\r\n\t\t\t\t{\"2J96\", \"AA0258\"}, // PVN\r\n\t\t\t\t{\"2HIL\", \"AA0264\"}, // OPE\r\n\t\t\t\t//{\"1RTX\", \"AA0329\"}, // HEM, (bond length error 3.0, much closer to FE)\r\n\t\t\t\t{\"1FEH\", \"AA0334\"}, // HC1\r\n\t\t\t\t//{\"2Z6D\", \"AA0351\"}, // FMN, (bond length error 2.0)\r\n\t\t\t\t{\"1N63\", \"AA0355\"}, // CYS-CUN-MCN\r\n\t\t\t\t{\"1HXQ\", \"AA0372\"}, // U5P on HIS\r\n\t\t\t\t{\"1QI9\", \"AA0395\"}, // VO4 on HIS\r\n\t\t\t\t{\"1XG0\", \"AA0428\"}, // DBV on CYS\r\n\t\t\t\t//{\"1E9W\", \"AA0447\"}, // TSI on ILE, error when reading\r\n\t\t\t\t{\"2HIL\", \"AA0497\"}, // OPE on SER\r\n\t\t\t\t{\"3I3L\", \"AA0522\"}, // FAD on ASP\r\n\t\t\t\t{\"1MCC\", \"AA0045\"}, // ACE on GLU\r\n\t\t\t\t{\"5CPV\", \"AA0041\"}, // ACE on ALA\r\n\t\t\t\t{\"1BBR\", \"AA0042\"}, // ACE on ASP\r\n\t\t\t\t{\"1AL1\", \"AA0044\"}, // ACE on GLU\r\n\t\t\t\t{\"1SEM\", \"AA0050\"}, // ACE on PRO\r\n\t\t\t\t{\"1PVB\", \"AA0051\"}, // ACE on SER\r\n\t\t\t\t{\"1ZNF\", \"AA0053\"}, // ACE on THR\r\n\t\t\t\t{\"1SCY\", \"AA0089\"}, // NH2 on HIS\r\n\t\t\t\t\r\n\t\t\t\t// Modified resdiues\r\n\t\t\t\t{\"3MVJ\", \"AA0037\"}, // SEP\r\n\t\t\t\t{\"3MVJ\", \"AA0038\"}, // TPO\r\n\t\t\t\t{\"1KZU\", \"AA0021\"}, // FME\r\n\t\t\t\t{\"1AA6\", \"AA0022\"}, // CSE\r\n\t\t\t\t{\"1NT0\", \"AA0026\"}, // AHB\r\n\t\t\t\t{\"1ERM\", \"AA0027\"}, // BHD\r\n\t\t\t\t{\"1QGW\", \"AA0028\"}, // LYZ\r\n\t\t\t\t{\"2G66\", \"AA0029\"}, // HY3\r\n\t\t\t\t{\"2G66\", \"AA0030\"}, // HYP\r\n\t\t\t\t{\"1A39\", \"AA0031\"}, // PCA\r\n\t\t\t\t{\"1AG7\", \"AA0032\"}, // CGU\r\n\t\t\t\t{\"1D5W\", \"AA0033\"}, // PHD\r\n\t\t\t\t{\"1H9C\", \"AA0034\"}, // CSP\r\n\t\t\t\t{\"1EUD\", \"AA0035\"}, // NEP\r\n\t\t\t\t{\"1NSQ\", \"AA0036\"}, // HIP\r\n\t\t\t\t{\"3LXN\", \"AA0039\"}, // PTR\r\n\t\t\t\t{\"1ZM2\", \"AA0040\"}, // DDE\r\n\t\t\t\t{\"1E0Z\", \"AA0055\"}, // ALY\r\n\t\t\t\t{\"1DM3\", \"AA0056\"}, // SCY\r\n\t\t\t\t{\"2NPP\", \"AA0061\"}, // MAA\r\n\t\t\t\t{\"1GK8\", \"AA0064\"}, // MME\r\n\t\t\t\t{\"1DOJ\", \"AA0065\"}, // MEA\r\n\t\t\t\t{\"1DOJ\", \"AA0172\"}, // TYS\r\n\t\t\t\t{\"1G42\", \"AA0067\"}, // 2MR\r\n\t\t\t\t{\"2B2U\", \"AA0068\"}, // DA2\r\n\t\t\t\t{\"2B2U\", \"AA0074\"}, // M3L\r\n\t\t\t\t{\"1ALL\", \"AA0070\"}, // MEN\r\n\t\t\t\t{\"3FMY\", \"AA0071\"}, // MEQ\r\n\t\t\t\t{\"1E6Y\", \"AA0073\"}, // MHS\r\n\t\t\t\t{\"1E6Y\", \"AA0272\"}, // AGM\r\n\t\t\t\t{\"1IV8\", \"AA0075\"}, // MLY\r\n\t\t\t\t{\"1IV8\", \"AA0076\"}, // MLZ\r\n\t\t\t\t{\"1ZTO\", \"AA0082\"}, // AAR\r\n\t\t\t\t{\"2V1S\", \"AA0085\"}, // CY3\r\n\t\t\t\t{\"1XXP\", \"AA0091\"}, // CLE\r\n\t\t\t\t// {\"1XAE\", \"AA0094\"}, // NFA, C-terminal modification, but occurs in non-terminal residue\r\n\t\t\t\t// {\"2H9E\", \"AA0095\"}, // LPD\r\n\t\t\t\t// {\"2BF9\", \"AA0099\"}, // TYC, error reading PDB file\r\n\t\t\t\t// {\"1YYL\", \"AA0100\"}, // VLM\r\n\t\t\t\t{\"1AEX\", \"AA0101\"}, // SCH\r\n\t\t\t\t{\"1OMW\", \"AA0105\"}, // CMT\r\n\t\t\t\t{\"2C0J\", \"AA0106\"}, // P1L\r\n\t\t\t\t{\"1AA1\", \"AA0114\"}, // KCX\r\n\t\t\t\t{\"1O5K\", \"AA0115\"}, // MCL\r\n\t\t\t\t{\"1A8I\", \"AA0119\"}, // LLP\r\n\t\t\t\t{\"2J4Y\", \"AA0120\"}, // LYR\r\n\t\t\t\t//PVL not exist in PDB\r\n\t\t\t\t{\"1A2V\", \"AA0147\"}, // TPQ\r\n\t\t\t\t{\"1JJU\", \"AA0148\"}, // TRQ\r\n\t\t\t\t{\"1WCT\", \"AA0155\"}, // GTH\r\n\t\t\t\t{\"1A2C\", \"AA0172\"}, // TYS\r\n\t\t\t\t{\"1WCT\", \"AA0179\"}, // BTR\r\n\t\t\t\t{\"1AUK\", \"AA0185\"}, // FGL\r\n\t\t\t\t{\"148L\", \"AA0191\"}, // DAL\r\n\t\t\t\t// {\"1C4B\", \"AA0192\"}, // DIL\r\n\t\t\t\t{\"1T5M\", \"AA0196\"}, // DSG\r\n\t\t\t\t// {\"1CZQ\", \"AA0198\"}, // DTR\r\n\t\t\t\t{\"2JUE\", \"AA0199\"}, // DTH\r\n\t\t\t\t{\"1A7Y\", \"AA0200\"}, // DVA\r\n\t\t\t\t{\"1CXP\", \"AA0205\"}, // CSO\r\n\t\t\t\t{\"1F8W\", \"AA0205\"}, // CSX\r\n\t\t\t\t{\"1FFV\", \"AA0215\"}, // ARO\r\n\t\t\t\t{\"1CKN\", \"AA0228\"}, // GPL\r\n\t\t\t\t{\"1BUW\", \"AA0230\"}, // SNC\r\n\t\t\t\t{\"1CZI\", \"AA0234\"}, // SMC\r\n\t\t\t\t{\"1E93\", \"AA0251\"}, // OMT\r\n\t\t\t\t{\"1ACD\", \"AA0262\"}, // CSD\r\n\t\t\t\t{\"1C0T\", \"AA0262\"}, // CSW\r\n\t\t\t\t{\"1E6Y\", \"AA0265\"}, // GL3\r\n\t\t\t\t{\"1BI0\", \"AA0269\"}, // CSS\r\n\t\t\t\t{\"1E6Y\", \"AA0272\"}, // AGM\r\n\t\t\t\t{\"1HBM\", \"AA0273\"}, // MGN\r\n\t\t\t\t{\"1FFU\", \"AA0277\"}, // CSZ\r\n\t\t\t\t{\"3H5R\", \"AA0302\"}, // SNN, note: SNN is not at C-terminal in some structures, e.g. 3I4W\r\n\t\t\t\t{\"1JQ7\", \"AA0311\"}, // DMH\r\n\t\t\t\t{\"1J6Z\", \"AA0317\"}, // HIC\r\n\t\t\t\t{\"1B80\", \"AA0322\"}, // HTR\r\n\t\t\t\t{\"1CWM\", \"AA0336\"}, // IML\r\n\t\t\t\t{\"1BCK\", \"AA0337\"}, // MLE\r\n\t\t\t\t{\"1EA7\", \"AA0361\"}, // OSE\r\n\t\t\t\t{\"1TYS\", \"AA0363\"}, // CXM\r\n\t\t\t\t{\"1EBV\", \"AA0364\"}, // OAS\r\n\t\t\t\t{\"2VZK\", \"AA0423\"}, // TH5\r\n\t\t\t\t{\"2IU4\", \"AA0431\"}, // HIQ\r\n\t\t\t\t{\"1Y9A\", \"AA0432\"}, // OHS\r\n\t\t\t\t{\"2IUW\", \"AA0444\"}, // LED\r\n\t\t\t\t{\"1K83\", \"AA0449\"}, // ILX\r\n\t\t\t\t{\"2VH3\", \"AA0458\"}, // FGL\r\n\t\t\t\t{\"2AOC\", \"AA0464\"}, // OLT\r\n\t\t\t\t{\"1DSR\", \"AA0478\"}, // AHB\r\n\t\t\t\t{\"1AIQ\", \"AA0493\"}, // CXM\r\n\t\t\t\t{\"1CF0\", \"AA0509\"}, // IYR\r\n\t\t\t\t{\"1CTP\", \"AA0510\"}, // TYI\r\n\t\t\t\t{\"3L4M\", \"AA0520\"}, // 0AF\r\n\t\t\t\t{\"4ECA\", \"AA0525\"}, // AEI\r\n\r\n\t\t\t\t// Cross link\r\n\t\t\t\t{\"3M6S\", \"AA0025\"}, // Disulfide bond\r\n\t\t\t\t{\"1A6L\", \"AA0139\"}, // F3S\r\n\t\t\t\t{\"1A70\", \"AA0137\"}, // FES\r\n\t\t\t\t{\"1RPB\", \"AA0216\"}, // Isopeptide (Cys - ASP)\r\n\t\t\t\t{\"3B2M\", \"AA0294\"}, // isopeptide (Lys - Asn)\r\n\t\t\t\t{\"1CAD\", \"AA0136\"}, // FE and 4 Cys, cross-link4\r\n\t\t\t\t{\"1FP4\", \"AA0141\"}, // CFM, HCA, CYS, HIS\r\n\t\t\t\t{\"1M1N\", \"AA0141\"}, // CFN, HCA, CYS, HIS\r\n\t\t\t\t//{\"1G21\", \"AA0141\"}, // CFM, HCA, CYS, HIS, (bond length error 0.5)\r\n\t\t\t\t//{\"1M34\", \"AA0141\"}, // CFM, HCA, CYS, HIS, (bond length error 1.0)\r\n\t\t\t\t{\"1G7K\", \"AA0183\"}, // CRQ, cross-link1\r\n\t\t\t\t{\"1EMA\", \"AA0183\"}, // CRO, cross-link1\r\n\t\t\t\t//{\"1GGE\", \"AA0250\"}, // HIS-TYR, cross-link2, (bond length error 0.6)\r\n\t\t\t\t{\"2JE3\", \"AA0271\"}, // HEC, CYS, CYS, LYS\r\n\t\t\t\t//{\"1MHL\", \"AA0280\"}, // not work for HEM\r\n\t\t\t\t//{\"1MYP\", \"AA0280\"}, // not work for HEM\r\n\t\t\t\t//{\"3HML\", \"AA0283\"}, // PQQ, GLU, TYR, (bond length error 2)\r\n\t\t\t\t{\"1FWX\", \"AA0298\"}, // CU4\r\n\t\t\t\t{\"1QNI\", \"AA0298\"}, // CU4\r\n\t\t\t\t{\"2IWF\", \"AA0298\"}, // CU4\r\n\t\t\t\t{\"2IWK\", \"AA0298\"}, // CU4\r\n\t\t\t\t//{\"1G20\", \"AA0300\"}, // CLF (bond length error 20)\r\n\t\t\t\t{\"1SU6\", \"AA0310\"}, // NFS, 5 CYS, HIS\r\n\t\t\t\t{\"1SU7\", \"AA0310\"}, // NFS, 5 CYS, HIS (looks like 6 CYS are linked)\r\n\t\t\t\t//{\"1JJU\", \"AA0313\"}, // CYS-TRP, (bond length error 3)\r\n\t\t\t\t{\"1JJU\", \"AA0314\"}, // CYS-ASP\r\n\t\t\t\t{\"1JJU\", \"AA0315\"}, // CYS-GLU\r\n\t\t\t\t//{\"1AJ1\", \"AA0330\"}, // CYS-THR, could not find.\r\n\t\t\t\t{\"1PXQ\", \"AA0340\"}, // CYS-PHE\r\n\t\t\t\t{\"1PXQ\", \"AA0342\"}, // CYS-THR\r\n\t\t\t\t{\"1ITK\", \"AA0348\"}, // MET-TYR-TRP\r\n\t\t\t\t//{\"1R30\", \"AA0356\"}, // 3 CYS-SF4-SAM (bond length error 0.6)\r\n\t\t\t\t{\"1R30\", \"AA0357\"}, // 3 CYS-FES-ARG\r\n\t\t\t\t// {\"1S5L\", \"AA0366\"}, // 2 ASP-3 GLU-HIT-OEC (bond length error 6)\r\n\t\t\t\t{\"1NGK\", \"AA0368\"}, //TYR-TYR\r\n\t\t\t\t{\"1YZW\", \"AA0378\"}, // CRU\r\n\t\t\t\t{\"1XQM\", \"AA0379\"}, // CH6\r\n\t\t\t\t{\"1UIS\", \"AA0379\"}, // NRQ\r\n\t\t\t\t{\"2OJK\", \"AA0380\"}, // NYG\r\n\t\t\t\t{\"2A46\", \"AA0381\"}, // CR7\r\n\t\t\t\t{\"1YZW\", \"AA0183\"}, // CRU\r\n\t\t\t\t{\"1XQM\", \"AA0183\"}, // CH6\r\n\t\t\t\t{\"1UIS\", \"AA0183\"}, // NRQ\r\n\t\t\t\t{\"2OJK\", \"AA0183\"}, // NYG\r\n\t\t\t\t{\"2A46\", \"AA0183\"}, // CR7\r\n\t\t\t\t{\"2AXR\", \"AA0436\"}, // CYS-FAD-HIS\r\n\t\t\t\t{\"2QH7\", \"AA0438\"}, // 3 CYS-FES-HIS\r\n\t\t\t\t//{\"2VUM\", \"AA0451\"}, // CYS-TRP (bond length error 2)\r\n\t\t\t\t{\"3EE4\", \"AA0490\"}, // VAL-TYR\r\n\t\t\t\t{\"3H8L\", \"AA0513\"}, // CYS-S3H-CYS\r\n\t\t};\r\n\t\t\r\n\t\tfor ( String[] name : names){\r\n//\t\t\tSystem.out.println(\"===\\n\"+name[0]);\r\n\t\t\ttry {\r\n//\t\t\t\tString result = \r\n//\t\t\t\t\tparserTest(name[0], null); \r\n\t\t\t\t\tparserTest(name[0], name[1]);\r\n//\t\t\t\tSystem.out.println(result);\r\n\t\t\t} catch (Exception e){\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t\tfail(e.getMessage());\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\r\n\tprivate String parserTest(String pdbId, String residId) throws IOException, StructureException {\t\t\r\n\t\tStructure struc = TmpAtomCache.cache.getStructure(pdbId);\r\n\r\n\t\tDefaultProteinModificationParser parser = new DefaultProteinModificationParser();\r\n//\t\tparser.setRecordUnidentifiableCompounds(true);\r\n//\t\tparser.setbondLengthTolerance(2);\r\n\t\t\r\n\t\tSet<ProteinModification> mods;\r\n\t\tif (residId==null) {\r\n\t\t\tmods = ProteinModification.allModifications();\r\n\t\t} else {\r\n\t\t\tmods = ProteinModification.getByResidId(residId);\r\n\t\t}\r\n\t\t\r\n\t\tassertFalse(mods.isEmpty());\r\n\r\n\t\tparser.parse(struc, mods);\r\n\t\tList<ModifiedCompound> mcs = parser.getIdentifiedModifiedCompound();\r\n\r\n\t\tassertFalse(pdbId + \" \" + residId +\" is not false\" , mcs.isEmpty());\r\n\t\t\r\n\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\r\n//\t\tint i=0;\r\n//\t\tfor (ModifiedCompound mc : mcs) {\r\n//\t\t\tsb.append(\"Modification #\"+(++i)+\":\"+\"\\n\");\r\n//\t\t\tsb.append(printModification(mc, struc));\r\n//\t\t}\r\n//\t\t\r\n//\t\tList<PDBResidueNumber> unidentifiedModifiedResidues = parser.getUnidentifiableModifiedResidues();\r\n//\t\ti = 0;\r\n//\t\tfor (PDBResidueNumber resNum : unidentifiedModifiedResidues) {\r\n//\t\t\tsb.append(\"Unidenfied modified residue #\"+(++i)+\":\"+\"\\n\");\r\n//\t\t\tGroup group = StructureTools.getGroupByPDBResidueNumber(struc, resNum);\r\n//\t\t\tsb.append(\"\\t\"+group.getPDBCode()+\"\\t\"+resNum.getChainId()+\"\\t\"+resNum.getResidueNumber()+\"\\n\");\r\n//\t\t}\r\n//\r\n//\t\tList<PDBAtom[]> unidentifiedLinkages = parser.getUnidentifiableAtomLinkages();\r\n//\t\ti = 0;\r\n//\t\tfor (PDBAtom[] atoms : unidentifiedLinkages) {\r\n//\t\t\tsb.append(\"Unidenfied linkage #\"+(++i)+\":\"+\"\\n\");\r\n//\t\t\tsb.append(printLinkage(atoms, struc));\r\n//\t\t}\r\n\t\t\r\n\t\treturn sb.toString();\r\n\t}\r\n\t\r\n\tprivate String printModification(ModifiedCompound mc, Structure struc) throws StructureException {\r\n\t\tProteinModification mod = mc.getModification();\r\n\t\tModificationCategory cat = mod.getCategory();\r\n\t\t\r\n\t\tStringBuilder sb = new StringBuilder();\r\n\t\tsb.append(cat.label()+\": \"+mod.getId()+\"\\n\");\r\n\t\t\r\n\t\tList<PDBAtom[]> atomLinkages = mc.getAtomLinkages();\r\n\t\tif (atomLinkages.isEmpty()) {\r\n\t\t\tGroup g = StructureTools.getGroupByPDBResidueNumber(struc, mc.getResidues().iterator().next());\r\n\t\t\tChain chain = g.getParent();\r\n\t\t\tsb.append(\"\\t\"+g.getPDBName()+\"\\t\"+chain.getName()+\"\\t\"+g.getPDBCode()+\"\\n\");\r\n\t\t} else {\r\n\t\t\tfor (PDBAtom[] atoms : atomLinkages) {\r\n\t\t\t\tsb.append(printLinkage(atoms, struc));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn sb.toString();\r\n\t}\r\n\t\r\n\tprivate String printLinkage(PDBAtom[] atoms, Structure struc) throws StructureException {\r\n\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\r\n\t\tAtom atom1 = getAtom(struc, atoms[0]);\r\n\t\t\r\n\t\tGroup group = atom1.getParent();\r\n\t\tChain chain = group.getParent();\r\n\t\tsb.append(\"\\t\"+group.getPDBName()+\"\\t\"+chain.getName()+\"\\t\"\r\n\t\t\t\t+group.getPDBCode()+\"\\t\"+atom1.getName()+\"\\n\");\r\n\r\n\t\tAtom atom2 = getAtom(struc, atoms[1]);\r\n\t\tgroup = atom2.getParent();\r\n\t\tassertEquals(chain, group.getParent());\r\n\t\tsb.append(\"\\t\"+group.getPDBName()+\"\\t\"+chain.getName()+\"\\t\"\r\n\t\t\t\t+group.getPDBCode()+\"\\t\"+atom2.getName()+\"\\n\");\r\n\r\n\t\ttry {\r\n\t\t\tsb.append(\"\\t\"+Calc.getDistance(atom1, atom2)+\"\\n\");\r\n\t\t} catch (StructureException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\treturn sb.toString();\r\n\t}\r\n\r\n\tprivate Atom getAtom(Structure struc, PDBAtom atom) throws StructureException {\r\n\t\tPDBResidueNumber num = atom.getGroup();\r\n\t\tGroup group = StructureTools.getGroupByPDBResidueNumber(struc, num);\r\n\t\treturn group.getAtom(atom.getAtomName());\r\n\t}\r\n}\r\n","commitMessage":"biojava3-protmod: save identified PTMs as Strings instead of Groups and Atoms.\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8166 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"biojava3-protmod: save identified PTMs as Strings instead of Groups and Atoms.\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8166 7c6358e6-4a41-0410-a743-a5b2a554c398\n","allZero":false}