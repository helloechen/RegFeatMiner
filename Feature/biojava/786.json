{"repository":"biojava","prod_path":"biojava-structure/src/main/java/org/biojava/nbio/structure/ResidueNumber.java","test_path":"biojava-structure/src/test/java/org/biojava/nbio/structure/ResidueNumberTest.java","prod_time":"2017-06-30 02:40:10","test_time":"2018-03-16 05:46:14","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"738d347b141299b9491743148377eb8586d5ce62","test_commitID":"1458d85cad306457941b493ec2e9b6d1db20a1ed","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Jun 17, 2010\n * Author: ap3\n *\n */\n\npackage org.biojava.nbio.structure;\n\nimport java.io.Serializable;\nimport java.io.StringWriter;\n\n/** Everything that is needed to uniquely describe a residue position\n *\n * @author Andreas Prlic\n *\n */\npublic class ResidueNumber implements Serializable, Comparable<ResidueNumber>\n{\n\n\tprivate static final long serialVersionUID = 1773011704758536083L;\n\tprivate String chainName;\n\tprivate Character insCode;\n\tprivate Integer seqNum;\n\n\tpublic ResidueNumber() {\n\t}\n\n\tpublic ResidueNumber(ResidueNumber o) {\n\t\tthis.chainName = o.chainName;\n\t\tthis.insCode = o.insCode;\n\t\tthis.seqNum = o.seqNum;\n\t}\n\n\tpublic ResidueNumber(String chainName, Integer residueNumber, Character insCode) {\n\t\tthis.chainName = chainName;\n\t\tthis.seqNum = residueNumber;\n\t\tthis.insCode = insCode;\n\t}\n\n\tpublic String getChainName()\n\t{\n\t\treturn chainName;\n\t}\n\tpublic void setChainName(String chainName)\n\t{\n\t\tthis.chainName = chainName;\n\t}\n\tpublic Character getInsCode()\n\t{\n\t\treturn insCode;\n\t}\n\tpublic void setInsCode(Character insCode)\n\t{\n\t\tthis.insCode = insCode;\n\t}\n\tpublic Integer getSeqNum()\n\t{\n\t\treturn seqNum;\n\t}\n\tpublic void setSeqNum(Integer seqNum)\n\t{\n\t\tthis.seqNum = seqNum;\n\t}\n\n\n\n\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tResidueNumber other = (ResidueNumber) obj;\n\t\tif (chainName == null) {\n\t\t\tif (other.chainName != null)\n\t\t\t\treturn false;\n\t\t} else if (!chainName.equals(other.chainName))\n\t\t\treturn false;\n\t\tif (insCode == null) {\n\t\t\tif (other.insCode != null)\n\t\t\t\treturn false;\n\t\t} else if (!insCode.equals(other.insCode))\n\t\t\treturn false;\n\t\tif (seqNum == null) {\n\t\t\tif (other.seqNum != null)\n\t\t\t\treturn false;\n\t\t} else if (!seqNum.equals(other.seqNum))\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Check if the seqNum and insertion code are equivalent,\n\t * ignoring the chain\n\t * @param obj\n\t * @return\n\t */\n\tpublic boolean equalsPositional(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tResidueNumber other = (ResidueNumber) obj;\n\t\tif (insCode == null) {\n\t\t\tif (other.insCode != null)\n\t\t\t\treturn false;\n\t\t} else if (!insCode.equals(other.insCode))\n\t\t\treturn false;\n\t\tif (seqNum == null) {\n\t\t\tif (other.seqNum != null)\n\t\t\t\treturn false;\n\t\t} else if (!seqNum.equals(other.seqNum))\n\t\t\treturn false;\n\n\t\treturn true;\n\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((chainName == null) ? 0 : chainName.hashCode());\n\t\tresult = prime * result + ((insCode == null) ? 0 : insCode.hashCode());\n\t\tresult = prime * result + ((seqNum == null) ? 0 : seqNum.hashCode());\n\t\treturn result;\n\t}\n\n\t/**\n\t * @return The residue number and insertion code as a string, eg \"74A\"\n\t * @see java.lang.Object#toString()\n\t */\n\t@Override\n\tpublic String toString() {\n\n\t\tStringWriter writer = new StringWriter();\n\t\t//\t   if ( chainName != null){\n\t\t//\t\t   writer.append(chainName);\n\t\t//\t\t   writer.append(\":\");\n\t\t//\t   }\n\t\twriter.append(String.valueOf(seqNum));\n\t\tif (  insCode != null && ( insCode != ' '))\n\t\t\twriter.append(insCode);\n\n\t\treturn writer.toString();\n\t}\n\n\t/**\n\t * @return The chain, number, and insertion code as a string, eg \"B  74A\" or \"A    1 \"\n\t */\n\tpublic String toPDB() {\n\t\tString insCodeS ;\n\t\tif ( insCode != null)\n\t\t\tinsCodeS = insCode+\"\";\n\t\telse insCodeS = \" \";\n\t\treturn String.format(\"%s%4d%-2s\", chainName, seqNum, insCodeS);\n\t}\n\n\n\t/** Convert a string representation of a residue number to a residue number object.\n\t * The string representation can be a integer followed by a character.\n\t *\n\t * @param pdb_code\n\t * @return a ResidueNumber object, or null if the input was null\n\t */\n\tpublic static ResidueNumber fromString(String pdb_code) {\n\t\tif(pdb_code == null)\n\t\t\treturn null;\n\n\t\tResidueNumber residueNumber = new ResidueNumber();\n\t\tInteger resNum = null;\n\t\tString icode = null;\n\n\t\ttry {\n\t\t\tresNum = Integer.parseInt(pdb_code);\n\t\t} catch ( NumberFormatException e){\n\t\t\t// there is an insertion code..\n\n\t\t\t// Split at any position that's either:\n\t\t\t// preceded by a digit and followed by a non-digit, or\n\t\t\t// preceded by a non-digit and followed by a digit.\n\t\t\tString[] spl = pdb_code.split(\"(?<=\\\\d)(?=\\\\D)|(?<=\\\\D)(?=\\\\d)\");\n\t\t\tif ( spl.length == 2){\n\t\t\t\tresNum = Integer.parseInt(spl[0]);\n\t\t\t\ticode = spl[1];\n\t\t\t}\n\n\t\t}\n\n\t\tresidueNumber.setSeqNum(resNum);\n\t\tif ( icode == null)\n\t\t\tresidueNumber.setInsCode(null);\n\t\telse if ( icode.length() > 0)\n\t\t\tresidueNumber.setInsCode(icode.charAt(0));\n\t\treturn residueNumber;\n\t}\n\n\n\t/**\n\t * Compare residue numbers by chain, sequence number, and insertion code\n\t */\n\t@Override\n\tpublic int compareTo(ResidueNumber other) {\n\n\t\t// chain id\n\t\tif (chainName != null && other.chainName != null) {\n\t\t\tif (!chainName.equals(other.chainName)) return chainName.compareTo(other.chainName);\n\t\t}\n\t\tif (chainName != null && other.chainName == null) {\n\t\t\treturn 1;\n\t\t} else if (chainName == null && other.chainName != null) {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn compareToPositional(other);\n\t}\n\n\t/**\n\t * Compare residue numbers by sequence number and insertion code,\n\t * ignoring the chain\n\t * @param other\n\t * @return\n\t */\n\tpublic int compareToPositional(ResidueNumber other) {\n\t\t// sequence number\n\t\tif (seqNum != null && other.seqNum != null) {\n\t\t\tif (!seqNum.equals(other.seqNum)) return seqNum.compareTo(other.seqNum);\n\t\t}\n\t\tif (seqNum != null && other.seqNum == null) {\n\t\t\treturn 1;\n\t\t} else if (seqNum == null && other.seqNum != null) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// insertion code\n\t\tif (insCode != null && other.insCode != null) {\n\t\t\tif (!insCode.equals(other.insCode)) return insCode.compareTo(other.insCode);\n\t\t}\n\t\tif (insCode != null && other.insCode == null) {\n\t\t\treturn 1;\n\t\t} else if (insCode == null && other.insCode != null) {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tpublic String printFull() {\n\t\tfinal String chain = chainName==null? \"\" : chainName;\n\t\treturn chain + \"_\" + toString();\n\t}\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Jun 17, 2010\n * Author: ap3\n *\n */\n\npackage org.biojava.nbio.structure;\n\nimport java.io.Serializable;\nimport java.io.StringWriter;\n\n/** \n * Everything that is needed to uniquely describe a residue position\n *\n * @author Andreas Prlic\n *\n */\npublic class ResidueNumber implements Serializable, Comparable<ResidueNumber>\n{\n\n\tprivate static final long serialVersionUID = 1773011704758536083L;\n\tprivate String chainName;\n\tprivate Character insCode;\n\tprivate Integer seqNum;\n\n\tpublic ResidueNumber() {\n\t}\n\n\tpublic ResidueNumber(ResidueNumber o) {\n\t\tthis.chainName = o.chainName;\n\t\tthis.insCode = o.insCode;\n\t\tthis.seqNum = o.seqNum;\n\t}\n\n\tpublic ResidueNumber(String chainName, Integer residueNumber, Character insCode) {\n\t\tthis.chainName = chainName;\n\t\tthis.seqNum = residueNumber;\n\t\tthis.insCode = insCode;\n\t}\n\n\tpublic String getChainName()\n\t{\n\t\treturn chainName;\n\t}\n\tpublic void setChainName(String chainName)\n\t{\n\t\tthis.chainName = chainName;\n\t}\n\tpublic Character getInsCode()\n\t{\n\t\treturn insCode;\n\t}\n\tpublic void setInsCode(Character insCode)\n\t{\n\t\tthis.insCode = insCode;\n\t}\n\tpublic Integer getSeqNum()\n\t{\n\t\treturn seqNum;\n\t}\n\tpublic void setSeqNum(Integer seqNum)\n\t{\n\t\tthis.seqNum = seqNum;\n\t}\n\n\n\n\n\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tResidueNumber other = (ResidueNumber) obj;\n\t\tif (chainName == null) {\n\t\t\tif (other.chainName != null)\n\t\t\t\treturn false;\n\t\t} else if (!chainName.equals(other.chainName))\n\t\t\treturn false;\n\t\tif (insCode == null) {\n\t\t\tif (other.insCode != null)\n\t\t\t\treturn false;\n\t\t} else if (!insCode.equals(other.insCode))\n\t\t\treturn false;\n\t\tif (seqNum == null) {\n\t\t\tif (other.seqNum != null)\n\t\t\t\treturn false;\n\t\t} else if (!seqNum.equals(other.seqNum))\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Check if the seqNum and insertion code are equivalent,\n\t * ignoring the chain\n\t * @param obj\n\t * @return\n\t */\n\tpublic boolean equalsPositional(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tResidueNumber other = (ResidueNumber) obj;\n\t\tif (insCode == null) {\n\t\t\tif (other.insCode != null)\n\t\t\t\treturn false;\n\t\t} else if (!insCode.equals(other.insCode))\n\t\t\treturn false;\n\t\tif (seqNum == null) {\n\t\t\tif (other.seqNum != null)\n\t\t\t\treturn false;\n\t\t} else if (!seqNum.equals(other.seqNum))\n\t\t\treturn false;\n\n\t\treturn true;\n\n\t}\n\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((chainName == null) ? 0 : chainName.hashCode());\n\t\tresult = prime * result + ((insCode == null) ? 0 : insCode.hashCode());\n\t\tresult = prime * result + ((seqNum == null) ? 0 : seqNum.hashCode());\n\t\treturn result;\n\t}\n\n\t/**\n\t * @return The residue number and insertion code as a string, eg \"74A\"\n\t * @see java.lang.Object#toString()\n\t */\n\t@Override\n\tpublic String toString() {\n\n\t\tStringWriter writer = new StringWriter();\n\t\t//\t   if ( chainName != null){\n\t\t//\t\t   writer.append(chainName);\n\t\t//\t\t   writer.append(\":\");\n\t\t//\t   }\n\t\twriter.append(String.valueOf(seqNum));\n\t\tif (  insCode != null && ( insCode != ' '))\n\t\t\twriter.append(insCode);\n\n\t\treturn writer.toString();\n\t}\n\n\t/**\n\t * @return The chain, number, and insertion code as a string, eg \"B  74A\" or \"A    1 \"\n\t */\n\tpublic String toPDB() {\n\t\tString insCodeS ;\n\t\tif ( insCode != null)\n\t\t\tinsCodeS = insCode+\"\";\n\t\telse insCodeS = \" \";\n\t\treturn String.format(\"%s%4d%-2s\", chainName, seqNum, insCodeS);\n\t}\n\n\n\t/** Convert a string representation of a residue number to a residue number object.\n\t * The string representation can be a integer followed by a character.\n\t *\n\t * @param pdb_code\n\t * @return a ResidueNumber object, or null if the input was null\n\t */\n\tpublic static ResidueNumber fromString(String pdb_code) {\n\t\tif(pdb_code == null)\n\t\t\treturn null;\n\n\t\tResidueNumber residueNumber = new ResidueNumber();\n\t\tInteger resNum = null;\n\t\tString icode = null;\n\n\t\ttry {\n\t\t\tresNum = Integer.parseInt(pdb_code);\n\t\t} catch ( NumberFormatException e){\n\t\t\t// there is an insertion code..\n\n\t\t\t// Split at any position that's either:\n\t\t\t// preceded by a digit and followed by a non-digit, or\n\t\t\t// preceded by a non-digit and followed by a digit.\n\t\t\tString[] spl = pdb_code.split(\"(?<=\\\\d)(?=\\\\D)|(?<=\\\\D)(?=\\\\d)\");\n\t\t\tif ( spl.length == 2){\n\t\t\t\tresNum = Integer.parseInt(spl[0]);\n\t\t\t\ticode = spl[1];\n\t\t\t}\n\n\t\t}\n\n\t\tresidueNumber.setSeqNum(resNum);\n\t\tif ( icode == null)\n\t\t\tresidueNumber.setInsCode(null);\n\t\telse if ( icode.length() > 0)\n\t\t\tresidueNumber.setInsCode(icode.charAt(0));\n\t\treturn residueNumber;\n\t}\n\n\n\t/**\n\t * Compare residue numbers by chain, sequence number, and insertion code\n\t */\n\t@Override\n\tpublic int compareTo(ResidueNumber other) {\n\n\t\t// chain id\n\t\tif (chainName != null && other.chainName != null) {\n\t\t\tif (!chainName.equals(other.chainName)) return chainName.compareTo(other.chainName);\n\t\t}\n\t\tif (chainName != null && other.chainName == null) {\n\t\t\treturn 1;\n\t\t} else if (chainName == null && other.chainName != null) {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn compareToPositional(other);\n\t}\n\n\t/**\n\t * Compare residue numbers by sequence number and insertion code,\n\t * ignoring the chain\n\t * @param other\n\t * @return\n\t */\n\tpublic int compareToPositional(ResidueNumber other) {\n\t\t// sequence number\n\t\tif (seqNum != null && other.seqNum != null) {\n\t\t\tif (!seqNum.equals(other.seqNum)) return seqNum.compareTo(other.seqNum);\n\t\t}\n\t\tif (seqNum != null && other.seqNum == null) {\n\t\t\treturn 1;\n\t\t} else if (seqNum == null && other.seqNum != null) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// insertion code\n\t\tif (insCode != null && other.insCode != null) {\n\t\t\tif (!insCode.equals(other.insCode)) return insCode.compareTo(other.insCode);\n\t\t}\n\t\tif (insCode != null && other.insCode == null) {\n\t\t\treturn 1;\n\t\t} else if (insCode == null && other.insCode != null) {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tpublic String printFull() {\n\t\tfinal String chain = chainName==null? \"\" : chainName;\n\t\treturn chain + \"_\" + toString();\n\t}\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojava.nbio.structure;\n\nimport junit.framework.TestCase;\nimport org.junit.*;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n\n/**\n *\n * @author Jules Jacobsen <jacobsen@ebi.ac.uk>\n */\npublic class ResidueNumberTest extends TestCase {\n\n\tpublic ResidueNumberTest() {\n\t}\n\n\t@BeforeClass\n\tpublic static void setUpClass() throws Exception {\n\t}\n\n\t@AfterClass\n\tpublic static void tearDownClass() throws Exception {\n\t}\n\n\t@Override\n\t@Before\n\tpublic void setUp() {\n\t}\n\n\t@Override\n\t@After\n\tpublic void tearDown() {\n\t}\n\n\t/**\n\t * Test of getChainName method, of class ResidueNumber.\n\t */\n\t@Test\n\tpublic void testGetSetChainId() {\n//        System.out.println(\"getChainName\");\n\t\tResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n\t\tString expResult = \"A\";\n\t\tString result = instance.getChainName();\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of getInsCode method, of class ResidueNumber.\n\t */\n\t@Test\n\tpublic void testGetSetInsCode() {\n//        System.out.println(\"getInsCode\");\n\t\tResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n\t\tCharacter expResult = ' ';\n\t\tCharacter result = instance.getInsCode();\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of getSeqNum method, of class ResidueNumber.\n\t */\n\t@Test\n\tpublic void testGetSetResidueNumber() {\n//        System.out.println(\"getSeqNum\");\n\t\tResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n\t\tInteger expResult = 42;\n\t\tInteger result = instance.getSeqNum();\n\t\tassertEquals(expResult, result);\n\n\t}\n\n\n\t/**\n\t * Test of equals method, of class ResidueNumber.\n\t */\n\t@Test\n\tpublic void testEquals() {\n//        System.out.println(\"equals\");\n\t\tResidueNumber number1 = new ResidueNumber(\"A\", 42, ' ');\n\t\tResidueNumber number2 = new ResidueNumber(\"A\", 42, ' ');\n\t\tboolean expResult = true;\n\t\tboolean result = number2.equals(number1);\n\t\tassertEquals(expResult, result);\n\n\t\tSet<ResidueNumber> numberSet= new HashSet<ResidueNumber>();\n\t\tnumberSet.add(number1);\n\t\tnumberSet.add(number2);\n\t\tassertEquals(1, numberSet.size());\n\n\t}\n\n\t/**\n\t * Test of hashCode method, of class ResidueNumber.\n\t */\n\t@Test\n\tpublic void testHashCode() {\n//        System.out.println(\"hashCode\");\n\t\tResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n\t\tint expResult = 93290;\n\t\tint result = instance.hashCode();\n\t\tassertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of toString method, of class ResidueNumber.\n\t */\n\t@Test\n\tpublic void testToString() {\n//        System.out.println(\"toString\");\n\t\tResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n\t\tString expResult = \"42\";\n\t\tString result = instance.toString();\n\t\tassertEquals(expResult, result);\n\n\t}\n\n\t/**\n\t * Test of toPDB method, of class ResidueNumber.\n\t */\n\t@Test\n\tpublic void testToPDB() {\n\n\t\tResidueNumber instance  = new ResidueNumber(\"A\", 42, ' ');\n\t\tResidueNumber instance2 = new ResidueNumber(\"A\", 42, null);\n\n\t\tString expResult = \"A  42  \";\n\t\tString result1 = instance.toPDB();\n\t\tassertEquals(expResult, result1);\n\n\t\tString result2 = instance2.toPDB();\n\t\tassertEquals(expResult, result2);\n\t}\n\n\n\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\n\npackage org.biojava.nbio.structure;\n\nimport org.junit.*;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n\n/**\n *\n * @author Jules Jacobsen <jacobsen@ebi.ac.uk>\n */\npublic class ResidueNumberTest {\n\n\tpublic ResidueNumberTest() {\n\t}\n\n\t@BeforeClass\n\tpublic static void setUpClass() throws Exception {\n\t}\n\n\t@AfterClass\n\tpublic static void tearDownClass() throws Exception {\n\t}\n\n\t@Before\n\tpublic void setUp() {\n\t}\n\n\t@After\n\tpublic void tearDown() {\n\t}\n\n\t/**\n\t * Test of getChainName method, of class ResidueNumber.\n\t */\n\t@Test\n\tpublic void testGetSetChainId() {\n//        System.out.println(\"getChainName\");\n\t\tResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n\t\tString expResult = \"A\";\n\t\tString result = instance.getChainName();\n\t\tAssert.assertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of getInsCode method, of class ResidueNumber.\n\t */\n\t@Test\n\tpublic void testGetSetInsCode() {\n//        System.out.println(\"getInsCode\");\n\t\tResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n\t\tCharacter expResult = ' ';\n\t\tCharacter result = instance.getInsCode();\n\t\tAssert.assertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of getSeqNum method, of class ResidueNumber.\n\t */\n\t@Test\n\tpublic void testGetSetResidueNumber() {\n//        System.out.println(\"getSeqNum\");\n\t\tResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n\t\tInteger expResult = 42;\n\t\tInteger result = instance.getSeqNum();\n\t\tAssert.assertEquals(expResult, result);\n\n\t}\n\n\n\t/**\n\t * Test of equals method, of class ResidueNumber.\n\t */\n\t@Test\n\tpublic void testEquals() {\n//        System.out.println(\"equals\");\n\t\tResidueNumber number1 = new ResidueNumber(\"A\", 42, ' ');\n\t\tResidueNumber number2 = new ResidueNumber(\"A\", 42, ' ');\n\t\tboolean expResult = true;\n\t\tboolean result = number2.equals(number1);\n\t\tAssert.assertEquals(expResult, result);\n\n\t\tSet<ResidueNumber> numberSet= new HashSet<ResidueNumber>();\n\t\tnumberSet.add(number1);\n\t\tnumberSet.add(number2);\n\t\tAssert.assertEquals(1, numberSet.size());\n\n\t}\n\n\t/**\n\t * Test of hashCode method, of class ResidueNumber.\n\t */\n\t@Test\n\tpublic void testHashCode() {\n//        System.out.println(\"hashCode\");\n\t\tResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n\t\tint expResult = 93290;\n\t\tint result = instance.hashCode();\n\t\tAssert.assertEquals(expResult, result);\n\t}\n\n\t/**\n\t * Test of toString method, of class ResidueNumber.\n\t */\n\t@Test\n\tpublic void testToString() {\n//        System.out.println(\"toString\");\n\t\tResidueNumber instance = new ResidueNumber(\"A\", 42, ' ');\n\t\tString expResult = \"42\";\n\t\tString result = instance.toString();\n\t\tAssert.assertEquals(expResult, result);\n\n\t}\n\n\t/**\n\t * Test of toPDB method, of class ResidueNumber.\n\t */\n\t@Test\n\tpublic void testToPDB() {\n\n\t\tResidueNumber instance  = new ResidueNumber(\"A\", 42, ' ');\n\t\tResidueNumber instance2 = new ResidueNumber(\"A\", 42, null);\n\n\t\tString expResult = \"A  42  \";\n\t\tString result1 = instance.toPDB();\n\t\tAssert.assertEquals(expResult, result1);\n\n\t\tString result2 = instance2.toPDB();\n\t\tAssert.assertEquals(expResult, result2);\n\t}\n\n\n\n}\n","commitMessage":"Make other structure classes serializable\n","test_commitMessage":"Converting junit3 to 4, thanks intellij\n","allZero":true}