{"repository":"biojava","prod_path":"biojava3-structure/src/main/java/org/biojava/bio/structure/rcsb/RCSBDescriptionFactory.java","test_path":"biojava3-structure/src/test/java/org/biojava/bio/structure/rcsb/RCSBDescriptionFactoryTest.java","prod_time":"2013-07-04 01:28:51","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":9,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":35,"del_classname_line":0,"del_condition_line":8,"del_field_line":1,"del_import_line":6,"del_packageid_line":0,"del_parameter_line":6,"del_return_line":10,"label":"NEGATIVE","prod_commitID":"ab010715ddfcc7f5ae020f6b9a137e923db09852","test_commitID":"","isfound":"not found test change","originPro":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 2012-11-20\n * Created by Douglas Myers-Turnbull\n *\n * @since 3.0.6\n */\npackage org.biojava.bio.structure.rcsb;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\n/**\n * Fetches information from <a href=\"http://www.pdb.org/pdb/software/rest.do#descPDB\">RCSB's RESTful Web Service Interface</a>.\n * A factory for {@link RCSBDescription RCSBDescriptions} from {@code describeMol} XML files. The factory methods will\n * return null if the data was not found (rather than throwing an exception); client code should test for this. This is\n * for consistency: if the factory could not read some part (corresponding to a field in a class in\n * {@code rcsb.descriptions}) of the XML file, either because it was blank or contained an error that could not be\n * safely ignored, that field will simply be null. This holds even for numerical values. On some parse errors, the error\n * will additionally be printed to standard error.\n * \n * Example usage:\n * <pre>\n * RCSBDescription description = RCSBDescriptionFactory.get(\"1w0p\");\n * System.out.println(description.getPdbId()); // prints \"1w0p\"\n * </pre>\n * \n * @see <a href=\"http://www.pdb.org/pdb/software/rest.do#descPDB\">RCSB RESTful</a>\n * \n * @author dmyerstu\n * @since 3.0.6\n */\npublic class RCSBDescriptionFactory {\n\n\t// this IS needed\n\tprivate static boolean documentBuilderFactorySet = false;\n\n\tprivate static final String URL_STUB = \"http://www.rcsb.org/pdb/rest/describeMol?structureId=\";\n\n\t/**\n\t * @return An {@link RCSBDescription} from the XML file loaded as {@code stream}. Prefer calling {@link #get(String)} if\n\t *         you want data directly from RCSB's RESTful service.\n\t * @see RCSBDescriptionFactory#get(String)\n\t */\n\tpublic static RCSBDescription get(InputStream stream) {\n\n\t\tNodeList data;\n\t\ttry {\n\t\t\tdata = getNodes(stream);\n\t\t} catch (IOException e) {\n\t\t\tprintError(e);\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t// first get the main info\n\t\tRCSBDescription description = new RCSBDescription();\n\t\tElement structureIdE = null;\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\tstructureIdE = (Element) data.item(i);\n\t\t\tif (structureIdE.getNodeName().equals(\"structureId\")) {\n\t\t\t\tdescription.setPdbId(structureIdE.getAttribute(\"id\"));\n\t\t\t}\n\t\t}\n\n\t\t// now get polymers\n\t\tdata = structureIdE.getChildNodes();\n\t\tElement polymerE = null;\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\tpolymerE = (Element) data.item(i);\n\t\t\tif (polymerE.getNodeName().equals(\"polymer\")) {\n\t\t\t\tRCSBPolymer polymer = makePolymer(polymerE);\n\t\t\t\tdescription.addPolymer(polymer);\n\t\t\t}\n\t\t}\n\n\t\treturn description;\n\n\t}\n\n\t/**\n\t * @return An {@link RCSBDescription} from the XML file at\n\t *         {@code \"http://www.pdb.org/pdb/rest/describeMol?structureId=pdbId\"}. This is the preferred factory\n\t *         method, unless a different URL or input source is required.\n\t * @see RCSBDescriptionFactory#get(InputStream)\n\t */\n\tpublic static RCSBDescription get(String pdbId) {\n\n\t\tInputStream is;\n\t\ttry {\n\t\t\tURL url = new URL(URL_STUB + pdbId);\n\t\t\tis = url.openConnection().getInputStream();\n\t\t} catch (IOException e) {\n\t\t\tprintError(e);\n\t\t\treturn null;\n\t\t}\n\t\treturn get(is);\n\t}\n\n\t/**\n\t * @param stream\n\t * @return A {@link NodeList} of top-level {@link Node Nodes} in {@code stream}.\n\t * @throws IOException\n\t */\n\tprivate static NodeList getNodes(InputStream stream) throws IOException {\n\n\t\tif (!documentBuilderFactorySet) { // it's really stupid, but we have to do this\n\t\t\tSystem.setProperty(\"javax.xml.parsers.DocumentBuilderFactory\",\n\t\t\t\t\t\"com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl\");\n\t\t\tdocumentBuilderFactorySet = true;\n\t\t}\n\t\tDocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder builder = null;\n\t\tDocument document = null;\n\t\ttry {\n\t\t\tbuilder = builderFactory.newDocumentBuilder();\n\t\t} catch (ParserConfigurationException e) {\n\t\t\tprintError(e);\n\t\t\tstream.close();\n\t\t\tthrow new IOException(e);\n\t\t}\n\t\ttry {\n\t\t\tdocument = builder.parse(stream);\n\t\t} catch (SAXException e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t\tprintError(e);\n\t\t\tstream.close();\n\t\t\tthrow new IOException(e);\n\t\t}\n\t\tNode root = document.getDocumentElement();\n\t\treturn root.getChildNodes();\n\t}\n\n\tprivate static RCSBMacromolecule makeMolecule(Element moleculeE) {\n\t\tRCSBMacromolecule molecule = new RCSBMacromolecule();\n\t\tmolecule.setName(moleculeE.getAttribute(\"name\"));\n\t\tElement element = null;\n\t\tNodeList data = moleculeE.getChildNodes();\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\telement = (Element) data.item(i);\n\t\t\tif (element.getNodeName().equals(\"accession\")) {\n\t\t\t\tmolecule.addAccession(element.getAttribute(\"id\"));\n\t\t\t}\n\t\t}\n\t\treturn molecule;\n\t}\n\n\tprivate static RCSBPolymer makePolymer(Element polymerE) {\n\n\t\tRCSBPolymer polymer = new RCSBPolymer();\n\t\tpolymer.setIndex(toInt(polymerE.getAttribute(\"entityNr\")));\n\t\tpolymer.setLength(toInt(polymerE.getAttribute(\"length\")));\n\t\tpolymer.setWeight(toDouble(polymerE.getAttribute(\"weight\")));\n\t\tpolymer.setType(toStr(polymerE.getAttribute(\"type\")));\n\n\t\tElement element = null;\n\t\tNodeList data = polymerE.getChildNodes();\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\telement = (Element) data.item(i);\n\t\t\tif (element.getNodeName().equals(\"chain\")) {\n\t\t\t\tparseChains(polymer, element.getAttribute(\"id\"));\n\t\t\t} else if (element.getNodeName().equals(\"Taxonomy\")) {\n\t\t\t\tString name = element.getAttribute(\"name\");\n\t\t\t\tint id = toInt(element.getAttribute(\"id\"));\n\t\t\t\tRCSBTaxonomy taxonomy = new RCSBTaxonomy(name, id);\n\t\t\t\tpolymer.setTaxonomy(taxonomy);\n\t\t\t} else if (element.getNodeName().equals(\"macroMolecule\")) {\n\t\t\t\tRCSBMacromolecule molecule = makeMolecule(element);\n\t\t\t\tpolymer.setMolecule(molecule);\n\t\t\t} else if (element.getNodeName().equals(\"polymerDescription\")) {\n\t\t\t\tpolymer.setDescription(element.getAttribute(\"description\"));\n\t\t\t} else if (element.getNodeName().equals(\"enzClass\")) {\n\t\t\t\tpolymer.setEnzClass(element.getAttribute(\"ec\"));\n\t\t\t} else if (element.getNodeName().equals(\"synonym\")) {\n\t\t\t\tparseSynonyms(polymer, element.getAttribute(\"name\"));\n\t\t\t}\n\t\t}\n\t\treturn polymer;\n\t}\n\n\tprivate static void parseChains(RCSBPolymer polymer, String string) {\n\t\tString[] parts = string.split(\"\\\\s*,\\\\s*\");\n\t\tfor (String part : parts) {\n\t\t\tif (part.length() == 1) {\n\t\t\t\tpolymer.addChain(part.charAt(0));\n\t\t\t} else {\n\t\t\t\tprintError(new Exception(\"Chain id contained more than one character.\"));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Prints an error message for {@code e} that shows causes and suppressed messages recursively.\n\t * Just a little more useful than {@code e.printStackTrace()}.\n\t * \n\t * @param e\n\t */\n\tpublic static void printError(Exception e) {\n\t\tSystem.err.println(printError(e, \"\"));\n\t}\n\n\t/**\n\t * @see #printError(Exception)\n\t */\n\tprivate static String printError(Exception e, String tabs) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tThrowable prime = e;\n\t\twhile (prime != null) {\n\t\t\tif (tabs.length() > 0) sb.append(tabs + \"Cause:\" + \"\\n\");\n\t\t\tsb.append(tabs + prime.getClass().getSimpleName());\n\t\t\tif (prime.getMessage() != null) sb.append(\": \" + prime.getMessage());\n\t\t\tsb.append(\"\\n\");\n\t\t\tif (prime instanceof Exception) {\n\t\t\t\tStackTraceElement[] trace = ((Exception) prime).getStackTrace();\n\t\t\t\tfor (StackTraceElement element : trace) {\n\t\t\t\t\tsb.append(tabs + element.toString() + \"\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tprime = prime.getCause();\n\t\t\ttabs += \"\\t\";\n\t\t}\n\t\tsb.append(\"\\n\");\n\t\treturn sb.toString();\n\t}\n\n\tprivate static void parseSynonyms(RCSBPolymer polymer, String string) {\n\t\tString[] parts = string.split(\"\\\\s*,\\\\s*\");\n\t\tfor (String part : parts) {\n\t\t\tpolymer.addSynonym(part);\n\t\t}\n\t}\n\n\tprivate static Double toDouble(String s) {\n\t\tif (s == \"\") return null;\n\t\ttry {\n\t\t\treturn Double.parseDouble(s);\n\t\t} catch (NumberFormatException e) {\n\t\t\tprintError(e);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static Integer toInt(String s) {\n\t\tif (s == \"\") return null;\n\t\ttry {\n\t\t\treturn Integer.parseInt(s);\n\t\t} catch (NumberFormatException e) {\n\t\t\tprintError(e);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * @param s\n\t * @return {@code s}, or null if {@code s} is the empty string\n\t */\n\tprivate static String toStr(String s) {\n\t\tif (s == \"\") return null;\n\t\treturn s;\n\t}\n\n}\n","changedPro":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 2012-11-20\n * Created by Douglas Myers-Turnbull\n *\n * @since 3.0.6\n */\npackage org.biojava.bio.structure.rcsb;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\n\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\n\n/**\n * Fetches information from <a href=\"http://www.pdb.org/pdb/software/rest.do#descPDB\">RCSB's RESTful Web Service Interface</a>.\n * A factory for {@link RCSBDescription RCSBDescriptions} from {@code describeMol} XML files. The factory methods will\n * return null if the data was not found (rather than throwing an exception); client code should test for this. This is\n * for consistency: if the factory could not read some part (corresponding to a field in a class in\n * {@code rcsb.descriptions}) of the XML file, either because it was blank or contained an error that could not be\n * safely ignored, that field will simply be null. This holds even for numerical values. On some parse errors, the error\n * will additionally be printed to standard error.\n * \n * Example usage:\n * <pre>\n * RCSBLigands ligands = RCSBLigandsFactory.get(\"1w0p\");\n * RCSBLigand firstLigand = ligands.getLigands().get(0);\n * System.out.println(ligand.getSmiles()); // prints \"[Ca+2]\"\n * </pre>\n * \n * @see <a href=\"http://www.pdb.org/pdb/software/rest.do#descPDB\">RCSB RESTful</a>\n * \n * @author dmyerstu\n * @since 3.0.6\n */\npublic class RCSBDescriptionFactory {\n\n\tprivate static final String URL_STUB = \"http://www.rcsb.org/pdb/rest/describeMol?structureId=\";\n\n\t/**\n\t * @return An {@link RCSBDescription} from the XML file loaded as {@code stream}. Prefer calling {@link #get(String)} if\n\t *         you want data directly from RCSB's RESTful service.\n\t * @see RCSBDescriptionFactory#get(String)\n\t */\n\tpublic static RCSBDescription get(InputStream stream) {\n\n\t\tNodeList data;\n\t\ttry {\n\t\t\tdata = ReadUtils.getNodes(stream);\n\t\t} catch (IOException e) {\n\t\t\tReadUtils.printError(e);\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t// first get the main info\n\t\tRCSBDescription description = new RCSBDescription();\n\t\tElement structureIdE = null;\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\tstructureIdE = (Element) data.item(i);\n\t\t\tif (structureIdE.getNodeName().equals(\"structureId\")) {\n\t\t\t\tdescription.setPdbId(structureIdE.getAttribute(\"id\"));\n\t\t\t}\n\t\t}\n\n\t\t// now get polymers\n\t\tdata = structureIdE.getChildNodes();\n\t\tElement polymerE = null;\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\tpolymerE = (Element) data.item(i);\n\t\t\tif (polymerE.getNodeName().equals(\"polymer\")) {\n\t\t\t\tRCSBPolymer polymer = makePolymer(polymerE);\n\t\t\t\tdescription.addPolymer(polymer);\n\t\t\t}\n\t\t}\n\n\t\treturn description;\n\n\t}\n\n\t/**\n\t * @return An {@link RCSBDescription} from the XML file at\n\t *         {@code \"http://www.pdb.org/pdb/rest/describeMol?structureId=pdbId\"}. This is the preferred factory\n\t *         method, unless a different URL or input source is required.\n\t * @see RCSBDescriptionFactory#get(InputStream)\n\t */\n\tpublic static RCSBDescription get(String pdbId) {\n\n\t\tInputStream is;\n\t\ttry {\n\t\t\tURL url = new URL(URL_STUB + pdbId);\n\t\t\tis = url.openConnection().getInputStream();\n\t\t} catch (IOException e) {\n\t\t\tReadUtils.printError(e);\n\t\t\treturn null;\n\t\t}\n\t\treturn get(is);\n\t}\n\n\tprivate static RCSBMacromolecule makeMolecule(Element moleculeE) {\n\t\tRCSBMacromolecule molecule = new RCSBMacromolecule();\n\t\tmolecule.setName(moleculeE.getAttribute(\"name\"));\n\t\tElement element = null;\n\t\tNodeList data = moleculeE.getChildNodes();\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\telement = (Element) data.item(i);\n\t\t\tif (element.getNodeName().equals(\"accession\")) {\n\t\t\t\tmolecule.addAccession(element.getAttribute(\"id\"));\n\t\t\t}\n\t\t}\n\t\treturn molecule;\n\t}\n\n\tprivate static RCSBPolymer makePolymer(Element polymerE) {\n\n\t\tRCSBPolymer polymer = new RCSBPolymer();\n\t\tpolymer.setIndex(ReadUtils.toInt(polymerE.getAttribute(\"entityNr\")));\n\t\tpolymer.setLength(ReadUtils.toInt(polymerE.getAttribute(\"length\")));\n\t\tpolymer.setWeight(ReadUtils.toDouble(polymerE.getAttribute(\"weight\")));\n\t\tpolymer.setType(ReadUtils.toStr(polymerE.getAttribute(\"type\")));\n\n\t\tElement element = null;\n\t\tNodeList data = polymerE.getChildNodes();\n\t\tfor (int i = 0; i < data.getLength(); i++) {\n\t\t\tif (data.item(i).getNodeType() != 1) continue;\n\t\t\telement = (Element) data.item(i);\n\t\t\tif (element.getNodeName().equals(\"chain\")) {\n\t\t\t\tparseChains(polymer, element.getAttribute(\"id\"));\n\t\t\t} else if (element.getNodeName().equals(\"Taxonomy\")) {\n\t\t\t\tString name = element.getAttribute(\"name\");\n\t\t\t\tint id = ReadUtils.toInt(element.getAttribute(\"id\"));\n\t\t\t\tRCSBTaxonomy taxonomy = new RCSBTaxonomy(name, id);\n\t\t\t\tpolymer.setTaxonomy(taxonomy);\n\t\t\t} else if (element.getNodeName().equals(\"macroMolecule\")) {\n\t\t\t\tRCSBMacromolecule molecule = makeMolecule(element);\n\t\t\t\tpolymer.setMolecule(molecule);\n\t\t\t} else if (element.getNodeName().equals(\"polymerDescription\")) {\n\t\t\t\tpolymer.setDescription(element.getAttribute(\"description\"));\n\t\t\t} else if (element.getNodeName().equals(\"enzClass\")) {\n\t\t\t\tpolymer.setEnzClass(element.getAttribute(\"ec\"));\n\t\t\t} else if (element.getNodeName().equals(\"synonym\")) {\n\t\t\t\tparseSynonyms(polymer, element.getAttribute(\"name\"));\n\t\t\t}\n\t\t}\n\t\treturn polymer;\n\t}\n\n\tprivate static void parseChains(RCSBPolymer polymer, String string) {\n\t\tString[] parts = string.split(\"\\\\s*,\\\\s*\");\n\t\tfor (String part : parts) {\n\t\t\tif (part.length() == 1) {\n\t\t\t\tpolymer.addChain(part.charAt(0));\n\t\t\t} else {\n\t\t\t\tReadUtils.printError(new Exception(\"Chain id contained more than one character.\"));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static void parseSynonyms(RCSBPolymer polymer, String string) {\n\t\tString[] parts = string.split(\"\\\\s*,\\\\s*\");\n\t\tfor (String part : parts) {\n\t\t\tpolymer.addSynonym(part);\n\t\t}\n\t}\n\n}\n","originTest":"/**\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 2012-11-20\n * Created by Douglas Myers-Turnbull\n *\n * @since 3.0.6\n */\npackage org.biojava.bio.structure.rcsb;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.List;\n\nimport org.junit.Test;\n\n/**\n * Tests {@link RCSBDescriptionFactory}.\n * @author dmyerstu\n * @since 3.0.6\n */\npublic class RCSBDescriptionFactoryTest {\n\n\tprivate static final String TEST_DIR = \"src/test/resources/\";\n\t\n\t/**\n\t * Opens the file as a {@link FileInputStream}. Copied from ResourceList, which is not in biojava.\n\t */\n\tprivate FileInputStream openStream(String filename) {\n\t\tFile file = new File(TEST_DIR + filename);\n\t\tFileInputStream fis;\n\t\ttry {\n\t\t\tfis = new FileInputStream(file);\n\t\t} catch (FileNotFoundException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\treturn fis;\n\t}\n\n\t/**\n\t * Tests on the live database. Just makes sure the resource can be found.\n\t * If this test fails, it may be because the database changed.\n\t */\n\t@Test\n\tpublic void testUrl() {\n\t\tRCSBDescriptionFactory.get(\"1w0p\"); // just make sure it doesn't throw an exception\n\t}\n\t\n\t/**\n\t * Covers all the basic features, including EC numbers. Does not cover multiple polymers or multiple chains.\n\t */\n\t@Test\n\tpublic void test1() {\n\t\tRCSBDescription description = RCSBDescriptionFactory.get(openStream(\"describeMol/1w0p.xml\"));\n\t\t\n\t\tassertEquals(\"1W0P\", description.getPdbId());\n\t\tList<RCSBPolymer> polymers = description.getPolymers();\n\t\tassertEquals(1, polymers.size());\n\t\t\n\t\tRCSBPolymer polymer = polymers.get(0);\n\t\tassertEquals(\"protein\", polymer.getType());\n\t\tassertEquals(1, polymer.getIndex().intValue());\n\t\tassertEquals(\"SIALIDASE\", polymer.getDescription());\n\t\tassertEquals(\"3.2.1.18\", polymer.getEnzClass());\n\t\tassertEquals(781, polymer.getLength().intValue());\n\t\tassertEquals(85675.5, polymer.getWeight(), 0);\n\t\t\n\t\tList<Character> chains = polymer.getChains();\n\t\tassertEquals(1, chains.size());\n\t\tassertEquals('A', (char) chains.get(0));\n\t\t\n\t\tList<String> synonyms = polymer.getSynonyms();\n\t\tassertEquals(2, synonyms.size());\n\t\tassertEquals(\"NEURAMINIDASE\", synonyms.get(0));\n\t\tassertEquals(\"NANASE\", synonyms.get(1));\n\t\t\n\t\tRCSBTaxonomy tax = polymer.getTaxonomy();\n\t\tassertEquals(666, tax.getId());\n\t\tassertEquals(\"Vibrio cholerae\", tax.getName());\n\t\t\n\t\tRCSBMacromolecule mol = polymer.getMolecule();\n\t\tassertEquals(\"Sialidase\", mol.getName());\n\t\tList<String> accessions = mol.getAccessions();\n\t\tassertEquals(4, accessions.size());\n\t\tassertEquals(\"A5F7A4\", accessions.get(0));\n\t\tassertEquals(\"C3M1H8\", accessions.get(1));\n\t\tassertEquals(\"P37060\", accessions.get(2));\n\t\tassertEquals(\"Q9KR59\", accessions.get(3));\n\t}\n\n\t/**\n\t * What if we have a structureId but no polymers?\n\t */\n\t@Test\n\tpublic void testEmpty() {\n\t\tRCSBDescription description = RCSBDescriptionFactory.get(openStream(\"describeMol/empty.xml\"));\n\t\tassertEquals(\"empty\", description.getPdbId());\n\t\tList<RCSBPolymer> polymers = description.getPolymers();\n\t\tassertEquals(0, polymers.size());\n\t}\n\n\t/**\n\t * What if we have polymers but no macroMolecule or chains?\n\t * And what if a polymer contains no attributes?\n\t */\n\t@Test\n\tpublic void testAlmostEmpty() {\n\t\t\n\t\tRCSBDescription description = RCSBDescriptionFactory.get(openStream(\"describeMol/almost_empty.xml\"));\n\t\tassertEquals(\"almost_empty\", description.getPdbId());\n\t\tList<RCSBPolymer> polymers = description.getPolymers();\n\t\tassertEquals(2, polymers.size());\n\n\t\tRCSBPolymer polymer = polymers.get(0);\n\t\tassertEquals(\"notype\", polymer.getType());\n\t\tassertEquals(1, polymer.getIndex().intValue());\n\t\tassertEquals(\"really close to empty\", polymer.getDescription());\n\t\tassertEquals(null, polymer.getEnzClass());\n\t\tassertEquals(10, polymer.getLength().intValue());\n\t\tassertEquals(0, polymer.getWeight(), 0);\n\n\t\tpolymer = polymers.get(1);\n\t\tassertEquals(null, polymer.getType()); // make sure these are null and not \"\"\n\t\tassertEquals(null, polymer.getIndex());\n\t\tassertEquals(null, polymer.getDescription());\n\t\tassertEquals(null, polymer.getEnzClass());\n\t\tassertEquals(null, polymer.getLength());\n\t\tassertEquals(null, polymer.getWeight());\n\t\t\n\t}\n\t\n\t/**\n\t * Covers multiple polymers and multiple chains.\n\t */\n\t@Test\n\tpublic void test2() {\n\t\tRCSBDescription description = RCSBDescriptionFactory.get(openStream(\"describeMol/4hhb.xml\"));\n\t\tassertEquals(\"4HHB\", description.getPdbId());\n\t\tList<RCSBPolymer> polymers = description.getPolymers();\n\t\tassertEquals(2, polymers.size());\n\t\t\n\t\t// first polymer\n\t\tRCSBPolymer polymer = polymers.get(0);\n\t\tassertEquals(\"protein\", polymer.getType());\n\t\tassertEquals(1, polymer.getIndex().intValue());\n\t\tassertEquals(\"HEMOGLOBIN (DEOXY) (ALPHA CHAIN)\", polymer.getDescription());\n\t\tassertEquals(null, polymer.getEnzClass());\n\t\tassertEquals(141, polymer.getLength().intValue());\n\t\tassertEquals(15150.5, polymer.getWeight(), 0);\n\t\t\n\t\tList<Character> chains = polymer.getChains();\n\t\tassertEquals(2, chains.size());\n\t\tassertEquals('A', (char) chains.get(0));\n\t\tassertEquals('C', (char) chains.get(1));\n\t\t\n\t\tList<String> synonyms = polymer.getSynonyms();\n\t\tassertEquals(0, synonyms.size());\n\t\t\n\t\tRCSBTaxonomy tax = polymer.getTaxonomy();\n\t\tassertEquals(9606, tax.getId());\n\t\tassertEquals(\"Homo sapiens\", tax.getName());\n\t\t\n\t\tRCSBMacromolecule mol = polymer.getMolecule();\n\t\tassertEquals(\"Hemoglobin subunit alpha\", mol.getName());\n\t\tList<String> accessions = mol.getAccessions();\n\t\tassertEquals(8, accessions.size());\n\t\tassertEquals(\"P69905\", accessions.get(0));\n\t\tassertEquals(\"P01922\", accessions.get(1));\n\t\tassertEquals(\"Q1HDT5\", accessions.get(2));\n\t\tassertEquals(\"Q3MIF5\", accessions.get(3));\n\t\tassertEquals(\"Q53F97\", accessions.get(4));\n\t\tassertEquals(\"Q96KF1\", accessions.get(5));\n\t\tassertEquals(\"Q9NYR7\", accessions.get(6));\n\t\tassertEquals(\"Q9UCM0\", accessions.get(7));\n\t\t\n\t\t// second polymer\n\t\tpolymer = polymers.get(1);\n\t\tassertEquals(\"protein\", polymer.getType());\n\t\tassertEquals(2, polymer.getIndex().intValue());\n\t\tassertEquals(\"HEMOGLOBIN (DEOXY) (BETA CHAIN)\", polymer.getDescription());\n\t\tassertEquals(null, polymer.getEnzClass());\n\t\tassertEquals(146, polymer.getLength().intValue());\n\t\tassertEquals(15890.4, polymer.getWeight(), 0);\n\t\t\n\t\tchains = polymer.getChains();\n\t\tassertEquals(2, chains.size());\n\t\tassertEquals('B', (char) chains.get(0));\n\t\tassertEquals('D', (char) chains.get(1));\n\t\t\n\t\tsynonyms = polymer.getSynonyms();\n\t\tassertEquals(0, synonyms.size());\n\t\t\n\t\ttax = polymer.getTaxonomy();\n\t\tassertEquals(9606, tax.getId());\n\t\tassertEquals(\"Homo sapiens\", tax.getName());\n\t\t\n\t\tmol = polymer.getMolecule();\n\t\tassertEquals(\"Hemoglobin subunit beta\", mol.getName());\n\t\taccessions = mol.getAccessions();\n\t\tassertEquals(16, accessions.size());\n\t\tassertEquals(\"P68871\", accessions.get(0));\n\t\tassertEquals(\"A4GX73\", accessions.get(1));\n\t\tassertEquals(\"B2ZUE0\", accessions.get(2));\n\t\tassertEquals(\"P02023\", accessions.get(3));\n\t\tassertEquals(\"Q13852\", accessions.get(4));\n\t\tassertEquals(\"Q14481\", accessions.get(5));\n\t\tassertEquals(\"Q14510\", accessions.get(6));\n\t\tassertEquals(\"Q45KT0\", accessions.get(7));\n\t\tassertEquals(\"Q549N7\", accessions.get(8));\n\t\tassertEquals(\"Q6FI08\", accessions.get(9));\n\t\tassertEquals(\"Q6R7N2\", accessions.get(10));\n\t\tassertEquals(\"Q8IZI1\", accessions.get(11));\n\t\tassertEquals(\"Q9BX96\", accessions.get(12));\n\t\tassertEquals(\"Q9UCD6\", accessions.get(13));\n\t\tassertEquals(\"Q9UCP8\", accessions.get(14));\n\t\tassertEquals(\"Q9UCP9\", accessions.get(15));\n\t\t\n\t}\n\n}\n","changedTest":"","commitMessage":"Moved general XML utilities to a new class ReadUtils.","test_commitMessage":"","allZero":false}