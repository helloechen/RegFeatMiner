{"repository":"biojava","prod_path":"biojava-aa-prop/src/main/java/org/biojava/nbio/aaproperties/CommandPrompt.java","test_path":"biojava-aa-prop/src/test/java/org/biojava/nbio/aaproperties/CommandPromptTest.java","prod_time":"2024-04-18 15:26:14","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"b18212163e0fd9ff56da13ef258005b7d0decced","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.aaproperties;\n\nimport org.biojava.nbio.aaproperties.xml.AminoAcidCompositionTable;\nimport org.biojava.nbio.aaproperties.xml.CaseFreeAminoAcidCompoundSet;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.*;\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\n\npublic class CommandPrompt {\n\n\t/**\n\t * The main method\n\t * @param args\n\t * \tSee showHelp for a list of available arguments\n\t * @throws Exception\n\t *  To handle exception thrown by reading of XML files\n\t */\n\tpublic static void main(String[] args) throws Exception{\n\t\trun(args);\n\t}\n\n\tprivate static AminoAcidCompositionTable checkForValidityAndObtainAATable(String inputLocation, int propertyListSize, String aminoAcidCompositionLocation,\n\t\t\tString elementMassLocation) throws Exception{\n\t\tif(inputLocation == null) {\n\t\t\tshowHelp();\n\t\t\tthrow new Error(\"Please do provide location of input file.\");\n\t\t}\n\t\tif(propertyListSize == 0){\n\t\t\tshowHelp();\n\t\t\tthrow new Error(\"Please at least specify a property to compute.\");\n\t\t}\n\t\tAminoAcidCompositionTable aaTable = null;\n\t\tif(aminoAcidCompositionLocation != null && elementMassLocation == null){\n\t\t\taaTable = PeptideProperties.obtainAminoAcidCompositionTable(new File(aminoAcidCompositionLocation));\n\t\t}else if(aminoAcidCompositionLocation != null && elementMassLocation != null){\n\t\t\taaTable = PeptideProperties.obtainAminoAcidCompositionTable(new File(aminoAcidCompositionLocation, elementMassLocation));\n\t\t}else if(aminoAcidCompositionLocation == null && elementMassLocation != null){\n\t\t\tthrow new Error(\"You have define the location of Element Mass XML file. Please also define the location of Amino Acid Composition XML file\");\n\t\t}\n\t\treturn aaTable;\n\t}\n\n\tprivate static void readInputAndGenerateOutput(String outputLocation, List<Character> propertyList, List<Character> specificList,\n\t\t\tString delimiter, String inputLocation, AminoAcidCompositionTable aaTable, int decimalPlace) throws Exception{\n\t\tPrintStream output;\n\t\tif(outputLocation != null)\n\t\t\toutput = new PrintStream(new File(outputLocation));\n\t\telse\n\t\t\toutput = System.out;\n\t\tprintHeader(output, propertyList, specificList, delimiter);\n\t\tLinkedHashMap<String, ProteinSequence> a = readInputFile(inputLocation, aaTable);\n\t\t//Need for the last sequence\n\t\tfor(Entry<String, ProteinSequence> entry:a.entrySet()){\n\t\t\tcompute(output, entry.getValue().getOriginalHeader(), entry.getValue().getSequenceAsString().trim(), delimiter, aaTable, propertyList, specificList,\n\t\t\t\t\tdecimalPlace);\n\t\t}\n\t\toutput.close();\n\t}\n\n\tpublic static void run(String[] args) throws Exception{\n\t\t/*\n\t\t * Parse input arguments\n\t\t */\n\t\tList<Character> propertyList = new ArrayList<Character>();\n\t\tList<Character> specificList = new ArrayList<Character>();\n\t\tString inputLocation = null;\n\t\tString outputLocation = null;\n\t\tString aminoAcidCompositionLocation = null;\n\t\tString elementMassLocation = null;\n\t\tString delimiter = \",\";\n\t\tint decimalPlace = 4;\n\n\t\tfor(int i = 0; i < args.length; i++){\n\t\t\tif(args[i].charAt(0) != '-' || args[i].length() != 2){\n\t\t\t\tshowHelp();\n\t\t\t\tthrow new Error(\"Unknown option: \" + args[i]);\n\t\t\t}else{\n\t\t\t\tswitch(args[i].charAt(1)){\n\t\t\t\t//Required\n\t\t\t\tcase 'i': inputLocation = args[++i]; break;\n\t\t\t\t//Optional\n\t\t\t\tcase 'o': outputLocation = args[++i]; break;\n\t\t\t\tcase 'f':\n\t\t\t\t\ti++;\n\t\t\t\t\tif(\"csv\".equalsIgnoreCase(args[i])) delimiter = \",\";\n\t\t\t\t\telse if(\"tsv\".equalsIgnoreCase(args[i])) delimiter = \"\\t\";\n\t\t\t\t\telse throw new Error(\"Invalid value for -f: \" + args[i] + \". Please choose either csv or tsv only.\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'x': aminoAcidCompositionLocation = args[++i]; break;\n\t\t\t\tcase 'y': elementMassLocation = args[++i]; break;\n\t\t\t\tcase 'd': decimalPlace = Integer.parseInt(args[++i]); break;\n\t\t\t\t//Properties\n\t\t\t\tcase 'a':\n\t\t\t\t\tpropertyList.add('1');\n\t\t\t\t\tpropertyList.add('2');\n\t\t\t\t\tpropertyList.add('3');\n\t\t\t\t\tpropertyList.add('4');\n\t\t\t\t\tpropertyList.add('5');\n\t\t\t\t\tpropertyList.add('6');\n\t\t\t\t\tpropertyList.add('7');\n\t\t\t\t\tpropertyList.add('8');\n\t\t\t\t\tpropertyList.add('9');\n\t\t\t\t\tbreak;\n\t\t\t\tcase '1': propertyList.add('1'); break;\n\t\t\t\tcase '2': propertyList.add('2'); break;\n\t\t\t\tcase '3': propertyList.add('3'); break;\n\t\t\t\tcase '4': propertyList.add('4'); break;\n\t\t\t\tcase '5': propertyList.add('5'); break;\n\t\t\t\tcase '6': propertyList.add('6'); break;\n\t\t\t\tcase '7': propertyList.add('7'); break;\n\t\t\t\tcase '8': propertyList.add('8'); break;\n\t\t\t\tcase '9': propertyList.add('9'); break;\n\t\t\t\tcase '0':\n\t\t\t\t\tpropertyList.add('0');\n\t\t\t\t\ti++;\n\t\t\t\t\tif(args[i].length() != 1) throw new Error(\"Invalid value: \" + args[i] + \". Amino Acid Symbol should be of single character\");\n\t\t\t\t\tspecificList.add(args[i].toUpperCase().charAt(0));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tshowHelp();\n\t\t\t\t\tthrow new Error(\"Unknown option: \" + args[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Check for validity of input arguments\n\t\t */\n\t\tAminoAcidCompositionTable aaTable = checkForValidityAndObtainAATable(inputLocation, propertyList.size(), aminoAcidCompositionLocation,\n\t\t\t\telementMassLocation);\n\n\t\t/*\n\t\t * Read input file and generate output\n\t\t */\n\t\treadInputAndGenerateOutput(outputLocation, propertyList, specificList, delimiter, inputLocation, aaTable, decimalPlace);\n\t}\n\n\tprivate static LinkedHashMap<String, ProteinSequence> readInputFile(String inputLocation, AminoAcidCompositionTable aaTable) throws Exception{\n\t\tFileInputStream inStream = new FileInputStream(inputLocation);\n\t\tCompoundSet<AminoAcidCompound>\tset;\n\t\tif(aaTable == null){\n\t\t\tset = CaseFreeAminoAcidCompoundSet.getAminoAcidCompoundSet();\n\t\t}else{\n\t\t\tset = aaTable.getAminoAcidCompoundSet();\n\t\t}\n\t\tLinkedHashMap<String, ProteinSequence> ret;\n\t\tif ( inputLocation.toLowerCase().contains(\".gb\")) {\n\t\t\tGenbankReader<ProteinSequence, AminoAcidCompound> genbankReader = new GenbankReader<ProteinSequence, AminoAcidCompound>(\n\t\t\t\t\tinStream, new GenericGenbankHeaderParser<ProteinSequence, AminoAcidCompound>(),\n\t\t\t\t\tnew ProteinSequenceCreator(set));\n\t\t\tret = genbankReader.process();\n\n\n\t\t} else {\n\t\t\tFastaReader<ProteinSequence, AminoAcidCompound> fastaReader = new FastaReader<ProteinSequence, AminoAcidCompound>(\n\t\t\t\t\tinStream, new GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>(),\n\t\t\t\t\tnew ProteinSequenceCreator(set));\n\t\t\tret = fastaReader.process();\n\n\t\t}\n\t\treturn ret;\n\t}\n\n\tpublic enum PropertyName{MolecularWeight, Absorbance_True, Absorbance_False, ExtinctionCoefficient_True, ExtinctionCoefficient_False,\n\t\tInstabilityIndex, ApliphaticIndex, AverageHydropathyValue, IsoelectricPoint, NetCharge_pH_7, A, R,\n\t\tN, D, C, E, Q, G, H, I, L,\n\t\tK, M, F, P, S, T, W, Y, V};\n\n\tprivate static void printHeader(PrintStream output, List<Character> propertyList, List<Character> specificList, String delimiter) throws IOException{\n\t\tint specificCount = 0;\n\t\t/*\n\t\t * 1 Molecular weight\n\t\t * 2 Absorbance (assumed Cys reduced and assume Cys to form cystines)\n\t\t * 3 Extinction coefficient (assumed Cys reduced and assume Cys to form cystines)\n\t\t * 4 Instability index\n\t\t * 5 Apliphatic index\n\t\t * 6 Average hydropathy value\n\t\t * 7 Isoelectric point\n\t\t * 8 Net charge at pH 7\n\t\t * 9 Composition of the 20 standard amino acid\n\t\t * 0 Composition of the specific amino acid\n\t\t */\n\t\tList<String> sList = new ArrayList<String>();\n\t\tsList.add(\"SequenceName\");\n\t\tfor(Character c:propertyList){\n\t\t\tswitch(c){\n\t\t\tcase '1': sList.add(PropertyName.MolecularWeight.toString()); break;\n\t\t\tcase '2': sList.add(PropertyName.Absorbance_True.toString()); sList.add(PropertyName.Absorbance_False.toString()); break;\n\t\t\tcase '3': sList.add(PropertyName.ExtinctionCoefficient_True.toString()); sList.add(PropertyName.ExtinctionCoefficient_False.toString()); break;\n\t\t\tcase '4': sList.add(PropertyName.InstabilityIndex.toString()); break;\n\t\t\tcase '5': sList.add(PropertyName.ApliphaticIndex.toString()); break;\n\t\t\tcase '6': sList.add(PropertyName.AverageHydropathyValue.toString()); break;\n\t\t\tcase '7': sList.add(PropertyName.IsoelectricPoint.toString()); break;\n\t\t\tcase '8': sList.add(PropertyName.NetCharge_pH_7.toString()); break;\n\t\t\tcase '9':\n\t\t\t\tsList.add(PropertyName.A.toString()); sList.add(PropertyName.R.toString());\n\t\t\t\tsList.add(PropertyName.N.toString()); sList.add(PropertyName.D.toString());\n\t\t\t\tsList.add(PropertyName.C.toString()); sList.add(PropertyName.E.toString());\n\t\t\t\tsList.add(PropertyName.Q.toString()); sList.add(PropertyName.G.toString());\n\t\t\t\tsList.add(PropertyName.H.toString()); sList.add(PropertyName.I.toString());\n\t\t\t\tsList.add(PropertyName.L.toString()); sList.add(PropertyName.K.toString());\n\t\t\t\tsList.add(PropertyName.M.toString()); sList.add(PropertyName.F.toString());\n\t\t\t\tsList.add(PropertyName.P.toString()); sList.add(PropertyName.S.toString());\n\t\t\t\tsList.add(PropertyName.T.toString()); sList.add(PropertyName.W.toString());\n\t\t\t\tsList.add(PropertyName.Y.toString()); sList.add(PropertyName.V.toString());\n\t\t\t\tbreak;\n\t\t\tcase '0': sList.add(\"\" + specificList.get(specificCount++)); break;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < sList.size(); i++){\n\t\t\tif(i != 0) output.print(delimiter);\n\t\t\toutput.print(sList.get(i));\n\t\t}\n\t\toutput.println();\n\t\toutput.flush();\n\t}\n\n\tprivate static void compute(PrintStream output, String header, String sequence, String delimiter,\n\t\t\tAminoAcidCompositionTable aaTable, List<Character> propertyList, List<Character> specificList, int decimalPlace) throws CompoundNotFoundException{\n\t\t/*\n\t\t * 1 Molecular weight\n\t\t * 2 Absorbance (assumed Cys reduced and assume Cys to form cystines)\n\t\t * 3 Extinction coefficient\n\t\t * 4 Instability index\n\t\t * 5 Apliphatic index\n\t\t * 6 Average hydropathy value\n\t\t * 7 Isoelectric point\n\t\t * 8 Net charge at pH 7\n\t\t * 9 Composition of the 20 standard amino acid\n\t\t * 0 Composition of the specific amino acid\n\t\t */\n\t\tProteinSequence pSequence;\n\t\tCompoundSet<AminoAcidCompound> aaSet;\n\t\tif(aaTable != null){\n\t\t\tsequence = Utils.checkSequence(sequence, aaTable.getSymbolSet());\n\t\t\tpSequence = new ProteinSequence(sequence, aaTable.getAminoAcidCompoundSet());\n\t\t\taaSet = aaTable.getAminoAcidCompoundSet();\n\t\t}else{\n\t\t\tsequence = Utils.checkSequence(sequence);\n\t\t\tpSequence = new ProteinSequence(sequence);\n\t\t\taaSet = AminoAcidCompoundSet.getAminoAcidCompoundSet();\n\t\t}\n\t\tIPeptideProperties pp = new PeptidePropertiesImpl();\n\n\t\tint specificCount = 0;\n\t\tList<Double> dList = new ArrayList<Double>();\n\t\tfor(Character c:propertyList){\n\t\t\tswitch(c){\n\t\t\tcase '1':\n\t\t\t\tif(aaTable == null)\n\t\t\t\t\tdList.add(pp.getMolecularWeight(pSequence));\n\t\t\t\telse\n\t\t\t\t\tdList.add(pp.getMolecularWeight(pSequence));\n\t\t\t\tbreak;\n\t\t\tcase '2':\n\t\t\t\tdList.add(pp.getAbsorbance(pSequence, true));\n\t\t\t\tdList.add(pp.getAbsorbance(pSequence, false));\n\t\t\t\tbreak;\n\t\t\tcase '3':\n\t\t\t\tdList.add(pp.getExtinctionCoefficient(pSequence, true));\n\t\t\t\tdList.add(pp.getExtinctionCoefficient(pSequence, false));\n\t\t\t\tbreak;\n\t\t\tcase '4': dList.add(pp.getInstabilityIndex(pSequence)); break;\n\t\t\tcase '5': dList.add(pp.getApliphaticIndex(pSequence)); break;\n\t\t\tcase '6': dList.add(pp.getAvgHydropathy(pSequence)); break;\n\t\t\tcase '7': dList.add(pp.getIsoelectricPoint(pSequence)); break;\n\t\t\tcase '8': dList.add(pp.getNetCharge(pSequence)); break;\n\t\t\tcase '9':\n\t\t\t\tMap<AminoAcidCompound, Double> aaCompound2Double = pp.getAAComposition(pSequence);\n\t\t\t\t//(A, R, N, D, C, E, Q, G, H, I, L, K, M, F, P, S, T, W, Y, V)\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.A));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.R));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.N));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.D));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.C));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.E));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.Q));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.G));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.H));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.I));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.L));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.K));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.M));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.F));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.P));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.S));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.T));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.W));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.Y));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.V));\n\t\t\t\tbreak;\n\t\t\tcase '0': dList.add(pp.getEnrichment(pSequence, aaSet.getCompoundForString(\"\" + specificList.get(specificCount++)))); break;\n\t\t\t}\n\t\t}\n\t\toutput.print(header.replace(delimiter, \"_\"));\n\t\tdList.stream().forEach(item -> output.print(delimiter + Utils.roundToDecimals(item, decimalPlace)));\n\t\toutput.println();\n\t\toutput.flush();\n\t}\n\n\tprivate static void showHelp(){\n\t\tSystem.err.println(\"NAME\");\n\t\tSystem.err.println(\"\\tAn executable to generate physico-chemical properties of protein sequences.\");\n\t\tSystem.err.println();\n\n\t\tSystem.err.println(\"EXAMPLES\");\n\t\tSystem.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -a\");\n\t\tSystem.err.println(\"\\t\\tGenerates all possible properties.\");\n\t\tSystem.err.println();\n\t\tSystem.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -1 -3 -7\");\n\t\tSystem.err.println(\"\\t\\tGenerates only molecular weight, extinction coefficient and isoelectric point.\");\n\t\tSystem.err.println();\n\t\tSystem.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -0 A -0 N -1\");\n\t\tSystem.err.println(\"\\t\\tGenerates composition of two specific amino acid symbol and molecular weight.\");\n\t\tSystem.err.println();\n\n\t\tSystem.err.println(\"OPTIONS\");\n\t\tSystem.err.println(\"\\tRequired\");\n\t\tSystem.err.println(\"\\t\\t-i location of input FASTA file\");\n\t\tSystem.err.println();\n\n\t\tSystem.err.println(\"\\tOptional\");\n\t\tSystem.err.println(\"\\t\\t-o location of output file [standard output (default)]\");\n\t\tSystem.err.println(\"\\t\\t-f output format [csv (default) or tsv]\");\n\t\tSystem.err.println(\"\\t\\t-x location of Amino Acid Composition XML file for defining amino acid composition\");\n\t\tSystem.err.println(\"\\t\\t-y location of Element Mass XML file for defining mass of elements\");\n\t\tSystem.err.println(\"\\t\\t-d number of decimals (int) [4 (default)]\");\n\t\tSystem.err.println();\n\n\t\tSystem.err.println(\"\\tProvide at least one of them\");\n\t\tSystem.err.println(\"\\t\\t-a compute properties of option 1-9\");\n\t\tSystem.err.println(\"\\t\\t-1 compute molecular weight\");\n\t\tSystem.err.println(\"\\t\\t-2 compute absorbance\");\n\t\tSystem.err.println(\"\\t\\t-3 compute extinction coefficient\");\n\t\tSystem.err.println(\"\\t\\t-4 compute instability index\");\n\t\tSystem.err.println(\"\\t\\t-5 compute apliphatic index\");\n\t\tSystem.err.println(\"\\t\\t-6 compute average hydropathy value\");\n\t\tSystem.err.println(\"\\t\\t-7 compute isoelectric point\");\n\t\tSystem.err.println(\"\\t\\t-8 compute net charge at pH 7\");\n\t\tSystem.err.println(\"\\t\\t-9 compute composition of 20 standard amino acid (A, R, N, D, C, E, Q, G, H, I, L, K, M, F, P, S, T, W, Y, V)\");\n\t\tSystem.err.println(\"\\t\\t-0 compute composition of specific amino acid symbol\");\n\t\tSystem.err.println();\n\t}\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.aaproperties;\n\nimport org.biojava.nbio.aaproperties.xml.AminoAcidCompositionTable;\nimport org.biojava.nbio.aaproperties.xml.CaseFreeAminoAcidCompoundSet;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompoundSet;\nimport org.biojava.nbio.core.sequence.io.*;\nimport org.biojava.nbio.core.sequence.template.CompoundSet;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\n\npublic class CommandPrompt {\n\n\t/**\n\t * The main method\n\t * @param args\n\t * \tSee showHelp for a list of available arguments\n\t * @throws Exception\n\t *  To handle exception thrown by reading of XML files\n\t */\n\tpublic static void main(String[] args) throws Exception{\n\t\trun(args);\n\t}\n\n\tprivate static AminoAcidCompositionTable checkForValidityAndObtainAATable(String inputLocation, int propertyListSize, String aminoAcidCompositionLocation,\n\t\t\tString elementMassLocation) throws Exception{\n\t\tif(inputLocation == null) {\n\t\t\tshowHelp();\n\t\t\tthrow new Error(\"Please do provide location of input file.\");\n\t\t}\n\t\tif(propertyListSize == 0){\n\t\t\tshowHelp();\n\t\t\tthrow new Error(\"Please at least specify a property to compute.\");\n\t\t}\n\t\tAminoAcidCompositionTable aaTable = null;\n\t\tif(aminoAcidCompositionLocation != null && elementMassLocation == null){\n\t\t\taaTable = PeptideProperties.obtainAminoAcidCompositionTable(new File(aminoAcidCompositionLocation));\n\t\t}else if(aminoAcidCompositionLocation != null && elementMassLocation != null){\n\t\t\taaTable = PeptideProperties.obtainAminoAcidCompositionTable(new File(aminoAcidCompositionLocation, elementMassLocation));\n\t\t}else if(aminoAcidCompositionLocation == null && elementMassLocation != null){\n\t\t\tthrow new Error(\"You have define the location of Element Mass XML file. Please also define the location of Amino Acid Composition XML file\");\n\t\t}\n\t\treturn aaTable;\n\t}\n\n\tprivate static void readInputAndGenerateOutput(String outputLocation, List<Character> propertyList, List<Character> specificList,\n\t\t\tString delimiter, String inputLocation, AminoAcidCompositionTable aaTable, int decimalPlace) throws Exception{\n\t\tPrintStream output;\n\t\tif(outputLocation != null)\n\t\t\toutput = new PrintStream(new File(outputLocation));\n\t\telse\n\t\t\toutput = System.out;\n\t\tprintHeader(output, propertyList, specificList, delimiter);\n\t\tLinkedHashMap<String, ProteinSequence> a = readInputFile(inputLocation, aaTable);\n\t\t//Need for the last sequence\n\t\tfor(Entry<String, ProteinSequence> entry:a.entrySet()){\n\t\t\tcompute(output, entry.getValue().getOriginalHeader(), entry.getValue().getSequenceAsString().trim(), delimiter, aaTable, propertyList, specificList,\n\t\t\t\t\tdecimalPlace);\n\t\t}\n\t\toutput.close();\n\t}\n\n\tpublic static void run(String[] args) throws Exception{\n\t\t/*\n\t\t * Parse input arguments\n\t\t */\n\t\tList<Character> propertyList = new ArrayList<>();\n\t\tList<Character> specificList = new ArrayList<>();\n\t\tString inputLocation = null;\n\t\tString outputLocation = null;\n\t\tString aminoAcidCompositionLocation = null;\n\t\tString elementMassLocation = null;\n\t\tString delimiter = \",\";\n\t\tint decimalPlace = 4;\n\n\t\tfor(int i = 0; i < args.length; i++){\n\t\t\tif(args[i].charAt(0) != '-' || args[i].length() != 2){\n\t\t\t\tshowHelp();\n\t\t\t\tthrow new Error(\"Unknown option: \" + args[i]);\n\t\t\t}else{\n\t\t\t\tswitch(args[i].charAt(1)){\n\t\t\t\t//Required\n\t\t\t\tcase 'i': inputLocation = args[++i]; break;\n\t\t\t\t//Optional\n\t\t\t\tcase 'o': outputLocation = args[++i]; break;\n\t\t\t\tcase 'f':\n\t\t\t\t\ti++;\n\t\t\t\t\tif(\"csv\".equalsIgnoreCase(args[i])) delimiter = \",\";\n\t\t\t\t\telse if(\"tsv\".equalsIgnoreCase(args[i])) delimiter = \"\\t\";\n\t\t\t\t\telse throw new Error(\"Invalid value for -f: \" + args[i] + \". Please choose either csv or tsv only.\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'x': aminoAcidCompositionLocation = args[++i]; break;\n\t\t\t\tcase 'y': elementMassLocation = args[++i]; break;\n\t\t\t\tcase 'd': decimalPlace = Integer.parseInt(args[++i]); break;\n\t\t\t\t//Properties\n\t\t\t\tcase 'a':\n\t\t\t\t\tpropertyList.add('1');\n\t\t\t\t\tpropertyList.add('2');\n\t\t\t\t\tpropertyList.add('3');\n\t\t\t\t\tpropertyList.add('4');\n\t\t\t\t\tpropertyList.add('5');\n\t\t\t\t\tpropertyList.add('6');\n\t\t\t\t\tpropertyList.add('7');\n\t\t\t\t\tpropertyList.add('8');\n\t\t\t\t\tpropertyList.add('9');\n\t\t\t\t\tbreak;\n\t\t\t\tcase '1': propertyList.add('1'); break;\n\t\t\t\tcase '2': propertyList.add('2'); break;\n\t\t\t\tcase '3': propertyList.add('3'); break;\n\t\t\t\tcase '4': propertyList.add('4'); break;\n\t\t\t\tcase '5': propertyList.add('5'); break;\n\t\t\t\tcase '6': propertyList.add('6'); break;\n\t\t\t\tcase '7': propertyList.add('7'); break;\n\t\t\t\tcase '8': propertyList.add('8'); break;\n\t\t\t\tcase '9': propertyList.add('9'); break;\n\t\t\t\tcase '0':\n\t\t\t\t\tpropertyList.add('0');\n\t\t\t\t\ti++;\n\t\t\t\t\tif(args[i].length() != 1) throw new Error(\"Invalid value: \" + args[i] + \". Amino Acid Symbol should be of single character\");\n\t\t\t\t\tspecificList.add(args[i].toUpperCase().charAt(0));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tshowHelp();\n\t\t\t\t\tthrow new Error(\"Unknown option: \" + args[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Check for validity of input arguments\n\t\t */\n\t\tAminoAcidCompositionTable aaTable = checkForValidityAndObtainAATable(inputLocation, propertyList.size(), aminoAcidCompositionLocation,\n\t\t\t\telementMassLocation);\n\n\t\t/*\n\t\t * Read input file and generate output\n\t\t */\n\t\treadInputAndGenerateOutput(outputLocation, propertyList, specificList, delimiter, inputLocation, aaTable, decimalPlace);\n\t}\n\n\tprivate static LinkedHashMap<String, ProteinSequence> readInputFile(String inputLocation, AminoAcidCompositionTable aaTable) throws Exception{\n\t\tFileInputStream inStream = new FileInputStream(inputLocation);\n\t\tCompoundSet<AminoAcidCompound>\tset;\n\t\tif(aaTable == null){\n\t\t\tset = CaseFreeAminoAcidCompoundSet.getAminoAcidCompoundSet();\n\t\t}else{\n\t\t\tset = aaTable.getAminoAcidCompoundSet();\n\t\t}\n\t\tLinkedHashMap<String, ProteinSequence> ret;\n\t\tif ( inputLocation.toLowerCase().contains(\".gb\")) {\n\t\t\tGenbankReader<ProteinSequence, AminoAcidCompound> genbankReader = new GenbankReader<>(\n\t\t\t\t\tinStream, new GenericGenbankHeaderParser<ProteinSequence, AminoAcidCompound>(),\n\t\t\t\t\tnew ProteinSequenceCreator(set));\n\t\t\tret = genbankReader.process();\n\n\n\t\t} else {\n\t\t\tFastaReader<ProteinSequence, AminoAcidCompound> fastaReader = new FastaReader<>(\n\t\t\t\t\tinStream, new GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>(),\n\t\t\t\t\tnew ProteinSequenceCreator(set));\n\t\t\tret = fastaReader.process();\n\n\t\t}\n\t\treturn ret;\n\t}\n\n\tpublic enum PropertyName{MolecularWeight, Absorbance_True, Absorbance_False, ExtinctionCoefficient_True, ExtinctionCoefficient_False,\n\t\tInstabilityIndex, ApliphaticIndex, AverageHydropathyValue, IsoelectricPoint, NetCharge_pH_7, A, R,\n\t\tN, D, C, E, Q, G, H, I, L,\n\t\tK, M, F, P, S, T, W, Y, V};\n\n\tprivate static void printHeader(PrintStream output, List<Character> propertyList, List<Character> specificList, String delimiter) throws IOException{\n\t\tint specificCount = 0;\n\t\t/*\n\t\t * 1 Molecular weight\n\t\t * 2 Absorbance (assumed Cys reduced and assume Cys to form cystines)\n\t\t * 3 Extinction coefficient (assumed Cys reduced and assume Cys to form cystines)\n\t\t * 4 Instability index\n\t\t * 5 Apliphatic index\n\t\t * 6 Average hydropathy value\n\t\t * 7 Isoelectric point\n\t\t * 8 Net charge at pH 7\n\t\t * 9 Composition of the 20 standard amino acid\n\t\t * 0 Composition of the specific amino acid\n\t\t */\n\t\tList<String> sList = new ArrayList<>();\n\t\tsList.add(\"SequenceName\");\n\t\tfor(Character c:propertyList){\n\t\t\tswitch(c){\n\t\t\tcase '1': sList.add(PropertyName.MolecularWeight.toString()); break;\n\t\t\tcase '2': sList.add(PropertyName.Absorbance_True.toString()); sList.add(PropertyName.Absorbance_False.toString()); break;\n\t\t\tcase '3': sList.add(PropertyName.ExtinctionCoefficient_True.toString()); sList.add(PropertyName.ExtinctionCoefficient_False.toString()); break;\n\t\t\tcase '4': sList.add(PropertyName.InstabilityIndex.toString()); break;\n\t\t\tcase '5': sList.add(PropertyName.ApliphaticIndex.toString()); break;\n\t\t\tcase '6': sList.add(PropertyName.AverageHydropathyValue.toString()); break;\n\t\t\tcase '7': sList.add(PropertyName.IsoelectricPoint.toString()); break;\n\t\t\tcase '8': sList.add(PropertyName.NetCharge_pH_7.toString()); break;\n\t\t\tcase '9':\n\t\t\t\tsList.add(PropertyName.A.toString()); sList.add(PropertyName.R.toString());\n\t\t\t\tsList.add(PropertyName.N.toString()); sList.add(PropertyName.D.toString());\n\t\t\t\tsList.add(PropertyName.C.toString()); sList.add(PropertyName.E.toString());\n\t\t\t\tsList.add(PropertyName.Q.toString()); sList.add(PropertyName.G.toString());\n\t\t\t\tsList.add(PropertyName.H.toString()); sList.add(PropertyName.I.toString());\n\t\t\t\tsList.add(PropertyName.L.toString()); sList.add(PropertyName.K.toString());\n\t\t\t\tsList.add(PropertyName.M.toString()); sList.add(PropertyName.F.toString());\n\t\t\t\tsList.add(PropertyName.P.toString()); sList.add(PropertyName.S.toString());\n\t\t\t\tsList.add(PropertyName.T.toString()); sList.add(PropertyName.W.toString());\n\t\t\t\tsList.add(PropertyName.Y.toString()); sList.add(PropertyName.V.toString());\n\t\t\t\tbreak;\n\t\t\tcase '0': sList.add(\"\" + specificList.get(specificCount++)); break;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < sList.size(); i++){\n\t\t\tif(i != 0) output.print(delimiter);\n\t\t\toutput.print(sList.get(i));\n\t\t}\n\t\toutput.println();\n\t\toutput.flush();\n\t}\n\n\tprivate static void compute(PrintStream output, String header, String sequence, String delimiter,\n\t\t\tAminoAcidCompositionTable aaTable, List<Character> propertyList, List<Character> specificList, int decimalPlace) throws CompoundNotFoundException{\n\t\t/*\n\t\t * 1 Molecular weight\n\t\t * 2 Absorbance (assumed Cys reduced and assume Cys to form cystines)\n\t\t * 3 Extinction coefficient\n\t\t * 4 Instability index\n\t\t * 5 Apliphatic index\n\t\t * 6 Average hydropathy value\n\t\t * 7 Isoelectric point\n\t\t * 8 Net charge at pH 7\n\t\t * 9 Composition of the 20 standard amino acid\n\t\t * 0 Composition of the specific amino acid\n\t\t */\n\t\tProteinSequence pSequence;\n\t\tCompoundSet<AminoAcidCompound> aaSet;\n\t\tif(aaTable != null){\n\t\t\tsequence = Utils.checkSequence(sequence, aaTable.getSymbolSet());\n\t\t\tpSequence = new ProteinSequence(sequence, aaTable.getAminoAcidCompoundSet());\n\t\t\taaSet = aaTable.getAminoAcidCompoundSet();\n\t\t}else{\n\t\t\tsequence = Utils.checkSequence(sequence);\n\t\t\tpSequence = new ProteinSequence(sequence);\n\t\t\taaSet = AminoAcidCompoundSet.getAminoAcidCompoundSet();\n\t\t}\n\t\tIPeptideProperties pp = new PeptidePropertiesImpl();\n\n\t\tint specificCount = 0;\n\t\tList<Double> dList = new ArrayList<>();\n\t\tfor(Character c:propertyList){\n\t\t\tswitch(c){\n\t\t\tcase '1':\n\t\t\t\tif(aaTable == null)\n\t\t\t\t\tdList.add(pp.getMolecularWeight(pSequence));\n\t\t\t\telse\n\t\t\t\t\tdList.add(pp.getMolecularWeight(pSequence));\n\t\t\t\tbreak;\n\t\t\tcase '2':\n\t\t\t\tdList.add(pp.getAbsorbance(pSequence, true));\n\t\t\t\tdList.add(pp.getAbsorbance(pSequence, false));\n\t\t\t\tbreak;\n\t\t\tcase '3':\n\t\t\t\tdList.add(pp.getExtinctionCoefficient(pSequence, true));\n\t\t\t\tdList.add(pp.getExtinctionCoefficient(pSequence, false));\n\t\t\t\tbreak;\n\t\t\tcase '4': dList.add(pp.getInstabilityIndex(pSequence)); break;\n\t\t\tcase '5': dList.add(pp.getApliphaticIndex(pSequence)); break;\n\t\t\tcase '6': dList.add(pp.getAvgHydropathy(pSequence)); break;\n\t\t\tcase '7': dList.add(pp.getIsoelectricPoint(pSequence)); break;\n\t\t\tcase '8': dList.add(pp.getNetCharge(pSequence)); break;\n\t\t\tcase '9':\n\t\t\t\tMap<AminoAcidCompound, Double> aaCompound2Double = pp.getAAComposition(pSequence);\n\t\t\t\t//(A, R, N, D, C, E, Q, G, H, I, L, K, M, F, P, S, T, W, Y, V)\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.A));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.R));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.N));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.D));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.C));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.E));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.Q));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.G));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.H));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.I));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.L));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.K));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.M));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.F));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.P));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.S));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.T));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.W));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.Y));\n\t\t\t\tdList.add(aaCompound2Double.get(Constraints.V));\n\t\t\t\tbreak;\n\t\t\tcase '0': dList.add(pp.getEnrichment(pSequence, aaSet.getCompoundForString(\"\" + specificList.get(specificCount++)))); break;\n\t\t\t}\n\t\t}\n\t\toutput.print(header.replace(delimiter, \"_\"));\n\t\tdList.stream().forEach(item -> output.print(delimiter + Utils.roundToDecimals(item, decimalPlace)));\n\t\toutput.println();\n\t\toutput.flush();\n\t}\n\n\tprivate static void showHelp(){\n\t\tSystem.err.println(\"NAME\");\n\t\tSystem.err.println(\"\\tAn executable to generate physico-chemical properties of protein sequences.\");\n\t\tSystem.err.println();\n\n\t\tSystem.err.println(\"EXAMPLES\");\n\t\tSystem.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -a\");\n\t\tSystem.err.println(\"\\t\\tGenerates all possible properties.\");\n\t\tSystem.err.println();\n\t\tSystem.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -1 -3 -7\");\n\t\tSystem.err.println(\"\\t\\tGenerates only molecular weight, extinction coefficient and isoelectric point.\");\n\t\tSystem.err.println();\n\t\tSystem.err.println(\"\\tjava -jar AAProperties.jar -i test.fasta -0 A -0 N -1\");\n\t\tSystem.err.println(\"\\t\\tGenerates composition of two specific amino acid symbol and molecular weight.\");\n\t\tSystem.err.println();\n\n\t\tSystem.err.println(\"OPTIONS\");\n\t\tSystem.err.println(\"\\tRequired\");\n\t\tSystem.err.println(\"\\t\\t-i location of input FASTA file\");\n\t\tSystem.err.println();\n\n\t\tSystem.err.println(\"\\tOptional\");\n\t\tSystem.err.println(\"\\t\\t-o location of output file [standard output (default)]\");\n\t\tSystem.err.println(\"\\t\\t-f output format [csv (default) or tsv]\");\n\t\tSystem.err.println(\"\\t\\t-x location of Amino Acid Composition XML file for defining amino acid composition\");\n\t\tSystem.err.println(\"\\t\\t-y location of Element Mass XML file for defining mass of elements\");\n\t\tSystem.err.println(\"\\t\\t-d number of decimals (int) [4 (default)]\");\n\t\tSystem.err.println();\n\n\t\tSystem.err.println(\"\\tProvide at least one of them\");\n\t\tSystem.err.println(\"\\t\\t-a compute properties of option 1-9\");\n\t\tSystem.err.println(\"\\t\\t-1 compute molecular weight\");\n\t\tSystem.err.println(\"\\t\\t-2 compute absorbance\");\n\t\tSystem.err.println(\"\\t\\t-3 compute extinction coefficient\");\n\t\tSystem.err.println(\"\\t\\t-4 compute instability index\");\n\t\tSystem.err.println(\"\\t\\t-5 compute apliphatic index\");\n\t\tSystem.err.println(\"\\t\\t-6 compute average hydropathy value\");\n\t\tSystem.err.println(\"\\t\\t-7 compute isoelectric point\");\n\t\tSystem.err.println(\"\\t\\t-8 compute net charge at pH 7\");\n\t\tSystem.err.println(\"\\t\\t-9 compute composition of 20 standard amino acid (A, R, N, D, C, E, Q, G, H, I, L, K, M, F, P, S, T, W, Y, V)\");\n\t\tSystem.err.println(\"\\t\\t-0 compute composition of specific amino acid symbol\");\n\t\tSystem.err.println();\n\t}\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.aaproperties;\n\nimport org.biojava.nbio.aaproperties.CommandPrompt;\nimport org.junit.Test;\n\nimport java.io.File;\n\npublic class CommandPromptTest {\n\t@Test\n\tpublic void testAdvancedXMLExample() throws Exception{\n\t\tFile output = new File(System.getProperty(\"java.io.tmpdir\"),\"modifiedTest.csv\");\n\t\toutput.deleteOnExit();\n\t\t//-i test.fasta -a\n\t\tString[] args = new String[11];\n\t\targs[0] = \"-i\";\n\t\targs[1] = \"./src/test/resources/modifiedTest.fasta\";\n\t\targs[2] = \"-x\";\n\t\targs[3] = \"./src/main/resources/AdvancedAminoAcidComposition.xml\";\n\t\targs[4] = \"-0\";\n\t\targs[5] = \"0\";\n\t\targs[6] = \"-0\";\n\t\targs[7] = \"1\";\n\t\targs[8] = \"-a\";\n\t\targs[9] = \"-o\";\n\t\targs[10] = output.toString();\n\t\tCommandPrompt.run(args);\n\t}\n\n\t@Test\n\tpublic void testExample1() throws Exception{\n\t\tFile output = new File(System.getProperty(\"java.io.tmpdir\"),\"test.tsv\");\n\t\toutput.deleteOnExit();\n\t\t//-i test.fasta -a\n\t\tString[] args = new String[7];\n\t\targs[0] = \"-i\";\n\t\targs[1] = \"./src/test/resources/test.fasta\";\n\t\targs[2] = \"-a\";\n\t\targs[3] = \"-o\";\n\t\targs[4] = output.toString();\n\t\targs[5] = \"-f\";\n\t\targs[6] = \"tsv\";\n\t\tCommandPrompt.run(args);\n\t}\n\n\t@Test\n\tpublic void testExample1WithCSV() throws Exception{\n\t\tFile output = new File(System.getProperty(\"java.io.tmpdir\"),\"test.csv\");\n\t\toutput.deleteOnExit();\n\t\t//-i test.fasta -a\n\t\tString[] args = new String[7];\n\t\targs[0] = \"-i\";\n\t\targs[1] = \"./src/test/resources/test.fasta\";\n\t\targs[2] = \"-a\";\n\t\targs[3] = \"-o\";\n\t\targs[4] = output.toString();\n\t\targs[5] = \"-f\";\n\t\targs[6] = \"csv\";\n\t\tCommandPrompt.run(args);\n\t}\n\n\t@Test\n\tpublic void testExample2() throws Exception{\n\t\t//-i test.fasta -1 -3 -7\n\t\tString[] args = new String[5];\n\t\targs[0] = \"-i\";\n\t\targs[1] = \"./src/test/resources/test.fasta\";\n\t\targs[2] = \"-1\";\n\t\targs[3] = \"-3\";\n\t\targs[4] = \"-7\";\n\t\tCommandPrompt.run(args);\n\t}\n\n\t@Test\n\tpublic void testExample3() throws Exception{\n\t\t//-i test.fasta -0 A -0 N -1\n\t\tString[] args = new String[7];\n\t\targs[0] = \"-i\";\n\t\targs[1] = \"./src/test/resources/test.fasta\";\n\t\targs[2] = \"-0\";\n\t\targs[3] = \"A\";\n\t\targs[4] = \"-0\";\n\t\targs[5] = \"N\";\n\t\targs[6] = \"-1\";\n\t\tCommandPrompt.run(args);\n\t}\n\n\t@Test\n\tpublic void testWithCases() throws Exception{\n\t\t//-i test.fasta -0 A -0 N -1\n\t\tString[] args = new String[7];\n\t\targs[0] = \"-i\";\n\t\targs[1] = \"./src/test/resources/testWithCases.fasta\";\n\t\targs[2] = \"-0\";\n\t\targs[3] = \"A\";\n\t\targs[4] = \"-0\";\n\t\targs[5] = \"N\";\n\t\targs[6] = \"-1\";\n\t\tCommandPrompt.run(args);\n\t}\n}\n","changedTest":"","commitMessage":"Fix sonar issue S2293 Replace the type specification in this constructor call with the diamond operator ('<>')\n","test_commitMessage":"","allZero":true}