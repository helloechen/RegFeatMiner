{"repository":"biojava","prod_path":"structure/src/main/java/org/biojava/bio/structure/HetatomImpl.java","test_path":"structure/src/test/java/org/biojava/bio/structure/HetatomImplTest.java","prod_time":"2010-10-13 13:39:39","test_time":"2010-10-13 13:39:39","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":11,"add_classname_line":0,"add_condition_line":7,"add_field_line":1,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":4,"add_return_line":9,"del_annotation_line":0,"del_call_line":14,"del_classname_line":0,"del_condition_line":5,"del_field_line":1,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":3,"del_return_line":4,"label":"POSITIVE","prod_commitID":"1fb80cc70eac91d2f8e110bba7faf79908d1fdec","test_commitID":"1fb80cc70eac91d2f8e110bba7faf79908d1fdec","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 05.03.2004\n * @author Andreas Prlic\n *\n */\npackage org.biojava.bio.structure;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.biojava.bio.structure.io.PDBParseException;\nimport org.biojava.bio.structure.io.mmcif.ChemCompGroupFactory;\nimport org.biojava.bio.structure.io.mmcif.model.ChemComp;\n\n/**\n *\n * Generic Implementation of a Group interface.\n * AminoAcidImpl and NucleotideImpl are closely related classes.\n * @see AminoAcidImpl\n * @see NucleotideImpl\n * @author Andreas Prlic\n * @author Horvath Tamas\n * @version %I% %G%\n * @since 1.4\n */\npublic class HetatomImpl implements Group,Serializable {\n\n\t/**\n\t *\n\t */\n\tprivate static final long serialVersionUID = 4491470432023820382L;\n\n\t/** this is a \"hetatm\".\n\t *\n\t */\n\tpublic static final String type = GroupType.HETATM ;\n\n\tMap<String, Object> properties ;\n\n\tlong id;\n\n\t/* stores if 3d coordinates are available. */\n\tprotected boolean pdb_flag ;\n\n\t/* 3 letter name of amino acid in pdb file. */\n\tprotected String pdb_name ;\n\n\t/* pdb numbering. */\n\tprotected String pdb_code ;\n\n        protected ResidueNumber residueNumber;\n\n        protected List<Atom> atoms ;\n\n\tChain parent;\n\n\tMap<String,Atom> atomLookup = new HashMap<String,Atom>();\n\tMap<String,Atom> atomSingleCharLookup = new HashMap<String,Atom>();\n\t\n\tChemComp chemComp ;\n\n\t/* Construct a Hetatom instance. */\n\tpublic HetatomImpl() {\n\t\tsuper();\n\n\t\tpdb_flag = false;\n\t\tpdb_name = null ;\n\t\tpdb_code = null ;\n                residueNumber = null;\n\t\tatoms    = new ArrayList<Atom>();\n\t\tproperties = new HashMap<String,Object>();\n\t\tparent = null;\n\t\tchemComp = null;\n\t}\n\n\t/* returns an identical copy of this structure\n     public Object clone() {\n     Hetatom n = new Hetatom();\n     }\n\t */\n\n\n\n\n\t/**\n\t *  returns true or false, depending if this group has 3D coordinates or not.\n\t * @return true if Group has 3D coordinates\n\t */\n\tpublic boolean has3D() {\n\t\treturn pdb_flag;\n\t}\n\n\t/** flag if group has 3D data.\n\t *\n\t * @param flag  true to set flag that this Group has 3D coordinates\n\t */\n\tpublic void setPDBFlag(boolean flag){\n\t\tpdb_flag = flag ;\n\t}\n\n\t/**\n\t * Returns the PDBCode.\n\t * @see #setPDBCode\n\t * @return a String representing the PDBCode value\n         * @deprecated replaced by #getSeqNum\n\t */\n        @Deprecated\n\tpublic String getPDBCode() {\n\t\treturn pdb_code;\n\t}\n\n\t/** set the PDB code.\n\t * @see #getPDBCode\n         * @deprecated replaced by #setSeqNum\n\t */\n        @Deprecated\n\tpublic void setPDBCode(String pdb) {\n\t\tpdb_code = pdb ;\n\t}\n\n\t/** set three character name of Group .\n\t *\n\t * @param s  a String specifying the PDBName value\n\t * @see #getPDBName\n\t * @throws PDBParseException ...\n\t */\n\tpublic void setPDBName(String s)\n\tthrows PDBParseException\n\t{\n\t\t// hetatoms can have pdb_name length < 3. e.g. CU (see 1a4a position 1200 )\n\t\t//if (s.length() != 3) {\n\t\t//throw new PDBParseException(\"amino acid name is not of length 3!\");\n\t\t//}\n\t\tpdb_name =s ;\n\t}\n\n\t/**\n\t * Returns the PDBName.\n\t *\n\t * @return a String representing the PDBName value\n\t * @see #setPDBName\n\t */\n\tpublic String getPDBName() { return pdb_name;}\n\n\t/** add an atom to this group. */\n\tpublic void addAtom(Atom atom){\n\t\tatom.setParent(this);\n\t\tatoms.add(atom);\n\t\tif (atom.getCoords() != null){\n\t\t\t// we have got coordinates!\n\t\t\tsetPDBFlag(true);\n\t\t}\n\t\tatomLookup.put(atom.getFullName(),atom);\n\t\tatomSingleCharLookup.put(atom.getName(),atom);\n\t};\n\n\n\t/** remove all atoms\n\t *\n\t */\n\tpublic void clearAtoms() {\n\t\tatoms.clear();\n\t\tsetPDBFlag(false);\n\t\tatomLookup.clear();\n\t\tatomSingleCharLookup.clear();\n\t}\n\n\t/** getnumber of atoms.\n\t *  @return number of atoms\n\t */\n\tpublic int size(){ return atoms.size();   }\n\n\t/** get all atoms of this group .\n\t * returns a List of all atoms in this Group\n\t * @return an List object representing the atoms value\n\t */\n\tpublic List<Atom> getAtoms(){\n\t\t//Atom[] atms = (Atom[])atoms.toArray(new Atom[atoms.size()]);\n\n\t\treturn atoms ;\n\t}\n\n\n\t/** set the atoms of this group\n\t * @see org.biojava.bio.structure.Atom\n\t * @param atoms a list of atoms\n\t */\n\tpublic void setAtoms(List<Atom> atoms){\n\t\tfor (Atom a: atoms){\n\t\t\ta.setParent(this);\n\t\t\tatomLookup.put(a.getFullName(), a);\n\t\t\tatomSingleCharLookup.put(a.getName(),a);\n\t\t}\n\t\tthis.atoms = atoms;\n\t\tif ( atoms.size() > 0) {\n\t\t\tpdb_flag = true;\n\t\t}\n\n\t}\n\n\n\t/**  get an atom throws StructureException if atom not found.\n\t * @param name  a String\n\t * @return an Atom object\n\t * @throws StructureException ...\n\t */\n\tpublic Atom getAtom(String name)\n\tthrows StructureException\n\t{\n\t\t// todo: add speedup by internal hashmap...\n\n\t\tAtom a = atomLookup.get(name);\n\t\tif ( a != null)\n\t\t\treturn a;\n\t\ta =  atomSingleCharLookup.get(name);\n\t\tif ( a != null)\n\t\t\treturn a;\n\n\t\t// something is deeply wrong...\n\n\n\t\tfor (int i=0;i<atoms.size();i++){\n\t\t\tAtom atom = atoms.get(i);\n\n\t\t\tif ( name.length() > 2) {\n\t\t\t\t\n\t\t\t\tif ( atom.getFullName().equals(name)){\n\t\t\t\t\treturn atom;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (atom.getName().equals(name)){\n\t\t\t\tif ( name.equals(\"CA\")) {\n\t\t\t\t\tif (atom.getElement().equals(Element.C))\n\t\t\t\t\t\treturn atom;\n\t\t\t\t}   \n\t\t\t}\n\n\t\t}\n\n\t\tthrow new StructureException(\" No atom \"+name + \" in group \" + pdb_name + \" \" + pdb_code + \" !\");\n\n\t}\n\n\t/**  Get an atom by the full PDB name e.g. \" N  \" for N. Throws StructureException if atom not found.\n\t * @param name  a String\n\t * @return an Atom object\n\t * @throws StructureException ...\n\t */\n\tpublic Atom getAtomByPDBname(String name)\n\tthrows StructureException\n\t{\n\n\t\tfor (int i=0;i<atoms.size();i++){\n\t\t\tAtom atom = atoms.get(i);\n\t\t\tif (atom.getFullName().equals(name)){\n\t\t\t\treturn atom;\n\t\t\t}\n\t\t}\n\n\t\tthrow new StructureException(\" No atom \"+name + \" in group \" + pdb_name + \" \" + pdb_code + \" !\");\n\n\t}\n\n\t/** return an atom by its position in the internal List.\n\t *\n\t * @param position  an int\n\t * @return an Atom object\n\t * @throws StructureException ...\n\t */\n\tpublic Atom getAtom(int position)\n\tthrows StructureException\n\t{\n\t\tif ((position < 0)|| ( position >= atoms.size())) {\n\t\t\tthrow new StructureException(\"No atom found at position \"+position);\n\t\t}\n\t\tAtom a = atoms.get(position);\n\t\treturn a ;\n\t}\n\n\t/** test is an Atom with name is existing. */\n\tpublic boolean hasAtom(String fullName){\n\n\t\tAtom a = atomLookup.get(fullName);\n\t\tif ( a != null)\n\t\t\treturn true;\n\t\ta = atomSingleCharLookup.get(fullName.trim());\n\t\tif ( a != null)\n\t\t\treturn true;\n\t\t\n\t\treturn false;\n\n\t\t//       for (int i=0;i<atoms.size();i++){\n\t\t//            Atom atom = atoms.get(i);\n\t\t//            if (atom.getName().equals(name)){\n\t\t//                return true;\n\t\t//            }\n\t\t//        }\n\t\t//        return false ;\n\t}\n\n\t/**\n\t * Returns the type value.\n\t *\n\t * @return a String representing the type value\n\t */\n\tpublic String getType(){ return type;}\n\n\tpublic String toString(){\n\n\t\tString str = \"Hetatom \"+ pdb_code + \" \" + pdb_name +  \" \"+ pdb_flag;\n\t\tif (pdb_flag) {\n\t\t\tstr = str + \" atoms: \"+atoms.size();\n\t\t}\n\n\n\t\treturn str ;\n\n\t}\n\n\n\n\t/** calculate if a groups has all atoms required for an amino acid\n     this allows to include chemically modified amino acids that\n     are labeled hetatoms into some computations ... the usual way\n     to identify if a group is an amino acid is getType() !\n     <p>\n     amino atoms are : N, CA, C, O, CB\n     GLY does not have CB (unless we would calculate some artificially\n     </p>\n\n     Example: 1DW9 parent A first group is a Selenomethionine, provided as HETATM, but here returns true.\n     <pre>\n     HETATM    1  N   MSE A   1      11.720  20.973   1.584  0.00  0.00           N\n     HETATM    2  CA  MSE A   1      10.381  20.548   1.139  0.00  0.00           C\n     HETATM    3  C   MSE A   1       9.637  20.037   2.398  0.00  0.00           C\n     HETATM    4  O   MSE A   1      10.198  19.156   2.985  0.00  0.00           O\n     HETATM    5  CB  MSE A   1      10.407  19.441   0.088  0.00  0.00           C\n     </pre>\n     @see #getType\n\n\t */\n\n\n\tpublic boolean hasAminoAtoms(){\n\t\t// if this method call is performed too often, it should become a\n\t\t// private method and provide a flag for Group object ...\n\n\t\tString[] atoms ;\n\t\tif ( getType().equals(\"amino\") & getPDBName().equals(\"GLY\")){\n\t\t\tatoms = new String[] { \"N\",\" CA \",\"C\",\"O\"};\n\t\t} else {\n\t\t\tatoms = new String[] { \"N\",\" CA \",\"C\",\"O\",\"CB\" };\n\t\t}\n\n\n\t\tfor (int i = 0 ; i < atoms.length; i++) {\n\t\t\tif ( ! hasAtom(atoms[i])) {\n\t\t\t\t//System.out.println(\"not amino atoms\");\n\t\t\t\treturn false ;\n\t\t\t}\n\t\t}\n\n\t\treturn true ;\n\t}\n\n\n\t/** properties of this amino acid. currerntly available properties.\n\t * are:\n\t * phi\n\t * psi\n\t *\n\t * @see #getProperties\n\t */\n\tpublic void setProperties(Map<String,Object> props) {\n\t\tproperties =  props ;\n\t}\n\n\t/** return properties.\n\t *\n\t * @return a HashMap object representing the properties value\n\t * @see #setProperties\n\t */\n\tpublic Map<String, Object> getProperties() {\n\t\treturn properties ;\n\t}\n\n\t/** set a single property .\n\t *\n\t * @see #getProperties\n\t * @see #getProperty\n\t */\n\tpublic void setProperty(String key, Object value){\n\t\tproperties.put(key,value);\n\t}\n\n\t/** get a single property .\n\t * @param key  a String\n\t * @return an Object\n\t * @see #setProperty\n\t * @see #setProperties\n\t */\n\tpublic Object getProperty(String key){\n\t\treturn properties.get(key);\n\t}\n\n\n\t/** return an AtomIterator.\n\t *\n\t * @return an Iterator object\n\t */\n\tpublic Iterator<Atom> iterator() {\n\t\tIterator<Atom> iter = new AtomIterator(this);\n\t\treturn iter ;\n\t}\n\n\t/** returns and identical copy of this Group object .\n\t * @return  and identical copy of this Group object\n\t */\n\tpublic Object clone(){\n\n\t\tHetatomImpl n = new HetatomImpl();\n\t\tn.setPDBFlag(has3D());\n\t\tn.setPDBCode(getPDBCode());\n                n.setResidueNumber(residueNumber);\n\t\ttry {\n\t\t\tn.setPDBName(getPDBName());\n\t\t} catch (PDBParseException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t// copy the atoms\n\t\tfor (int i=0;i<atoms.size();i++){\n\t\t\tAtom atom = atoms.get(i);\n\t\t\tn.addAtom((Atom)atom.clone());\n\t\t}\n\t\treturn n;\n\t}\n\n\t/** Set the back-reference (to its parent Chain)\n\t * @param parent the parent Chain\n\t */\n\n\tpublic void setParent(Chain parent) {\n\t\tthis.parent = parent ;\n\t}\n\n\t/** Returns the parent Chain of the Group\n\t *\n\t * @return Chain the Chain object that contains the Group\n\t *\n\t *\n\t */\n\n\tpublic Chain getParent() {\n\t\treturn parent;\n\t}\n\n\t/** the Hibernate database ID\n\t *\n\t * @return the id\n\t */\n\tpublic long getId() {\n\t\treturn id;\n\t}\n\n\t/** the Hibernate database ID\n\t *\n\t * @param id the hibernate id\n\t */\n\tpublic void setId(long id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic ChemComp getChemComp() {\n\t\tif  ( chemComp == null ) {\n\t\t\tchemComp = ChemCompGroupFactory.getChemComp(pdb_name);\n\t\t}\n\t\treturn chemComp;\n\t}\n\n\tpublic void setChemComp(ChemComp cc) {\n\t\tchemComp = cc;\n\n\t}\n\n    /**\n     * {@inheritDoc}\n     */\n    public void setChain(Chain chain) {\n        this.parent = chain;\n        //TODO: setChain(), getChainId() and ResidueNumber.set/getChainId() are\n        //duplicating functionality at present and could give different values.\n        if (residueNumber != null) {\n            residueNumber.setChainId(chain.getName());\n        }\n        \n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Chain getChain() {\n        return parent;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String getChainId() {\n        if (parent == null) {\n            return \"\";\n        }\n        return parent.getName();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public ResidueNumber getResidueNumber() {\n        //horrible, nasty double implementation here to cater for the old get/setPDBCode\n//        if (this.chainId != null && this.residueNumber != null && this.insCode != null && this.residueNumber == null) {\n//            residueNumber = new ResidueNumber(this.chainId, this.resNum, this.insCode);\n//            return residueNumber;\n//        }\n//        if (resNum.getSeqNum() == null && resNum.getInsCode() == null) {\n//            //using the old style get/setPdbcode so we need to make new ones from the pdbCode\n////            System.out.println(\"Please remove depricated use of get/setPDBCode for any Group instances.\");\n//            if (pdb_code == null ) {\n//\n//            }\n//            // this should be refactored out of BJ3 and replaced with newer implementation based on setGroupId\n//            residueNumber = new ResidueNumber();\n//            Integer resNum = null;\n//            String icode = \"\";\n////            System.out.println(\"pdb_code: '\" + pdb_code + \"'\");\n//            if (!pdb_code.endsWith(\"\\\\d\")){\n//\n//                resNum = Integer.parseInt(pdb_code.split(\"\\\\D\")[0]);\n//                icode = pdb_code.split(\"\\\\D\")[1];\n////                System.out.println(\"insertionfound: \" + icode);\n////                System.out.println(\"resNum: \" + resNum);\n//                String [] posAndIcode = pdb_code.split(\"\\\\d\");\n//                for (int i = 0; i < posAndIcode.length; i++) {\n//                    String string = posAndIcode[i];\n//                    System.out.println(string);\n//                }\n//                icode = posAndIcode[posAndIcode.length - 1];\n////                System.out.println(\"icode: \" + icode);\n//            } else {\n//                resNum = Integer.parseInt(pdb_code);\n//            }\n//            if (parent != null) {\n//                chainId = parent.getName();\n//            }\n//            residueNumber.setChainId(chainId);\n//            residueNumber.setInsCode(icode);\n//            residueNumber.setSeqNum(resNum);\n//            //set the residueNumber here if there isn't one already\n//            this.resNum = residueNumber;\n//\n//        }\n            // this should be refactored out of BJ3 and replaced with newer implementation based on setGroupId\n        if (residueNumber == null) {\n            //using the old style get/setPdbcode so we need to make new ones from the pdbCode\n//            System.out.println(\"Please remove depricated use of get/setPDBCode for any Group instances.\");\n            if (pdb_code == null ) {\n\n            }\n            //set the residueNumber here if there isn't one already\n            residueNumber = new ResidueNumber();\n            Integer resNum = null;\n            String icode = \"\";\n//            System.out.println(\"pdb_code: '\" + pdb_code + \"'\");\n            if (!pdb_code.endsWith(\"\\\\d\")){\n\n                resNum = Integer.parseInt(pdb_code.split(\"\\\\D\")[0]);\n                icode = pdb_code.split(\"\\\\D\")[1];\n//                System.out.println(\"insertionfound: \" + icode);\n//                System.out.println(\"resNum: \" + resNum);\n                String [] posAndIcode = pdb_code.split(\"\\\\d\");\n                for (int i = 0; i < posAndIcode.length; i++) {\n                    String string = posAndIcode[i];\n                    System.out.println(string);\n                }\n                icode = posAndIcode[posAndIcode.length - 1];\n//                System.out.println(\"icode: \" + icode);\n            } else {\n                resNum = Integer.parseInt(pdb_code);\n            }\n            String chainId = null;\n            if (parent != null) {\n                chainId = parent.getName();\n            }\n            residueNumber.setChainId(chainId);\n            residueNumber.setInsCode(icode);\n            residueNumber.setSeqNum(resNum);\n\n        }\n        else {\n            //all good new BJ3 compliant code - return the existing residueNumber\n            return residueNumber;\n        }\n//        System.out.println(\"Made resNum: \" + residueNumber);\n        return residueNumber;\n    }\n\n\n    public void setResidueNumber(ResidueNumber residueNumber) {\n        this.residueNumber = residueNumber;\n    }\n\n    public void setResidueNumber(String chainId, Integer resNum, String iCode) {\n        this.residueNumber = new ResidueNumber(chainId, resNum, iCode);\n    }\n    \n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on 05.03.2004\n * @author Andreas Prlic\n *\n */\npackage org.biojava.bio.structure;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.biojava.bio.structure.io.PDBParseException;\nimport org.biojava.bio.structure.io.mmcif.ChemCompGroupFactory;\nimport org.biojava.bio.structure.io.mmcif.model.ChemComp;\n\n/**\n *\n * Generic Implementation of a Group interface.\n * AminoAcidImpl and NucleotideImpl are closely related classes.\n * @see AminoAcidImpl\n * @see NucleotideImpl\n * @author Andreas Prlic\n * @author Horvath Tamas\n * @version %I% %G%\n * @since 1.4\n */\npublic class HetatomImpl implements Group,Serializable {\n\n\t/**\n\t *\n\t */\n\tprivate static final long serialVersionUID = 4491470432023820382L;\n\n\t/** this is a \"hetatm\".\n\t *\n\t */\n\tpublic static final String type = GroupType.HETATM ;\n\n\tMap<String, Object> properties ;\n\n\tlong id;\n\n\t/* stores if 3d coordinates are available. */\n\tprotected boolean pdb_flag ;\n\n\t/* 3 letter name of amino acid in pdb file. */\n\tprotected String pdb_name ;\n\n\tprotected ResidueNumber residueNumber;\n\n\tprotected List<Atom> atoms ;\n\n\tChain parent;\n\n\tMap<String,Atom> atomLookup = new HashMap<String,Atom>();\n\tMap<String,Atom> atomSingleCharLookup = new HashMap<String,Atom>();\n\n\tChemComp chemComp ;\n\n\tList<Group> altLocs;\n\t\n\t/* Construct a Hetatom instance. */\n\tpublic HetatomImpl() {\n\t\tsuper();\n\n\t\tpdb_flag = false;\n\t\tpdb_name = null ;\n\t\t\n\t\tresidueNumber = null;\n\t\tatoms    = new ArrayList<Atom>();\n\t\tproperties = new HashMap<String,Object>();\n\t\tparent = null;\n\t\tchemComp = null;\n\t\taltLocs = null;\n\t}\n\n\t/* returns an identical copy of this structure\n     public Object clone() {\n     Hetatom n = new Hetatom();\n     }\n\t */\n\n\n\n\n\t/**\n\t *  returns true or false, depending if this group has 3D coordinates or not.\n\t * @return true if Group has 3D coordinates\n\t */\n\tpublic boolean has3D() {\n\t\treturn pdb_flag;\n\t}\n\n\t/** flag if group has 3D data.\n\t *\n\t * @param flag  true to set flag that this Group has 3D coordinates\n\t */\n\tpublic void setPDBFlag(boolean flag){\n\t\tpdb_flag = flag ;\n\t}\n\n\t/**\n\t * Returns the PDBCode.\n\t * @see #setPDBCode\n\t * @return a String representing the PDBCode value\n\t * @deprecated replaced by #getSeqNum\n\t */\n\t@Deprecated\n\tpublic String getPDBCode() {\n\t\tif ( residueNumber != null)\n\t\t\treturn residueNumber.toString();\n\t\treturn null;\n\t}\n\n\t/** set the PDB code.\n\t * @see #getPDBCode\n\t * @deprecated replaced by {@link #setResidueNumber(ResidueNumber)}\n\t */\n\t@Deprecated\n\tpublic void setPDBCode(String pdb_code) {\n\n\t\t//set the residueNumber here if there isn't one already\n\t\tresidueNumber = ResidueNumber.fromString(pdb_code);\n\t\tString chainId = null;\n\t\tif (parent != null) {\n\t\t\tchainId = parent.getName();\n\t\t}\n\t\tresidueNumber.setChainId(chainId);\n\t\n\t\n\t}\n\n\t/** set three character name of Group .\n\t *\n\t * @param s  a String specifying the PDBName value\n\t * @see #getPDBName\n\t * @throws PDBParseException ...\n\t */\n\tpublic void setPDBName(String s)\n\tthrows PDBParseException\n\t{\n\t\t// hetatoms can have pdb_name length < 3. e.g. CU (see 1a4a position 1200 )\n\t\t//if (s.length() != 3) {\n\t\t//throw new PDBParseException(\"amino acid name is not of length 3!\");\n\t\t//}\n\t\tpdb_name =s ;\n\t}\n\n\t/**\n\t * Returns the PDBName.\n\t *\n\t * @return a String representing the PDBName value\n\t * @see #setPDBName\n\t */\n\tpublic String getPDBName() { return pdb_name;}\n\n\t/** add an atom to this group. */\n\tpublic void addAtom(Atom atom){\n\t\tatom.setGroup(this);\n\t\tatoms.add(atom);\n\t\tif (atom.getCoords() != null){\n\t\t\t// we have got coordinates!\n\t\t\tsetPDBFlag(true);\n\t\t}\n\t\tatomLookup.put(atom.getFullName(),atom);\n\t\tatomSingleCharLookup.put(atom.getName(),atom);\n\t};\n\n\n\t/** remove all atoms\n\t *\n\t */\n\tpublic void clearAtoms() {\n\t\tatoms.clear();\n\t\tsetPDBFlag(false);\n\t\tatomLookup.clear();\n\t\tatomSingleCharLookup.clear();\n\t}\n\n\t/** getnumber of atoms.\n\t *  @return number of atoms\n\t */\n\tpublic int size(){ return atoms.size();   }\n\n\t/** get all atoms of this group .\n\t * returns a List of all atoms in this Group\n\t * @return an List object representing the atoms value\n\t */\n\tpublic List<Atom> getAtoms(){\n\t\t//Atom[] atms = (Atom[])atoms.toArray(new Atom[atoms.size()]);\n\n\t\treturn atoms ;\n\t}\n\n\n\t/** set the atoms of this group\n\t * @see org.biojava.bio.structure.Atom\n\t * @param atoms a list of atoms\n\t */\n\tpublic void setAtoms(List<Atom> atoms){\n\t\tfor (Atom a: atoms){\n\t\t\ta.setGroup(this);\n\t\t\tatomLookup.put(a.getFullName(), a);\n\t\t\tatomSingleCharLookup.put(a.getName(),a);\n\t\t}\n\t\tthis.atoms = atoms;\n\t\tif ( atoms.size() > 0) {\n\t\t\tpdb_flag = true;\n\t\t}\n\n\t}\n\n\n\t/**  get an atom throws StructureException if atom not found.\n\t * @param name  a String\n\t * @return an Atom object\n\t * @throws StructureException ...\n\t */\n\tpublic Atom getAtom(String name)\n\tthrows StructureException\n\t{\n\t\t// todo: add speedup by internal hashmap...\n\n\t\tAtom a = atomLookup.get(name);\n\t\tif ( a != null)\n\t\t\treturn a;\n\t\ta =  atomSingleCharLookup.get(name);\n\t\tif ( a != null)\n\t\t\treturn a;\n\n\t\t// something is deeply wrong...\n\n\n\t\tfor (int i=0;i<atoms.size();i++){\n\t\t\tAtom atom = atoms.get(i);\n\n\t\t\tif ( name.length() > 2) {\n\n\t\t\t\tif ( atom.getFullName().equals(name)){\n\t\t\t\t\treturn atom;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (atom.getName().equals(name)){\n\t\t\t\tif ( name.equals(\"CA\")) {\n\t\t\t\t\tif (atom.getElement().equals(Element.C))\n\t\t\t\t\t\treturn atom;\n\t\t\t\t}   \n\t\t\t}\n\n\t\t}\n\n\t\tthrow new StructureException(\" No atom \"+name + \" in group \" + pdb_name + \" \" + residueNumber  + \" !\");\n\n\t}\n\n\t/**  Get an atom by the full PDB name e.g. \" N  \" for N. Throws StructureException if atom not found.\n\t * @param name  a String\n\t * @return an Atom object\n\t * @throws StructureException ...\n\t */\n\tpublic Atom getAtomByPDBname(String name)\n\tthrows StructureException\n\t{\n\n\t\tfor (int i=0;i<atoms.size();i++){\n\t\t\tAtom atom = atoms.get(i);\n\t\t\tif (atom.getFullName().equals(name)){\n\t\t\t\treturn atom;\n\t\t\t}\n\t\t}\n\n\t\tthrow new StructureException(\" No atom \"+name + \" in group \" + pdb_name + \" \" + residueNumber + \" !\");\n\n\t}\n\n\t/** return an atom by its position in the internal List.\n\t *\n\t * @param position  an int\n\t * @return an Atom object\n\t * @throws StructureException ...\n\t */\n\tpublic Atom getAtom(int position)\n\tthrows StructureException\n\t{\n\t\tif ((position < 0)|| ( position >= atoms.size())) {\n\t\t\tthrow new StructureException(\"No atom found at position \"+position);\n\t\t}\n\t\tAtom a = atoms.get(position);\n\t\treturn a ;\n\t}\n\n\t/** test is an Atom with name is existing. */\n\tpublic boolean hasAtom(String fullName){\n\n\t\tAtom a = atomLookup.get(fullName);\n\t\tif ( a != null)\n\t\t\treturn true;\n\t\ta = atomSingleCharLookup.get(fullName.trim());\n\t\tif ( a != null)\n\t\t\treturn true;\n\n\t\treturn false;\n\n\t\t//       for (int i=0;i<atoms.size();i++){\n\t\t//            Atom atom = atoms.get(i);\n\t\t//            if (atom.getName().equals(name)){\n\t\t//                return true;\n\t\t//            }\n\t\t//        }\n\t\t//        return false ;\n\t}\n\n\t/**\n\t * Returns the type value.\n\t *\n\t * @return a String representing the type value\n\t */\n\tpublic String getType(){ return type;}\n\n\tpublic String toString(){\n\n\t\tString str = \"Hetatom \"+ residueNumber + \" \" + pdb_name +  \" \"+ pdb_flag;\n\t\tif (pdb_flag) {\n\t\t\tstr = str + \" atoms: \"+atoms.size();\n\t\t}\n\t\tif ( altLocs != null)\n\t\t\tstr += \" has altLocs :\" + altLocs.size(); \n\n\n\t\treturn str ;\n\n\t}\n\n\n\n\t/** calculate if a groups has all atoms required for an amino acid\n     this allows to include chemically modified amino acids that\n     are labeled hetatoms into some computations ... the usual way\n     to identify if a group is an amino acid is getType() !\n     <p>\n     amino atoms are : N, CA, C, O, CB\n     GLY does not have CB (unless we would calculate some artificially\n     </p>\n\n     Example: 1DW9 parent A first group is a Selenomethionine, provided as HETATM, but here returns true.\n     <pre>\n     HETATM    1  N   MSE A   1      11.720  20.973   1.584  0.00  0.00           N\n     HETATM    2  CA  MSE A   1      10.381  20.548   1.139  0.00  0.00           C\n     HETATM    3  C   MSE A   1       9.637  20.037   2.398  0.00  0.00           C\n     HETATM    4  O   MSE A   1      10.198  19.156   2.985  0.00  0.00           O\n     HETATM    5  CB  MSE A   1      10.407  19.441   0.088  0.00  0.00           C\n     </pre>\n     @see #getType\n\n\t */\n\n\n\tpublic boolean hasAminoAtoms(){\n\t\t// if this method call is performed too often, it should become a\n\t\t// private method and provide a flag for Group object ...\n\n\t\tString[] atoms ;\n\t\tif ( getType().equals(\"amino\") & getPDBName().equals(\"GLY\")){\n\t\t\tatoms = new String[] { \"N\",\" CA \",\"C\",\"O\"};\n\t\t} else {\n\t\t\tatoms = new String[] { \"N\",\" CA \",\"C\",\"O\",\"CB\" };\n\t\t}\n\n\n\t\tfor (int i = 0 ; i < atoms.length; i++) {\n\t\t\tif ( ! hasAtom(atoms[i])) {\n\t\t\t\t//System.out.println(\"not amino atoms\");\n\t\t\t\treturn false ;\n\t\t\t}\n\t\t}\n\n\t\treturn true ;\n\t}\n\n\n\t/** properties of this amino acid. currerntly available properties.\n\t * are:\n\t * phi\n\t * psi\n\t *\n\t * @see #getProperties\n\t */\n\tpublic void setProperties(Map<String,Object> props) {\n\t\tproperties =  props ;\n\t}\n\n\t/** return properties.\n\t *\n\t * @return a HashMap object representing the properties value\n\t * @see #setProperties\n\t */\n\tpublic Map<String, Object> getProperties() {\n\t\treturn properties ;\n\t}\n\n\t/** set a single property .\n\t *\n\t * @see #getProperties\n\t * @see #getProperty\n\t */\n\tpublic void setProperty(String key, Object value){\n\t\tproperties.put(key,value);\n\t}\n\n\t/** get a single property .\n\t * @param key  a String\n\t * @return an Object\n\t * @see #setProperty\n\t * @see #setProperties\n\t */\n\tpublic Object getProperty(String key){\n\t\treturn properties.get(key);\n\t}\n\n\n\t/** return an AtomIterator.\n\t *\n\t * @return an Iterator object\n\t */\n\tpublic Iterator<Atom> iterator() {\n\t\tIterator<Atom> iter = new AtomIterator(this);\n\t\treturn iter ;\n\t}\n\n\t/** returns and identical copy of this Group object .\n\t * @return  and identical copy of this Group object\n\t */\n\tpublic Object clone(){\n\n\t\tHetatomImpl n = new HetatomImpl();\n\t\tn.setPDBFlag(has3D());\n\t\tn.setPDBCode(getPDBCode());\n\t\tn.setResidueNumber(residueNumber);\n\t\ttry {\n\t\t\tn.setPDBName(getPDBName());\n\t\t} catch (PDBParseException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t// copy the atoms\n\t\tfor (int i=0;i<atoms.size();i++){\n\t\t\tAtom atom = atoms.get(i);\n\t\t\tn.addAtom((Atom)atom.clone());\n\t\t}\n\t\treturn n;\n\t}\n\n\t/** Set the back-reference (to its parent Chain)\n\t * @param parent the parent Chain\n\t */\n\n\tpublic void setParent(Chain parent) {\n\t\tthis.parent = parent ;\n\t}\n\n\t/** Returns the parent Chain of the Group\n\t *\n\t * @return Chain the Chain object that contains the Group\n\t *\n\t *\n\t */\n\n\tpublic Chain getParent() {\n\t\treturn parent;\n\t}\n\n\t/** the Hibernate database ID\n\t *\n\t * @return the id\n\t */\n\tpublic long getId() {\n\t\treturn id;\n\t}\n\n\t/** the Hibernate database ID\n\t *\n\t * @param id the hibernate id\n\t */\n\tpublic void setId(long id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic ChemComp getChemComp() {\n\t\tif  ( chemComp == null ) {\n\t\t\tchemComp = ChemCompGroupFactory.getChemComp(pdb_name);\n\t\t}\n\t\treturn chemComp;\n\t}\n\n\tpublic void setChemComp(ChemComp cc) {\n\t\tchemComp = cc;\n\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tpublic void setChain(Chain chain) {\n\t\tthis.parent = chain;\n\t\t//TODO: setChain(), getChainId() and ResidueNumber.set/getChainId() are\n\t\t//duplicating functionality at present and could give different values.\n\t\tif (residueNumber != null) {\n\t\t\tresidueNumber.setChainId(chain.getChainID());\n\t\t}\n\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tpublic Chain getChain() {\n\t\treturn parent;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tpublic String getChainId() {\n\t\tif (parent == null) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn parent.getChainID();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tpublic ResidueNumber getResidueNumber() {\n\t\t\n\t\treturn residueNumber;\n\t}\n\n\n\tpublic void setResidueNumber(ResidueNumber residueNumber) {\n\t\tthis.residueNumber = residueNumber;\n\t}\n\n\tpublic void setResidueNumber(String chainId, Integer resNum, Character iCode) {\n\t\tthis.residueNumber = new ResidueNumber(chainId, resNum, iCode);\n\t}\n\n\tpublic boolean hasAltLoc() {\n\t\tif ( altLocs == null)\n\t\treturn false;\n\t\tif ( altLocs.size() > 0)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\tpublic List<Group> getAltLocs() {\n\t\tif ( altLocs == null)\n\t\t\treturn new ArrayList<Group>();\n\t\treturn altLocs;\n\t}\n\n\tpublic void addAltLoc(Group group) {\n\t\tif ( altLocs == null) {\n\t\t\taltLocs = new ArrayList<Group>();\n\t\t}\n\t\taltLocs.add(group);\n\t\t\n\t}\n\n}\n","originTest":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\npackage org.biojava.bio.structure;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\n/**\n *\n * @author Jules Jacobsen <jacobsen@ebi.ac.uk>\n */\npublic class HetatomImplTest {\n\n    int bigTestNumber = 60000;\n\n    public HetatomImplTest() {\n\n    }\n\n    @BeforeClass\n    public static void setUpClass() throws Exception {\n    }\n\n    @AfterClass\n    public static void tearDownClass() throws Exception {\n    }\n\n    @Before\n    public void setUp() {\n    }\n\n    @After\n    public void tearDown() {\n    }\n\n//    /**\n//     * Test of has3D method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testHas3D() {\n//        System.out.println(\"has3D\");\n//        HetatomImpl instance = new HetatomImpl();\n//        boolean expResult = false;\n//        boolean result = instance.has3D();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setPDBFlag method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetPDBFlag() {\n//        System.out.println(\"setPDBFlag\");\n//        boolean flag = false;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setPDBFlag(flag);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getPDBCode method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetPDBCode() {\n//        System.out.println(\"getPDBCode\");\n//        HetatomImpl instance = new HetatomImpl();\n//        String expResult = \"\";\n//        String result = instance.getPDBCode();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setPDBCode method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetPDBCode() {\n//        System.out.println(\"setPDBCode\");\n//        String pdb = \"\";\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setPDBCode(pdb);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setPDBName method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetPDBName() throws Exception {\n//        System.out.println(\"setPDBName\");\n//        String s = \"\";\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setPDBName(s);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getPDBName method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetPDBName() {\n//        System.out.println(\"getPDBName\");\n//        HetatomImpl instance = new HetatomImpl();\n//        String expResult = \"\";\n//        String result = instance.getPDBName();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of addAtom method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testAddAtom() {\n//        System.out.println(\"addAtom\");\n//        Atom atom = null;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.addAtom(atom);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of clearAtoms method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testClearAtoms() {\n//        System.out.println(\"clearAtoms\");\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.clearAtoms();\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of size method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSize() {\n//        System.out.println(\"size\");\n//        HetatomImpl instance = new HetatomImpl();\n//        int expResult = 0;\n//        int result = instance.size();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getAtoms method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetAtoms() {\n//        System.out.println(\"getAtoms\");\n//        HetatomImpl instance = new HetatomImpl();\n//        List expResult = null;\n//        List result = instance.getAtoms();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setAtoms method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetAtoms() {\n//        System.out.println(\"setAtoms\");\n//        List<Atom> atoms = null;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setAtoms(atoms);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getAtom method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetAtom_String() throws Exception {\n//        System.out.println(\"getAtom\");\n//        String name = \"\";\n//        HetatomImpl instance = new HetatomImpl();\n//        Atom expResult = null;\n//        Atom result = instance.getAtom(name);\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getAtomByPDBname method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetAtomByPDBname() throws Exception {\n//        System.out.println(\"getAtomByPDBname\");\n//        String name = \"\";\n//        HetatomImpl instance = new HetatomImpl();\n//        Atom expResult = null;\n//        Atom result = instance.getAtomByPDBname(name);\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getAtom method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetAtom_int() throws Exception {\n//        System.out.println(\"getAtom\");\n//        int position = 0;\n//        HetatomImpl instance = new HetatomImpl();\n//        Atom expResult = null;\n//        Atom result = instance.getAtom(position);\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of hasAtom method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testHasAtom() {\n//        System.out.println(\"hasAtom\");\n//        String fullName = \"\";\n//        HetatomImpl instance = new HetatomImpl();\n//        boolean expResult = false;\n//        boolean result = instance.hasAtom(fullName);\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getType method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetType() {\n//        System.out.println(\"getType\");\n//        HetatomImpl instance = new HetatomImpl();\n//        String expResult = \"\";\n//        String result = instance.getType();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of toString method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testToString() {\n//        System.out.println(\"toString\");\n//        HetatomImpl instance = new HetatomImpl();\n//        String expResult = \"\";\n//        String result = instance.toString();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of hasAminoAtoms method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testHasAminoAtoms() {\n//        System.out.println(\"hasAminoAtoms\");\n//        HetatomImpl instance = new HetatomImpl();\n//        boolean expResult = false;\n//        boolean result = instance.hasAminoAtoms();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setProperties method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetProperties() {\n//        System.out.println(\"setProperties\");\n//        Map<String, Object> props = null;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setProperties(props);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getProperties method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetProperties() {\n//        System.out.println(\"getProperties\");\n//        HetatomImpl instance = new HetatomImpl();\n//        Map expResult = null;\n//        Map result = instance.getProperties();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setProperty method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetProperty() {\n//        System.out.println(\"setProperty\");\n//        String key = \"\";\n//        Object value = null;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setProperty(key, value);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getProperty method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetProperty() {\n//        System.out.println(\"getProperty\");\n//        String key = \"\";\n//        HetatomImpl instance = new HetatomImpl();\n//        Object expResult = null;\n//        Object result = instance.getProperty(key);\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of iterator method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testIterator() {\n//        System.out.println(\"iterator\");\n//        HetatomImpl instance = new HetatomImpl();\n//        Iterator expResult = null;\n//        Iterator result = instance.iterator();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of clone method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testClone() {\n//        System.out.println(\"clone\");\n//        HetatomImpl instance = new HetatomImpl();\n//        Object expResult = null;\n//        Object result = instance.clone();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setParent method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetParent() {\n//        System.out.println(\"setParent\");\n//        Chain parent = null;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setParent(parent);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getParent method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetParent() {\n//        System.out.println(\"getParent\");\n//        HetatomImpl instance = new HetatomImpl();\n//        Chain expResult = null;\n//        Chain result = instance.getParent();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getId method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetId() {\n//        System.out.println(\"getId\");\n//        HetatomImpl instance = new HetatomImpl();\n//        long expResult = 0L;\n//        long result = instance.getId();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setId method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetId() {\n//        System.out.println(\"setId\");\n//        long id = 0L;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setId(id);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getChemComp method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetChemComp() {\n//        System.out.println(\"getChemComp\");\n//        HetatomImpl instance = new HetatomImpl();\n//        ChemComp expResult = null;\n//        ChemComp result = instance.getChemComp();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setChemComp method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetChemComp() {\n//        System.out.println(\"setChemComp\");\n//        ChemComp cc = null;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setChemComp(cc);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n    /**\n     * Test of setChain method, of class HetatomImpl.\n     */\n    @Test\n    public void testSetGetChain() {\n//        System.out.println(\"setGetChain\");\n        Chain chain = new ChainImpl();\n        chain.setName(\"A\");\n        HetatomImpl instance = new HetatomImpl();\n        instance.setChain(chain);\n        Chain expResult = chain;\n        Chain result = instance.getChain();\n        assertEquals(expResult, result);\n    }\n\n    /**\n     * Test of getChainId method, of class HetatomImpl.\n     */\n    @Test\n    public void testGetChainId() {\n//        System.out.println(\"getChainId\");\n        Chain chain = new ChainImpl();\n        chain.setName(\"A\");\n        HetatomImpl instance = new HetatomImpl();\n        instance.setChain(chain);\n        String expResult = \"A\";\n        String result = instance.getChainId();\n        assertEquals(expResult, result);\n    }\n\n    /**\n     * Test of getSeqNum method, of class HetatomImpl.\n     */\n    @Test\n    public void testSetGetResidueNumber() {\n//        System.out.println(\"setGetResidueNumber\");\n        ResidueNumber residueNumber = new ResidueNumber(\"A\", 42, \" \");\n        HetatomImpl instance = new HetatomImpl();\n        instance.setResidueNumber(residueNumber);\n        ResidueNumber expResult = residueNumber;\n        ResidueNumber result = instance.getResidueNumber();\n        assertEquals(expResult, result);\n\n    }\n\n    @Test\n    public void testGetResidueNumberUsage() {\n//        System.out.println(\"testGetResidueNumberUsage\");\n        List<Group> resNumgroups = new ArrayList<Group>();\n\n        for (int i = 0; i < bigTestNumber; i++) {\n            ResidueNumber resNum = new ResidueNumber(\"A\", i, \" \");\n            HetatomImpl hetAtom = new HetatomImpl();\n            hetAtom.setResidueNumber(resNum);\n            resNumgroups.add(hetAtom);\n        }\n\n        List<Integer> integers = new ArrayList<Integer>();\n\n        for (Group group : resNumgroups) {\n            ResidueNumber resnum = group.getResidueNumber();\n            integers.add(resnum.getSeqNum());\n        }\n        assertEquals(bigTestNumber, integers.size());\n    }\n\n    @Test\n    public void testSetResidueNumberUsage() {\n        System.out.println(\"testSetResidueNumberUsage\");\n        List<Group> resNumgroups = new ArrayList<Group>();\n\n        for (int i = 0; i < bigTestNumber; i++) {\n            ResidueNumber resNum = new ResidueNumber(\"A\", i, \" \");\n            HetatomImpl hetAtom = new HetatomImpl();\n            hetAtom.setResidueNumber(resNum);\n            resNumgroups.add(hetAtom);\n        }\n        int groupsSize = resNumgroups.size();\n        assertEquals(bigTestNumber, groupsSize);\n    }\n    \n  \n}","changedTest":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\npackage org.biojava.bio.structure;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport junit.framework.TestCase;\n\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\n/**\n *\n * @author Jules Jacobsen <jacobsen@ebi.ac.uk>\n */\npublic class HetatomImplTest extends TestCase{\n\n    int bigTestNumber = 60000;\n\n    public HetatomImplTest() {\n\n    }\n\n    @BeforeClass\n    public static void setUpClass() throws Exception {\n    }\n\n    @AfterClass\n    public static void tearDownClass() throws Exception {\n    }\n\n    @Before\n    public void setUp() {\n    }\n\n    @After\n    public void tearDown() {\n    }\n\n//    /**\n//     * Test of has3D method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testHas3D() {\n//        System.out.println(\"has3D\");\n//        HetatomImpl instance = new HetatomImpl();\n//        boolean expResult = false;\n//        boolean result = instance.has3D();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setPDBFlag method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetPDBFlag() {\n//        System.out.println(\"setPDBFlag\");\n//        boolean flag = false;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setPDBFlag(flag);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getPDBCode method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetPDBCode() {\n//        System.out.println(\"getPDBCode\");\n//        HetatomImpl instance = new HetatomImpl();\n//        String expResult = \"\";\n//        String result = instance.getPDBCode();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setPDBCode method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetPDBCode() {\n//        System.out.println(\"setPDBCode\");\n//        String pdb = \"\";\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setPDBCode(pdb);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setPDBName method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetPDBName() throws Exception {\n//        System.out.println(\"setPDBName\");\n//        String s = \"\";\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setPDBName(s);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getPDBName method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetPDBName() {\n//        System.out.println(\"getPDBName\");\n//        HetatomImpl instance = new HetatomImpl();\n//        String expResult = \"\";\n//        String result = instance.getPDBName();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of addAtom method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testAddAtom() {\n//        System.out.println(\"addAtom\");\n//        Atom atom = null;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.addAtom(atom);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of clearAtoms method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testClearAtoms() {\n//        System.out.println(\"clearAtoms\");\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.clearAtoms();\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of size method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSize() {\n//        System.out.println(\"size\");\n//        HetatomImpl instance = new HetatomImpl();\n//        int expResult = 0;\n//        int result = instance.size();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getAtoms method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetAtoms() {\n//        System.out.println(\"getAtoms\");\n//        HetatomImpl instance = new HetatomImpl();\n//        List expResult = null;\n//        List result = instance.getAtoms();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setAtoms method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetAtoms() {\n//        System.out.println(\"setAtoms\");\n//        List<Atom> atoms = null;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setAtoms(atoms);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getAtom method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetAtom_String() throws Exception {\n//        System.out.println(\"getAtom\");\n//        String name = \"\";\n//        HetatomImpl instance = new HetatomImpl();\n//        Atom expResult = null;\n//        Atom result = instance.getAtom(name);\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getAtomByPDBname method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetAtomByPDBname() throws Exception {\n//        System.out.println(\"getAtomByPDBname\");\n//        String name = \"\";\n//        HetatomImpl instance = new HetatomImpl();\n//        Atom expResult = null;\n//        Atom result = instance.getAtomByPDBname(name);\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getAtom method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetAtom_int() throws Exception {\n//        System.out.println(\"getAtom\");\n//        int position = 0;\n//        HetatomImpl instance = new HetatomImpl();\n//        Atom expResult = null;\n//        Atom result = instance.getAtom(position);\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of hasAtom method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testHasAtom() {\n//        System.out.println(\"hasAtom\");\n//        String fullName = \"\";\n//        HetatomImpl instance = new HetatomImpl();\n//        boolean expResult = false;\n//        boolean result = instance.hasAtom(fullName);\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getType method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetType() {\n//        System.out.println(\"getType\");\n//        HetatomImpl instance = new HetatomImpl();\n//        String expResult = \"\";\n//        String result = instance.getType();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of toString method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testToString() {\n//        System.out.println(\"toString\");\n//        HetatomImpl instance = new HetatomImpl();\n//        String expResult = \"\";\n//        String result = instance.toString();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of hasAminoAtoms method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testHasAminoAtoms() {\n//        System.out.println(\"hasAminoAtoms\");\n//        HetatomImpl instance = new HetatomImpl();\n//        boolean expResult = false;\n//        boolean result = instance.hasAminoAtoms();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setProperties method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetProperties() {\n//        System.out.println(\"setProperties\");\n//        Map<String, Object> props = null;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setProperties(props);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getProperties method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetProperties() {\n//        System.out.println(\"getProperties\");\n//        HetatomImpl instance = new HetatomImpl();\n//        Map expResult = null;\n//        Map result = instance.getProperties();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setProperty method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetProperty() {\n//        System.out.println(\"setProperty\");\n//        String key = \"\";\n//        Object value = null;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setProperty(key, value);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getProperty method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetProperty() {\n//        System.out.println(\"getProperty\");\n//        String key = \"\";\n//        HetatomImpl instance = new HetatomImpl();\n//        Object expResult = null;\n//        Object result = instance.getProperty(key);\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of iterator method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testIterator() {\n//        System.out.println(\"iterator\");\n//        HetatomImpl instance = new HetatomImpl();\n//        Iterator expResult = null;\n//        Iterator result = instance.iterator();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of clone method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testClone() {\n//        System.out.println(\"clone\");\n//        HetatomImpl instance = new HetatomImpl();\n//        Object expResult = null;\n//        Object result = instance.clone();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setParent method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetParent() {\n//        System.out.println(\"setParent\");\n//        Chain parent = null;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setParent(parent);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getParent method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetParent() {\n//        System.out.println(\"getParent\");\n//        HetatomImpl instance = new HetatomImpl();\n//        Chain expResult = null;\n//        Chain result = instance.getParent();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getId method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetId() {\n//        System.out.println(\"getId\");\n//        HetatomImpl instance = new HetatomImpl();\n//        long expResult = 0L;\n//        long result = instance.getId();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setId method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetId() {\n//        System.out.println(\"setId\");\n//        long id = 0L;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setId(id);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of getChemComp method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testGetChemComp() {\n//        System.out.println(\"getChemComp\");\n//        HetatomImpl instance = new HetatomImpl();\n//        ChemComp expResult = null;\n//        ChemComp result = instance.getChemComp();\n//        assertEquals(expResult, result);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n//    /**\n//     * Test of setChemComp method, of class HetatomImpl.\n//     */\n//    @Test\n//    public void testSetChemComp() {\n//        System.out.println(\"setChemComp\");\n//        ChemComp cc = null;\n//        HetatomImpl instance = new HetatomImpl();\n//        instance.setChemComp(cc);\n//        // TODO review the generated test code and remove the default call to fail.\n//        fail(\"The test case is a prototype.\");\n//    }\n//\n    /**\n     * Test of setChain method, of class HetatomImpl.\n     */\n    @Test\n    public void testSetGetChain() {\n//        System.out.println(\"setGetChain\");\n        Chain chain = new ChainImpl();\n        chain.setName(\"A\");\n        HetatomImpl instance = new HetatomImpl();\n        instance.setChain(chain);\n        Chain expResult = chain;\n        Chain result = instance.getChain();\n        assertEquals(expResult, result);\n    }\n\n    /**\n     * Test of getChainId method, of class HetatomImpl.\n     */\n    @Test\n    public void testGetChainId() {\n//        System.out.println(\"getChainId\");\n        Chain chain = new ChainImpl();\n        chain.setName(\"A\");\n        HetatomImpl instance = new HetatomImpl();\n        instance.setChain(chain);\n        String expResult = \"A\";\n        String result = instance.getChainId();\n        assertEquals(expResult, result);\n    }\n\n    /**\n     * Test of getSeqNum method, of class HetatomImpl.\n     */\n    @Test\n    public void testSetGetResidueNumber() {\n//        System.out.println(\"setGetResidueNumber\");\n        ResidueNumber residueNumber = new ResidueNumber(\"A\", 42, ' ');\n        HetatomImpl instance = new HetatomImpl();\n        instance.setResidueNumber(residueNumber);\n        ResidueNumber expResult = residueNumber;\n        ResidueNumber result = instance.getResidueNumber();\n        assertEquals(expResult, result);\n\n    }\n\n    @Test\n    public void testGetResidueNumberUsage() {\n//        System.out.println(\"testGetResidueNumberUsage\");\n        List<Group> resNumgroups = new ArrayList<Group>();\n\n        for (int i = 0; i < bigTestNumber; i++) {\n            ResidueNumber resNum = new ResidueNumber(\"A\", i, ' ');\n            HetatomImpl hetAtom = new HetatomImpl();\n            hetAtom.setResidueNumber(resNum);\n            resNumgroups.add(hetAtom);\n        }\n\n        List<Integer> integers = new ArrayList<Integer>();\n\n        for (Group group : resNumgroups) {\n            ResidueNumber resnum = group.getResidueNumber();\n            integers.add(resnum.getSeqNum());\n        }\n        assertEquals(bigTestNumber, integers.size());\n    }\n\n    @Test\n    public void testSetResidueNumberUsage() {\n        System.out.println(\"testSetResidueNumberUsage\");\n        List<Group> resNumgroups = new ArrayList<Group>();\n\n        for (int i = 0; i < bigTestNumber; i++) {\n            ResidueNumber resNum = new ResidueNumber(\"A\", i, ' ');\n            HetatomImpl hetAtom = new HetatomImpl();\n            hetAtom.setResidueNumber(resNum);\n            resNumgroups.add(hetAtom);\n        }\n        int groupsSize = resNumgroups.size();\n        assertEquals(bigTestNumber, groupsSize);\n    }\n    \n  \n}","commitMessage":"major API update. Renaming getParent methods and better handling of residue numbers, insCodes and altLocs.\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8278 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"major API update. Renaming getParent methods and better handling of residue numbers, insCodes and altLocs.\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8278 7c6358e6-4a41-0410-a743-a5b2a554c398\n","allZero":false}