{"repository":"biojava","prod_path":"biojava3-sequencing/src/main/java/org/biojava3/sequencing/io/fastq/IlluminaFastqReader.java","test_path":"biojava3-sequencing/src/test/java/org/biojava3/sequencing/io/fastq/IlluminaFastqReaderTest.java","prod_time":"2013-04-25 23:49:57","test_time":"2013-04-25 23:49:57","type":"EDIT","proType":"EDIT","add_annotation_line":1,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"3686e7f1275e24cdac96f80a60204362ce401be2","test_commitID":"3686e7f1275e24cdac96f80a60204362ce401be2","isfound":"found test change","originPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava3.sequencing.io.fastq;\r\n\r\n/**\r\n * Reader for {@link FastqVariant#FASTQ_ILLUMINA} formatted sequences.\r\n *\r\n * @since 3.0.3\r\n */\r\npublic final class IlluminaFastqReader\r\n    extends AbstractFastqReader\r\n{\r\n\r\n    /** {@inheritDoc} */\r\n    protected FastqVariant getVariant()\r\n    {\r\n        return FastqVariant.FASTQ_ILLUMINA;\r\n    }\r\n}","changedPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava3.sequencing.io.fastq;\r\n\r\n/**\r\n * Reader for {@link FastqVariant#FASTQ_ILLUMINA} formatted sequences.\r\n *\r\n * @since 3.0.3\r\n */\r\npublic final class IlluminaFastqReader\r\n    extends AbstractFastqReader\r\n{\r\n\r\n    @Override\r\n    protected FastqVariant getVariant()\r\n    {\r\n        return FastqVariant.FASTQ_ILLUMINA;\r\n    }\r\n}","originTest":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava3.sequencing.io.fastq;\r\n\r\nimport java.io.InputStream;\r\nimport java.io.IOException;\r\n\r\nimport java.net.URL;\r\n\r\n/**\r\n * Unit test for IlluminaFastqReader.\r\n */\r\npublic final class IlluminaFastqReaderTest\r\n    extends AbstractFastqReaderTest\r\n{\r\n\r\n    /** {@inheritDoc} */\r\n    public Fastq createFastq()\r\n    {\r\n        return new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withSequence(\"sequence\")\r\n            .withQuality(\"quality_\")\r\n            .withVariant(FastqVariant.FASTQ_ILLUMINA)\r\n            .build();\r\n    }\r\n\r\n    /** {@inheritDoc} */\r\n    public FastqReader createFastqReader()\r\n    {\r\n        return new IlluminaFastqReader();\r\n    }\r\n\r\n    /** {@inheritDoc} */\r\n    public FastqWriter createFastqWriter()\r\n    {\r\n        return new IlluminaFastqWriter();\r\n    }\r\n\r\n    public void testValidateDescription() throws Exception\r\n    {\r\n        IlluminaFastqReader reader = new IlluminaFastqReader();\r\n        URL invalidDescription = getClass().getResource(\"illumina-invalid-description.fastq\");\r\n        try\r\n        {\r\n            reader.read(invalidDescription);\r\n            fail(\"read(invalidDescription) expected IOException\");\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            assertTrue(e.getMessage().contains(\"description must begin with a '@' character\"));\r\n        }\r\n    }\r\n\r\n    public void testValidateRepeatDescription() throws Exception\r\n    {\r\n        IlluminaFastqReader reader = new IlluminaFastqReader();\r\n        URL invalidRepeatDescription = getClass().getResource(\"illumina-invalid-repeat-description.fastq\");\r\n        try\r\n        {\r\n            reader.read(invalidRepeatDescription);\r\n            fail(\"read(invalidRepeatDescription) expected IOException\");\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            assertTrue(e.getMessage().contains(\"repeat description must match description\"));\r\n        }\r\n    }\r\n\r\n    public void testWrappingAsIllumina() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"wrapping_as_illumina.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(3, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testFullRangeAsIllumina() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"illumina_full_range_as_illumina.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(2, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testMiscDnaAsIllumina() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"misc_dna_as_illumina.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(4, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testMiscRnaAsIllumina() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"misc_rna_as_illumina.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(4, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testLongReadsAsIllumina() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"longreads_as_illumina.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(10, count);\r\n        inputStream.close();\r\n    }\r\n}","changedTest":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava3.sequencing.io.fastq;\r\n\r\nimport java.io.InputStream;\r\nimport java.io.IOException;\r\n\r\nimport java.net.URL;\r\n\r\n/**\r\n * Unit test for IlluminaFastqReader.\r\n */\r\npublic final class IlluminaFastqReaderTest\r\n    extends AbstractFastqReaderTest\r\n{\r\n\r\n    @Override\r\n    public Fastq createFastq()\r\n    {\r\n        return new FastqBuilder()\r\n            .withDescription(\"description\")\r\n            .withSequence(\"sequence\")\r\n            .withQuality(\"quality_\")\r\n            .withVariant(FastqVariant.FASTQ_ILLUMINA)\r\n            .build();\r\n    }\r\n\r\n    @Override\r\n    public FastqReader createFastqReader()\r\n    {\r\n        return new IlluminaFastqReader();\r\n    }\r\n\r\n    @Override\r\n    public FastqWriter createFastqWriter()\r\n    {\r\n        return new IlluminaFastqWriter();\r\n    }\r\n\r\n    public void testValidateDescription() throws Exception\r\n    {\r\n        IlluminaFastqReader reader = new IlluminaFastqReader();\r\n        URL invalidDescription = getClass().getResource(\"illumina-invalid-description.fastq\");\r\n        try\r\n        {\r\n            reader.read(invalidDescription);\r\n            fail(\"read(invalidDescription) expected IOException\");\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            assertTrue(e.getMessage().contains(\"description must begin with a '@' character\"));\r\n        }\r\n    }\r\n\r\n    public void testValidateRepeatDescription() throws Exception\r\n    {\r\n        IlluminaFastqReader reader = new IlluminaFastqReader();\r\n        URL invalidRepeatDescription = getClass().getResource(\"illumina-invalid-repeat-description.fastq\");\r\n        try\r\n        {\r\n            reader.read(invalidRepeatDescription);\r\n            fail(\"read(invalidRepeatDescription) expected IOException\");\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            assertTrue(e.getMessage().contains(\"repeat description must match description\"));\r\n        }\r\n    }\r\n\r\n    public void testWrappingAsIllumina() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"wrapping_as_illumina.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(3, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testFullRangeAsIllumina() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"illumina_full_range_as_illumina.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(2, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testMiscDnaAsIllumina() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"misc_dna_as_illumina.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(4, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testMiscRnaAsIllumina() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"misc_rna_as_illumina.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(4, count);\r\n        inputStream.close();\r\n    }\r\n\r\n    public void testLongReadsAsIllumina() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream inputStream = getClass().getResourceAsStream(\"longreads_as_illumina.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(inputStream);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(10, count);\r\n        inputStream.close();\r\n    }\r\n}","commitMessage":"use jdk 1.6 @Overrides instead of /** {@inheritDoc} */ doc tags\n","test_commitMessage":"use jdk 1.6 @Overrides instead of /** {@inheritDoc} */ doc tags\n","allZero":false}