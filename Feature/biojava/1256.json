{"repository":"biojava","prod_path":"biojava3-alignment/src/main/java/org/biojava3/alignment/SimpleGapPenalty.java","test_path":"biojava3-alignment/src/test/java/org/biojava3/alignment/SimpleGapPenaltyTest.java","prod_time":"2010-07-28 06:10:50","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"3032616b83b570842e21abefb670e8053b2d8db3","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 9, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport org.biojava3.alignment.template.GapPenalty;\n\n/**\n * Implements a data structure for the gap penalties used during a sequence alignment routine.\n *\n * @author Mark Chapman\n */\npublic class SimpleGapPenalty implements GapPenalty {\n\n    private static short dgop = 10, dgep = 1;\n\n    /**\n     * Sets the default gap extension penalty.\n     *\n     * @param gep the default gap extension penalty\n     */\n    public static void setDefaultExtensionPenalty(short gep) {\n        dgep = gep;\n    }\n\n    /**\n     * Sets the default gap open penalty.\n     *\n     * @param gop the default gap open penalty\n     */\n    public static void setDefaultOpenPenalty(short gop) {\n        dgop = gop;\n    }\n\n    private GapPenalty.Type type;\n    private short gop, gep;\n\n    /**\n     * Creates a new set of gap penalties using the defaults.\n     */\n    public SimpleGapPenalty() {\n        this(dgop, dgep);\n    }\n\n    /**\n     * Creates a new set of gap penalties.\n     *\n     * @param gop the gap open penalty\n     * @param gep the gap extension penalty\n     */\n    public SimpleGapPenalty(short gop, short gep) {\n        this.gop = (short) -Math.abs(gop);\n        this.gep = (short) -Math.abs(gep);\n        setType();\n    }\n\n    @Override\n    public short getExtensionPenalty() {\n        return gep;\n    }\n\n    @Override\n    public short getOpenPenalty() {\n        return gop;\n    }\n\n    @Override\n    public Type getType() {\n        return type;\n    }\n\n    @Override\n    public void setExtensionPenalty(short gep) {\n        this.gep = (short) -Math.abs(gep);\n        setType();\n    }\n\n    @Override\n    public void setOpenPenalty(short gop) {\n        this.gop = (short) -Math.abs(gop);\n        setType();\n    }\n\n    // helper method to set the type given the open and extension penalties\n    private void setType() {\n        type = (gep == 0) ? GapPenalty.Type.CONSTANT : ((gop == 0) ? GapPenalty.Type.LINEAR : GapPenalty.Type.AFFINE);\n    }\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 9, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport org.biojava3.alignment.template.GapPenalty;\n\n/**\n * Implements a data structure for the gap penalties used during a sequence alignment routine.\n *\n * @author Mark Chapman\n */\npublic class SimpleGapPenalty implements GapPenalty {\n\n    private static short dgop = 10, dgep = 1;\n\n    /**\n     * Sets the default gap extension penalty.\n     *\n     * @param gep the default gap extension penalty\n     */\n    public static void setDefaultExtensionPenalty(short gep) {\n        dgep = gep;\n    }\n\n    /**\n     * Sets the default gap open penalty.\n     *\n     * @param gop the default gap open penalty\n     */\n    public static void setDefaultOpenPenalty(short gop) {\n        dgop = gop;\n    }\n\n    private GapPenalty.Type type;\n    private short gop, gep;\n\n    /**\n     * Creates a new set of gap penalties using the defaults.\n     */\n    public SimpleGapPenalty() {\n        this(dgop, dgep);\n    }\n\n    /**\n     * Creates a new set of gap penalties.\n     *\n     * @param gop the gap open penalty\n     * @param gep the gap extension penalty\n     */\n    public SimpleGapPenalty(short gop, short gep) {\n        this.gop = (short) -Math.abs(gop);\n        this.gep = (short) -Math.abs(gep);\n        setType();\n    }\n\n    @Override\n    public short getExtensionPenalty() {\n        return gep;\n    }\n\n    @Override\n    public short getOpenPenalty() {\n        return gop;\n    }\n\n    @Override\n    public Type getType() {\n        return type;\n    }\n\n    @Override\n    public void setExtensionPenalty(short gep) {\n        this.gep = (short) -Math.abs(gep);\n        setType();\n    }\n\n    @Override\n    public void setOpenPenalty(short gop) {\n        this.gop = (short) -Math.abs(gop);\n        setType();\n    }\n\n    // helper method to set the type given the open and extension penalties\n    private void setType() {\n        type = (gop == 0) ? GapPenalty.Type.LINEAR : ((gep == 0) ? GapPenalty.Type.CONSTANT : GapPenalty.Type.AFFINE);\n    }\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 9, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava3.alignment;\n\nimport static org.junit.Assert.*;\n\nimport org.biojava3.alignment.template.GapPenalty;\nimport org.junit.Test;\n\npublic class SimpleGapPenaltyTest {\n\n    @Test\n    public void testSimpleGapPenalty() {\n        short gop = -12, gep = -3;\n        GapPenalty defaults = new SimpleGapPenalty();\n        SimpleGapPenalty.setDefaultOpenPenalty(gop);\n        SimpleGapPenalty.setDefaultExtensionPenalty(gep);\n        GapPenalty gaps = new SimpleGapPenalty();\n        assertEquals(gaps.getOpenPenalty(), gop);\n        assertEquals(gaps.getExtensionPenalty(), gep);\n        assertEquals(gaps.getType(), GapPenalty.Type.AFFINE);\n        SimpleGapPenalty.setDefaultOpenPenalty(defaults.getOpenPenalty());\n        SimpleGapPenalty.setDefaultExtensionPenalty(defaults.getExtensionPenalty());\n    }\n\n    @Test\n    public void testSimpleGapPenaltyShortShort() {\n        short gop = -10, gep = -4;\n        GapPenalty gaps = new SimpleGapPenalty(gop, gep);\n        assertEquals(gaps.getOpenPenalty(), gop);\n        assertEquals(gaps.getExtensionPenalty(), gep);\n        assertEquals(gaps.getType(), GapPenalty.Type.AFFINE);\n    }\n\n    @Test\n    public void testExtensionPenalty() {\n        GapPenalty gaps = new SimpleGapPenalty();\n        short gep = -14;\n        gaps.setExtensionPenalty(gep);\n        assertEquals(gaps.getExtensionPenalty(), gep);\n    }\n\n    @Test\n    public void testOpenPenalty() {\n        GapPenalty gaps = new SimpleGapPenalty();\n        short gop = -27;\n        gaps.setOpenPenalty(gop);\n        assertEquals(gaps.getOpenPenalty(), gop);\n    }\n\n    @Test\n    public void testType() {\n        assertEquals(new SimpleGapPenalty((short) 7, (short) 0).getType(), GapPenalty.Type.CONSTANT);\n        assertEquals(new SimpleGapPenalty((short) 0, (short) 5).getType(), GapPenalty.Type.LINEAR);\n        assertEquals(new SimpleGapPenalty((short) 8, (short) 3).getType(), GapPenalty.Type.AFFINE);\n    }\n\n}\n","changedTest":"","commitMessage":"improvements to memory usage during multiple sequence alignment\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@8153 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"","allZero":true}