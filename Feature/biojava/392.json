{"repository":"biojava","prod_path":"biojava-alignment/src/main/java/org/biojava/nbio/alignment/FractionalSimilarityScorer.java","test_path":"biojava-alignment/src/test/java/org/biojava/nbio/alignment/FractionalSimilarityScorerTest.java","prod_time":"2015-09-16 22:43:32","test_time":"2015-09-16 22:43:32","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":1,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"POSITIVE","prod_commitID":"5ad3cc9e93ee928561a4423a0ac9a3835370b1b7","test_commitID":"5ad3cc9e93ee928561a4423a0ac9a3835370b1b7","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 21, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.alignment.template.*;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\n/**\n * Implements an algorithm which computes a score for a sequence alignment pair.  The reported score is the number of\n * alignment columns which have similar {@link Compound}s.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} of the alignment pair is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class FractionalSimilarityScorer<S extends Sequence<C>, C extends Compound> extends AbstractScorer\n        implements PairwiseSequenceScorer<S, C> {\n\n    // always stored\n    private S query, target;\n    private int max, score;\n\n    // optional cached input field\n    private PairwiseSequenceAligner<S, C> aligner;\n\n    /**\n     * Creates a fractional similarity scorer for a pair of sequences aligned by the given pairwise sequence aligner.\n     *\n     * @param aligner a pairwise sequence aligner\n     */\n    public FractionalSimilarityScorer(PairwiseSequenceAligner<S, C> aligner) {\n        query = aligner.getQuery();\n        target = aligner.getTarget();\n        this.aligner = aligner;\n    }\n\n    /**\n     * Creates a fractional similarity scorer for an aligned pair of sequences.\n     *\n     * @param pair an aligned pair of sequences\n     */\n    public FractionalSimilarityScorer(SequencePair<S, C> pair) {\n        query = pair.getQuery().getOriginalSequence();\n        target = pair.getTarget().getOriginalSequence();\n        max = pair.getLength();\n        score = pair.getNumSimilars();\n    }\n\n    // methods for PairwiseSequenceScorer\n\n    @Override\n    public S getQuery() {\n        return query;\n    }\n\n    @Override\n    public S getTarget() {\n        return target;\n    }\n\n    // methods for Scorer\n\n    @Override\n    public double getMaxScore() {\n        if (aligner != null) {\n            align();\n        }\n        return max;\n    }\n\n    @Override\n    public double getMinScore() {\n        return 0;\n    }\n\n    @Override\n    public double getScore() {\n        if (aligner != null) {\n            align();\n        }\n        return score;\n    }\n\n    // helper method for initialization from an aligner\n    private void align() {\n        max = aligner.getPair().getLength();\n        score = aligner.getPair().getNumSimilars();\n        aligner = null;\n    }\n\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on June 21, 2010\n * Author: Mark Chapman\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.core.alignment.template.SequencePair;\nimport org.biojava.nbio.alignment.template.*;\nimport org.biojava.nbio.core.sequence.template.Compound;\nimport org.biojava.nbio.core.sequence.template.Sequence;\n\n/**\n * Implements an algorithm which computes a score for a sequence alignment pair.  The reported score is the number of\n * alignment columns which have similar {@link Compound}s.\n *\n * @author Mark Chapman\n * @param <S> each {@link Sequence} of the alignment pair is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n */\npublic class FractionalSimilarityScorer<S extends Sequence<C>, C extends Compound> extends AbstractScorer\n        implements PairwiseSequenceScorer<S, C> {\n\n    // always stored\n    private S query, target;\n    private int max, score;\n\n    // optional cached input field\n    private PairwiseSequenceAligner<S, C> aligner;\n\n    /**\n     * Creates a fractional similarity scorer for a pair of sequences aligned by the given pairwise sequence aligner.\n     *\n     * @param aligner a pairwise sequence aligner\n     */\n    public FractionalSimilarityScorer(PairwiseSequenceAligner<S, C> aligner) {\n        query = aligner.getQuery();\n        target = aligner.getTarget();\n        this.aligner = aligner;\n    }\n\n    /**\n     * Creates a fractional similarity scorer for an aligned pair of sequences.\n     *\n     * @param pair an aligned pair of sequences\n     */\n    public FractionalSimilarityScorer(SequencePair<S, C> pair) {\n        query = pair.getQuery().getOriginalSequence();\n        target = pair.getTarget().getOriginalSequence();\n        max = pair.getLength();\n        score = pair.getNumSimilars();\n    }\n\n    // methods for PairwiseSequenceScorer\n\n    @Override\n    public S getQuery() {\n        return query;\n    }\n\n    @Override\n    public S getTarget() {\n        return target;\n    }\n\n    // methods for Scorer\n\n    @Override\n    public double getMaxScore() {\n        if (aligner != null) {\n            align();\n        }\n        return max;\n    }\n\n    @Override\n    public double getMinScore() {\n        return 0;\n    }\n\n    @Override\n    public double getScore() {\n        if (aligner != null) {\n            align();\n        }\n        return score;\n    }\n\n    // helper method for initialization from an aligner\n    private void align() {\n        max = aligner.getPair().getLength();\n        score = aligner.getPair().getNumSimilars();\n        aligner = null;\n    }\n\n}\n","originTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Jun 30, 2010\n * Author: Mark \n *\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.alignment.template.GapPenalty;\nimport org.biojava.nbio.alignment.template.PairwiseSequenceScorer;\nimport org.biojava.nbio.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\npublic class FractionalSimilarityScorerTest {\n\n\tprivate static final double PRECISION = 0.00000001;\n\t\n    private ProteinSequence query, target;\n    private GapPenalty gaps;\n    private SubstitutionMatrix<AminoAcidCompound> blosum62;\n    private NeedlemanWunsch<ProteinSequence, AminoAcidCompound> alignment, self;\n    private PairwiseSequenceScorer<ProteinSequence, AminoAcidCompound> scorer1, scorer2;\n\n    @Before\n    public void setup() throws CompoundNotFoundException { \n        query = new ProteinSequence(\"ARXB\");\n        target = new ProteinSequence(\"RADG\");\n        gaps = new SimpleGapPenalty((short) 2, (short) 1);\n        blosum62 = SubstitutionMatrixHelper.getBlosum62();\n        alignment = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, target, gaps, blosum62);\n        self = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, query, gaps, blosum62);\n        scorer1 = new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(alignment);\n        scorer2 = new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(self);\n    }\n\n    @Test\n    public void testFractionalSimilarityScorerPairwiseSequenceAlignerOfSC() {\n        assertNotNull(new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(alignment));\n    }\n\n    @Test\n    public void testFractionalSimilarityScorerSequencePairOfSC() {\n        assertNotNull(new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(alignment.getPair()));\n    }\n\n    @Test\n    public void testGetQuery() {\n        assertEquals(scorer1.getQuery(), query);\n        assertEquals(scorer2.getQuery(), query);\n    }\n\n    @Test\n    public void testGetTarget() {\n        assertEquals(scorer1.getTarget(), target);\n        assertEquals(scorer2.getTarget(), query);\n    }\n\n    @Test\n    public void testGetMaxScore() {\n        assertEquals(scorer1.getMaxScore(), 5, PRECISION);\n        assertEquals(scorer2.getMaxScore(), 4, PRECISION);\n    }\n\n    @Test\n    public void testGetMinScore() {\n        assertEquals(scorer1.getMinScore(), 0, PRECISION);\n        assertEquals(scorer2.getMinScore(), 0, PRECISION);\n    }\n\n    @Test\n    public void testGetScore() {\n        assertEquals(scorer1.getScore(), 2, PRECISION);\n        assertEquals(scorer2.getScore(), 3, PRECISION);\n    }\n\n}\n","changedTest":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n * Created on Jun 30, 2010\n * Author: Mark \n *\n */\n\npackage org.biojava.nbio.alignment;\n\nimport org.biojava.nbio.core.alignment.matrices.SubstitutionMatrixHelper;\nimport org.biojava.nbio.alignment.template.GapPenalty;\nimport org.biojava.nbio.alignment.template.PairwiseSequenceScorer;\nimport org.biojava.nbio.core.alignment.template.SubstitutionMatrix;\nimport org.biojava.nbio.core.exceptions.CompoundNotFoundException;\nimport org.biojava.nbio.core.sequence.ProteinSequence;\nimport org.biojava.nbio.core.sequence.compound.AminoAcidCompound;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\npublic class FractionalSimilarityScorerTest {\n\n\tprivate static final double PRECISION = 0.00000001;\n\t\n    private ProteinSequence query, target;\n    private GapPenalty gaps;\n    private SubstitutionMatrix<AminoAcidCompound> blosum62;\n    private NeedlemanWunsch<ProteinSequence, AminoAcidCompound> alignment, self;\n    private PairwiseSequenceScorer<ProteinSequence, AminoAcidCompound> scorer1, scorer2;\n\n    @Before\n    public void setup() throws CompoundNotFoundException { \n        query = new ProteinSequence(\"ARXB\");\n        target = new ProteinSequence(\"RADG\");\n        gaps = new SimpleGapPenalty((short) 2, (short) 1);\n        blosum62 = SubstitutionMatrixHelper.getBlosum62();\n        alignment = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, target, gaps, blosum62);\n        self = new NeedlemanWunsch<ProteinSequence, AminoAcidCompound>(query, query, gaps, blosum62);\n        scorer1 = new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(alignment);\n        scorer2 = new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(self);\n    }\n\n    @Test\n    public void testFractionalSimilarityScorerPairwiseSequenceAlignerOfSC() {\n        assertNotNull(new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(alignment));\n    }\n\n    @Test\n    public void testFractionalSimilarityScorerSequencePairOfSC() {\n        assertNotNull(new FractionalSimilarityScorer<ProteinSequence, AminoAcidCompound>(alignment.getPair()));\n    }\n\n    @Test\n    public void testGetQuery() {\n        assertEquals(scorer1.getQuery(), query);\n        assertEquals(scorer2.getQuery(), query);\n    }\n\n    @Test\n    public void testGetTarget() {\n        assertEquals(scorer1.getTarget(), target);\n        assertEquals(scorer2.getTarget(), query);\n    }\n\n    @Test\n    public void testGetMaxScore() {\n        assertEquals(scorer1.getMaxScore(), 5, PRECISION);\n        assertEquals(scorer2.getMaxScore(), 4, PRECISION);\n    }\n\n    @Test\n    public void testGetMinScore() {\n        assertEquals(scorer1.getMinScore(), 0, PRECISION);\n        assertEquals(scorer2.getMinScore(), 0, PRECISION);\n    }\n\n    @Test\n    public void testGetScore() {\n        assertEquals(scorer1.getScore(), 2, PRECISION);\n        assertEquals(scorer2.getScore(), 3, PRECISION);\n    }\n\n}\n","commitMessage":"Massive refactoring: moved alignment data structures from biojava-alignment to biojava-core.\nMantaining main biological data structures in core will help to avoid problems of unwanted dependency. Unfortunately the substitution matrices related classes are tight coupled with SimpleSequencePair class and were moved too from alignment.\n\nUpdated pom file to remove dependency of core from alignment module temporary added by first implementation of SearchIO.\n","test_commitMessage":"Massive refactoring: moved alignment data structures from biojava-alignment to biojava-core.\nMantaining main biological data structures in core will help to avoid problems of unwanted dependency. Unfortunately the substitution matrices related classes are tight coupled with SimpleSequencePair class and were moved too from alignment.\n\nUpdated pom file to remove dependency of core from alignment module temporary added by first implementation of SearchIO.\n","allZero":false}