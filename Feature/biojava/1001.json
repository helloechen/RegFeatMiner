{"repository":"biojava","prod_path":"biojava-core/src/main/java/org/biojava/nbio/core/util/XMLHelper.java","test_path":"biojava-core/src/test/java/org/biojava/nbio/core/util/XMLHelperTest.java","prod_time":"2021-08-13 05:44:23","test_time":"2021-08-13 05:44:23","type":"EDIT","proType":"EDIT","add_annotation_line":0,"add_call_line":2,"add_classname_line":0,"add_condition_line":2,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":1,"add_return_line":1,"del_annotation_line":0,"del_call_line":4,"del_classname_line":0,"del_condition_line":1,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":2,"del_return_line":0,"label":"POSITIVE","prod_commitID":"3148a9e31b126caac0a82e3e3e06bd30fad46aa3","test_commitID":"3148a9e31b126caac0a82e3e3e06bd30fad46aa3","isfound":"found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.util;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport java.io.*;\nimport java.util.ArrayList;\n\nimport static org.biojava.nbio.core.sequence.io.util.IOUtils.close;\nimport static org.biojava.nbio.core.sequence.io.util.IOUtils.openFile;\n\n/**\n *\n * @author Scooter\n */\npublic class XMLHelper {\n\n\t/**\n\t * Creates a new elemend called {@code}elementName{@code} and adds it to {@code}parentElement{@code}\n\t * @param parentElement\n\t * @param elementName\n\t * @return the new child element\n\t */\n\tpublic static Element addChildElement(Element parentElement, String elementName) {\n\t\tElement childElement = parentElement.getOwnerDocument().createElement(elementName);\n\t\tparentElement.appendChild(childElement);\n\t\treturn childElement;\n\t}\n\n\t/**\n\t * Create a new, empty {@code}org.w3c.dom.Document{@code}\n\t * @return a new {@code}org.w3c.dom.Document{@code}\n\t * @throws ParserConfigurationException\n\t */\n\tpublic static Document getNewDocument() throws ParserConfigurationException  {\n\n\t\t//Create instance of DocumentBuilderFactory\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\t//Get the DocumentBuilder\n\t\tDocumentBuilder docBuilder = factory.newDocumentBuilder();\n\t\t//Create blank DOM Document\n\t\tDocument doc = docBuilder.newDocument();\n\t\treturn doc;\n\t}\n\n\tpublic static Document loadXML(String fileName) throws SAXException, IOException, ParserConfigurationException  {\n\t\tInputStream is = openFile(new File(fileName));\n\t\tDocument doc = inputStreamToDocument(new BufferedInputStream(is));\n\t\tclose(is);\n\t\treturn doc;\n\t}\n\n\t/**\n\t * Creates an {@code}org.w3c.dom.Document{@code} from the content of the {@code}inputStream{@code}\n\t * @param inputStream\n\t * @return a {@code}Document{@code}\n\t * @throws SAXException\n\t * @throws IOException\n\t * @throws ParserConfigurationException\n\t */\n\tpublic static Document inputStreamToDocument(InputStream inputStream) throws SAXException, IOException, ParserConfigurationException  {\n\t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n\t\tDocumentBuilder db = dbf.newDocumentBuilder();\n\n\t\tDocument doc = db.parse(inputStream);\n\t\tdoc.getDocumentElement().normalize();\n\n\t\treturn doc;\n\t}\n\n\tpublic static void outputToStream(Document document, OutputStream outputStream) throws TransformerException {\n\t\t// Use a Transformer for output\n\t\tTransformerFactory tFactory = TransformerFactory.newInstance();\n\t\tTransformer transformer = tFactory.newTransformer();\n\t\t//    transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\n\t\tDOMSource source = new DOMSource(document);\n\t\tStreamResult result = new StreamResult(outputStream);\n\t\ttransformer.transform(source, result);\n\n\n\t}\n\n\tpublic static void outputToStream(Element document, OutputStream outputStream) throws TransformerException  {\n\t\t// Use a Transformer for output\n\t\tTransformerFactory tFactory = TransformerFactory.newInstance();\n\t\tTransformer transformer = tFactory.newTransformer();\n\t\t//     transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\n\t\tDOMSource source = new DOMSource(document);\n\t\tStreamResult result = new StreamResult(outputStream);\n\t\ttransformer.transform(source, result);\n\n\t}\n\t//static XPath xpath = XPathFactory.newInstance().newXPath();\n\n\tpublic static Element selectParentElement(Element element, String parentName) {\n\t\tElement parentElement = (Element) element.getParentNode();\n\t\tif (parentElement == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (parentElement.getTagName().equals(parentName)) {\n\t\t\treturn parentElement;\n\t\t}\n\t\treturn selectParentElement(parentElement, parentName);\n\t}\n\n\tpublic static Element selectSingleElement(Element element, String xpathExpression) throws XPathExpressionException {\n\t\tif (xpathExpression.indexOf(\"/\") == -1) {\n\t\t\tNodeList nodeList = element.getChildNodes();\n\t\t\tfor (int i = 0; i < nodeList.getLength(); i++) {\n\t\t\t\tNode node = nodeList.item(i);\n\t\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE && node.getNodeName().equals(xpathExpression)) {\n\t\t\t\t\treturn (Element) node;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//  NodeList nodes = element.getElementsByTagName(xpathExpression);\n\t\t\t//  if (nodes.getLength() > 0) {\n\t\t\t//      return (Element) nodes.item(0);\n\t\t\t//  } else {\n\t\t\treturn null;\n\t\t\t//  }\n\t\t} else {\n\t\t\tXPath xpath = XPathFactory.newInstance().newXPath();\n\t\t\tElement node = (Element) xpath.evaluate(xpathExpression, element, XPathConstants.NODE);\n\t\t\treturn node;\n\t\t}\n\t}\n\n\tpublic static ArrayList<Element> selectElements(Element element, String xpathExpression) throws XPathExpressionException {\n\t\tArrayList<Element> resultVector = new ArrayList<Element>();\n\t\tif (element == null) {\n\t\t\treturn resultVector;\n\t\t}\n\t\tif (xpathExpression.indexOf(\"/\") == -1) {\n\t\t\tNodeList nodeList = element.getChildNodes();\n\t\t\tfor (int i = 0; i < nodeList.getLength(); i++) {\n\t\t\t\tNode node = nodeList.item(i);\n\t\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE && node.getNodeName().equals(xpathExpression)) {\n\t\t\t\t\tresultVector.add((Element) node);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tXPath xpath = XPathFactory.newInstance().newXPath();\n\t\t\tNodeList nodes = (NodeList) xpath.evaluate(xpathExpression, element, XPathConstants.NODESET);\n\n\n\t\t\tfor (int i = 0; i < nodes.getLength(); i++) {\n\t\t\t\tNode node = nodes.item(i);\n\t\t\t\tresultVector.add((Element) node);\n\t\t\t}\n\t\t}\n\t\treturn resultVector;\n\t}\n}\n","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.nbio.core.util;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport java.io.*;\nimport java.util.ArrayList;\n\nimport static org.biojava.nbio.core.sequence.io.util.IOUtils.close;\nimport static org.biojava.nbio.core.sequence.io.util.IOUtils.openFile;\n\n/**\n * Helper methods to simplify boilerplate XML parsing code for  {@code}org.w3c.dom{@code} XML objects\n * @author Scooter\n */\npublic class XMLHelper {\n\n\t/**\n\t * Creates a new elemend called {@code}elementName{@code} and adds it to {@code}parentElement{@code}\n\t * @param parentElement\n\t * @param elementName\n\t * @return the new child element\n\t */\n\tpublic static Element addChildElement(Element parentElement, String elementName) {\n\t\tElement childElement = parentElement.getOwnerDocument().createElement(elementName);\n\t\tparentElement.appendChild(childElement);\n\t\treturn childElement;\n\t}\n\n\t/**\n\t * Create a new, empty {@code}org.w3c.dom.Document{@code}\n\t * @return a new {@code}org.w3c.dom.Document{@code}\n\t * @throws ParserConfigurationException\n\t */\n\tpublic static Document getNewDocument() throws ParserConfigurationException  {\n\n\t\t//Create instance of DocumentBuilderFactory\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\t//Get the DocumentBuilder\n\t\tDocumentBuilder docBuilder = factory.newDocumentBuilder();\n\t\t//Create blank DOM Document\n\t\tDocument doc = docBuilder.newDocument();\n\t\treturn doc;\n\t}\n\n\t/**\n\t * Given a path to an XML file, parses into an {@code}org.w3c.dom.Document{@code} \n\t * @param fileName path to a readable XML file\n\t * @return\n\t * @throws SAXException\n\t * @throws IOException\n\t * @throws ParserConfigurationException\n\t */\n\tpublic static Document loadXML(String fileName) throws SAXException, IOException, ParserConfigurationException  {\n\t\tInputStream is = openFile(new File(fileName));\n\t\tDocument doc = inputStreamToDocument(new BufferedInputStream(is));\n\t\tclose(is);\n\t\treturn doc;\n\t}\n\n\t/**\n\t * Creates an {@code}org.w3c.dom.Document{@code} from the content of the {@code}inputStream{@code}\n\t * @param inputStream\n\t * @return a {@code}Document{@code}\n\t * @throws SAXException\n\t * @throws IOException\n\t * @throws ParserConfigurationException\n\t */\n\tpublic static Document inputStreamToDocument(InputStream inputStream) throws SAXException, IOException, ParserConfigurationException  {\n\t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n\t\tDocumentBuilder db = dbf.newDocumentBuilder();\n\n\t\tDocument doc = db.parse(inputStream);\n\t\tdoc.getDocumentElement().normalize();\n\n\t\treturn doc;\n\t}\n\n\t/**\n\t * Given an {@code}org.w3c.dom.Document{@code}, writes it to the given {@code}outputStream{@code}\n\t * @param document\n\t * @param outputStream\n\t * @throws TransformerException\n\t */\n\tpublic static void outputToStream(Document document, OutputStream outputStream) throws TransformerException {\n\t\t// Use a Transformer for output\n\t\tTransformerFactory tFactory = TransformerFactory.newInstance();\n\t\tTransformer transformer = tFactory.newTransformer();\n\t\t//    transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\n\t\tDOMSource source = new DOMSource(document);\n\t\tStreamResult result = new StreamResult(outputStream);\n\t\ttransformer.transform(source, result);\n\t}\n\n\t//static XPath xpath = XPathFactory.newInstance().newXPath();\n\n\t/**\n\t * Given an element, searches upwards through ancestor Elements till the first Element\n\t * matching the requests {@code}parentName{@code} is found.\n\t * @param element The starting element\n\t * @param parentName The tag name of the requested Element.\n\t * @return The found element, or {@code}null{@code} if no matching element is found,\n\t */\n\tpublic static Element selectParentElement(Element element, String parentName) {\n\t\t\n\t    Node parentNode =  element.getParentNode();\n\t\tif (parentNode == null) {\n\t\t\treturn null;\n\t\t}\n\t\t// chek that parent is actually an element, else return null\n\t\t// this is to prevent ClassCastExceptions if 'element's parent is not an Element.\n\t\tElement parentElement = null;\n\t\tif (Node.ELEMENT_NODE == parentNode.getNodeType()){\n\t\t\tparentElement = (Element)parentNode;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\tif (parentElement.getTagName().equals(parentName)) {\n\t\t\treturn parentElement;\n\t\t}\n\t\treturn selectParentElement(parentElement, parentName);\n\t}\n\n\tpublic static Element selectSingleElement(Element element, String xpathExpression) throws XPathExpressionException {\n\t\tif (xpathExpression.indexOf(\"/\") == -1) {\n\t\t\tNodeList nodeList = element.getChildNodes();\n\t\t\tfor (int i = 0; i < nodeList.getLength(); i++) {\n\t\t\t\tNode node = nodeList.item(i);\n\t\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE && node.getNodeName().equals(xpathExpression)) {\n\t\t\t\t\treturn (Element) node;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//  NodeList nodes = element.getElementsByTagName(xpathExpression);\n\t\t\t//  if (nodes.getLength() > 0) {\n\t\t\t//      return (Element) nodes.item(0);\n\t\t\t//  } else {\n\t\t\treturn null;\n\t\t\t//  }\n\t\t} else {\n\t\t\tXPath xpath = XPathFactory.newInstance().newXPath();\n\t\t\tElement node = (Element) xpath.evaluate(xpathExpression, element, XPathConstants.NODE);\n\t\t\treturn node;\n\t\t}\n\t}\n\n\tpublic static ArrayList<Element> selectElements(Element element, String xpathExpression) throws XPathExpressionException {\n\t\tArrayList<Element> resultVector = new ArrayList<Element>();\n\t\tif (element == null) {\n\t\t\treturn resultVector;\n\t\t}\n\t\tif (xpathExpression.indexOf(\"/\") == -1) {\n\t\t\tNodeList nodeList = element.getChildNodes();\n\t\t\tfor (int i = 0; i < nodeList.getLength(); i++) {\n\t\t\t\tNode node = nodeList.item(i);\n\t\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE && node.getNodeName().equals(xpathExpression)) {\n\t\t\t\t\tresultVector.add((Element) node);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tXPath xpath = XPathFactory.newInstance().newXPath();\n\t\t\tNodeList nodes = (NodeList) xpath.evaluate(xpathExpression, element, XPathConstants.NODESET);\n\n\n\t\t\tfor (int i = 0; i < nodes.getLength(); i++) {\n\t\t\t\tNode node = nodes.item(i);\n\t\t\t\tresultVector.add((Element) node);\n\t\t\t}\n\t\t}\n\t\treturn resultVector;\n\t}\n}\n","originTest":"package org.biojava.nbio.core.util;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\n\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.w3c.dom.DOMException;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.xml.sax.SAXException;\n\nclass XMLHelperTest {\n    \n    final String TEST_XML = \"<root><list><a id='1'/> <a id='2'/> </list></root>\";\n    \n     @Test\n    @DisplayName(\"Create empty w3dom Document\")\n    void getNewDocument() throws ParserConfigurationException{\n        Document d = XMLHelper.getNewDocument();\n        assertNotNull(d);\n        assertFalse(d.hasChildNodes());\n        assertNull(d.getInputEncoding());\n    }\n\n\n    @Test\n    @DisplayName(\"Create empty w3dom Document\")\n    void addChildDocument() throws ParserConfigurationException, DOMException{\n             \n        Document d = createDocumentWithRootElement();\n        Element root = (Element)d.getChildNodes().item(0);\n\n        Element added = XMLHelper.addChildElement(root, \"myelement\");\n        assertNotNull(added);\n        assertEquals(root, added.getParentNode());\n        assertEquals(added, root.getChildNodes().item(0));\n    }\n\n    @Test\n    void inputStreamToDocument() throws SAXException, IOException, ParserConfigurationException{\n        ByteArrayInputStream bArrayInputStream = new ByteArrayInputStream(TEST_XML.getBytes());\n        Document doc = XMLHelper.inputStreamToDocument(bArrayInputStream);\n        assertParsedDocument(doc);\n\n    }\n\n    @Test \n    void  fileToDocument () throws IOException, SAXException, ParserConfigurationException{\n        File tmpFile = File.createTempFile(\"xml\", \".xml\");\n        Files.write(Path.of(tmpFile.getAbsolutePath()), TEST_XML.getBytes());\n        Document doc = XMLHelper.loadXML(tmpFile.getAbsolutePath());\n        assertParsedDocument(doc);\n   \n    }\n    void assertParsedDocument (Document doc){\n        assertNotNull(doc);\n        assertEquals(2, doc.getElementsByTagName(\"a\").getLength());\n        assertEquals(1, doc.getElementsByTagName(\"list\").getLength());\n    }\n\n    Document createDocumentWithRootElement() throws ParserConfigurationException{\n        Document d = XMLHelper.getNewDocument();\n        Element root = d.createElement(\"root\");\n        d.appendChild(root);\n        return d;\n    }\n}","changedTest":"package org.biojava.nbio.core.util;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\n\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.TransformerException;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.w3c.dom.DOMException;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\nclass XMLHelperTest {\n    \n    final String TEST_XML = \"<root><list><a id=\\\"1\\\"/> <a id=\\\"2\\\"/> </list></root>\";\n    \n     @Test\n    @DisplayName(\"Create empty w3dom Document\")\n    void getNewDocument() throws ParserConfigurationException{\n        Document d = XMLHelper.getNewDocument();\n        assertNotNull(d);\n        assertFalse(d.hasChildNodes());\n        assertNull(d.getInputEncoding());\n    }\n\n\n    @Test\n    @DisplayName(\"Create empty w3dom Document\")\n    void addChildDocument() throws ParserConfigurationException, DOMException{\n             \n        Document d = createDocumentWithRootElement();\n        Element root = (Element)d.getChildNodes().item(0);\n\n        Element added = XMLHelper.addChildElement(root, \"myelement\");\n        assertNotNull(added);\n        assertEquals(root, added.getParentNode());\n        assertEquals(added, root.getChildNodes().item(0));\n    }\n\n    @Test\n    void inputStreamToDocument() throws SAXException, IOException, ParserConfigurationException{\n        Document doc = readTestDoc();\n        assertParsedDocument(doc);\n    }\n\n    Document readTestDoc() throws SAXException, IOException, ParserConfigurationException{\n        ByteArrayInputStream bArrayInputStream = new ByteArrayInputStream(TEST_XML.getBytes());\n        return XMLHelper.inputStreamToDocument(bArrayInputStream);\n    }\n\n    @Test \n    void  fileToDocument () throws IOException, SAXException, ParserConfigurationException{\n        File tmpFile = File.createTempFile(\"xml\", \".xml\");\n        Files.write(Path.of(tmpFile.getAbsolutePath()), TEST_XML.getBytes());\n        Document doc = XMLHelper.loadXML(tmpFile.getAbsolutePath());\n        assertParsedDocument(doc);\n    }\n\n    @Test\n    void documentToOutputStream() throws SAXException, IOException, ParserConfigurationException, TransformerException{\n        ByteArrayOutputStream baos = new ByteArrayOutputStream(100);\n        Document doc = readTestDoc();\n        XMLHelper.outputToStream(doc, baos);\n        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\" +\n             TEST_XML, new String(baos.toByteArray()));\n    }\n\n    @Test\n    void selectParentElement() throws SAXException, IOException, ParserConfigurationException{\n        Document doc = readTestDoc();\n        NodeList nodes = doc.getElementsByTagName(\"a\");\n        Element el = (Element)nodes.item(0);\n        Element root = XMLHelper.selectParentElement(el, \"root\");\n        assertNotNull(root);\n        assertNull(XMLHelper.selectParentElement(el, \"notexisting\"));\n        assertNull(XMLHelper.selectParentElement(root, \"notexisting\"));\n\n    }\n    void assertParsedDocument (Document doc){\n        assertNotNull(doc);\n        assertEquals(2, doc.getElementsByTagName(\"a\").getLength());\n        assertEquals(1, doc.getElementsByTagName(\"list\").getLength());\n    }\n\n    Document createDocumentWithRootElement() throws ParserConfigurationException{\n        Document d = XMLHelper.getNewDocument();\n        Element root = d.createElement(\"root\");\n        d.appendChild(root);\n        return d;\n    }\n}","commitMessage":"more XML helper tests; improve resilience of selectParentElement\n","test_commitMessage":"more XML helper tests; improve resilience of selectParentElement\n","allZero":false}