{"repository":"biojava","prod_path":"sequencing/src/main/java/org/biojava/bio/program/fastq/FastqVariant.java","test_path":"sequencing/src/test/java/org/biojava/bio/program/fastq/FastqVariantTest.java","prod_time":"2010-01-18 15:23:26","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"9b907127c257838b27342a1f528bacb7012f996a","test_commitID":"","isfound":"not found test change","originPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.bio.program.fastq;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * FASTQ sequence format variant.\n */\npublic enum FastqVariant\n{\n    /** Sanger FASTQ sequence format variant. */\n    FASTQ_SANGER(\"Original or Sanger format\"),\n\n    /** Solexa FASTQ sequence format variant. */\n    FASTQ_SOLEXA(\"Solexa and early Illumina format\"),\n\n    /** Illumina FASTQ sequence format variant. */\n    FASTQ_ILLUMINA(\"Illumina 1.3+ format\");\n\n\n    /** Map of FASTQ sequence format variants keyed by name and lowercase-with-dashes name. */\n    private static final Map<String, FastqVariant> FASTQ_VARIANTS = new HashMap<String, FastqVariant>(6);\n\n    static\n    {\n        for (FastqVariant fastqVariant : values())\n        {\n            FASTQ_VARIANTS.put(fastqVariant.name(), fastqVariant);\n            FASTQ_VARIANTS.put(fastqVariant.lowercaseName(), fastqVariant);\n        }\n    }\n\n    /** Description of this FASTQ sequence format variant. */\n    private final String description;\n\n\n    /**\n     * Create a new FASTQ sequence format variant with the specified description.\n     *\n     * @param description description of this FASTQ sequence format variant, must not be null\n     */\n    private FastqVariant(final String description)\n    {\n        if (description == null)\n        {\n            throw new IllegalArgumentException(\"description must not be null\");\n        }\n        this.description = description;\n    }\n\n\n    /**\n     * Return the description of this FASTQ sequence format variant.\n     * The description will not be null.\n     *\n     * @return the description of this FASTQ sequence format variant\n     */\n    public String getDescription()\n    {\n        return description;\n    }\n\n    /**\n     * Return true if this FASTQ sequence format variant is {@link #FASTQ_SANGER}.\n     *\n     * @return true if this FASTQ sequence format variant is {@link #FASTQ_SANGER}\n     */\n    public boolean isSanger()\n    {\n        return (this == FASTQ_SANGER);\n    }\n\n    /**\n     * Return true if this FASTQ sequence format variant is {@link #FASTQ_SOLEXA}.\n     *\n     * @return true if this FASTQ sequence format variant is {@link #FASTQ_SOLEXA}\n     */\n    public boolean isSolexa()\n    {\n        return (this == FASTQ_SOLEXA);\n    }\n\n    /**\n     * Return true if this FASTQ sequence format variant is {@link #FASTQ_ILLUMINA}.\n     *\n     * @return true if this FASTQ sequence format variant is {@link #FASTQ_ILLUMINA}\n     */\n    public boolean isIllumina()\n    {\n        return (this == FASTQ_ILLUMINA);\n    }\n\n    /**\n     * Return the name of this FASTQ sequence format variant in <code>lowercase-with-dashes</code> style.\n     *\n     * @return the name of this FASTQ sequence format variant in <code>lowercase-with-dashes</code> style\n     */\n    public String lowercaseName()\n    {\n        return name().toLowerCase().replace('_', '-');\n    }\n\n\n    /**\n     * Return the FASTQ sequence format variant with the specified name, if any.  The name may\n     * be specified in either <code>UPPERCASE_WITH_UNDERSCORES</code>\n     * or <code>lowercase-with-dashes</code> style.\n     *\n     * @param name name\n     * @return the FASTQ sequence format variant with the specified name, or <code>null</code>\n     *    if no such FASTQ sequence format variant exists\n     */\n    public static FastqVariant parseFastqVariant(final String name)\n    {\n        return FASTQ_VARIANTS.get(name);\n    }\n}","changedPro":"/*\n *                    BioJava development code\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  If you do not have a copy,\n * see:\n *\n *      http://www.gnu.org/copyleft/lesser.html\n *\n * Copyright for this code is held jointly by the individual\n * authors.  These should be listed in @author doc comments.\n *\n * For more information on the BioJava project and its aims,\n * or to join the biojava-l mailing list, visit the home page\n * at:\n *\n *      http://www.biojava.org/\n *\n */\npackage org.biojava.bio.program.fastq;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * FASTQ sequence format variant.\n *\n * @since 1.7.1\n */\npublic enum FastqVariant\n{\n    /** Sanger FASTQ sequence format variant. */\n    FASTQ_SANGER(\"Original or Sanger format\"),\n\n    /** Solexa FASTQ sequence format variant. */\n    FASTQ_SOLEXA(\"Solexa and early Illumina format\"),\n\n    /** Illumina FASTQ sequence format variant. */\n    FASTQ_ILLUMINA(\"Illumina 1.3+ format\");\n\n\n    /** Map of FASTQ sequence format variants keyed by name and lowercase-with-dashes name. */\n    private static final Map<String, FastqVariant> FASTQ_VARIANTS = new HashMap<String, FastqVariant>(6);\n\n    static\n    {\n        for (FastqVariant fastqVariant : values())\n        {\n            FASTQ_VARIANTS.put(fastqVariant.name(), fastqVariant);\n            FASTQ_VARIANTS.put(fastqVariant.lowercaseName(), fastqVariant);\n        }\n    }\n\n    /** Description of this FASTQ sequence format variant. */\n    private final String description;\n\n\n    /**\n     * Create a new FASTQ sequence format variant with the specified description.\n     *\n     * @param description description of this FASTQ sequence format variant, must not be null\n     */\n    private FastqVariant(final String description)\n    {\n        if (description == null)\n        {\n            throw new IllegalArgumentException(\"description must not be null\");\n        }\n        this.description = description;\n    }\n\n\n    /**\n     * Return the description of this FASTQ sequence format variant.\n     * The description will not be null.\n     *\n     * @return the description of this FASTQ sequence format variant\n     */\n    public String getDescription()\n    {\n        return description;\n    }\n\n    /**\n     * Return true if this FASTQ sequence format variant is {@link #FASTQ_SANGER}.\n     *\n     * @return true if this FASTQ sequence format variant is {@link #FASTQ_SANGER}\n     */\n    public boolean isSanger()\n    {\n        return (this == FASTQ_SANGER);\n    }\n\n    /**\n     * Return true if this FASTQ sequence format variant is {@link #FASTQ_SOLEXA}.\n     *\n     * @return true if this FASTQ sequence format variant is {@link #FASTQ_SOLEXA}\n     */\n    public boolean isSolexa()\n    {\n        return (this == FASTQ_SOLEXA);\n    }\n\n    /**\n     * Return true if this FASTQ sequence format variant is {@link #FASTQ_ILLUMINA}.\n     *\n     * @return true if this FASTQ sequence format variant is {@link #FASTQ_ILLUMINA}\n     */\n    public boolean isIllumina()\n    {\n        return (this == FASTQ_ILLUMINA);\n    }\n\n    /**\n     * Return the name of this FASTQ sequence format variant in <code>lowercase-with-dashes</code> style.\n     *\n     * @return the name of this FASTQ sequence format variant in <code>lowercase-with-dashes</code> style\n     */\n    public String lowercaseName()\n    {\n        return name().toLowerCase().replace('_', '-');\n    }\n\n\n    /**\n     * Return the FASTQ sequence format variant with the specified name, if any.  The name may\n     * be specified in either <code>UPPERCASE_WITH_UNDERSCORES</code>\n     * or <code>lowercase-with-dashes</code> style.\n     *\n     * @param name name\n     * @return the FASTQ sequence format variant with the specified name, or <code>null</code>\n     *    if no such FASTQ sequence format variant exists\n     */\n    public static FastqVariant parseFastqVariant(final String name)\n    {\n        return FASTQ_VARIANTS.get(name);\n    }\n}","originTest":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava.bio.program.fastq;\r\n\r\nimport junit.framework.TestCase;\r\n\r\nimport static org.biojava.bio.program.fastq.FastqVariant.*;\r\n\r\n/**\r\n * Unit test for FastqVariant.\r\n */\r\npublic final class FastqVariantTest\r\n    extends TestCase\r\n{\r\n\r\n    public void testDescription()\r\n    {\r\n        for (FastqVariant variant : values())\r\n        {\r\n            assertNotNull(variant.getDescription());\r\n        }\r\n    }\r\n\r\n    public void testIsSanger()\r\n    {\r\n        assertTrue(FASTQ_SANGER.isSanger());\r\n        assertFalse(FASTQ_SOLEXA.isSanger());\r\n        assertFalse(FASTQ_ILLUMINA.isSanger());\r\n    }\r\n\r\n    public void testIsSolexa()\r\n    {\r\n        assertFalse(FASTQ_SANGER.isSolexa());\r\n        assertTrue(FASTQ_SOLEXA.isSolexa());\r\n        assertFalse(FASTQ_ILLUMINA.isSolexa());\r\n    }\r\n\r\n    public void testIsIllumina()\r\n    {\r\n        assertFalse(FASTQ_SANGER.isIllumina());\r\n        assertFalse(FASTQ_SOLEXA.isIllumina());\r\n        assertTrue(FASTQ_ILLUMINA.isIllumina());\r\n    }\r\n\r\n    public void testParseFastqVariant()\r\n    {\r\n        assertEquals(null, parseFastqVariant(null));\r\n        assertEquals(null, parseFastqVariant(\"\"));\r\n        assertEquals(null, parseFastqVariant(\"not a valid FASTQ variant\"));\r\n        assertEquals(FASTQ_SANGER, parseFastqVariant(\"FASTQ_SANGER\"));\r\n        assertEquals(FASTQ_SANGER, parseFastqVariant(\"fastq-sanger\"));\r\n    }\r\n}","changedTest":"","commitMessage":"adding @since 1.7.1 javadoc tags\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@7297 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"","allZero":true}