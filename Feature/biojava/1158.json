{"repository":"biojava","prod_path":"sequencing/src/main/java/org/biojava/bio/program/fastq/AbstractFastqReader.java","test_path":"sequencing/src/test/java/org/biojava/bio/program/fastq/AbstractFastqReaderTest.java","prod_time":"2010-01-18 15:23:26","test_time":"","type":"","proType":"EDIT","add_annotation_line":0,"add_call_line":0,"add_classname_line":0,"add_condition_line":0,"add_field_line":0,"add_import_line":0,"add_packageid_line":0,"add_parameter_line":0,"add_return_line":0,"del_annotation_line":0,"del_call_line":0,"del_classname_line":0,"del_condition_line":0,"del_field_line":0,"del_import_line":0,"del_packageid_line":0,"del_parameter_line":0,"del_return_line":0,"label":"NEGATIVE","prod_commitID":"9b907127c257838b27342a1f528bacb7012f996a","test_commitID":"","isfound":"not found test change","originPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava.bio.program.fastq;\r\n\r\nimport java.net.URL;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.IOException;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * Abstract reader implementation for FASTQ formatted sequences.\r\n */\r\nabstract class AbstractFastqReader\r\n    implements FastqReader\r\n{\r\n\r\n    /** Parser state. */\r\n    private static enum State\r\n    {\r\n        /** Description parser state. */\r\n        DESCRIPTION,\r\n\r\n        /** Sequence parser state. */\r\n        SEQUENCE,\r\n\r\n        /** Repeat description parser state. */\r\n        REPEAT_DESCRIPTION,\r\n\r\n        /** Quality score parser state. */\r\n        QUALITY,\r\n\r\n        /** Complete parser state. */\r\n        COMPLETE;\r\n    };\r\n\r\n    /**\r\n     * Return the FASTQ sequence format variant for this reader.\r\n     *\r\n     * @return the FASTQ sequence format variant for this reader\r\n     */\r\n    protected abstract FastqVariant getVariant();\r\n\r\n    /**\r\n     * Validate the specified description.\r\n     *\r\n     * @param builder FASTQ formatted sequence builder, will not be null\r\n     * @param description description to validate, will not be null\r\n     * @param lineNumber current line number in input stream\r\n     * @throws IOException if the specified description is not valid\r\n     */\r\n    protected abstract void validateDescription(FastqBuilder builder, String description, int lineNumber)\r\n        throws IOException;\r\n\r\n    /**\r\n     * Validate the specified sequence.\r\n     *\r\n     * @param builder FASTQ formatted sequence builder, will not be null\r\n     * @param sequence sequence to validate, will not be null\r\n     * @param lineNumber current line number in input stream\r\n     * @throws IOException if the specified sequence is not valid\r\n     */\r\n    protected abstract void validateSequence(FastqBuilder builder, String sequence, int lineNumber)\r\n        throws IOException;\r\n\r\n    /**\r\n     * Validate the specified repeat description.\r\n     *\r\n     * @param builder FASTQ formatted sequence builder, will not be null\r\n     * @param repeatDescription repeat description to validate, will not be null\r\n     * @param lineNumber current line number in input stream\r\n     * @throws IOException if the specified repeat description is not valid\r\n     */\r\n    protected abstract void validateRepeatDescription(FastqBuilder builder, String repeatDescription, int lineNumber)\r\n        throws IOException;\r\n\r\n    /**\r\n     * Validate the specified quality scores.\r\n     *\r\n     * @param builder FASTQ formatted sequence builder, will not be null\r\n     * @param quality quality scores to validate, will not be null\r\n     * @param lineNumber current line number in input stream\r\n     * @throws IOException if the specified quality scores are not valid\r\n     */\r\n    protected abstract void validateQuality(FastqBuilder builder, String quality, int lineNumber)\r\n        throws IOException;\r\n\r\n\r\n    /** {@inheritDoc} */\r\n    public final Iterable<Fastq> read(final File file) throws IOException\r\n    {\r\n        if (file == null)\r\n        {\r\n            throw new IllegalArgumentException(\"file must not be null\");\r\n        }\r\n        InputStream inputStream = null;\r\n        try\r\n        {\r\n            inputStream = new FileInputStream(file);\r\n            return read(inputStream);\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            throw e;\r\n        }\r\n        finally\r\n        {\r\n            if (inputStream != null)\r\n            {\r\n                try\r\n                {\r\n                    inputStream.close();\r\n                }\r\n                catch (IOException e)\r\n                {\r\n                    // ignore\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** {@inheritDoc} */\r\n    public final Iterable<Fastq> read(final URL url) throws IOException\r\n    {\r\n        if (url == null)\r\n        {\r\n            throw new IllegalArgumentException(\"url must not be null\");\r\n        }\r\n        InputStream inputStream = null;\r\n        try\r\n        {\r\n            inputStream = url.openStream();\r\n            return read(inputStream);\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            throw e;\r\n        }\r\n        finally\r\n        {\r\n            if (inputStream != null)\r\n            {\r\n                try\r\n                {\r\n                    inputStream.close();\r\n                }\r\n                catch (IOException e)\r\n                {\r\n                    // ignore\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** {@inheritDoc} */\r\n    public final Iterable<Fastq> read(final InputStream inputStream) throws IOException\r\n    {\r\n        if (inputStream == null)\r\n        {\r\n            throw new IllegalArgumentException (\"inputStream must not be null\");\r\n        }\r\n        int lineNumber = 0;\r\n        State state = State.DESCRIPTION;\r\n        List<Fastq> result = new ArrayList<Fastq>();\r\n        FastqBuilder builder = new FastqBuilder().withVariant(getVariant());\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\r\n        while (reader.ready())\r\n        {\r\n            String line = reader.readLine();\r\n            switch (state)\r\n            {\r\n            case DESCRIPTION:\r\n                validateDescription(builder, line, lineNumber);\r\n                builder.withDescription(line.substring(1).trim());\r\n                state = State.SEQUENCE;\r\n                break;\r\n            case SEQUENCE:\r\n                validateSequence(builder, line, lineNumber);\r\n                builder.withSequence(line.trim());\r\n                state = State.REPEAT_DESCRIPTION;\r\n                break;\r\n            case REPEAT_DESCRIPTION:\r\n                if (!line.startsWith(\"+\"))\r\n                {\r\n                    builder.appendSequence(line.trim());\r\n                }\r\n                else\r\n                {\r\n                    validateRepeatDescription(builder, line, lineNumber);\r\n                    state = State.QUALITY;\r\n                }\r\n                break;\r\n            case QUALITY:\r\n                validateQuality(builder, line, lineNumber);\r\n                builder.withQuality(line.trim());\r\n                state = State.COMPLETE;\r\n                break;\r\n            case COMPLETE:\r\n                if (!builder.sequenceAndQualityLengthsMatch())\r\n                {\r\n                    builder.appendQuality(line.trim());\r\n                }\r\n                else\r\n                {\r\n                    try\r\n                    {\r\n                        result.add(builder.build());\r\n                    }\r\n                    catch (IllegalStateException e)\r\n                    {\r\n                        throw new IOException(\"caught an IllegalStateException at line \" + lineNumber, e);\r\n                    }\r\n                    validateDescription(builder, line, lineNumber);\r\n                    builder.withDescription(line.substring(1).trim());\r\n                    state = State.SEQUENCE;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n            }\r\n            lineNumber++;\r\n        }\r\n        if (state == State.COMPLETE)\r\n        {\r\n            try\r\n            {\r\n                result.add(builder.build());\r\n                state = State.DESCRIPTION;\r\n            }\r\n            catch (IllegalStateException e)\r\n            {\r\n                throw new IOException(\"caught an IllegalStateException at line \" + lineNumber, e);\r\n            }\r\n        }\r\n        if (state != State.DESCRIPTION)\r\n        {\r\n            throw new IOException(\"truncated sequence at line \" + lineNumber);\r\n        }\r\n        return result;\r\n    }\r\n}","changedPro":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava.bio.program.fastq;\r\n\r\nimport java.net.URL;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.IOException;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * Abstract reader implementation for FASTQ formatted sequences.\r\n *\r\n * @since 1.7.1\r\n */\r\nabstract class AbstractFastqReader\r\n    implements FastqReader\r\n{\r\n\r\n    /** Parser state. */\r\n    private static enum State\r\n    {\r\n        /** Description parser state. */\r\n        DESCRIPTION,\r\n\r\n        /** Sequence parser state. */\r\n        SEQUENCE,\r\n\r\n        /** Repeat description parser state. */\r\n        REPEAT_DESCRIPTION,\r\n\r\n        /** Quality score parser state. */\r\n        QUALITY,\r\n\r\n        /** Complete parser state. */\r\n        COMPLETE;\r\n    };\r\n\r\n    /**\r\n     * Return the FASTQ sequence format variant for this reader.\r\n     *\r\n     * @return the FASTQ sequence format variant for this reader\r\n     */\r\n    protected abstract FastqVariant getVariant();\r\n\r\n    /**\r\n     * Validate the specified description.\r\n     *\r\n     * @param builder FASTQ formatted sequence builder, will not be null\r\n     * @param description description to validate, will not be null\r\n     * @param lineNumber current line number in input stream\r\n     * @throws IOException if the specified description is not valid\r\n     */\r\n    protected abstract void validateDescription(FastqBuilder builder, String description, int lineNumber)\r\n        throws IOException;\r\n\r\n    /**\r\n     * Validate the specified sequence.\r\n     *\r\n     * @param builder FASTQ formatted sequence builder, will not be null\r\n     * @param sequence sequence to validate, will not be null\r\n     * @param lineNumber current line number in input stream\r\n     * @throws IOException if the specified sequence is not valid\r\n     */\r\n    protected abstract void validateSequence(FastqBuilder builder, String sequence, int lineNumber)\r\n        throws IOException;\r\n\r\n    /**\r\n     * Validate the specified repeat description.\r\n     *\r\n     * @param builder FASTQ formatted sequence builder, will not be null\r\n     * @param repeatDescription repeat description to validate, will not be null\r\n     * @param lineNumber current line number in input stream\r\n     * @throws IOException if the specified repeat description is not valid\r\n     */\r\n    protected abstract void validateRepeatDescription(FastqBuilder builder, String repeatDescription, int lineNumber)\r\n        throws IOException;\r\n\r\n    /**\r\n     * Validate the specified quality scores.\r\n     *\r\n     * @param builder FASTQ formatted sequence builder, will not be null\r\n     * @param quality quality scores to validate, will not be null\r\n     * @param lineNumber current line number in input stream\r\n     * @throws IOException if the specified quality scores are not valid\r\n     */\r\n    protected abstract void validateQuality(FastqBuilder builder, String quality, int lineNumber)\r\n        throws IOException;\r\n\r\n\r\n    /** {@inheritDoc} */\r\n    public final Iterable<Fastq> read(final File file) throws IOException\r\n    {\r\n        if (file == null)\r\n        {\r\n            throw new IllegalArgumentException(\"file must not be null\");\r\n        }\r\n        InputStream inputStream = null;\r\n        try\r\n        {\r\n            inputStream = new FileInputStream(file);\r\n            return read(inputStream);\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            throw e;\r\n        }\r\n        finally\r\n        {\r\n            if (inputStream != null)\r\n            {\r\n                try\r\n                {\r\n                    inputStream.close();\r\n                }\r\n                catch (IOException e)\r\n                {\r\n                    // ignore\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** {@inheritDoc} */\r\n    public final Iterable<Fastq> read(final URL url) throws IOException\r\n    {\r\n        if (url == null)\r\n        {\r\n            throw new IllegalArgumentException(\"url must not be null\");\r\n        }\r\n        InputStream inputStream = null;\r\n        try\r\n        {\r\n            inputStream = url.openStream();\r\n            return read(inputStream);\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            throw e;\r\n        }\r\n        finally\r\n        {\r\n            if (inputStream != null)\r\n            {\r\n                try\r\n                {\r\n                    inputStream.close();\r\n                }\r\n                catch (IOException e)\r\n                {\r\n                    // ignore\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** {@inheritDoc} */\r\n    public final Iterable<Fastq> read(final InputStream inputStream) throws IOException\r\n    {\r\n        if (inputStream == null)\r\n        {\r\n            throw new IllegalArgumentException (\"inputStream must not be null\");\r\n        }\r\n        int lineNumber = 0;\r\n        State state = State.DESCRIPTION;\r\n        List<Fastq> result = new ArrayList<Fastq>();\r\n        FastqBuilder builder = new FastqBuilder().withVariant(getVariant());\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\r\n        while (reader.ready())\r\n        {\r\n            String line = reader.readLine();\r\n            switch (state)\r\n            {\r\n            case DESCRIPTION:\r\n                validateDescription(builder, line, lineNumber);\r\n                builder.withDescription(line.substring(1).trim());\r\n                state = State.SEQUENCE;\r\n                break;\r\n            case SEQUENCE:\r\n                validateSequence(builder, line, lineNumber);\r\n                builder.withSequence(line.trim());\r\n                state = State.REPEAT_DESCRIPTION;\r\n                break;\r\n            case REPEAT_DESCRIPTION:\r\n                if (!line.startsWith(\"+\"))\r\n                {\r\n                    builder.appendSequence(line.trim());\r\n                }\r\n                else\r\n                {\r\n                    validateRepeatDescription(builder, line, lineNumber);\r\n                    state = State.QUALITY;\r\n                }\r\n                break;\r\n            case QUALITY:\r\n                validateQuality(builder, line, lineNumber);\r\n                builder.withQuality(line.trim());\r\n                state = State.COMPLETE;\r\n                break;\r\n            case COMPLETE:\r\n                if (!builder.sequenceAndQualityLengthsMatch())\r\n                {\r\n                    builder.appendQuality(line.trim());\r\n                }\r\n                else\r\n                {\r\n                    try\r\n                    {\r\n                        result.add(builder.build());\r\n                    }\r\n                    catch (IllegalStateException e)\r\n                    {\r\n                        throw new IOException(\"caught an IllegalStateException at line \" + lineNumber, e);\r\n                    }\r\n                    validateDescription(builder, line, lineNumber);\r\n                    builder.withDescription(line.substring(1).trim());\r\n                    state = State.SEQUENCE;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n            }\r\n            lineNumber++;\r\n        }\r\n        if (state == State.COMPLETE)\r\n        {\r\n            try\r\n            {\r\n                result.add(builder.build());\r\n                state = State.DESCRIPTION;\r\n            }\r\n            catch (IllegalStateException e)\r\n            {\r\n                throw new IOException(\"caught an IllegalStateException at line \" + lineNumber, e);\r\n            }\r\n        }\r\n        if (state != State.DESCRIPTION)\r\n        {\r\n            throw new IOException(\"truncated sequence at line \" + lineNumber);\r\n        }\r\n        return result;\r\n    }\r\n}","originTest":"/*\r\n *                    BioJava development code\r\n *\r\n * This code may be freely distributed and modified under the\r\n * terms of the GNU Lesser General Public Licence.  This should\r\n * be distributed with the code.  If you do not have a copy,\r\n * see:\r\n *\r\n *      http://www.gnu.org/copyleft/lesser.html\r\n *\r\n * Copyright for this code is held jointly by the individual\r\n * authors.  These should be listed in @author doc comments.\r\n *\r\n * For more information on the BioJava project and its aims,\r\n * or to join the biojava-l mailing list, visit the home page\r\n * at:\r\n *\r\n *      http://www.biojava.org/\r\n *\r\n */\r\npackage org.biojava.bio.program.fastq;\r\n\r\nimport java.io.File;\r\nimport java.io.InputStream;\r\nimport java.io.IOException;\r\n\r\nimport java.net.URL;\r\n\r\nimport junit.framework.TestCase;\r\n\r\n/**\r\n * Abstract unit test for implementations of FastqReader.\r\n */\r\nabstract class AbstractFastqReaderTest\r\n    extends TestCase\r\n{\r\n    /** Array of example files that should throw IOExceptions. */\r\n    static final String[] ERROR_EXAMPLES = new String[]\r\n        {\r\n            \"error_diff_ids.fastq\",\r\n            \"error_double_qual.fastq\",\r\n            \"error_double_seq.fastq\",\r\n            \"error_long_qual.fastq\",\r\n            \"error_no_qual.fastq\",\r\n            \"error_qual_del.fastq\",\r\n            \"error_qual_escape.fastq\",\r\n            \"error_qual_null.fastq\",\r\n            \"error_qual_space.fastq\",\r\n            \"error_qual_tab.fastq\",\r\n            \"error_qual_unit_sep.fastq\",\r\n            \"error_qual_vtab.fastq\",\r\n            \"error_short_qual.fastq\",\r\n            \"error_spaces.fastq\",\r\n            \"error_tabs.fastq\",\r\n            \"error_trunc_at_plus.fastq\",\r\n            \"error_trunc_at_qual.fastq\",\r\n            \"error_trunc_at_seq.fastq\",\r\n            \"error_trunc_in_plus.fastq\",\r\n            \"error_trunc_in_qual.fastq\",\r\n            \"error_trunc_in_seq.fastq\",\r\n            \"error_trunc_in_title.fastq\"\r\n        };\r\n\r\n    /**\r\n     * Create and return a new FASTQ formatted sequence suitable for testing.\r\n     *\r\n     * @return a new FASTQ formatted sequence suitable for testing.\r\n     */\r\n    protected abstract Fastq createFastq();\r\n\r\n    /**\r\n     * Create and return a new instance of an implementation of FastqReader to test.\r\n     *\r\n     * @return a new instnace of an implementation of FastqReader to test\r\n     */\r\n    protected abstract FastqReader createFastqReader();\r\n\r\n    /**\r\n     * Create and return a new instance of an implementation of FastqWriter to test round-tripping.\r\n     *\r\n     * @return a new instance of an implementation of FastqWriter to test round-tripping.\r\n     */\r\n    protected abstract FastqWriter createFastqWriter();\r\n\r\n    public void testCreateFastq()\r\n    {\r\n        Fastq fastq = createFastq();\r\n        assertNotNull(fastq);\r\n    }\r\n\r\n    public void testCreateFastqReader()\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        assertNotNull(reader);\r\n    }\r\n\r\n    public void testCreateFastqWriter()\r\n    {\r\n        FastqWriter writer = createFastqWriter();\r\n        assertNotNull(writer);\r\n    }\r\n\r\n    public void testReadFile() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        try\r\n        {\r\n            reader.read((File) null);\r\n            fail(\"read((File) null) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n        try\r\n        {\r\n            File noSuchFile = new File(\"no such file\");\r\n            reader.read(noSuchFile);\r\n            fail(\"read(no such file) expected IOException\");\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testReadEmptyFile() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        File empty = File.createTempFile(\"abstractFastqReaderTest\", null);\r\n        Iterable<Fastq> iterable = reader.read(empty);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(0, count);\r\n    }\r\n\r\n    public void testReadRoundTripSingleFile() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        File single = File.createTempFile(\"abstractFastqReaderTest\", null);\r\n        Fastq fastq = createFastq();\r\n        FastqWriter writer = createFastqWriter();\r\n        writer.write(single, fastq);\r\n        Iterable<Fastq> iterable = reader.read(single);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(1, count);\r\n    }\r\n\r\n    public void testReadRoundTripMultipleFile() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        File multiple = File.createTempFile(\"abstractFastqReaderTest\", null);\r\n        Fastq fastq0 = createFastq();\r\n        Fastq fastq1 = createFastq();\r\n        Fastq fastq2 = createFastq();\r\n        FastqWriter writer = createFastqWriter();\r\n        writer.write(multiple, fastq0, fastq1, fastq2);\r\n        Iterable<Fastq> iterable = reader.read(multiple);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(3, count);\r\n    }\r\n\r\n    public void testReadURL() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        try\r\n        {\r\n            reader.read((URL) null);\r\n            fail(\"read((URL) null) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n        try\r\n        {\r\n            URL noSuchURL = new URL(\"file:///no such url\");\r\n            reader.read(noSuchURL);\r\n            fail(\"read(no such URL) expected IOException\");\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testReadEmptyURL() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        URL empty = getClass().getResource(\"empty.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(empty);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(0, count);\r\n    }\r\n\r\n    public void testReadInputStream() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        try\r\n        {\r\n            reader.read((InputStream) null);\r\n            fail(\"read((InputStream) null) expected IllegalArgumentException\");\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n            // expected\r\n        }\r\n    }\r\n\r\n    public void testReadEmptyInputStream() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream empty = getClass().getResourceAsStream(\"empty.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(empty);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            count++;\r\n        }\r\n        assertEquals(0, count);\r\n        empty.close();\r\n    }\r\n\r\n    public void testWrappedSequence() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream wrappedSequence = getClass().getResourceAsStream(\"wrapped-sequence.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(wrappedSequence);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            assertEquals(\"ACTG\", f.getSequence());\r\n            count++;\r\n        }\r\n        assertEquals(1, count);\r\n        wrappedSequence.close();\r\n    }\r\n\r\n    public void testWrappedQuality() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream wrappedQuality = getClass().getResourceAsStream(\"wrapped-quality.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(wrappedQuality);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            assertEquals(\"ZZZZ\", f.getQuality());\r\n            count++;\r\n        }\r\n        assertEquals(1, count);\r\n        wrappedQuality.close();\r\n    }\r\n\r\n    public void testMultipleWrappedQuality() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        InputStream wrappedQuality = getClass().getResourceAsStream(\"multiple-wrapped-quality.fastq\");\r\n        Iterable<Fastq> iterable = reader.read(wrappedQuality);\r\n        assertNotNull(iterable);\r\n        int count = 0;\r\n        for (Fastq f : iterable)\r\n        {\r\n            assertNotNull(f);\r\n            assertEquals(\"ZZZZ\", f.getQuality());\r\n            count++;\r\n        }\r\n        assertEquals(4, count);\r\n        wrappedQuality.close();\r\n    }\r\n\r\n    public void testErrorExamples() throws Exception\r\n    {\r\n        FastqReader reader = createFastqReader();\r\n        for (String errorExample : ERROR_EXAMPLES)\r\n        {\r\n            InputStream inputStream = getClass().getResourceAsStream(errorExample);\r\n            try\r\n            {\r\n                reader.read(inputStream);\r\n                fail(\"error example \" + errorExample + \" expected IOException\");\r\n            }\r\n            catch (IOException e)\r\n            {\r\n                // expected\r\n            }\r\n            finally\r\n            {\r\n                if (inputStream != null)\r\n                {\r\n                    try\r\n                    {\r\n                        inputStream.close();\r\n                    }\r\n                    catch (IOException e)\r\n                    {\r\n                        // ignore\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","changedTest":"","commitMessage":"adding @since 1.7.1 javadoc tags\n\ngit-svn-id: http://code.open-bio.org/repos/biojava/biojava-live/trunk@7297 7c6358e6-4a41-0410-a743-a5b2a554c398\n","test_commitMessage":"","allZero":true}